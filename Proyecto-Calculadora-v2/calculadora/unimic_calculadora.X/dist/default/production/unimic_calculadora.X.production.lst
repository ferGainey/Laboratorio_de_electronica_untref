

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Sep 18 23:42:38 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53  0000                     
    54                           ; Version 1.43
    55                           ; Generated 25/07/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F26J50 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataBANK0
    90  0029E0                     __pidataBANK0:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _operador
    94  0029E0  4C                 	db	low (STR_3+1)
    95  0029E1  0F                 	db	high (STR_3+1)
    96                           
    97                           ;initializer for _minuto
    98  0029E2  001E               	dw	30
    99                           
   100                           ;initializer for _hora
   101  0029E4  0012               	dw	18
   102                           
   103                           ;initializer for _dia
   104  0029E6  0008               	dw	8
   105                           
   106                           ;initializer for _diasem
   107  0029E8  0003               	dw	3
   108                           
   109                           ;initializer for _mes
   110  0029EA  0009               	dw	9
   111                           
   112                           ;initializer for _anio
   113  0029EC  000F               	dw	15
   114                           
   115                           	psect	smallconst
   116  000F00                     __psmallconst:
   117                           	opt stack 0
   118  000F00  00                 	db	0
   119  000F01                     _dpowers:
   120                           	opt stack 0
   121  000F01  0001               	dw	1
   122  000F03  000A               	dw	10
   123  000F05  0064               	dw	100
   124  000F07  03E8               	dw	1000
   125  000F09  2710               	dw	10000
   126  000F0B                     __end_of_dpowers:
   127                           	opt stack 0
   128  000F0B                     _LCD_INIT_STRING:
   129                           	opt stack 0
   130  000F0B  28                 	db	40
   131  000F0C  0C                 	db	12
   132  000F0D  01                 	db	1
   133  000F0E  06                 	db	6
   134  000F0F                     __end_of_LCD_INIT_STRING:
   135                           	opt stack 0
   136  000F0F                     exp@coeff:
   137                           	opt stack 0
   138  000F0F  00                 	db	0
   139  000F10  80                 	db	128
   140  000F11  3F                 	db	63
   141  000F12  72                 	db	114
   142  000F13  31                 	db	49
   143  000F14  3F                 	db	63
   144  000F15  FE                 	db	254
   145  000F16  75                 	db	117
   146  000F17  3E                 	db	62
   147  000F18  58                 	db	88
   148  000F19  63                 	db	99
   149  000F1A  3D                 	db	61
   150  000F1B  95                 	db	149
   151  000F1C  1D                 	db	29
   152  000F1D  3C                 	db	60
   153  000F1E  C5                 	db	197
   154  000F1F  AE                 	db	174
   155  000F20  3A                 	db	58
   156  000F21  79                 	db	121
   157  000F22  21                 	db	33
   158  000F23  39                 	db	57
   159  000F24  94                 	db	148
   160  000F25  80                 	db	128
   161  000F26  37                 	db	55
   162  000F27  93                 	db	147
   163  000F28  A7                 	db	167
   164  000F29  35                 	db	53
   165  000F2A  56                 	db	86
   166  000F2B  15                 	db	21
   167  000F2C  34                 	db	52
   168  000F2D                     __end_ofexp@coeff:
   169                           	opt stack 0
   170  000F2D                     log@coeff:
   171                           	opt stack 0
   172  000F2D  00                 	db	0
   173  000F2E  00                 	db	0
   174  000F2F  00                 	db	0
   175  000F30  00                 	db	0
   176  000F31  80                 	db	128
   177  000F32  3F                 	db	63
   178  000F33  F0                 	db	240
   179  000F34  FF                 	db	255
   180  000F35  BE                 	db	190
   181  000F36  E2                 	db	226
   182  000F37  A9                 	db	169
   183  000F38  3E                 	db	62
   184  000F39  83                 	db	131
   185  000F3A  76                 	db	118
   186  000F3B  BE                 	db	190
   187  000F3C  AE                 	db	174
   188  000F3D  2B                 	db	43
   189  000F3E  3E                 	db	62
   190  000F3F  3C                 	db	60
   191  000F40  C3                 	db	195
   192  000F41  BD                 	db	189
   193  000F42  D2                 	db	210
   194  000F43  13                 	db	19
   195  000F44  3D                 	db	61
   196  000F45  78                 	db	120
   197  000F46  D3                 	db	211
   198  000F47  BB                 	db	187
   199  000F48                     __end_oflog@coeff:
   200                           	opt stack 0
   201  0000                     _RTCCFG	set	3903
   202  0000                     _ANCON0	set	3912
   203  0000                     _RTCCFGbits	set	3903
   204  0000                     _ALRMCFGbits	set	3985
   205  0000                     _EECON2	set	4007
   206  0000                     _INTCONbits	set	4082
   207  0000                     _RTCVALH	set	3993
   208  0000                     _RTCVALL	set	3992
   209  0000                     _TRISBbits	set	3987
   210  0000                     _PORTCbits	set	3970
   211  0000                     _PORTAbits	set	3968
   212  0000                     _LATBbits	set	3978
   213  0000                     _T1CONbits	set	4045
   214  0000                     _ADCON1	set	4033
   215  0000                     _ADCON0	set	4034
   216  0000                     _INTCON2bits	set	4081
   217  0000                     _TRISC	set	3988
   218  0000                     _TRISB	set	3987
   219  0000                     _TRISA	set	3986
   220  0000                     _OSCCONbits	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIE3bits	set	4003
   223  000F48                     STR_2:
   224  000F48  25                 	db	37
   225  000F49  75                 	db	117	;'u'
   226  000F4A  00                 	db	0
   227  000F4B                     STR_3:
   228  000F4B  25                 	db	37
   229  000F4C  00                 	db	0
   230  000F4D                     STR_10:
   231  000F4D  2B                 	db	43
   232  000F4E  00                 	db	0
   233  000F4F                     STR_7:
   234  000F4F  2D                 	db	45
   235  000F50  00                 	db	0
   236  000F51                     STR_5:
   237  000F51  78                 	db	120	;'x'
   238  000F52  00                 	db	0
   239  0000                     
   240                           ; #config settings
   241  000F53  00                 	db	0	; dummy byte at the end
   242  0000                     
   243                           	psect	cinit
   244  00285A                     __pcinit:
   245                           	opt stack 0
   246  00285A                     start_initialization:
   247                           	opt stack 0
   248  00285A                     __initialization:
   249                           	opt stack 0
   250                           
   251                           ; Initialize objects allocated to BANK0 (14 bytes)
   252                           ; load TBLPTR registers with __pidataBANK0
   253  00285A  0EE0               	movlw	low __pidataBANK0
   254  00285C  6EF6               	movwf	tblptrl,c
   255  00285E  0E29               	movlw	high __pidataBANK0
   256  002860  6EF7               	movwf	tblptrh,c
   257  002862  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   258  002864  6EF8               	movwf	tblptru,c
   259  002866  EE00  F0E7         	lfsr	0,__pdataBANK0
   260  00286A  EE10 F00E          	lfsr	1,14
   261  00286E                     copy_data0:
   262  00286E  0009               	tblrd		*+
   263  002870  CFF5 FFEE          	movff	tablat,postinc0
   264  002874  50E5               	movf	postdec1,w,c
   265  002876  50E1               	movf	fsr1l,w,c
   266  002878  E1FA               	bnz	copy_data0
   267                           
   268                           ; Clear objects allocated to BANK0 (113 bytes)
   269  00287A  EE00  F060         	lfsr	0,__pbssBANK0
   270  00287E  0E71               	movlw	113
   271  002880                     clear_0:
   272  002880  6AEE               	clrf	postinc0,c
   273  002882  06E8               	decf	wreg,f,c
   274  002884  E1FD               	bnz	clear_0
   275                           
   276                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   277  002886  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   278                           
   279                           ; Clear objects allocated to COMRAM (2 bytes)
   280  002888  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   281  00288A  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   282  00288C                     end_of_initialization:
   283                           	opt stack 0
   284  00288C                     __end_of__initialization:
   285                           	opt stack 0
   286  00288C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   287  00288E  6EF8               	movwf	tblptru,c
   288  002890  0100               	movlb	0
   289  002892  EFAA  F007         	goto	_main	;jump to C main() function
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bitbssCOMRAM
   300  0002F8                     __pbitbssCOMRAM:
   301                           	opt stack 0
   302  0002F8                     _flag:
   303                           	opt stack 0
   304  0002F8                     	ds	1
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	bssCOMRAM
   315  00005D                     __pbssCOMRAM:
   316                           	opt stack 0
   317  00005D                     _contador_numeros_ingresados_izq:
   318                           	opt stack 0
   319  00005D                     	ds	2
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	bssBANK0
   330  000060                     __pbssBANK0:
   331                           	opt stack 0
   332  000060                     _array_lcd_der:
   333                           	opt stack 0
   334  000060                     	ds	12
   335  00006C                     _array_lcd_izq:
   336                           	opt stack 0
   337  00006C                     	ds	12
   338  000078                     _Rtcc_read_TimeDate:
   339                           	opt stack 0
   340  000078                     	ds	8
   341  000080                     _RtccAlrmTimeDate:
   342                           	opt stack 0
   343  000080                     	ds	8
   344  000088                     _RtccTimeDate:
   345                           	opt stack 0
   346  000088                     	ds	8
   347  000090                     _RtccTimeVal:
   348                           	opt stack 0
   349  000090                     	ds	4
   350  000094                     _errno:
   351                           	opt stack 0
   352  000094                     	ds	2
   353  000096                     _contador_numeros_ingresados_der:
   354                           	opt stack 0
   355  000096                     	ds	2
   356  000098                     _flag_sentido_escritura:
   357                           	opt stack 0
   358  000098                     	ds	2
   359  00009A                     _segundo:
   360                           	opt stack 0
   361  00009A                     	ds	2
   362  00009C                     _k:
   363                           	opt stack 0
   364  00009C                     	ds	2
   365  00009E                     _c:
   366                           	opt stack 0
   367  00009E                     	ds	2
   368  0000A0                     _b:
   369                           	opt stack 0
   370  0000A0                     	ds	2
   371  0000A2                     _a:
   372                           	opt stack 0
   373  0000A2                     	ds	2
   374  0000A4                     _j:
   375                           	opt stack 0
   376  0000A4                     	ds	2
   377  0000A6                     _i:
   378                           	opt stack 0
   379  0000A6                     	ds	2
   380  0000A8                     _anio_d:
   381                           	opt stack 0
   382  0000A8                     	ds	1
   383  0000A9                     _anio_u:
   384                           	opt stack 0
   385  0000A9                     	ds	1
   386  0000AA                     _dia_semana:
   387                           	opt stack 0
   388  0000AA                     	ds	1
   389  0000AB                     _mes_d:
   390                           	opt stack 0
   391  0000AB                     	ds	1
   392  0000AC                     _mes_u:
   393                           	opt stack 0
   394  0000AC                     	ds	1
   395  0000AD                     _fecha_d:
   396                           	opt stack 0
   397  0000AD                     	ds	1
   398  0000AE                     _fecha_u:
   399                           	opt stack 0
   400  0000AE                     	ds	1
   401  0000AF                     _hora_d:
   402                           	opt stack 0
   403  0000AF                     	ds	1
   404  0000B0                     _hora_u:
   405                           	opt stack 0
   406  0000B0                     	ds	1
   407  0000B1                     _minuto_d:
   408                           	opt stack 0
   409  0000B1                     	ds	1
   410  0000B2                     _minuto_u:
   411                           	opt stack 0
   412  0000B2                     	ds	1
   413  0000B3                     _segundo_d:
   414                           	opt stack 0
   415  0000B3                     	ds	1
   416  0000B4                     _segundo_u:
   417                           	opt stack 0
   418  0000B4                     	ds	1
   419  0000B5                     _buffer2:
   420                           	opt stack 0
   421  0000B5                     	ds	20
   422  0000C9                     _RtccDate:
   423                           	opt stack 0
   424  0000C9                     	ds	4
   425  0000CD                     _RtccTime:
   426                           	opt stack 0
   427  0000CD                     	ds	4
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           postdec1	equ	0xFE5
   435                           fsr1l	equ	0xFE1
   436                           
   437                           	psect	dataBANK0
   438  0000E7                     __pdataBANK0:
   439                           	opt stack 0
   440  0000E7                     _operador:
   441                           	opt stack 0
   442  0000E7                     	ds	2
   443  0000E9                     _minuto:
   444                           	opt stack 0
   445  0000E9                     	ds	2
   446  0000EB                     _hora:
   447                           	opt stack 0
   448  0000EB                     	ds	2
   449  0000ED                     _dia:
   450                           	opt stack 0
   451  0000ED                     	ds	2
   452  0000EF                     _diasem:
   453                           	opt stack 0
   454  0000EF                     	ds	2
   455  0000F1                     _mes:
   456                           	opt stack 0
   457  0000F1                     	ds	2
   458  0000F3                     _anio:
   459                           	opt stack 0
   460  0000F3                     	ds	2
   461                           tblptru	equ	0xFF8
   462                           tblptrh	equ	0xFF7
   463                           tblptrl	equ	0xFF6
   464                           tablat	equ	0xFF5
   465                           postinc0	equ	0xFEE
   466                           wreg	equ	0xFE8
   467                           postdec1	equ	0xFE5
   468                           fsr1l	equ	0xFE1
   469                           
   470                           	psect	cstackBANK0
   471  0000D1                     __pcstackBANK0:
   472                           	opt stack 0
   473  0000D1                     _main$2342:
   474                           	opt stack 0
   475                           
   476                           ; 3 bytes @ 0x0
   477  0000D1                     	ds	3
   478  0000D4                     _main$2343:
   479                           	opt stack 0
   480                           
   481                           ; 3 bytes @ 0x3
   482  0000D4                     	ds	3
   483  0000D7                     main@resultado_suma:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x6
   487  0000D7                     	ds	2
   488  0000D9                     main@resultado_multiplicacion:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x8
   492  0000D9                     	ds	2
   493  0000DB                     main@resultado_division:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0xA
   497  0000DB                     	ds	2
   498  0000DD                     main@resultado_resta:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0xC
   502  0000DD                     	ds	2
   503  0000DF                     main@i:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0xE
   507  0000DF                     	ds	2
   508  0000E1                     main@i_830:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x10
   512  0000E1                     	ds	2
   513  0000E3                     main@num_izq:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x12
   517  0000E3                     	ds	2
   518  0000E5                     main@num_der:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x14
   522  0000E5                     	ds	2
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	cstackCOMRAM
   533  000001                     __pcstackCOMRAM:
   534                           	opt stack 0
   535  000001                     ??_lcd_send_nibble:
   536  000001                     ?___awdiv:
   537                           	opt stack 0
   538  000001                     ?___lwdiv:
   539                           	opt stack 0
   540  000001                     ?___ftpack:
   541                           	opt stack 0
   542  000001                     ?_frexp:
   543                           	opt stack 0
   544  000001                     ?___ftneg:
   545                           	opt stack 0
   546  000001                     Delay100TCYx@unit:
   547                           	opt stack 0
   548  000001                     Delay1KTCYx@unit:
   549                           	opt stack 0
   550  000001                     ___awdiv@dividend:
   551                           	opt stack 0
   552  000001                     ___lwdiv@dividend:
   553                           	opt stack 0
   554  000001                     ___ftpack@arg:
   555                           	opt stack 0
   556  000001                     ___ftge@ff1:
   557                           	opt stack 0
   558  000001                     ___ftneg@f1:
   559                           	opt stack 0
   560  000001                     frexp@value:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x0
   564  000001                     	ds	1
   565  000002                     lcd_send_nibble@nibble:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x1
   569  000002                     	ds	1
   570  000003                     lcd_send_byte@n:
   571                           	opt stack 0
   572  000003                     ___awdiv@divisor:
   573                           	opt stack 0
   574  000003                     ___lwdiv@divisor:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x2
   578  000003                     	ds	1
   579  000004                     lcd_send_byte@address:
   580                           	opt stack 0
   581  000004                     ___ftpack@exp:
   582                           	opt stack 0
   583  000004                     frexp@eptr:
   584                           	opt stack 0
   585  000004                     ___ftge@ff2:
   586                           	opt stack 0
   587                           
   588                           ; 3 bytes @ 0x3
   589  000004                     	ds	1
   590  000005                     lcd_init@i:
   591                           	opt stack 0
   592  000005                     lcd_gotoxy@y:
   593                           	opt stack 0
   594  000005                     lcd_comand@d:
   595                           	opt stack 0
   596  000005                     ___awdiv@counter:
   597                           	opt stack 0
   598  000005                     ___ftpack@sign:
   599                           	opt stack 0
   600  000005                     ___lwdiv@quotient:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x4
   604  000005                     	ds	1
   605  000006                     ??___ftpack:
   606  000006                     ??_frexp:
   607  000006                     lcd_gotoxy@x:
   608                           	opt stack 0
   609  000006                     ___awdiv@sign:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x5
   613  000006                     	ds	1
   614  000007                     ??___ftge:
   615  000007                     lcd_gotoxy@address:
   616                           	opt stack 0
   617  000007                     ___lwdiv@counter:
   618                           	opt stack 0
   619  000007                     ___awdiv@quotient:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x6
   623  000007                     	ds	1
   624  000008                     ?___lwmod:
   625                           	opt stack 0
   626  000008                     lcd_putc@c:
   627                           	opt stack 0
   628  000008                     ___lwmod@dividend:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x7
   632  000008                     	ds	1
   633  000009                     ?___ftdiv:
   634                           	opt stack 0
   635  000009                     ?___awtoft:
   636                           	opt stack 0
   637  000009                     ?___lltoft:
   638                           	opt stack 0
   639  000009                     lcd_puts@ptr:
   640                           	opt stack 0
   641  000009                     lcd_putrs@ptr:
   642                           	opt stack 0
   643  000009                     ___awtoft@c:
   644                           	opt stack 0
   645  000009                     ___ftdiv@f1:
   646                           	opt stack 0
   647  000009                     ___lltoft@c:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x8
   651  000009                     	ds	1
   652  00000A                     ___lwmod@divisor:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x9
   656  00000A                     	ds	1
   657  00000B                     
   658                           ; 1 bytes @ 0xA
   659  00000B                     	ds	1
   660  00000C                     ___awtoft@sign:
   661                           	opt stack 0
   662  00000C                     ___lwmod@counter:
   663                           	opt stack 0
   664  00000C                     ___ftdiv@f2:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0xB
   668  00000C                     	ds	1
   669  00000D                     ??___lltoft:
   670  00000D                     ?_sprintf:
   671                           	opt stack 0
   672  00000D                     ?___ftmul:
   673                           	opt stack 0
   674  00000D                     ?___fttol:
   675                           	opt stack 0
   676  00000D                     sprintf@sp:
   677                           	opt stack 0
   678  00000D                     ___ftmul@f1:
   679                           	opt stack 0
   680  00000D                     ___fttol@f1:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0xC
   684  00000D                     	ds	2
   685  00000F                     ??___ftdiv:
   686  00000F                     sprintf@f:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0xE
   690  00000F                     	ds	1
   691  000010                     ___ftmul@f2:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0xF
   695  000010                     	ds	1
   696  000011                     ??___fttol:
   697  000011                     ___lltoft@exp:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x10
   701  000011                     	ds	1
   702  000012                     ___ftdiv@cntr:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x11
   706  000012                     	ds	1
   707  000013                     ??___ftmul:
   708  000013                     sprintf@flag:
   709                           	opt stack 0
   710  000013                     ___ftdiv@f3:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x12
   714  000013                     	ds	1
   715  000014                     sprintf@ap:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x13
   719  000014                     	ds	2
   720  000016                     ___ftdiv@exp:
   721                           	opt stack 0
   722  000016                     ___ftmul@exp:
   723                           	opt stack 0
   724  000016                     ___fttol@sign1:
   725                           	opt stack 0
   726  000016                     sprintf@val:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x15
   730  000016                     	ds	1
   731  000017                     ___ftdiv@sign:
   732                           	opt stack 0
   733  000017                     ___ftmul@f3_as_product:
   734                           	opt stack 0
   735  000017                     ___fttol@lval:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x16
   739  000017                     	ds	1
   740  000018                     sprintf@prec:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x17
   744  000018                     	ds	1
   745  000019                     sprintf@c:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x18
   749  000019                     	ds	1
   750  00001A                     ___ftmul@cntr:
   751                           	opt stack 0
   752  00001A                     write_in_lcd@key:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x19
   756  00001A                     	ds	1
   757  00001B                     ___ftmul@sign:
   758                           	opt stack 0
   759  00001B                     ___fttol@exp1:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x1A
   763  00001B                     	ds	1
   764  00001C                     ?___wmul:
   765                           	opt stack 0
   766  00001C                     ?___altoft:
   767                           	opt stack 0
   768  00001C                     escribir_numero@num:
   769                           	opt stack 0
   770  00001C                     ___wmul@multiplier:
   771                           	opt stack 0
   772  00001C                     ___altoft@c:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x1B
   776  00001C                     	ds	2
   777  00001E                     ??_escribir_numero:
   778  00001E                     ___wmul@multiplicand:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x1D
   782  00001E                     	ds	1
   783  00001F                     escribir_numero@i:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x1E
   787  00001F                     	ds	1
   788  000020                     ??___altoft:
   789  000020                     ___wmul@product:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x1F
   793  000020                     	ds	1
   794  000021                     escribir_numero@i_795:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x20
   798  000021                     	ds	1
   799  000022                     ?___ftadd:
   800                           	opt stack 0
   801  000022                     ___ftadd@f1:
   802                           	opt stack 0
   803                           
   804                           ; 3 bytes @ 0x21
   805  000022                     	ds	2
   806  000024                     ___altoft@exp:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x23
   810  000024                     	ds	1
   811  000025                     ___altoft@sign:
   812                           	opt stack 0
   813  000025                     ___ftadd@f2:
   814                           	opt stack 0
   815                           
   816                           ; 3 bytes @ 0x24
   817  000025                     	ds	3
   818  000028                     ??___ftadd:
   819                           
   820                           ; 1 bytes @ 0x27
   821  000028                     	ds	3
   822  00002B                     ___ftadd@sign:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x2A
   826  00002B                     	ds	1
   827  00002C                     ___ftadd@exp2:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x2B
   831  00002C                     	ds	1
   832  00002D                     ___ftadd@exp1:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x2C
   836  00002D                     	ds	1
   837  00002E                     ?___ftsub:
   838                           	opt stack 0
   839  00002E                     ?_floor:
   840                           	opt stack 0
   841  00002E                     ?_eval_poly:
   842                           	opt stack 0
   843  00002E                     ___ftsub@f1:
   844                           	opt stack 0
   845  00002E                     floor@x:
   846                           	opt stack 0
   847  00002E                     eval_poly@x:
   848                           	opt stack 0
   849                           
   850                           ; 3 bytes @ 0x2D
   851  00002E                     	ds	3
   852  000031                     eval_poly@d:
   853                           	opt stack 0
   854  000031                     ___ftsub@f2:
   855                           	opt stack 0
   856  000031                     floor@i:
   857                           	opt stack 0
   858                           
   859                           ; 3 bytes @ 0x30
   860  000031                     	ds	2
   861  000033                     eval_poly@n:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x32
   865  000033                     	ds	1
   866  000034                     floor@expon:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x33
   870  000034                     	ds	1
   871  000035                     ??_eval_poly:
   872                           
   873                           ; 1 bytes @ 0x34
   874  000035                     	ds	2
   875  000037                     eval_poly@res:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x36
   879  000037                     	ds	3
   880  00003A                     ?_log:
   881                           	opt stack 0
   882  00003A                     ?_ldexp:
   883                           	opt stack 0
   884  00003A                     ldexp@value:
   885                           	opt stack 0
   886  00003A                     log@x:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0x39
   890  00003A                     	ds	3
   891  00003D                     ldexp@newexp:
   892                           	opt stack 0
   893  00003D                     log@exponent:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x3C
   897  00003D                     	ds	2
   898  00003F                     ??_ldexp:
   899                           
   900                           ; 1 bytes @ 0x3E
   901  00003F                     	ds	2
   902  000041                     ?_exp:
   903                           	opt stack 0
   904  000041                     exp@x:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x40
   908  000041                     	ds	3
   909  000044                     _exp$2346:
   910                           	opt stack 0
   911                           
   912                           ; 3 bytes @ 0x43
   913  000044                     	ds	3
   914  000047                     exp@exponent:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x46
   918  000047                     	ds	2
   919  000049                     exp@sign:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x48
   923  000049                     	ds	1
   924  00004A                     ?_pow:
   925                           	opt stack 0
   926  00004A                     pow@x:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x49
   930  00004A                     	ds	3
   931  00004D                     pow@y:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x4C
   935  00004D                     	ds	3
   936  000050                     _pow$2344:
   937                           	opt stack 0
   938                           
   939                           ; 3 bytes @ 0x4F
   940  000050                     	ds	3
   941  000053                     _pow$2345:
   942                           	opt stack 0
   943                           
   944                           ; 3 bytes @ 0x52
   945  000053                     	ds	3
   946  000056                     pow@sign:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x55
   950  000056                     	ds	1
   951  000057                     pow@yi:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x56
   955  000057                     	ds	4
   956  00005B                     ??_main:
   957                           
   958                           ; 1 bytes @ 0x5A
   959  00005B                     	ds	2
   960                           tblptru	equ	0xFF8
   961                           tblptrh	equ	0xFF7
   962                           tblptrl	equ	0xFF6
   963                           tablat	equ	0xFF5
   964                           postinc0	equ	0xFEE
   965                           wreg	equ	0xFE8
   966                           postdec1	equ	0xFE5
   967                           fsr1l	equ	0xFE1
   968                           
   969 ;;
   970 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   971 ;;
   972 ;; *************** function _main *****************
   973 ;; Defined at:
   974 ;;		line 78 in file "main.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  resultado_re    2   12[BANK0 ] int 
   979 ;;  resultado_di    2   10[BANK0 ] int 
   980 ;;  resultado_mu    2    8[BANK0 ] int 
   981 ;;  resultado_su    2    6[BANK0 ] int 
   982 ;;  i               2   16[BANK0 ] int 
   983 ;;  i               2   14[BANK0 ] int 
   984 ;;  num_der         2   20[BANK0 ] int 
   985 ;;  num_izq         2   18[BANK0 ] int 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  2  175[None  ] int 
   988 ;; Registers used:
   989 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   996 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   998 ;;      Totals:         2      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   999 ;;Total ram usage:       24 bytes
  1000 ;; Hardware stack levels required when called:    7
  1001 ;; This function calls:
  1002 ;;		_Setup
  1003 ;;		___awdiv
  1004 ;;		___awtoft
  1005 ;;		___fttol
  1006 ;;		___wmul
  1007 ;;		_escribir_numero
  1008 ;;		_lcd_gotoxy
  1009 ;;		_lcd_init
  1010 ;;		_lcd_putrs
  1011 ;;		_lcd_puts
  1012 ;;		_pow
  1013 ;;		_write_in_lcd
  1014 ;; This function is called by:
  1015 ;;		Startup code after reset
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           	psect	text0
  1020  000F54                     __ptext0:
  1021                           	opt stack 0
  1022  000F54                     _main:
  1023                           	opt stack 24
  1024                           
  1025                           ;main.c: 79: Setup();
  1026                           
  1027                           ;incstack = 0
  1028  000F54  EC0D  F014         	call	_Setup	;wreg free
  1029  000F58                     
  1030                           ;main.c: 84: PORTAbits.RA7 = 1;
  1031  000F58  8E80               	bsf	3968,7,c	;volatile
  1032                           
  1033                           ;main.c: 85: PORTAbits.RA6 = 0;
  1034  000F5A  9C80               	bcf	3968,6,c	;volatile
  1035                           
  1036                           ;main.c: 86: PORTAbits.RA5 = 0;
  1037  000F5C  9A80               	bcf	3968,5,c	;volatile
  1038                           
  1039                           ;main.c: 87: PORTAbits.RA3 = 0;
  1040  000F5E  9680               	bcf	3968,3,c	;volatile
  1041                           
  1042                           ;main.c: 89: if (PORTAbits.RA2 == 1) {
  1043  000F60  A480               	btfss	3968,2,c	;volatile
  1044  000F62  D008               	goto	u3250
  1045                           
  1046                           ;main.c: 90: escribir_numero(7);
  1047  000F64  0E07               	movlw	7
  1048  000F66  6E1C               	movwf	escribir_numero@num,c
  1049  000F68  0E00               	movlw	0
  1050  000F6A  6E1D               	movwf	escribir_numero@num+1,c
  1051  000F6C  EC1F  F00E         	call	_escribir_numero	;wreg free
  1052  000F70  B480               	btfsc	3968,2,c	;volatile
  1053  000F72  D7FE               	goto	l179
  1054  000F74                     u3250:
  1055                           
  1056                           ;main.c: 93: };
  1057                           ;main.c: 95: if (PORTAbits.RA1 == 1) {
  1058                           
  1059                           ;main.c: 92: };
  1060  000F74  A280               	btfss	3968,1,c	;volatile
  1061  000F76  D008               	goto	u3270
  1062                           
  1063                           ;main.c: 96: escribir_numero(8);
  1064  000F78  0E08               	movlw	8
  1065  000F7A  6E1C               	movwf	escribir_numero@num,c
  1066  000F7C  0E00               	movlw	0
  1067  000F7E  6E1D               	movwf	escribir_numero@num+1,c
  1068  000F80  EC1F  F00E         	call	_escribir_numero	;wreg free
  1069  000F84  B280               	btfsc	3968,1,c	;volatile
  1070  000F86  D7FE               	goto	l183
  1071  000F88                     u3270:
  1072                           
  1073                           ;main.c: 99: };
  1074                           ;main.c: 101: if (PORTAbits.RA0 == 1) {
  1075                           
  1076                           ;main.c: 98: };
  1077  000F88  A080               	btfss	3968,0,c	;volatile
  1078  000F8A  D008               	goto	u3290
  1079                           
  1080                           ;main.c: 102: escribir_numero(9);
  1081  000F8C  0E09               	movlw	9
  1082  000F8E  6E1C               	movwf	escribir_numero@num,c
  1083  000F90  0E00               	movlw	0
  1084  000F92  6E1D               	movwf	escribir_numero@num+1,c
  1085  000F94  EC1F  F00E         	call	_escribir_numero	;wreg free
  1086  000F98  B080               	btfsc	3968,0,c	;volatile
  1087  000F9A  D7FE               	goto	l187
  1088  000F9C                     u3290:
  1089                           
  1090                           ;main.c: 105: };
  1091                           ;main.c: 107: if (PORTCbits.RC0 == 1) {
  1092                           
  1093                           ;main.c: 104: };
  1094  000F9C  A082               	btfss	3970,0,c	;volatile
  1095  000F9E  D018               	goto	u3310
  1096                           
  1097                           ;main.c: 108: lcd_gotoxy(8, 1);
  1098  000FA0  0E01               	movlw	1
  1099  000FA2  6E05               	movwf	lcd_gotoxy@y,c
  1100  000FA4  0E08               	movlw	8
  1101  000FA6  ECCF  F014         	call	_lcd_gotoxy
  1102                           
  1103                           ;main.c: 109: lcd_putrs("%");
  1104  000FAA  0E4B               	movlw	low STR_3
  1105  000FAC  6E09               	movwf	lcd_putrs@ptr,c
  1106  000FAE  0E0F               	movlw	high STR_3
  1107  000FB0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1108  000FB2  EC7E  F013         	call	_lcd_putrs	;wreg free
  1109                           
  1110                           ;main.c: 110: flag_sentido_escritura = 1;
  1111  000FB6  0E00               	movlw	0
  1112  000FB8  0100               	movlb	0	; () banked
  1113  000FBA  6F99               	movwf	(_flag_sentido_escritura+1)& (0+255),b
  1114  000FBC  0E01               	movlw	1
  1115  000FBE  6F98               	movwf	_flag_sentido_escritura& (0+255),b
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 111: operador = "%";
  1119  000FC0  0E4B               	movlw	low STR_3
  1120  000FC2  0100               	movlb	0	; () banked
  1121  000FC4  6FE7               	movwf	_operador& (0+255),b
  1122  000FC6  0E0F               	movlw	high STR_3
  1123  000FC8  0100               	movlb	0	; () banked
  1124  000FCA  6FE8               	movwf	(_operador+1)& (0+255),b
  1125  000FCC                     
  1126                           ; BSR set to: 0
  1127  000FCC  B082               	btfsc	3970,0,c	;volatile
  1128  000FCE  D7FE               	goto	l191
  1129  000FD0                     u3310:
  1130                           
  1131                           ;main.c: 114: };
  1132                           ;main.c: 118: PORTAbits.RA7 = 0;
  1133                           
  1134                           ;main.c: 113: };
  1135  000FD0  9E80               	bcf	3968,7,c	;volatile
  1136                           
  1137                           ;main.c: 119: PORTAbits.RA6 = 1;
  1138  000FD2  8C80               	bsf	3968,6,c	;volatile
  1139                           
  1140                           ;main.c: 120: PORTAbits.RA5 = 0;
  1141  000FD4  9A80               	bcf	3968,5,c	;volatile
  1142                           
  1143                           ;main.c: 121: PORTAbits.RA3 = 0;
  1144  000FD6  9680               	bcf	3968,3,c	;volatile
  1145                           
  1146                           ;main.c: 123: if (PORTAbits.RA2 == 1) {
  1147  000FD8  A480               	btfss	3968,2,c	;volatile
  1148  000FDA  D008               	goto	u3330
  1149                           
  1150                           ;main.c: 124: escribir_numero(4);
  1151  000FDC  0E04               	movlw	4
  1152  000FDE  6E1C               	movwf	escribir_numero@num,c
  1153  000FE0  0E00               	movlw	0
  1154  000FE2  6E1D               	movwf	escribir_numero@num+1,c
  1155  000FE4  EC1F  F00E         	call	_escribir_numero	;wreg free
  1156  000FE8  B480               	btfsc	3968,2,c	;volatile
  1157  000FEA  D7FE               	goto	l195
  1158  000FEC                     u3330:
  1159                           
  1160                           ;main.c: 127: };
  1161                           ;main.c: 129: if (PORTAbits.RA1 == 1) {
  1162                           
  1163                           ;main.c: 126: };
  1164  000FEC  A280               	btfss	3968,1,c	;volatile
  1165  000FEE  D008               	goto	u3350
  1166                           
  1167                           ;main.c: 130: escribir_numero(5);
  1168  000FF0  0E05               	movlw	5
  1169  000FF2  6E1C               	movwf	escribir_numero@num,c
  1170  000FF4  0E00               	movlw	0
  1171  000FF6  6E1D               	movwf	escribir_numero@num+1,c
  1172  000FF8  EC1F  F00E         	call	_escribir_numero	;wreg free
  1173  000FFC  B280               	btfsc	3968,1,c	;volatile
  1174  000FFE  D7FE               	goto	l199
  1175  001000                     u3350:
  1176                           
  1177                           ;main.c: 133: };
  1178                           ;main.c: 135: if (PORTAbits.RA0 == 1) {
  1179                           
  1180                           ;main.c: 132: };
  1181  001000  A080               	btfss	3968,0,c	;volatile
  1182  001002  D008               	goto	u3370
  1183                           
  1184                           ;main.c: 136: escribir_numero(6);
  1185  001004  0E06               	movlw	6
  1186  001006  6E1C               	movwf	escribir_numero@num,c
  1187  001008  0E00               	movlw	0
  1188  00100A  6E1D               	movwf	escribir_numero@num+1,c
  1189  00100C  EC1F  F00E         	call	_escribir_numero	;wreg free
  1190  001010  B080               	btfsc	3968,0,c	;volatile
  1191  001012  D7FE               	goto	l203
  1192  001014                     u3370:
  1193                           
  1194                           ;main.c: 139: };
  1195                           ;main.c: 141: if (PORTCbits.RC0 == 1) {
  1196                           
  1197                           ;main.c: 138: };
  1198  001014  A082               	btfss	3970,0,c	;volatile
  1199  001016  D018               	goto	u3390
  1200                           
  1201                           ;main.c: 142: lcd_gotoxy(8, 1);
  1202  001018  0E01               	movlw	1
  1203  00101A  6E05               	movwf	lcd_gotoxy@y,c
  1204  00101C  0E08               	movlw	8
  1205  00101E  ECCF  F014         	call	_lcd_gotoxy
  1206                           
  1207                           ;main.c: 143: lcd_putrs("x");
  1208  001022  0E51               	movlw	low STR_5
  1209  001024  6E09               	movwf	lcd_putrs@ptr,c
  1210  001026  0E0F               	movlw	high STR_5
  1211  001028  6E0A               	movwf	lcd_putrs@ptr+1,c
  1212  00102A  EC7E  F013         	call	_lcd_putrs	;wreg free
  1213                           
  1214                           ;main.c: 144: flag_sentido_escritura = 1;
  1215  00102E  0E00               	movlw	0
  1216  001030  0100               	movlb	0	; () banked
  1217  001032  6F99               	movwf	(_flag_sentido_escritura+1)& (0+255),b
  1218  001034  0E01               	movlw	1
  1219  001036  6F98               	movwf	_flag_sentido_escritura& (0+255),b
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 145: operador = "x";
  1223  001038  0E51               	movlw	low STR_5
  1224  00103A  0100               	movlb	0	; () banked
  1225  00103C  6FE7               	movwf	_operador& (0+255),b
  1226  00103E  0E0F               	movlw	high STR_5
  1227  001040  0100               	movlb	0	; () banked
  1228  001042  6FE8               	movwf	(_operador+1)& (0+255),b
  1229  001044                     
  1230                           ; BSR set to: 0
  1231  001044  B082               	btfsc	3970,0,c	;volatile
  1232  001046  D7FE               	goto	l207
  1233  001048                     u3390:
  1234                           
  1235                           ;main.c: 148: };
  1236                           ;main.c: 152: PORTAbits.RA7 = 0;
  1237                           
  1238                           ;main.c: 147: };
  1239  001048  9E80               	bcf	3968,7,c	;volatile
  1240                           
  1241                           ;main.c: 153: PORTAbits.RA6 = 0;
  1242  00104A  9C80               	bcf	3968,6,c	;volatile
  1243                           
  1244                           ;main.c: 154: PORTAbits.RA5 = 1;
  1245  00104C  8A80               	bsf	3968,5,c	;volatile
  1246                           
  1247                           ;main.c: 155: PORTAbits.RA3 = 0;
  1248  00104E  9680               	bcf	3968,3,c	;volatile
  1249                           
  1250                           ;main.c: 157: if (PORTAbits.RA2 == 1) {
  1251  001050  A480               	btfss	3968,2,c	;volatile
  1252  001052  D008               	goto	u3410
  1253                           
  1254                           ;main.c: 158: escribir_numero(1);
  1255  001054  0E01               	movlw	1
  1256  001056  6E1C               	movwf	escribir_numero@num,c
  1257  001058  0E00               	movlw	0
  1258  00105A  6E1D               	movwf	escribir_numero@num+1,c
  1259  00105C  EC1F  F00E         	call	_escribir_numero	;wreg free
  1260  001060  B480               	btfsc	3968,2,c	;volatile
  1261  001062  D7FE               	goto	l211
  1262  001064                     u3410:
  1263                           
  1264                           ;main.c: 161: };
  1265                           ;main.c: 163: if (PORTAbits.RA1 == 1) {
  1266                           
  1267                           ;main.c: 160: };
  1268  001064  A280               	btfss	3968,1,c	;volatile
  1269  001066  D008               	goto	u3430
  1270                           
  1271                           ;main.c: 164: escribir_numero(2);
  1272  001068  0E02               	movlw	2
  1273  00106A  6E1C               	movwf	escribir_numero@num,c
  1274  00106C  0E00               	movlw	0
  1275  00106E  6E1D               	movwf	escribir_numero@num+1,c
  1276  001070  EC1F  F00E         	call	_escribir_numero	;wreg free
  1277  001074  B280               	btfsc	3968,1,c	;volatile
  1278  001076  D7FE               	goto	l215
  1279  001078                     u3430:
  1280                           
  1281                           ;main.c: 167: };
  1282                           ;main.c: 169: if (PORTAbits.RA0 == 1) {
  1283                           
  1284                           ;main.c: 166: };
  1285  001078  A080               	btfss	3968,0,c	;volatile
  1286  00107A  D008               	goto	u3450
  1287                           
  1288                           ;main.c: 170: escribir_numero(3);
  1289  00107C  0E03               	movlw	3
  1290  00107E  6E1C               	movwf	escribir_numero@num,c
  1291  001080  0E00               	movlw	0
  1292  001082  6E1D               	movwf	escribir_numero@num+1,c
  1293  001084  EC1F  F00E         	call	_escribir_numero	;wreg free
  1294  001088  B080               	btfsc	3968,0,c	;volatile
  1295  00108A  D7FE               	goto	l219
  1296  00108C                     u3450:
  1297                           
  1298                           ;main.c: 173: };
  1299                           ;main.c: 175: if (PORTCbits.RC0 == 1) {
  1300                           
  1301                           ;main.c: 172: };
  1302  00108C  A082               	btfss	3970,0,c	;volatile
  1303  00108E  D018               	goto	u3470
  1304                           
  1305                           ;main.c: 176: lcd_gotoxy(8, 1);
  1306  001090  0E01               	movlw	1
  1307  001092  6E05               	movwf	lcd_gotoxy@y,c
  1308  001094  0E08               	movlw	8
  1309  001096  ECCF  F014         	call	_lcd_gotoxy
  1310                           
  1311                           ;main.c: 177: lcd_putrs("-");
  1312  00109A  0E4F               	movlw	low STR_7
  1313  00109C  6E09               	movwf	lcd_putrs@ptr,c
  1314  00109E  0E0F               	movlw	high STR_7
  1315  0010A0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1316  0010A2  EC7E  F013         	call	_lcd_putrs	;wreg free
  1317                           
  1318                           ;main.c: 178: flag_sentido_escritura = 1;
  1319  0010A6  0E00               	movlw	0
  1320  0010A8  0100               	movlb	0	; () banked
  1321  0010AA  6F99               	movwf	(_flag_sentido_escritura+1)& (0+255),b
  1322  0010AC  0E01               	movlw	1
  1323  0010AE  6F98               	movwf	_flag_sentido_escritura& (0+255),b
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;main.c: 179: operador = "-";
  1327  0010B0  0E4F               	movlw	low STR_7
  1328  0010B2  0100               	movlb	0	; () banked
  1329  0010B4  6FE7               	movwf	_operador& (0+255),b
  1330  0010B6  0E0F               	movlw	high STR_7
  1331  0010B8  0100               	movlb	0	; () banked
  1332  0010BA  6FE8               	movwf	(_operador+1)& (0+255),b
  1333  0010BC                     
  1334                           ; BSR set to: 0
  1335  0010BC  B082               	btfsc	3970,0,c	;volatile
  1336  0010BE  D7FE               	goto	l223
  1337  0010C0                     u3470:
  1338                           
  1339                           ;main.c: 182: };
  1340                           ;main.c: 185: PORTAbits.RA7 = 0;
  1341                           
  1342                           ;main.c: 181: };
  1343  0010C0  9E80               	bcf	3968,7,c	;volatile
  1344                           
  1345                           ;main.c: 186: PORTAbits.RA6 = 0;
  1346  0010C2  9C80               	bcf	3968,6,c	;volatile
  1347                           
  1348                           ;main.c: 187: PORTAbits.RA5 = 0;
  1349  0010C4  9A80               	bcf	3968,5,c	;volatile
  1350                           
  1351                           ;main.c: 188: PORTAbits.RA3 = 1;
  1352  0010C6  8680               	bsf	3968,3,c	;volatile
  1353                           
  1354                           ;main.c: 190: if (PORTAbits.RA2 == 1) {
  1355  0010C8  A480               	btfss	3968,2,c	;volatile
  1356  0010CA  D01A               	goto	u3490
  1357                           
  1358                           ;main.c: 192: lcd_init();
  1359  0010CC  ECB1  F012         	call	_lcd_init	;wreg free
  1360                           
  1361                           ;main.c: 193: Setup();
  1362  0010D0  EC0D  F014         	call	_Setup	;wreg free
  1363                           
  1364                           ;main.c: 194: flag_sentido_escritura = 0;
  1365  0010D4  0E00               	movlw	0
  1366  0010D6  0100               	movlb	0	; () banked
  1367  0010D8  6F99               	movwf	(_flag_sentido_escritura+1)& (0+255),b
  1368  0010DA  0E00               	movlw	0
  1369  0010DC  6F98               	movwf	_flag_sentido_escritura& (0+255),b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 195: operador = "";
  1373  0010DE  0E4C               	movlw	low (STR_3+1)
  1374  0010E0  0100               	movlb	0	; () banked
  1375  0010E2  6FE7               	movwf	_operador& (0+255),b
  1376  0010E4  0E0F               	movlw	high (STR_3+1)
  1377  0010E6  0100               	movlb	0	; () banked
  1378  0010E8  6FE8               	movwf	(_operador+1)& (0+255),b
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 196: contador_numeros_ingresados_der = 0;
  1382  0010EA  0E00               	movlw	0
  1383  0010EC  0100               	movlb	0	; () banked
  1384  0010EE  6F97               	movwf	(_contador_numeros_ingresados_der+1)& (0+255),b
  1385  0010F0  0E00               	movlw	0
  1386  0010F2  6F96               	movwf	_contador_numeros_ingresados_der& (0+255),b
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 197: contador_numeros_ingresados_izq = 0;
  1390  0010F4  0E00               	movlw	0
  1391  0010F6  6E5E               	movwf	_contador_numeros_ingresados_izq+1,c
  1392  0010F8  0E00               	movlw	0
  1393  0010FA  6E5D               	movwf	_contador_numeros_ingresados_izq,c
  1394  0010FC                     
  1395                           ; BSR set to: 0
  1396  0010FC  B480               	btfsc	3968,2,c	;volatile
  1397  0010FE  D7FE               	goto	l227
  1398  001100                     u3490:
  1399                           
  1400                           ;main.c: 200: };
  1401                           ;main.c: 202: if (PORTAbits.RA1 == 1) {
  1402                           
  1403                           ;main.c: 199: };
  1404  001100  A280               	btfss	3968,1,c	;volatile
  1405  001102  D008               	goto	u3510
  1406                           
  1407                           ;main.c: 203: escribir_numero(0);
  1408  001104  0E00               	movlw	0
  1409  001106  6E1C               	movwf	escribir_numero@num,c
  1410  001108  0E00               	movlw	0
  1411  00110A  6E1D               	movwf	escribir_numero@num+1,c
  1412  00110C  EC1F  F00E         	call	_escribir_numero	;wreg free
  1413  001110  B280               	btfsc	3968,1,c	;volatile
  1414  001112  D7FE               	goto	l231
  1415  001114                     u3510:
  1416                           
  1417                           ;main.c: 206: };
  1418                           ;main.c: 208: if (PORTAbits.RA0 == 1) {
  1419                           
  1420                           ;main.c: 205: };
  1421  001114  A080               	btfss	3968,0,c	;volatile
  1422  001116  D1B5               	goto	u3620
  1423                           
  1424                           ;main.c: 209: int num_izq = 0;
  1425  001118  0E00               	movlw	0
  1426  00111A  0100               	movlb	0	; () banked
  1427  00111C  6FE4               	movwf	(main@num_izq+1)& (0+255),b
  1428  00111E  0E00               	movlw	0
  1429  001120  6FE3               	movwf	main@num_izq& (0+255),b
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;main.c: 210: for (int i = contador_numeros_ingresados_izq - 1; i >= 0; i--) {
  1433  001122  0EFF               	movlw	255
  1434  001124  245D               	addwf	_contador_numeros_ingresados_izq,w,c
  1435  001126  0100               	movlb	0	; () banked
  1436  001128  6FDF               	movwf	main@i& (0+255),b
  1437  00112A  0EFF               	movlw	255
  1438  00112C  205E               	addwfc	_contador_numeros_ingresados_izq+1,w,c
  1439  00112E  0100               	movlb	0	; () banked
  1440  001130  6FE0               	movwf	(main@i+1)& (0+255),b
  1441  001132                     l3420:
  1442                           
  1443                           ; BSR set to: 0
  1444  001132  0100               	movlb	0	; () banked
  1445  001134  BFE0               	btfsc	(main@i+1)& (0+255),7,b
  1446  001136  D05A               	goto	u3540
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;main.c: 211: num_izq = num_izq + array_lcd_izq[i] * (int) pow(10, (contador_numeros_ing
      +                          resados_izq - 1) - i);
  1450                           
  1451                           ; BSR set to: 0
  1452                           
  1453                           ; BSR set to: 0
  1454  001138  0E01               	movlw	1
  1455  00113A  0100               	movlb	0	; () banked
  1456  00113C  25DF               	addwf	main@i& (0+255),w,b
  1457  00113E  6E5B               	movwf	??_main& (0+255),c
  1458  001140  0E00               	movlw	0
  1459  001142  0100               	movlb	0	; () banked
  1460  001144  21E0               	addwfc	(main@i+1)& (0+255),w,b
  1461  001146  6E5C               	movwf	(??_main+1)& (0+255),c
  1462  001148  1E5B               	comf	??_main,f,c
  1463  00114A  1E5C               	comf	??_main+1,f,c
  1464  00114C  4A5B               	infsnz	??_main,f,c
  1465  00114E  2A5C               	incf	??_main+1,f,c
  1466  001150  505D               	movf	_contador_numeros_ingresados_izq,w,c
  1467  001152  245B               	addwf	??_main,w,c
  1468  001154  6E09               	movwf	___awtoft@c,c
  1469  001156  505E               	movf	_contador_numeros_ingresados_izq+1,w,c
  1470  001158  205C               	addwfc	??_main+1,w,c
  1471  00115A  6E0A               	movwf	___awtoft@c+1,c
  1472  00115C  EC4B  F014         	call	___awtoft	;wreg free
  1473  001160  C009  F0D1         	movff	?___awtoft,_main$2342
  1474  001164  C00A  F0D2         	movff	?___awtoft+1,_main$2342+1
  1475  001168  C00B  F0D3         	movff	?___awtoft+2,_main$2342+2
  1476                           
  1477                           ;main.c: 211: num_izq = num_izq + array_lcd_izq[i] * (int) pow(10, (contador_numeros_ing
      +                          resados_izq - 1) - i);
  1478  00116C  C0D1  F04D         	movff	_main$2342,pow@y
  1479  001170  C0D2  F04E         	movff	_main$2342+1,pow@y+1
  1480  001174  C0D3  F04F         	movff	_main$2342+2,pow@y+2
  1481  001178  0E00               	movlw	0
  1482  00117A  6E4A               	movwf	pow@x,c
  1483  00117C  0E20               	movlw	32
  1484  00117E  6E4B               	movwf	pow@x+1,c
  1485  001180  0E41               	movlw	65
  1486  001182  6E4C               	movwf	pow@x+2,c
  1487  001184  EC45  F00C         	call	_pow	;wreg free
  1488  001188  C04A  F0D4         	movff	?_pow,_main$2343
  1489  00118C  C04B  F0D5         	movff	?_pow+1,_main$2343+1
  1490  001190  C04C  F0D6         	movff	?_pow+2,_main$2343+2
  1491                           
  1492                           ;main.c: 211: num_izq = num_izq + array_lcd_izq[i] * (int) pow(10, (contador_numeros_ing
      +                          resados_izq - 1) - i);
  1493  001194  C0D4  F00D         	movff	_main$2343,___fttol@f1
  1494  001198  C0D5  F00E         	movff	_main$2343+1,___fttol@f1+1
  1495  00119C  C0D6  F00F         	movff	_main$2343+2,___fttol@f1+2
  1496  0011A0  ECAA  F00E         	call	___fttol	;wreg free
  1497  0011A4  C00D  F01C         	movff	?___fttol,___wmul@multiplier
  1498  0011A8  C00E  F01D         	movff	?___fttol+1,___wmul@multiplier+1
  1499  0011AC  90D8               	bcf	status,0,c
  1500  0011AE  0100               	movlb	0	; () banked
  1501  0011B0  35DF               	rlcf	main@i& (0+255),w,b
  1502  0011B2  6ED9               	movwf	fsr2l,c
  1503  0011B4  0100               	movlb	0	; () banked
  1504  0011B6  35E0               	rlcf	(main@i+1)& (0+255),w,b
  1505  0011B8  6EDA               	movwf	fsr2h,c
  1506  0011BA  0E6C               	movlw	low _array_lcd_izq
  1507  0011BC  26D9               	addwf	fsr2l,f,c
  1508  0011BE  0E00               	movlw	high _array_lcd_izq
  1509  0011C0  22DA               	addwfc	fsr2h,f,c
  1510  0011C2  CFDE F01E          	movff	postinc2,___wmul@multiplicand
  1511  0011C6  CFDD F01F          	movff	postdec2,___wmul@multiplicand+1
  1512  0011CA  ECAA  F014         	call	___wmul	;wreg free
  1513  0011CE  0100               	movlb	0	; () banked
  1514  0011D0  51E3               	movf	main@num_izq& (0+255),w,b
  1515  0011D2  241C               	addwf	?___wmul,w,c
  1516  0011D4  0100               	movlb	0	; () banked
  1517  0011D6  6FE3               	movwf	main@num_izq& (0+255),b
  1518  0011D8  0100               	movlb	0	; () banked
  1519  0011DA  51E4               	movf	(main@num_izq+1)& (0+255),w,b
  1520  0011DC  201D               	addwfc	?___wmul+1,w,c
  1521  0011DE  0100               	movlb	0	; () banked
  1522  0011E0  6FE4               	movwf	(main@num_izq+1)& (0+255),b
  1523                           
  1524                           ; BSR set to: 0
  1525  0011E2  0100               	movlb	0	; () banked
  1526  0011E4  07DF               	decf	main@i& (0+255),f,b
  1527  0011E6  A0D8               	btfss	status,0,c
  1528  0011E8  07E0               	decf	(main@i+1)& (0+255),f,b
  1529  0011EA  D7A3               	goto	l3420
  1530  0011EC                     u3540:
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;main.c: 212: };
  1534                           ;main.c: 213: int num_der = 0;
  1535                           
  1536                           ; BSR set to: 0
  1537  0011EC  0E00               	movlw	0
  1538  0011EE  0100               	movlb	0	; () banked
  1539  0011F0  6FE6               	movwf	(main@num_der+1)& (0+255),b
  1540  0011F2  0E00               	movlw	0
  1541  0011F4  6FE5               	movwf	main@num_der& (0+255),b
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 214: for (int i = contador_numeros_ingresados_der - 1; i >= 0; i--) {
  1545  0011F6  0EFF               	movlw	255
  1546  0011F8  0100               	movlb	0	; () banked
  1547  0011FA  2596               	addwf	_contador_numeros_ingresados_der& (0+255),w,b
  1548  0011FC  0100               	movlb	0	; () banked
  1549  0011FE  6FE1               	movwf	main@i_830& (0+255),b
  1550  001200  0EFF               	movlw	255
  1551  001202  0100               	movlb	0	; () banked
  1552  001204  2197               	addwfc	(_contador_numeros_ingresados_der+1)& (0+255),w,b
  1553  001206  0100               	movlb	0	; () banked
  1554  001208  6FE2               	movwf	(main@i_830+1)& (0+255),b
  1555  00120A                     l3438:
  1556                           
  1557                           ; BSR set to: 0
  1558  00120A  0100               	movlb	0	; () banked
  1559  00120C  BFE2               	btfsc	(main@i_830+1)& (0+255),7,b
  1560  00120E  D05C               	goto	u3560
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 215: num_der = num_der + array_lcd_der[i] * (int) pow(10, (contador_numeros_ing
      +                          resados_der - 1) - i);
  1564                           
  1565                           ; BSR set to: 0
  1566                           
  1567                           ; BSR set to: 0
  1568  001210  0E01               	movlw	1
  1569  001212  0100               	movlb	0	; () banked
  1570  001214  25E1               	addwf	main@i_830& (0+255),w,b
  1571  001216  6E5B               	movwf	??_main& (0+255),c
  1572  001218  0E00               	movlw	0
  1573  00121A  0100               	movlb	0	; () banked
  1574  00121C  21E2               	addwfc	(main@i_830+1)& (0+255),w,b
  1575  00121E  6E5C               	movwf	(??_main+1)& (0+255),c
  1576  001220  1E5B               	comf	??_main,f,c
  1577  001222  1E5C               	comf	??_main+1,f,c
  1578  001224  4A5B               	infsnz	??_main,f,c
  1579  001226  2A5C               	incf	??_main+1,f,c
  1580  001228  0100               	movlb	0	; () banked
  1581  00122A  5196               	movf	_contador_numeros_ingresados_der& (0+255),w,b
  1582  00122C  245B               	addwf	??_main,w,c
  1583  00122E  6E09               	movwf	___awtoft@c,c
  1584  001230  0100               	movlb	0	; () banked
  1585  001232  5197               	movf	(_contador_numeros_ingresados_der+1)& (0+255),w,b
  1586  001234  205C               	addwfc	??_main+1,w,c
  1587  001236  6E0A               	movwf	___awtoft@c+1,c
  1588  001238  EC4B  F014         	call	___awtoft	;wreg free
  1589  00123C  C009  F0D1         	movff	?___awtoft,_main$2342
  1590  001240  C00A  F0D2         	movff	?___awtoft+1,_main$2342+1
  1591  001244  C00B  F0D3         	movff	?___awtoft+2,_main$2342+2
  1592                           
  1593                           ;main.c: 215: num_der = num_der + array_lcd_der[i] * (int) pow(10, (contador_numeros_ing
      +                          resados_der - 1) - i);
  1594  001248  C0D1  F04D         	movff	_main$2342,pow@y
  1595  00124C  C0D2  F04E         	movff	_main$2342+1,pow@y+1
  1596  001250  C0D3  F04F         	movff	_main$2342+2,pow@y+2
  1597  001254  0E00               	movlw	0
  1598  001256  6E4A               	movwf	pow@x,c
  1599  001258  0E20               	movlw	32
  1600  00125A  6E4B               	movwf	pow@x+1,c
  1601  00125C  0E41               	movlw	65
  1602  00125E  6E4C               	movwf	pow@x+2,c
  1603  001260  EC45  F00C         	call	_pow	;wreg free
  1604  001264  C04A  F0D4         	movff	?_pow,_main$2343
  1605  001268  C04B  F0D5         	movff	?_pow+1,_main$2343+1
  1606  00126C  C04C  F0D6         	movff	?_pow+2,_main$2343+2
  1607                           
  1608                           ;main.c: 215: num_der = num_der + array_lcd_der[i] * (int) pow(10, (contador_numeros_ing
      +                          resados_der - 1) - i);
  1609  001270  C0D4  F00D         	movff	_main$2343,___fttol@f1
  1610  001274  C0D5  F00E         	movff	_main$2343+1,___fttol@f1+1
  1611  001278  C0D6  F00F         	movff	_main$2343+2,___fttol@f1+2
  1612  00127C  ECAA  F00E         	call	___fttol	;wreg free
  1613  001280  C00D  F01C         	movff	?___fttol,___wmul@multiplier
  1614  001284  C00E  F01D         	movff	?___fttol+1,___wmul@multiplier+1
  1615  001288  90D8               	bcf	status,0,c
  1616  00128A  0100               	movlb	0	; () banked
  1617  00128C  35E1               	rlcf	main@i_830& (0+255),w,b
  1618  00128E  6ED9               	movwf	fsr2l,c
  1619  001290  0100               	movlb	0	; () banked
  1620  001292  35E2               	rlcf	(main@i_830+1)& (0+255),w,b
  1621  001294  6EDA               	movwf	fsr2h,c
  1622  001296  0E60               	movlw	low _array_lcd_der
  1623  001298  26D9               	addwf	fsr2l,f,c
  1624  00129A  0E00               	movlw	high _array_lcd_der
  1625  00129C  22DA               	addwfc	fsr2h,f,c
  1626  00129E  CFDE F01E          	movff	postinc2,___wmul@multiplicand
  1627  0012A2  CFDD F01F          	movff	postdec2,___wmul@multiplicand+1
  1628  0012A6  ECAA  F014         	call	___wmul	;wreg free
  1629  0012AA  0100               	movlb	0	; () banked
  1630  0012AC  51E5               	movf	main@num_der& (0+255),w,b
  1631  0012AE  241C               	addwf	?___wmul,w,c
  1632  0012B0  0100               	movlb	0	; () banked
  1633  0012B2  6FE5               	movwf	main@num_der& (0+255),b
  1634  0012B4  0100               	movlb	0	; () banked
  1635  0012B6  51E6               	movf	(main@num_der+1)& (0+255),w,b
  1636  0012B8  201D               	addwfc	?___wmul+1,w,c
  1637  0012BA  0100               	movlb	0	; () banked
  1638  0012BC  6FE6               	movwf	(main@num_der+1)& (0+255),b
  1639                           
  1640                           ; BSR set to: 0
  1641  0012BE  0100               	movlb	0	; () banked
  1642  0012C0  07E1               	decf	main@i_830& (0+255),f,b
  1643  0012C2  A0D8               	btfss	status,0,c
  1644  0012C4  07E2               	decf	(main@i_830+1)& (0+255),f,b
  1645  0012C6  D7A1               	goto	l3438
  1646  0012C8                     u3560:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;main.c: 216: };
  1650                           ;main.c: 217: lcd_gotoxy(1, 2);
  1651                           
  1652                           ; BSR set to: 0
  1653  0012C8  0E02               	movlw	2
  1654  0012CA  6E05               	movwf	lcd_gotoxy@y,c
  1655  0012CC  0E01               	movlw	1
  1656  0012CE  ECCF  F014         	call	_lcd_gotoxy
  1657                           
  1658                           ;main.c: 218: if (operador == "+") {
  1659  0012D2  0E4D               	movlw	low STR_10
  1660  0012D4  0100               	movlb	0	; () banked
  1661  0012D6  19E7               	xorwf	_operador& (0+255),w,b
  1662  0012D8  E124               	bnz	l3462
  1663  0012DA  0E0F               	movlw	high STR_10
  1664  0012DC  0100               	movlb	0	; () banked
  1665  0012DE  19E8               	xorwf	(_operador+1)& (0+255),w,b
  1666  0012E0  A4D8               	btfss	status,2,c
  1667  0012E2  D01F               	goto	l238
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;main.c: 219: int resultado_suma = 0;
  1671  0012E4  0E00               	movlw	0
  1672  0012E6  0100               	movlb	0	; () banked
  1673  0012E8  6FD8               	movwf	(main@resultado_suma+1)& (0+255),b
  1674  0012EA  0E00               	movlw	0
  1675  0012EC  6FD7               	movwf	main@resultado_suma& (0+255),b
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 220: resultado_suma = resultado_suma + num_izq + num_der;
  1679  0012EE  0100               	movlb	0	; () banked
  1680  0012F0  51E3               	movf	main@num_izq& (0+255),w,b
  1681  0012F2  0100               	movlb	0	; () banked
  1682  0012F4  25D7               	addwf	main@resultado_suma& (0+255),w,b
  1683  0012F6  6E5B               	movwf	??_main& (0+255),c
  1684  0012F8  0100               	movlb	0	; () banked
  1685  0012FA  51E4               	movf	(main@num_izq+1)& (0+255),w,b
  1686  0012FC  0100               	movlb	0	; () banked
  1687  0012FE  21D8               	addwfc	(main@resultado_suma+1)& (0+255),w,b
  1688  001300  6E5C               	movwf	(??_main+1)& (0+255),c
  1689  001302  0100               	movlb	0	; () banked
  1690  001304  51E5               	movf	main@num_der& (0+255),w,b
  1691  001306  245B               	addwf	??_main,w,c
  1692  001308  0100               	movlb	0	; () banked
  1693  00130A  6FD7               	movwf	main@resultado_suma& (0+255),b
  1694  00130C  0100               	movlb	0	; () banked
  1695  00130E  51E6               	movf	(main@num_der+1)& (0+255),w,b
  1696  001310  205C               	addwfc	??_main+1,w,c
  1697  001312  0100               	movlb	0	; () banked
  1698  001314  6FD8               	movwf	(main@resultado_suma+1)& (0+255),b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 221: write_in_lcd(resultado_suma);
  1702  001316  C0D7  F01A         	movff	main@resultado_suma,write_in_lcd@key
  1703  00131A  C0D8  F01B         	movff	main@resultado_suma+1,write_in_lcd@key+1
  1704  00131E  EC95  F014         	call	_write_in_lcd	;wreg free
  1705  001322                     l238:
  1706  001322                     l3462:
  1707                           
  1708                           ;main.c: 222: };
  1709                           ;main.c: 223: if (operador == "x") {
  1710  001322  0E51               	movlw	low STR_5
  1711  001324  0100               	movlb	0	; () banked
  1712  001326  19E7               	xorwf	_operador& (0+255),w,b
  1713  001328  E124               	bnz	l3470
  1714  00132A  0E0F               	movlw	high STR_5
  1715  00132C  0100               	movlb	0	; () banked
  1716  00132E  19E8               	xorwf	(_operador+1)& (0+255),w,b
  1717  001330  A4D8               	btfss	status,2,c
  1718  001332  D01F               	goto	l239
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 224: int resultado_multiplicacion = 0;
  1722  001334  0E00               	movlw	0
  1723  001336  0100               	movlb	0	; () banked
  1724  001338  6FDA               	movwf	(main@resultado_multiplicacion+1)& (0+255),b
  1725  00133A  0E00               	movlw	0
  1726  00133C  6FD9               	movwf	main@resultado_multiplicacion& (0+255),b
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;main.c: 225: resultado_multiplicacion = resultado_multiplicacion + (int) (num_izq * num
      +                          _der);
  1730  00133E  C0E3  F01C         	movff	main@num_izq,___wmul@multiplier
  1731  001342  C0E4  F01D         	movff	main@num_izq+1,___wmul@multiplier+1
  1732  001346  C0E5  F01E         	movff	main@num_der,___wmul@multiplicand
  1733  00134A  C0E6  F01F         	movff	main@num_der+1,___wmul@multiplicand+1
  1734  00134E  ECAA  F014         	call	___wmul	;wreg free
  1735  001352  0100               	movlb	0	; () banked
  1736  001354  51D9               	movf	main@resultado_multiplicacion& (0+255),w,b
  1737  001356  241C               	addwf	?___wmul,w,c
  1738  001358  0100               	movlb	0	; () banked
  1739  00135A  6FD9               	movwf	main@resultado_multiplicacion& (0+255),b
  1740  00135C  0100               	movlb	0	; () banked
  1741  00135E  51DA               	movf	(main@resultado_multiplicacion+1)& (0+255),w,b
  1742  001360  201D               	addwfc	?___wmul+1,w,c
  1743  001362  0100               	movlb	0	; () banked
  1744  001364  6FDA               	movwf	(main@resultado_multiplicacion+1)& (0+255),b
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 226: write_in_lcd(resultado_multiplicacion);
  1748  001366  C0D9  F01A         	movff	main@resultado_multiplicacion,write_in_lcd@key
  1749  00136A  C0DA  F01B         	movff	main@resultado_multiplicacion+1,write_in_lcd@key+1
  1750  00136E  EC95  F014         	call	_write_in_lcd	;wreg free
  1751  001372                     l239:
  1752  001372                     l3470:
  1753                           
  1754                           ;main.c: 227: };
  1755                           ;main.c: 228: if (operador == "%") {
  1756  001372  0E4B               	movlw	low STR_3
  1757  001374  0100               	movlb	0	; () banked
  1758  001376  19E7               	xorwf	_operador& (0+255),w,b
  1759  001378  E124               	bnz	l3478
  1760  00137A  0E0F               	movlw	high STR_3
  1761  00137C  0100               	movlb	0	; () banked
  1762  00137E  19E8               	xorwf	(_operador+1)& (0+255),w,b
  1763  001380  A4D8               	btfss	status,2,c
  1764  001382  D01F               	goto	l240
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;main.c: 229: int resultado_division = 0;
  1768  001384  0E00               	movlw	0
  1769  001386  0100               	movlb	0	; () banked
  1770  001388  6FDC               	movwf	(main@resultado_division+1)& (0+255),b
  1771  00138A  0E00               	movlw	0
  1772  00138C  6FDB               	movwf	main@resultado_division& (0+255),b
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;main.c: 230: resultado_division = resultado_division + (num_izq / num_der);
  1776  00138E  C0E3  F001         	movff	main@num_izq,___awdiv@dividend
  1777  001392  C0E4  F002         	movff	main@num_izq+1,___awdiv@dividend+1
  1778  001396  C0E5  F003         	movff	main@num_der,___awdiv@divisor
  1779  00139A  C0E6  F004         	movff	main@num_der+1,___awdiv@divisor+1
  1780  00139E  EC33  F012         	call	___awdiv	;wreg free
  1781  0013A2  0100               	movlb	0	; () banked
  1782  0013A4  51DB               	movf	main@resultado_division& (0+255),w,b
  1783  0013A6  2401               	addwf	?___awdiv,w,c
  1784  0013A8  0100               	movlb	0	; () banked
  1785  0013AA  6FDB               	movwf	main@resultado_division& (0+255),b
  1786  0013AC  0100               	movlb	0	; () banked
  1787  0013AE  51DC               	movf	(main@resultado_division+1)& (0+255),w,b
  1788  0013B0  2002               	addwfc	?___awdiv+1,w,c
  1789  0013B2  0100               	movlb	0	; () banked
  1790  0013B4  6FDC               	movwf	(main@resultado_division+1)& (0+255),b
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 231: write_in_lcd(resultado_division);
  1794  0013B6  C0DB  F01A         	movff	main@resultado_division,write_in_lcd@key
  1795  0013BA  C0DC  F01B         	movff	main@resultado_division+1,write_in_lcd@key+1
  1796  0013BE  EC95  F014         	call	_write_in_lcd	;wreg free
  1797  0013C2                     l240:
  1798  0013C2                     l3478:
  1799                           
  1800                           ;main.c: 232: };
  1801                           ;main.c: 233: if (operador == "-") {
  1802  0013C2  0E4F               	movlw	low STR_7
  1803  0013C4  0100               	movlb	0	; () banked
  1804  0013C6  19E7               	xorwf	_operador& (0+255),w,b
  1805  0013C8  E15A               	bnz	l244
  1806  0013CA  0E0F               	movlw	high STR_7
  1807  0013CC  0100               	movlb	0	; () banked
  1808  0013CE  19E8               	xorwf	(_operador+1)& (0+255),w,b
  1809  0013D0  A4D8               	btfss	status,2,c
  1810  0013D2  D055               	goto	l243
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 234: int resultado_resta = 0;
  1814  0013D4  0E00               	movlw	0
  1815  0013D6  0100               	movlb	0	; () banked
  1816  0013D8  6FDE               	movwf	(main@resultado_resta+1)& (0+255),b
  1817  0013DA  0E00               	movlw	0
  1818  0013DC  6FDD               	movwf	main@resultado_resta& (0+255),b
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 235: if (num_der > num_izq) {
  1822  0013DE  0100               	movlb	0	; () banked
  1823  0013E0  51E5               	movf	main@num_der& (0+255),w,b
  1824  0013E2  0100               	movlb	0	; () banked
  1825  0013E4  5DE3               	subwf	main@num_izq& (0+255),w,b
  1826  0013E6  0100               	movlb	0	; () banked
  1827  0013E8  51E4               	movf	(main@num_izq+1)& (0+255),w,b
  1828  0013EA  0A80               	xorlw	128
  1829  0013EC  6E5B               	movwf	??_main& (0+255),c
  1830  0013EE  0100               	movlb	0	; () banked
  1831  0013F0  51E6               	movf	(main@num_der+1)& (0+255),w,b
  1832  0013F2  0A80               	xorlw	128
  1833  0013F4  585B               	subwfb	??_main& (0+255),w,c
  1834  0013F6  B0D8               	btfsc	status,0,c
  1835  0013F8  D024               	goto	l242
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 236: resultado_resta = num_der - num_izq;
  1839  0013FA  C0E3  F05B         	movff	main@num_izq,??_main
  1840  0013FE  C0E4  F05C         	movff	main@num_izq+1,??_main+1
  1841  001402  1E5B               	comf	??_main,f,c
  1842  001404  1E5C               	comf	??_main+1,f,c
  1843  001406  4A5B               	infsnz	??_main,f,c
  1844  001408  2A5C               	incf	??_main+1,f,c
  1845  00140A  0100               	movlb	0	; () banked
  1846  00140C  51E5               	movf	main@num_der& (0+255),w,b
  1847  00140E  245B               	addwf	??_main,w,c
  1848  001410  0100               	movlb	0	; () banked
  1849  001412  6FDD               	movwf	main@resultado_resta& (0+255),b
  1850  001414  0100               	movlb	0	; () banked
  1851  001416  51E6               	movf	(main@num_der+1)& (0+255),w,b
  1852  001418  205C               	addwfc	??_main+1,w,c
  1853  00141A  0100               	movlb	0	; () banked
  1854  00141C  6FDE               	movwf	(main@resultado_resta+1)& (0+255),b
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;main.c: 237: lcd_puts("-");
  1858  00141E  0E4F               	movlw	low STR_7
  1859  001420  6E09               	movwf	lcd_puts@ptr,c
  1860  001422  0E0F               	movlw	high STR_7
  1861  001424  6E0A               	movwf	lcd_puts@ptr+1,c
  1862  001426  EC80  F014         	call	_lcd_puts	;wreg free
  1863                           
  1864                           ;main.c: 238: lcd_gotoxy(2, 2);
  1865  00142A  0E02               	movlw	2
  1866  00142C  6E05               	movwf	lcd_gotoxy@y,c
  1867  00142E  0E02               	movlw	2
  1868  001430  ECCF  F014         	call	_lcd_gotoxy
  1869                           
  1870                           ;main.c: 239: write_in_lcd(resultado_resta);
  1871  001434  C0DD  F01A         	movff	main@resultado_resta,write_in_lcd@key
  1872  001438  C0DE  F01B         	movff	main@resultado_resta+1,write_in_lcd@key+1
  1873  00143C  EC95  F014         	call	_write_in_lcd	;wreg free
  1874                           
  1875                           ;main.c: 240: }
  1876  001440  D01E               	goto	l243
  1877  001442                     l242:
  1878                           
  1879                           ;main.c: 241: else {
  1880                           ;main.c: 242: resultado_resta = resultado_resta + (num_izq - num_der);
  1881  001442  C0E5  F05B         	movff	main@num_der,??_main
  1882  001446  C0E6  F05C         	movff	main@num_der+1,??_main+1
  1883  00144A  1E5B               	comf	??_main,f,c
  1884  00144C  1E5C               	comf	??_main+1,f,c
  1885  00144E  4A5B               	infsnz	??_main,f,c
  1886  001450  2A5C               	incf	??_main+1,f,c
  1887  001452  0100               	movlb	0	; () banked
  1888  001454  51E3               	movf	main@num_izq& (0+255),w,b
  1889  001456  265B               	addwf	??_main,f,c
  1890  001458  0100               	movlb	0	; () banked
  1891  00145A  51E4               	movf	(main@num_izq+1)& (0+255),w,b
  1892  00145C  225C               	addwfc	??_main+1,f,c
  1893  00145E  0100               	movlb	0	; () banked
  1894  001460  51DD               	movf	main@resultado_resta& (0+255),w,b
  1895  001462  245B               	addwf	??_main,w,c
  1896  001464  0100               	movlb	0	; () banked
  1897  001466  6FDD               	movwf	main@resultado_resta& (0+255),b
  1898  001468  0100               	movlb	0	; () banked
  1899  00146A  51DE               	movf	(main@resultado_resta+1)& (0+255),w,b
  1900  00146C  205C               	addwfc	??_main+1,w,c
  1901  00146E  0100               	movlb	0	; () banked
  1902  001470  6FDE               	movwf	(main@resultado_resta+1)& (0+255),b
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 243: write_in_lcd(resultado_resta);
  1906  001472  C0DD  F01A         	movff	main@resultado_resta,write_in_lcd@key
  1907  001476  C0DE  F01B         	movff	main@resultado_resta+1,write_in_lcd@key+1
  1908  00147A  EC95  F014         	call	_write_in_lcd	;wreg free
  1909  00147E                     l243:
  1910  00147E                     l244:
  1911  00147E  B080               	btfsc	3968,0,c	;volatile
  1912  001480  D7FE               	goto	l243
  1913  001482                     u3620:
  1914                           
  1915                           ;main.c: 250: };
  1916                           ;main.c: 252: if (PORTCbits.RC0 == 1) {
  1917                           
  1918                           ;main.c: 249: };
  1919  001482  A082               	btfss	3970,0,c	;volatile
  1920  001484  D018               	goto	u3640
  1921                           
  1922                           ;main.c: 255: lcd_gotoxy(8, 1);
  1923  001486  0E01               	movlw	1
  1924  001488  6E05               	movwf	lcd_gotoxy@y,c
  1925  00148A  0E08               	movlw	8
  1926  00148C  ECCF  F014         	call	_lcd_gotoxy
  1927                           
  1928                           ;main.c: 256: lcd_putrs("+");
  1929  001490  0E4D               	movlw	low STR_10
  1930  001492  6E09               	movwf	lcd_putrs@ptr,c
  1931  001494  0E0F               	movlw	high STR_10
  1932  001496  6E0A               	movwf	lcd_putrs@ptr+1,c
  1933  001498  EC7E  F013         	call	_lcd_putrs	;wreg free
  1934                           
  1935                           ;main.c: 257: flag_sentido_escritura = 1;
  1936  00149C  0E00               	movlw	0
  1937  00149E  0100               	movlb	0	; () banked
  1938  0014A0  6F99               	movwf	(_flag_sentido_escritura+1)& (0+255),b
  1939  0014A2  0E01               	movlw	1
  1940  0014A4  6F98               	movwf	_flag_sentido_escritura& (0+255),b
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 258: operador = "+";
  1944  0014A6  0E4D               	movlw	low STR_10
  1945  0014A8  0100               	movlb	0	; () banked
  1946  0014AA  6FE7               	movwf	_operador& (0+255),b
  1947  0014AC  0E0F               	movlw	high STR_10
  1948  0014AE  0100               	movlb	0	; () banked
  1949  0014B0  6FE8               	movwf	(_operador+1)& (0+255),b
  1950  0014B2                     
  1951                           ; BSR set to: 0
  1952  0014B2  B082               	btfsc	3970,0,c	;volatile
  1953  0014B4  D7FE               	goto	l249
  1954  0014B6                     u3640:
  1955                           
  1956                           ;main.c: 261: };
  1957                           ;main.c: 263: LATBbits.LATB1 = !LATBbits.LATB1;;
  1958                           
  1959                           ;main.c: 260: };
  1960  0014B6  B28A               	btfsc	3978,1,c	;volatile
  1961  0014B8  D003               	goto	u3650
  1962  0014BA  6A5B               	clrf	??_main& (0+255),c
  1963  0014BC  2A5B               	incf	??_main& (0+255),f,c
  1964  0014BE  D001               	goto	u3668
  1965  0014C0                     u3650:
  1966  0014C0  6A5B               	clrf	??_main& (0+255),c
  1967  0014C2                     u3668:
  1968  0014C2  465B               	rlncf	??_main,f,c
  1969  0014C4  508A               	movf	3978,w,c	;volatile
  1970  0014C6  185B               	xorwf	??_main,w,c
  1971  0014C8  0BFD               	andlw	-3
  1972  0014CA  185B               	xorwf	??_main,w,c
  1973  0014CC  6E8A               	movwf	3978,c	;volatile
  1974                           
  1975                           ;main.c: 264: LATBbits.LATB0 = !LATBbits.LATB0;;
  1976  0014CE  B08A               	btfsc	3978,0,c	;volatile
  1977  0014D0  D003               	goto	u3670
  1978  0014D2  6A5B               	clrf	??_main& (0+255),c
  1979  0014D4  2A5B               	incf	??_main& (0+255),f,c
  1980  0014D6  D001               	goto	u3688
  1981  0014D8                     u3670:
  1982  0014D8  6A5B               	clrf	??_main& (0+255),c
  1983  0014DA                     u3688:
  1984  0014DA  508A               	movf	3978,w,c	;volatile
  1985  0014DC  185B               	xorwf	??_main,w,c
  1986  0014DE  0BFE               	andlw	-2
  1987  0014E0  185B               	xorwf	??_main,w,c
  1988  0014E2  6E8A               	movwf	3978,c	;volatile
  1989                           
  1990                           ;main.c: 265: _delay((unsigned long)((98)*(8000000/4000.0)));
  1991  0014E4  0EFF               	movlw	255
  1992  0014E6  6E5B               	movwf	??_main& (0+255),c
  1993  0014E8  0E8A               	movlw	138
  1994  0014EA                     u3697:
  1995  0014EA  2EE8               	decfsz	wreg,f,c
  1996  0014EC  D7FE               	bra	u3697
  1997  0014EE  2E5B               	decfsz	??_main& (0+255),f,c
  1998  0014F0  D7FC               	bra	u3697
  1999  0014F2  D000               	nop2	
  2000  0014F4  D531               	goto	l176
  2001  0014F6                     __end_of_main:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           postdec1	equ	0xFE5
  2010                           fsr1l	equ	0xFE1
  2011                           postinc2	equ	0xFDE
  2012                           postdec2	equ	0xFDD
  2013                           fsr2h	equ	0xFDA
  2014                           fsr2l	equ	0xFD9
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _pow *****************
  2018 ;; Defined at:
  2019 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  x               3   73[COMRAM] int 
  2022 ;;  y               3   76[COMRAM] int 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  yi              4   86[COMRAM] unsigned long 
  2025 ;;  sign            1   85[COMRAM] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  3   73[COMRAM] unsigned char 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2035 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2036 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2038 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2039 ;;Total ram usage:       17 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    4
  2042 ;; This function calls:
  2043 ;;		___ftge
  2044 ;;		___ftmul
  2045 ;;		___ftneg
  2046 ;;		___fttol
  2047 ;;		___lltoft
  2048 ;;		_exp
  2049 ;;		_log
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text1
  2056  00188A                     __ptext1:
  2057                           	opt stack 0
  2058  00188A                     _pow:
  2059                           	opt stack 26
  2060                           
  2061                           ;incstack = 0
  2062  00188A  0E00               	movlw	0
  2063  00188C  6E56               	movwf	pow@sign,c
  2064  00188E  504A               	movf	pow@x,w,c
  2065  001890  104B               	iorwf	pow@x+1,w,c
  2066  001892  104C               	iorwf	pow@x+2,w,c
  2067  001894  A4D8               	btfss	status,2,c
  2068  001896  D01C               	goto	l881
  2069  001898  0E00               	movlw	0
  2070  00189A  6E01               	movwf	___ftge@ff1,c
  2071  00189C  0E00               	movlw	0
  2072  00189E  6E02               	movwf	___ftge@ff1+1,c
  2073  0018A0  0E00               	movlw	0
  2074  0018A2  6E03               	movwf	___ftge@ff1+2,c
  2075  0018A4  C04D  F004         	movff	pow@y,___ftge@ff2
  2076  0018A8  C04E  F005         	movff	pow@y+1,___ftge@ff2+1
  2077  0018AC  C04F  F006         	movff	pow@y+2,___ftge@ff2+2
  2078  0018B0  ECEB  F011         	call	___ftge	;wreg free
  2079  0018B4  A0D8               	btfss	status,0,c
  2080  0018B6  D005               	goto	l882
  2081  0018B8  0E00               	movlw	0
  2082  0018BA  0100               	movlb	0	; () banked
  2083  0018BC  6F95               	movwf	(_errno+1)& (0+255),b
  2084  0018BE  0E21               	movlw	33
  2085  0018C0  6F94               	movwf	_errno& (0+255),b
  2086  0018C2                     l882:
  2087  0018C2  0E00               	movlw	0
  2088  0018C4  6E4A               	movwf	?_pow,c
  2089  0018C6  0E00               	movlw	0
  2090  0018C8  6E4B               	movwf	?_pow+1,c
  2091  0018CA  0E00               	movlw	0
  2092  0018CC  6E4C               	movwf	?_pow+2,c
  2093  0018CE  0012               	return	
  2094  0018D0                     l881:
  2095  0018D0  504D               	movf	pow@y,w,c
  2096  0018D2  104E               	iorwf	pow@y+1,w,c
  2097  0018D4  104F               	iorwf	pow@y+2,w,c
  2098  0018D6  A4D8               	btfss	status,2,c
  2099  0018D8  D007               	goto	l884
  2100  0018DA  0E00               	movlw	0
  2101  0018DC  6E4A               	movwf	?_pow,c
  2102  0018DE  0E80               	movlw	128
  2103  0018E0  6E4B               	movwf	?_pow+1,c
  2104  0018E2  0E3F               	movlw	63
  2105  0018E4  6E4C               	movwf	?_pow+2,c
  2106  0018E6  0012               	return	
  2107  0018E8                     l884:
  2108  0018E8  AE4C               	btfss	pow@x+2,7,c
  2109  0018EA  D041               	goto	l885
  2110  0018EC  C04D  F00D         	movff	pow@y,___fttol@f1
  2111  0018F0  C04E  F00E         	movff	pow@y+1,___fttol@f1+1
  2112  0018F4  C04F  F00F         	movff	pow@y+2,___fttol@f1+2
  2113  0018F8  ECAA  F00E         	call	___fttol	;wreg free
  2114  0018FC  C00D  F057         	movff	?___fttol,pow@yi
  2115  001900  C00E  F058         	movff	?___fttol+1,pow@yi+1
  2116  001904  C00F  F059         	movff	?___fttol+2,pow@yi+2
  2117  001908  C010  F05A         	movff	?___fttol+3,pow@yi+3
  2118  00190C  C057  F009         	movff	pow@yi,___lltoft@c
  2119  001910  C058  F00A         	movff	pow@yi+1,___lltoft@c+1
  2120  001914  C059  F00B         	movff	pow@yi+2,___lltoft@c+2
  2121  001918  C05A  F00C         	movff	pow@yi+3,___lltoft@c+3
  2122  00191C  EC27  F013         	call	___lltoft	;wreg free
  2123  001920  504D               	movf	pow@y,w,c
  2124  001922  1809               	xorwf	?___lltoft,w,c
  2125  001924  E107               	bnz	u2890
  2126  001926  504E               	movf	pow@y+1,w,c
  2127  001928  180A               	xorwf	?___lltoft+1,w,c
  2128  00192A  E104               	bnz	u2890
  2129  00192C  504F               	movf	pow@y+2,w,c
  2130  00192E  180B               	xorwf	?___lltoft+2,w,c
  2131  001930  B4D8               	btfsc	status,2,c
  2132  001932  D00C               	goto	l886
  2133  001934                     u2890:
  2134  001934  0E00               	movlw	0
  2135  001936  0100               	movlb	0	; () banked
  2136  001938  6F95               	movwf	(_errno+1)& (0+255),b
  2137  00193A  0E21               	movlw	33
  2138  00193C  6F94               	movwf	_errno& (0+255),b
  2139  00193E  0E00               	movlw	0
  2140  001940  6E4A               	movwf	?_pow,c
  2141  001942  0E00               	movlw	0
  2142  001944  6E4B               	movwf	?_pow+1,c
  2143  001946  0E00               	movlw	0
  2144  001948  6E4C               	movwf	?_pow+2,c
  2145                           
  2146                           ; BSR set to: 0
  2147  00194A  0012               	return	
  2148  00194C                     l886:
  2149                           
  2150                           ; BSR set to: 0
  2151  00194C  5057               	movf	pow@yi,w,c
  2152  00194E  0B01               	andlw	1
  2153  001950  6E56               	movwf	pow@sign,c
  2154  001952  C04A  F001         	movff	pow@x,___ftneg@f1
  2155  001956  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  2156  00195A  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  2157  00195E  ECBD  F014         	call	___ftneg	;wreg free
  2158  001962  C001  F04A         	movff	?___ftneg,pow@x
  2159  001966  C002  F04B         	movff	?___ftneg+1,pow@x+1
  2160  00196A  C003  F04C         	movff	?___ftneg+2,pow@x+2
  2161  00196E                     l885:
  2162  00196E  C04A  F03A         	movff	pow@x,log@x
  2163  001972  C04B  F03B         	movff	pow@x+1,log@x+1
  2164  001976  C04C  F03C         	movff	pow@x+2,log@x+2
  2165  00197A  EC90  F00D         	call	_log	;wreg free
  2166  00197E  C03A  F050         	movff	?_log,_pow$2344
  2167  001982  C03B  F051         	movff	?_log+1,_pow$2344+1
  2168  001986  C03C  F052         	movff	?_log+2,_pow$2344+2
  2169  00198A  C050  F00D         	movff	_pow$2344,___ftmul@f1
  2170  00198E  C051  F00E         	movff	_pow$2344+1,___ftmul@f1+1
  2171  001992  C052  F00F         	movff	_pow$2344+2,___ftmul@f1+2
  2172  001996  C04D  F010         	movff	pow@y,___ftmul@f2
  2173  00199A  C04E  F011         	movff	pow@y+1,___ftmul@f2+1
  2174  00199E  C04F  F012         	movff	pow@y+2,___ftmul@f2+2
  2175  0019A2  EC24  F00F         	call	___ftmul	;wreg free
  2176  0019A6  C00D  F053         	movff	?___ftmul,_pow$2345
  2177  0019AA  C00E  F054         	movff	?___ftmul+1,_pow$2345+1
  2178  0019AE  C00F  F055         	movff	?___ftmul+2,_pow$2345+2
  2179  0019B2  C053  F041         	movff	_pow$2345,exp@x
  2180  0019B6  C054  F042         	movff	_pow$2345+1,exp@x+1
  2181  0019BA  C055  F043         	movff	_pow$2345+2,exp@x+2
  2182  0019BE  EC7B  F00A         	call	_exp	;wreg free
  2183  0019C2  C041  F04A         	movff	?_exp,pow@x
  2184  0019C6  C042  F04B         	movff	?_exp+1,pow@x+1
  2185  0019CA  C043  F04C         	movff	?_exp+2,pow@x+2
  2186  0019CE  5056               	movf	pow@sign,w,c
  2187  0019D0  B4D8               	btfsc	status,2,c
  2188  0019D2  D00F               	goto	l887
  2189  0019D4  C04A  F001         	movff	pow@x,___ftneg@f1
  2190  0019D8  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  2191  0019DC  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  2192  0019E0  ECBD  F014         	call	___ftneg	;wreg free
  2193  0019E4  C001  F04A         	movff	?___ftneg,?_pow
  2194  0019E8  C002  F04B         	movff	?___ftneg+1,?_pow+1
  2195  0019EC  C003  F04C         	movff	?___ftneg+2,?_pow+2
  2196  0019F0  0012               	return	
  2197  0019F2                     l887:
  2198  0019F2  C04A  F04A         	movff	pow@x,?_pow
  2199  0019F6  C04B  F04B         	movff	pow@x+1,?_pow+1
  2200  0019FA  C04C  F04C         	movff	pow@x+2,?_pow+2
  2201  0019FE  0012               	return		;funcret
  2202  001A00                     __end_of_pow:
  2203                           	opt stack 0
  2204                           tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           postinc0	equ	0xFEE
  2209                           wreg	equ	0xFE8
  2210                           postdec1	equ	0xFE5
  2211                           fsr1l	equ	0xFE1
  2212                           postinc2	equ	0xFDE
  2213                           postdec2	equ	0xFDD
  2214                           fsr2h	equ	0xFDA
  2215                           fsr2l	equ	0xFD9
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function _log *****************
  2219 ;; Defined at:
  2220 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  x               3   57[COMRAM] unsigned char 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  exponent        2   60[COMRAM] int 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  3   57[COMRAM] int 
  2227 ;; Registers used:
  2228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2234 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2237 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2238 ;;Total ram usage:        5 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    3
  2241 ;; This function calls:
  2242 ;;		___awtoft
  2243 ;;		___ftadd
  2244 ;;		___ftmul
  2245 ;;		_eval_poly
  2246 ;;		_frexp
  2247 ;; This function is called by:
  2248 ;;		_pow
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text2
  2253  001B20                     __ptext2:
  2254                           	opt stack 0
  2255  001B20                     _log:
  2256                           	opt stack 26
  2257                           
  2258                           ;incstack = 0
  2259  001B20  AE3C               	btfss	log@x+2,7,c
  2260  001B22  D00C               	goto	l1083
  2261  001B24  0E00               	movlw	0
  2262  001B26  0100               	movlb	0	; () banked
  2263  001B28  6F95               	movwf	(_errno+1)& (0+255),b
  2264  001B2A  0E21               	movlw	33
  2265  001B2C  6F94               	movwf	_errno& (0+255),b
  2266  001B2E  0E00               	movlw	0
  2267  001B30  6E3A               	movwf	?_log,c
  2268  001B32  0E00               	movlw	0
  2269  001B34  6E3B               	movwf	?_log+1,c
  2270  001B36  0E00               	movlw	0
  2271  001B38  6E3C               	movwf	?_log+2,c
  2272                           
  2273                           ; BSR set to: 0
  2274  001B3A  0012               	return	
  2275  001B3C                     l1083:
  2276                           
  2277                           ; BSR set to: 0
  2278  001B3C  503A               	movf	log@x,w,c
  2279  001B3E  103B               	iorwf	log@x+1,w,c
  2280  001B40  103C               	iorwf	log@x+2,w,c
  2281  001B42  A4D8               	btfss	status,2,c
  2282  001B44  D00C               	goto	l1085
  2283  001B46  0E00               	movlw	0
  2284  001B48  0100               	movlb	0	; () banked
  2285  001B4A  6F95               	movwf	(_errno+1)& (0+255),b
  2286  001B4C  0E22               	movlw	34
  2287  001B4E  6F94               	movwf	_errno& (0+255),b
  2288  001B50  0E00               	movlw	0
  2289  001B52  6E3A               	movwf	?_log,c
  2290  001B54  0E00               	movlw	0
  2291  001B56  6E3B               	movwf	?_log+1,c
  2292  001B58  0E00               	movlw	0
  2293  001B5A  6E3C               	movwf	?_log+2,c
  2294                           
  2295                           ; BSR set to: 0
  2296  001B5C  0012               	return	
  2297  001B5E                     l1085:
  2298                           
  2299                           ; BSR set to: 0
  2300  001B5E  0E00               	movlw	0
  2301  001B60  6E10               	movwf	___ftmul@f2,c
  2302  001B62  0E00               	movlw	0
  2303  001B64  6E11               	movwf	___ftmul@f2+1,c
  2304  001B66  0E40               	movlw	64
  2305  001B68  6E12               	movwf	___ftmul@f2+2,c
  2306  001B6A  0E3D               	movlw	low log@exponent
  2307  001B6C  6E04               	movwf	frexp@eptr,c
  2308  001B6E  0E00               	movlw	high log@exponent
  2309  001B70  6E05               	movwf	frexp@eptr+1,c
  2310  001B72  C03A  F001         	movff	log@x,frexp@value
  2311  001B76  C03B  F002         	movff	log@x+1,frexp@value+1
  2312  001B7A  C03C  F003         	movff	log@x+2,frexp@value+2
  2313  001B7E  ECA3  F011         	call	_frexp	;wreg free
  2314  001B82  C001  F00D         	movff	?_frexp,___ftmul@f1
  2315  001B86  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  2316  001B8A  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  2317  001B8E  EC24  F00F         	call	___ftmul	;wreg free
  2318  001B92  C00D  F022         	movff	?___ftmul,___ftadd@f1
  2319  001B96  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  2320  001B9A  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  2321  001B9E  0E00               	movlw	0
  2322  001BA0  6E25               	movwf	___ftadd@f2,c
  2323  001BA2  0E80               	movlw	128
  2324  001BA4  6E26               	movwf	___ftadd@f2+1,c
  2325  001BA6  0EBF               	movlw	191
  2326  001BA8  6E27               	movwf	___ftadd@f2+2,c
  2327  001BAA  EC6F  F00B         	call	___ftadd	;wreg free
  2328  001BAE  C022  F03A         	movff	?___ftadd,log@x
  2329  001BB2  C023  F03B         	movff	?___ftadd+1,log@x+1
  2330  001BB6  C024  F03C         	movff	?___ftadd+2,log@x+2
  2331  001BBA  063D               	decf	log@exponent,f,c
  2332  001BBC  A0D8               	btfss	status,0,c
  2333  001BBE  063E               	decf	log@exponent+1,f,c
  2334  001BC0  C03A  F02E         	movff	log@x,eval_poly@x
  2335  001BC4  C03B  F02F         	movff	log@x+1,eval_poly@x+1
  2336  001BC8  C03C  F030         	movff	log@x+2,eval_poly@x+2
  2337  001BCC  0E2D               	movlw	low log@coeff
  2338  001BCE  6E31               	movwf	eval_poly@d,c
  2339  001BD0  0E0F               	movlw	high log@coeff
  2340  001BD2  6E32               	movwf	eval_poly@d+1,c
  2341  001BD4  0E00               	movlw	0
  2342  001BD6  6E34               	movwf	eval_poly@n+1,c
  2343  001BD8  0E08               	movlw	8
  2344  001BDA  6E33               	movwf	eval_poly@n,c
  2345  001BDC  EC80  F010         	call	_eval_poly	;wreg free
  2346  001BE0  C02E  F03A         	movff	?_eval_poly,log@x
  2347  001BE4  C02F  F03B         	movff	?_eval_poly+1,log@x+1
  2348  001BE8  C030  F03C         	movff	?_eval_poly+2,log@x+2
  2349  001BEC  0E72               	movlw	114
  2350  001BEE  6E10               	movwf	___ftmul@f2,c
  2351  001BF0  0E31               	movlw	49
  2352  001BF2  6E11               	movwf	___ftmul@f2+1,c
  2353  001BF4  0E3F               	movlw	63
  2354  001BF6  6E12               	movwf	___ftmul@f2+2,c
  2355  001BF8  C03D  F009         	movff	log@exponent,___awtoft@c
  2356  001BFC  C03E  F00A         	movff	log@exponent+1,___awtoft@c+1
  2357  001C00  EC4B  F014         	call	___awtoft	;wreg free
  2358  001C04  C009  F00D         	movff	?___awtoft,___ftmul@f1
  2359  001C08  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  2360  001C0C  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  2361  001C10  EC24  F00F         	call	___ftmul	;wreg free
  2362  001C14  C00D  F022         	movff	?___ftmul,___ftadd@f1
  2363  001C18  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  2364  001C1C  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  2365  001C20  C03A  F025         	movff	log@x,___ftadd@f2
  2366  001C24  C03B  F026         	movff	log@x+1,___ftadd@f2+1
  2367  001C28  C03C  F027         	movff	log@x+2,___ftadd@f2+2
  2368  001C2C  EC6F  F00B         	call	___ftadd	;wreg free
  2369  001C30  C022  F03A         	movff	?___ftadd,?_log
  2370  001C34  C023  F03B         	movff	?___ftadd+1,?_log+1
  2371  001C38  C024  F03C         	movff	?___ftadd+2,?_log+2
  2372  001C3C  0012               	return	
  2373  001C3E                     __end_of_log:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           tblptrh	equ	0xFF7
  2377                           tblptrl	equ	0xFF6
  2378                           tablat	equ	0xFF5
  2379                           postinc0	equ	0xFEE
  2380                           wreg	equ	0xFE8
  2381                           postdec1	equ	0xFE5
  2382                           fsr1l	equ	0xFE1
  2383                           postinc2	equ	0xFDE
  2384                           postdec2	equ	0xFDD
  2385                           fsr2h	equ	0xFDA
  2386                           fsr2l	equ	0xFD9
  2387                           status	equ	0xFD8
  2388                           
  2389 ;; *************** function _exp *****************
  2390 ;; Defined at:
  2391 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  x               3   64[COMRAM] int 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  exponent        2   70[COMRAM] int 
  2396 ;;  sign            1   72[COMRAM] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  3   64[COMRAM] unsigned char 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2406 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2407 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2409 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2410 ;;Total ram usage:        9 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    3
  2413 ;; This function calls:
  2414 ;;		___awtoft
  2415 ;;		___ftdiv
  2416 ;;		___ftge
  2417 ;;		___ftmul
  2418 ;;		___ftneg
  2419 ;;		___ftsub
  2420 ;;		___fttol
  2421 ;;		_eval_poly
  2422 ;;		_floor
  2423 ;;		_ldexp
  2424 ;; This function is called by:
  2425 ;;		_pow
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text3
  2430  0014F6                     __ptext3:
  2431                           	opt stack 0
  2432  0014F6                     _exp:
  2433                           	opt stack 26
  2434                           
  2435                           ;incstack = 0
  2436  0014F6  5041               	movf	exp@x,w,c
  2437  0014F8  1042               	iorwf	exp@x+1,w,c
  2438  0014FA  1043               	iorwf	exp@x+2,w,c
  2439  0014FC  A4D8               	btfss	status,2,c
  2440  0014FE  D007               	goto	l1041
  2441  001500  0E00               	movlw	0
  2442  001502  6E41               	movwf	?_exp,c
  2443  001504  0E80               	movlw	128
  2444  001506  6E42               	movwf	?_exp+1,c
  2445  001508  0E3F               	movlw	63
  2446  00150A  6E43               	movwf	?_exp+2,c
  2447  00150C  0012               	return	
  2448  00150E                     l1041:
  2449  00150E  0E72               	movlw	114
  2450  001510  6E01               	movwf	___ftge@ff1,c
  2451  001512  0E31               	movlw	49
  2452  001514  6E02               	movwf	___ftge@ff1+1,c
  2453  001516  0E44               	movlw	68
  2454  001518  6E03               	movwf	___ftge@ff1+2,c
  2455  00151A  C041  F004         	movff	exp@x,___ftge@ff2
  2456  00151E  C042  F005         	movff	exp@x+1,___ftge@ff2+1
  2457  001522  C043  F006         	movff	exp@x+2,___ftge@ff2+2
  2458  001526  ECEB  F011         	call	___ftge	;wreg free
  2459  00152A  B0D8               	btfsc	status,0,c
  2460  00152C  D00C               	goto	l1043
  2461  00152E  0E00               	movlw	0
  2462  001530  0100               	movlb	0	; () banked
  2463  001532  6F95               	movwf	(_errno+1)& (0+255),b
  2464  001534  0E22               	movlw	34
  2465  001536  6F94               	movwf	_errno& (0+255),b
  2466  001538  0EFF               	movlw	255
  2467  00153A  6E41               	movwf	?_exp,c
  2468  00153C  0E7F               	movlw	127
  2469  00153E  6E42               	movwf	?_exp+1,c
  2470  001540  0E7F               	movlw	127
  2471  001542  6E43               	movwf	?_exp+2,c
  2472                           
  2473                           ; BSR set to: 0
  2474  001544  0012               	return	
  2475  001546                     l1043:
  2476                           
  2477                           ; BSR set to: 0
  2478  001546  C041  F001         	movff	exp@x,___ftge@ff1
  2479  00154A  C042  F002         	movff	exp@x+1,___ftge@ff1+1
  2480  00154E  C043  F003         	movff	exp@x+2,___ftge@ff1+2
  2481  001552  0E49               	movlw	73
  2482  001554  6E04               	movwf	___ftge@ff2,c
  2483  001556  0E3A               	movlw	58
  2484  001558  6E05               	movwf	___ftge@ff2+1,c
  2485  00155A  0EC4               	movlw	196
  2486  00155C  6E06               	movwf	___ftge@ff2+2,c
  2487  00155E  ECEB  F011         	call	___ftge	;wreg free
  2488  001562  B0D8               	btfsc	status,0,c
  2489  001564  D00C               	goto	l1044
  2490  001566  0E00               	movlw	0
  2491  001568  0100               	movlb	0	; () banked
  2492  00156A  6F95               	movwf	(_errno+1)& (0+255),b
  2493  00156C  0E22               	movlw	34
  2494  00156E  6F94               	movwf	_errno& (0+255),b
  2495  001570  0E00               	movlw	0
  2496  001572  6E41               	movwf	?_exp,c
  2497  001574  0E00               	movlw	0
  2498  001576  6E42               	movwf	?_exp+1,c
  2499  001578  0E00               	movlw	0
  2500  00157A  6E43               	movwf	?_exp+2,c
  2501                           
  2502                           ; BSR set to: 0
  2503  00157C  0012               	return	
  2504  00157E                     l1044:
  2505                           
  2506                           ; BSR set to: 0
  2507  00157E  AE43               	btfss	exp@x+2,7,c
  2508  001580  D002               	goto	u2750
  2509  001582  0E01               	movlw	1
  2510  001584  D001               	goto	u2760
  2511  001586                     u2750:
  2512  001586  0E00               	movlw	0
  2513  001588                     u2760:
  2514  001588  6E49               	movwf	exp@sign,c
  2515  00158A  5049               	movf	exp@sign,w,c
  2516  00158C  B4D8               	btfsc	status,2,c
  2517  00158E  D00E               	goto	l1045
  2518  001590  C041  F001         	movff	exp@x,___ftneg@f1
  2519  001594  C042  F002         	movff	exp@x+1,___ftneg@f1+1
  2520  001598  C043  F003         	movff	exp@x+2,___ftneg@f1+2
  2521  00159C  ECBD  F014         	call	___ftneg	;wreg free
  2522  0015A0  C001  F041         	movff	?___ftneg,exp@x
  2523  0015A4  C002  F042         	movff	?___ftneg+1,exp@x+1
  2524  0015A8  C003  F043         	movff	?___ftneg+2,exp@x+2
  2525  0015AC                     l1045:
  2526  0015AC  C041  F00D         	movff	exp@x,___ftmul@f1
  2527  0015B0  C042  F00E         	movff	exp@x+1,___ftmul@f1+1
  2528  0015B4  C043  F00F         	movff	exp@x+2,___ftmul@f1+2
  2529  0015B8  0EAA               	movlw	170
  2530  0015BA  6E10               	movwf	___ftmul@f2,c
  2531  0015BC  0EB8               	movlw	184
  2532  0015BE  6E11               	movwf	___ftmul@f2+1,c
  2533  0015C0  0E3F               	movlw	63
  2534  0015C2  6E12               	movwf	___ftmul@f2+2,c
  2535  0015C4  EC24  F00F         	call	___ftmul	;wreg free
  2536  0015C8  C00D  F041         	movff	?___ftmul,exp@x
  2537  0015CC  C00E  F042         	movff	?___ftmul+1,exp@x+1
  2538  0015D0  C00F  F043         	movff	?___ftmul+2,exp@x+2
  2539  0015D4  C041  F02E         	movff	exp@x,floor@x
  2540  0015D8  C042  F02F         	movff	exp@x+1,floor@x+1
  2541  0015DC  C043  F030         	movff	exp@x+2,floor@x+2
  2542  0015E0  EC11  F010         	call	_floor	;wreg free
  2543  0015E4  C02E  F044         	movff	?_floor,_exp$2346
  2544  0015E8  C02F  F045         	movff	?_floor+1,_exp$2346+1
  2545  0015EC  C030  F046         	movff	?_floor+2,_exp$2346+2
  2546  0015F0  C044  F00D         	movff	_exp$2346,___fttol@f1
  2547  0015F4  C045  F00E         	movff	_exp$2346+1,___fttol@f1+1
  2548  0015F8  C046  F00F         	movff	_exp$2346+2,___fttol@f1+2
  2549  0015FC  ECAA  F00E         	call	___fttol	;wreg free
  2550  001600  C00D  F047         	movff	?___fttol,exp@exponent
  2551  001604  C00E  F048         	movff	?___fttol+1,exp@exponent+1
  2552  001608  C041  F02E         	movff	exp@x,___ftsub@f1
  2553  00160C  C042  F02F         	movff	exp@x+1,___ftsub@f1+1
  2554  001610  C043  F030         	movff	exp@x+2,___ftsub@f1+2
  2555  001614  C047  F009         	movff	exp@exponent,___awtoft@c
  2556  001618  C048  F00A         	movff	exp@exponent+1,___awtoft@c+1
  2557  00161C  EC4B  F014         	call	___awtoft	;wreg free
  2558  001620  C009  F031         	movff	?___awtoft,___ftsub@f2
  2559  001624  C00A  F032         	movff	?___awtoft+1,___ftsub@f2+1
  2560  001628  C00B  F033         	movff	?___awtoft+2,___ftsub@f2+2
  2561  00162C  ECED  F013         	call	___ftsub	;wreg free
  2562  001630  C02E  F041         	movff	?___ftsub,exp@x
  2563  001634  C02F  F042         	movff	?___ftsub+1,exp@x+1
  2564  001638  C030  F043         	movff	?___ftsub+2,exp@x+2
  2565  00163C  C041  F02E         	movff	exp@x,eval_poly@x
  2566  001640  C042  F02F         	movff	exp@x+1,eval_poly@x+1
  2567  001644  C043  F030         	movff	exp@x+2,eval_poly@x+2
  2568  001648  0E0F               	movlw	low exp@coeff
  2569  00164A  6E31               	movwf	eval_poly@d,c
  2570  00164C  0E0F               	movlw	high exp@coeff
  2571  00164E  6E32               	movwf	eval_poly@d+1,c
  2572  001650  0E00               	movlw	0
  2573  001652  6E34               	movwf	eval_poly@n+1,c
  2574  001654  0E09               	movlw	9
  2575  001656  6E33               	movwf	eval_poly@n,c
  2576  001658  EC80  F010         	call	_eval_poly	;wreg free
  2577  00165C  C02E  F03A         	movff	?_eval_poly,ldexp@value
  2578  001660  C02F  F03B         	movff	?_eval_poly+1,ldexp@value+1
  2579  001664  C030  F03C         	movff	?_eval_poly+2,ldexp@value+2
  2580  001668  C047  F03D         	movff	exp@exponent,ldexp@newexp
  2581  00166C  C048  F03E         	movff	exp@exponent+1,ldexp@newexp+1
  2582  001670  ECE9  F010         	call	_ldexp	;wreg free
  2583  001674  C03A  F041         	movff	?_ldexp,exp@x
  2584  001678  C03B  F042         	movff	?_ldexp+1,exp@x+1
  2585  00167C  C03C  F043         	movff	?_ldexp+2,exp@x+2
  2586  001680  5049               	movf	exp@sign,w,c
  2587  001682  B4D8               	btfsc	status,2,c
  2588  001684  D025               	goto	l1046
  2589  001686  2841               	incf	exp@x,w,c
  2590  001688  E10E               	bnz	l2906
  2591  00168A  0E7F               	movlw	127
  2592  00168C  1842               	xorwf	exp@x+1,w,c
  2593  00168E  E10B               	bnz	l2906
  2594  001690  0E7F               	movlw	127
  2595  001692  1843               	xorwf	exp@x+2,w,c
  2596  001694  A4D8               	btfss	status,2,c
  2597  001696  D007               	goto	l1047
  2598  001698  0E00               	movlw	0
  2599  00169A  6E41               	movwf	?_exp,c
  2600  00169C  0E00               	movlw	0
  2601  00169E  6E42               	movwf	?_exp+1,c
  2602  0016A0  0E00               	movlw	0
  2603  0016A2  6E43               	movwf	?_exp+2,c
  2604  0016A4  0012               	return	
  2605  0016A6                     l1047:
  2606  0016A6                     l2906:
  2607  0016A6  0E00               	movlw	0
  2608  0016A8  6E09               	movwf	___ftdiv@f1,c
  2609  0016AA  0E80               	movlw	128
  2610  0016AC  6E0A               	movwf	___ftdiv@f1+1,c
  2611  0016AE  0E3F               	movlw	63
  2612  0016B0  6E0B               	movwf	___ftdiv@f1+2,c
  2613  0016B2  C041  F00C         	movff	exp@x,___ftdiv@f2
  2614  0016B6  C042  F00D         	movff	exp@x+1,___ftdiv@f2+1
  2615  0016BA  C043  F00E         	movff	exp@x+2,___ftdiv@f2+2
  2616  0016BE  EC9E  F00F         	call	___ftdiv	;wreg free
  2617  0016C2  C009  F041         	movff	?___ftdiv,?_exp
  2618  0016C6  C00A  F042         	movff	?___ftdiv+1,?_exp+1
  2619  0016CA  C00B  F043         	movff	?___ftdiv+2,?_exp+2
  2620  0016CE  0012               	return	
  2621  0016D0                     l1046:
  2622  0016D0  C041  F041         	movff	exp@x,?_exp
  2623  0016D4  C042  F042         	movff	exp@x+1,?_exp+1
  2624  0016D8  C043  F043         	movff	exp@x+2,?_exp+2
  2625  0016DC  0012               	return		;funcret
  2626  0016DE                     __end_of_exp:
  2627                           	opt stack 0
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           postinc0	equ	0xFEE
  2633                           wreg	equ	0xFE8
  2634                           postdec1	equ	0xFE5
  2635                           fsr1l	equ	0xFE1
  2636                           postinc2	equ	0xFDE
  2637                           postdec2	equ	0xFDD
  2638                           fsr2h	equ	0xFDA
  2639                           fsr2l	equ	0xFD9
  2640                           status	equ	0xFD8
  2641                           
  2642 ;; *************** function _ldexp *****************
  2643 ;; Defined at:
  2644 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  value           3   57[COMRAM] unsigned char 
  2647 ;;  newexp          2   60[COMRAM] int 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  3   57[COMRAM] int 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2, status,0
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2659 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2661 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2662 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2663 ;;Total ram usage:        7 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; This function calls:
  2666 ;;		Nothing
  2667 ;; This function is called by:
  2668 ;;		_exp
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text4
  2673  0021D2                     __ptext4:
  2674                           	opt stack 0
  2675  0021D2                     _ldexp:
  2676                           	opt stack 28
  2677                           
  2678                           ;incstack = 0
  2679  0021D2  503A               	movf	ldexp@value,w,c
  2680  0021D4  103B               	iorwf	ldexp@value+1,w,c
  2681  0021D6  103C               	iorwf	ldexp@value+2,w,c
  2682  0021D8  A4D8               	btfss	status,2,c
  2683  0021DA  D007               	goto	l1065
  2684  0021DC  0E00               	movlw	0
  2685  0021DE  6E3A               	movwf	?_ldexp,c
  2686  0021E0  0E00               	movlw	0
  2687  0021E2  6E3B               	movwf	?_ldexp+1,c
  2688  0021E4  0E00               	movlw	0
  2689  0021E6  6E3C               	movwf	?_ldexp+2,c
  2690  0021E8  0012               	return	
  2691  0021EA                     l1065:
  2692  0021EA  503C               	movf	ldexp@value+2,w,c
  2693  0021EC  0B7F               	andlw	127
  2694  0021EE  6E3F               	movwf	??_ldexp& (0+255),c
  2695  0021F0  6A40               	clrf	(??_ldexp+1)& (0+255),c
  2696  0021F2  90D8               	bcf	status,0,c
  2697  0021F4  363F               	rlcf	??_ldexp,f,c
  2698  0021F6  3640               	rlcf	??_ldexp+1,f,c
  2699  0021F8  503F               	movf	??_ldexp,w,c
  2700  0021FA  263D               	addwf	ldexp@newexp,f,c
  2701  0021FC  5040               	movf	??_ldexp+1,w,c
  2702  0021FE  223E               	addwfc	ldexp@newexp+1,f,c
  2703  002200  AE3B               	btfss	ldexp@value+1,7,c
  2704  002202  D003               	goto	u2610
  2705  002204  6A3F               	clrf	??_ldexp& (0+255),c
  2706  002206  2A3F               	incf	??_ldexp& (0+255),f,c
  2707  002208  D001               	goto	u2618
  2708  00220A                     u2610:
  2709  00220A  6A3F               	clrf	??_ldexp& (0+255),c
  2710  00220C                     u2618:
  2711  00220C  503F               	movf	??_ldexp,w,c
  2712  00220E  263D               	addwf	ldexp@newexp,f,c
  2713  002210  0E00               	movlw	0
  2714  002212  223E               	addwfc	ldexp@newexp+1,f,c
  2715  002214  AE3E               	btfss	ldexp@newexp+1,7,c
  2716  002216  D00C               	goto	l1067
  2717  002218  0E00               	movlw	0
  2718  00221A  0100               	movlb	0	; () banked
  2719  00221C  6F95               	movwf	(_errno+1)& (0+255),b
  2720  00221E  0E22               	movlw	34
  2721  002220  6F94               	movwf	_errno& (0+255),b
  2722  002222  0E00               	movlw	0
  2723  002224  6E3A               	movwf	?_ldexp,c
  2724  002226  0E00               	movlw	0
  2725  002228  6E3B               	movwf	?_ldexp+1,c
  2726  00222A  0E00               	movlw	0
  2727  00222C                     L1:
  2728  00222C  6E3C               	movwf	?_ldexp+2,c
  2729                           
  2730                           ; BSR set to: 0
  2731  00222E  0012               	return	
  2732  002230                     l1067:
  2733                           
  2734                           ; BSR set to: 0
  2735  002230  BE3E               	btfsc	ldexp@newexp+1,7,c
  2736  002232  D016               	goto	l1069
  2737  002234  043E               	decf	ldexp@newexp+1,w,c
  2738  002236  A0D8               	btfss	status,0,c
  2739  002238  D013               	goto	l1069
  2740  00223A  0E00               	movlw	0
  2741  00223C  0100               	movlb	0	; () banked
  2742  00223E  6F95               	movwf	(_errno+1)& (0+255),b
  2743  002240  0E22               	movlw	34
  2744  002242  6F94               	movwf	_errno& (0+255),b
  2745                           
  2746                           ; BSR set to: 0
  2747  002244  AE3C               	btfss	ldexp@value+2,7,c
  2748  002246  D006               	goto	l1070
  2749                           
  2750                           ; BSR set to: 0
  2751  002248  0EFF               	movlw	255
  2752  00224A  6E3A               	movwf	?_ldexp,c
  2753  00224C  0E7F               	movlw	127
  2754  00224E  6E3B               	movwf	?_ldexp+1,c
  2755  002250  0EFF               	movlw	255
  2756  002252  D7EC               	goto	L1
  2757  002254                     l1070:
  2758                           
  2759                           ; BSR set to: 0
  2760                           
  2761                           ; BSR set to: 0
  2762  002254  0EFF               	movlw	255
  2763  002256  6E3A               	movwf	?_ldexp,c
  2764  002258  0E7F               	movlw	127
  2765  00225A  6E3B               	movwf	?_ldexp+1,c
  2766  00225C  0E7F               	movlw	127
  2767  00225E  D7E6               	goto	L1
  2768  002260                     l1069:
  2769                           
  2770                           ; BSR set to: 0
  2771  002260  343E               	rlcf	ldexp@newexp+1,w,c
  2772  002262  303E               	rrcf	ldexp@newexp+1,w,c
  2773  002264  6E40               	movwf	(??_ldexp+1)& (0+255),c
  2774  002266  303D               	rrcf	ldexp@newexp,w,c
  2775  002268  6E3F               	movwf	??_ldexp& (0+255),c
  2776  00226A  503C               	movf	ldexp@value+2,w,c
  2777  00226C  183F               	xorwf	??_ldexp,w,c
  2778  00226E  0B80               	andlw	-128
  2779  002270  183F               	xorwf	??_ldexp,w,c
  2780  002272  6E3C               	movwf	ldexp@value+2,c
  2781  002274  C03D  F03F         	movff	ldexp@newexp,??_ldexp
  2782  002278  0E01               	movlw	1
  2783  00227A  163F               	andwf	??_ldexp,f,c
  2784  00227C  323F               	rrcf	??_ldexp,f,c
  2785  00227E  323F               	rrcf	??_ldexp,f,c
  2786  002280  503B               	movf	ldexp@value+1,w,c
  2787  002282  183F               	xorwf	??_ldexp,w,c
  2788  002284  0B7F               	andlw	-129
  2789  002286  183F               	xorwf	??_ldexp,w,c
  2790  002288  6E3B               	movwf	ldexp@value+1,c
  2791  00228A  C03A  F03A         	movff	ldexp@value,?_ldexp
  2792  00228E  C03B  F03B         	movff	ldexp@value+1,?_ldexp+1
  2793  002292  C03C  F03C         	movff	ldexp@value+2,?_ldexp+2
  2794  002296  0012               	return	
  2795  002298                     __end_of_ldexp:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           postdec1	equ	0xFE5
  2804                           fsr1l	equ	0xFE1
  2805                           postinc2	equ	0xFDE
  2806                           postdec2	equ	0xFDD
  2807                           fsr2h	equ	0xFDA
  2808                           fsr2l	equ	0xFD9
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _floor *****************
  2812 ;; Defined at:
  2813 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  x               3   45[COMRAM] int 
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  i               3   48[COMRAM] int 
  2818 ;;  expon           2   51[COMRAM] int 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  3   45[COMRAM] int 
  2821 ;; Registers used:
  2822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2828 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2829 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2831 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2832 ;;Total ram usage:        8 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    2
  2835 ;; This function calls:
  2836 ;;		___altoft
  2837 ;;		___ftadd
  2838 ;;		___ftge
  2839 ;;		___fttol
  2840 ;;		_frexp
  2841 ;; This function is called by:
  2842 ;;		_exp
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text5
  2847  002022                     __ptext5:
  2848                           	opt stack 0
  2849  002022                     _floor:
  2850                           	opt stack 26
  2851                           
  2852                           ;incstack = 0
  2853  002022  C02E  F001         	movff	floor@x,frexp@value
  2854  002026  C02F  F002         	movff	floor@x+1,frexp@value+1
  2855  00202A  C030  F003         	movff	floor@x+2,frexp@value+2
  2856  00202E  0E34               	movlw	low floor@expon
  2857  002030  6E04               	movwf	frexp@eptr,c
  2858  002032  0E00               	movlw	high floor@expon
  2859  002034  6E05               	movwf	frexp@eptr+1,c
  2860  002036  ECA3  F011         	call	_frexp	;wreg free
  2861  00203A  AE35               	btfss	floor@expon+1,7,c
  2862  00203C  D010               	goto	l1052
  2863  00203E  AE30               	btfss	floor@x+2,7,c
  2864  002040  D007               	goto	l1053
  2865  002042  0E00               	movlw	0
  2866  002044  6E2E               	movwf	?_floor,c
  2867  002046  0E80               	movlw	128
  2868  002048  6E2F               	movwf	?_floor+1,c
  2869  00204A  0EBF               	movlw	191
  2870  00204C  6E30               	movwf	?_floor+2,c
  2871  00204E  0012               	return	
  2872  002050                     l1053:
  2873  002050  0E00               	movlw	0
  2874  002052  6E2E               	movwf	?_floor,c
  2875  002054  0E00               	movlw	0
  2876  002056  6E2F               	movwf	?_floor+1,c
  2877  002058  0E00               	movlw	0
  2878  00205A  6E30               	movwf	?_floor+2,c
  2879  00205C  0012               	return	
  2880  00205E                     l1052:
  2881  00205E  5035               	movf	floor@expon+1,w,c
  2882  002060  E104               	bnz	u2570
  2883  002062  0E15               	movlw	21
  2884  002064  5C34               	subwf	floor@expon,w,c
  2885  002066  A0D8               	btfss	status,0,c
  2886  002068  D007               	goto	l1055
  2887  00206A                     u2570:
  2888  00206A  C02E  F02E         	movff	floor@x,?_floor
  2889  00206E  C02F  F02F         	movff	floor@x+1,?_floor+1
  2890  002072  C030  F030         	movff	floor@x+2,?_floor+2
  2891  002076  0012               	return	
  2892  002078                     l1055:
  2893  002078  C02E  F00D         	movff	floor@x,___fttol@f1
  2894  00207C  C02F  F00E         	movff	floor@x+1,___fttol@f1+1
  2895  002080  C030  F00F         	movff	floor@x+2,___fttol@f1+2
  2896  002084  ECAA  F00E         	call	___fttol	;wreg free
  2897  002088  C00D  F01C         	movff	?___fttol,___altoft@c
  2898  00208C  C00E  F01D         	movff	?___fttol+1,___altoft@c+1
  2899  002090  C00F  F01E         	movff	?___fttol+2,___altoft@c+2
  2900  002094  C010  F01F         	movff	?___fttol+3,___altoft@c+3
  2901  002098  EC75  F012         	call	___altoft	;wreg free
  2902  00209C  C01C  F031         	movff	?___altoft,floor@i
  2903  0020A0  C01D  F032         	movff	?___altoft+1,floor@i+1
  2904  0020A4  C01E  F033         	movff	?___altoft+2,floor@i+2
  2905  0020A8  C02E  F001         	movff	floor@x,___ftge@ff1
  2906  0020AC  C02F  F002         	movff	floor@x+1,___ftge@ff1+1
  2907  0020B0  C030  F003         	movff	floor@x+2,___ftge@ff1+2
  2908  0020B4  C031  F004         	movff	floor@i,___ftge@ff2
  2909  0020B8  C032  F005         	movff	floor@i+1,___ftge@ff2+1
  2910  0020BC  C033  F006         	movff	floor@i+2,___ftge@ff2+2
  2911  0020C0  ECEB  F011         	call	___ftge	;wreg free
  2912  0020C4  B0D8               	btfsc	status,0,c
  2913  0020C6  D015               	goto	l1056
  2914  0020C8  C031  F022         	movff	floor@i,___ftadd@f1
  2915  0020CC  C032  F023         	movff	floor@i+1,___ftadd@f1+1
  2916  0020D0  C033  F024         	movff	floor@i+2,___ftadd@f1+2
  2917  0020D4  0E00               	movlw	0
  2918  0020D6  6E25               	movwf	___ftadd@f2,c
  2919  0020D8  0E80               	movlw	128
  2920  0020DA  6E26               	movwf	___ftadd@f2+1,c
  2921  0020DC  0EBF               	movlw	191
  2922  0020DE  6E27               	movwf	___ftadd@f2+2,c
  2923  0020E0  EC6F  F00B         	call	___ftadd	;wreg free
  2924  0020E4  C022  F02E         	movff	?___ftadd,?_floor
  2925  0020E8  C023  F02F         	movff	?___ftadd+1,?_floor+1
  2926  0020EC  C024  F030         	movff	?___ftadd+2,?_floor+2
  2927  0020F0  0012               	return	
  2928  0020F2                     l1056:
  2929  0020F2  C031  F02E         	movff	floor@i,?_floor
  2930  0020F6  C032  F02F         	movff	floor@i+1,?_floor+1
  2931  0020FA  C033  F030         	movff	floor@i+2,?_floor+2
  2932  0020FE  0012               	return		;funcret
  2933  002100                     __end_of_floor:
  2934                           	opt stack 0
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1l	equ	0xFE1
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _frexp *****************
  2950 ;; Defined at:
  2951 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  value           3    0[COMRAM] int 
  2954 ;;  eptr            2    3[COMRAM] PTR int 
  2955 ;;		 -> log@exponent(2), floor@expon(2), 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  3    0[COMRAM] PTR int 
  2960 ;; Registers used:
  2961 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2967 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2970 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2971 ;;Total ram usage:        7 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_floor
  2977 ;;		_log
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text6
  2982  002346                     __ptext6:
  2983                           	opt stack 0
  2984  002346                     _frexp:
  2985                           	opt stack 28
  2986                           
  2987                           ;incstack = 0
  2988  002346  5001               	movf	frexp@value,w,c
  2989  002348  1002               	iorwf	frexp@value+1,w,c
  2990  00234A  1003               	iorwf	frexp@value+2,w,c
  2991  00234C  A4D8               	btfss	status,2,c
  2992  00234E  D00F               	goto	l1061
  2993  002350  C004  FFD9         	movff	frexp@eptr,fsr2l
  2994  002354  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2995  002358  0E00               	movlw	0
  2996  00235A  6EDE               	movwf	postinc2,c
  2997  00235C  0E00               	movlw	0
  2998  00235E  6EDD               	movwf	postdec2,c
  2999  002360  0E00               	movlw	0
  3000  002362  6E01               	movwf	?_frexp,c
  3001  002364  0E00               	movlw	0
  3002  002366  6E02               	movwf	?_frexp+1,c
  3003  002368  0E00               	movlw	0
  3004  00236A  6E03               	movwf	?_frexp+2,c
  3005  00236C  0012               	return	
  3006  00236E                     l1061:
  3007  00236E  5003               	movf	frexp@value+2,w,c
  3008  002370  0B7F               	andlw	127
  3009  002372  6E06               	movwf	??_frexp& (0+255),c
  3010  002374  6A07               	clrf	(??_frexp+1)& (0+255),c
  3011  002376  90D8               	bcf	status,0,c
  3012  002378  3606               	rlcf	??_frexp,f,c
  3013  00237A  3607               	rlcf	??_frexp+1,f,c
  3014  00237C  C004  FFD9         	movff	frexp@eptr,fsr2l
  3015  002380  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3016  002384  C006  FFDE         	movff	??_frexp,postinc2
  3017  002388  C007  FFDD         	movff	??_frexp+1,postdec2
  3018  00238C  AE02               	btfss	frexp@value+1,7,c
  3019  00238E  D003               	goto	u2370
  3020  002390  6A06               	clrf	??_frexp& (0+255),c
  3021  002392  2A06               	incf	??_frexp& (0+255),f,c
  3022  002394  D001               	goto	u2378
  3023  002396                     u2370:
  3024  002396  6A06               	clrf	??_frexp& (0+255),c
  3025  002398                     u2378:
  3026  002398  5006               	movf	??_frexp,w,c
  3027  00239A  C004  FFD9         	movff	frexp@eptr,fsr2l
  3028  00239E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3029  0023A2  12DE               	iorwf	postinc2,f,c
  3030  0023A4  0E00               	movlw	0
  3031  0023A6  12DD               	iorwf	postdec2,f,c
  3032  0023A8  C004  FFD9         	movff	frexp@eptr,fsr2l
  3033  0023AC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3034  0023B0  0E82               	movlw	130
  3035  0023B2  26DE               	addwf	postinc2,f,c
  3036  0023B4  0EFF               	movlw	255
  3037  0023B6  22DD               	addwfc	postdec2,f,c
  3038  0023B8  8003               	bsf	frexp@value+2,0,c
  3039  0023BA  8203               	bsf	frexp@value+2,1,c
  3040  0023BC  8403               	bsf	frexp@value+2,2,c
  3041  0023BE  8603               	bsf	frexp@value+2,3,c
  3042  0023C0  8803               	bsf	frexp@value+2,4,c
  3043  0023C2  8A03               	bsf	frexp@value+2,5,c
  3044  0023C4  9C03               	bcf	frexp@value+2,6,c
  3045  0023C6  9E02               	bcf	frexp@value+1,7,c
  3046  0023C8  C001  F001         	movff	frexp@value,?_frexp
  3047  0023CC  C002  F002         	movff	frexp@value+1,?_frexp+1
  3048  0023D0  C003  F003         	movff	frexp@value+2,?_frexp+2
  3049  0023D4  0012               	return	
  3050  0023D6                     __end_of_frexp:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           postinc0	equ	0xFEE
  3057                           wreg	equ	0xFE8
  3058                           postdec1	equ	0xFE5
  3059                           fsr1l	equ	0xFE1
  3060                           postinc2	equ	0xFDE
  3061                           postdec2	equ	0xFDD
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function ___fttol *****************
  3067 ;; Defined at:
  3068 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  f1              3   12[COMRAM] float 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  lval            4   22[COMRAM] unsigned long 
  3073 ;;  exp1            1   26[COMRAM] unsigned char 
  3074 ;;  sign1           1   21[COMRAM] unsigned char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  4   12[COMRAM] long 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3084 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3085 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3086 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3087 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3088 ;;Total ram usage:       15 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_main
  3094 ;;		_pow
  3095 ;;		_exp
  3096 ;;		_floor
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text7
  3101  001D54                     __ptext7:
  3102                           	opt stack 0
  3103  001D54                     ___fttol:
  3104                           	opt stack 27
  3105                           
  3106                           ;incstack = 0
  3107  001D54  C00F  F011         	movff	___fttol@f1+2,??___fttol
  3108  001D58  6A12               	clrf	(??___fttol+1)& (0+255),c
  3109  001D5A  6A13               	clrf	(??___fttol+2)& (0+255),c
  3110  001D5C  340E               	rlcf	___fttol@f1+1,w,c
  3111  001D5E  3611               	rlcf	??___fttol& (0+255),f,c
  3112  001D60  E301               	bnc	u2221
  3113  001D62  8012               	bsf	(??___fttol+1)& (0+255),0,c
  3114  001D64                     u2221:
  3115  001D64  5011               	movf	??___fttol,w,c
  3116  001D66  6E1B               	movwf	___fttol@exp1,c
  3117  001D68  501B               	movf	___fttol@exp1,w,c
  3118  001D6A  A4D8               	btfss	status,2,c
  3119  001D6C  D009               	goto	l762
  3120  001D6E  0E00               	movlw	0
  3121  001D70  6E0D               	movwf	?___fttol,c
  3122  001D72  0E00               	movlw	0
  3123  001D74  6E0E               	movwf	?___fttol+1,c
  3124  001D76  0E00               	movlw	0
  3125  001D78  6E0F               	movwf	?___fttol+2,c
  3126  001D7A  0E00               	movlw	0
  3127  001D7C  6E10               	movwf	?___fttol+3,c
  3128  001D7E  0012               	return	
  3129  001D80                     l762:
  3130  001D80  0E17               	movlw	23
  3131  001D82  6E11               	movwf	??___fttol& (0+255),c
  3132  001D84  C00D  F012         	movff	___fttol@f1,??___fttol+1
  3133  001D88  C00E  F013         	movff	___fttol@f1+1,??___fttol+2
  3134  001D8C  C00F  F014         	movff	___fttol@f1+2,??___fttol+3
  3135  001D90  2811               	incf	??___fttol,w,c
  3136  001D92  6E15               	movwf	(??___fttol+4)& (0+255),c
  3137  001D94  D004               	goto	u2240
  3138  001D96                     u2245:
  3139  001D96  90D8               	bcf	status,0,c
  3140  001D98  3214               	rrcf	??___fttol+3,f,c
  3141  001D9A  3213               	rrcf	??___fttol+2,f,c
  3142  001D9C  3212               	rrcf	??___fttol+1,f,c
  3143  001D9E                     u2240:
  3144  001D9E  2E15               	decfsz	(??___fttol+4)& (0+255),f,c
  3145  001DA0  D7FA               	goto	u2245
  3146  001DA2  5012               	movf	??___fttol+1,w,c
  3147  001DA4  6E16               	movwf	___fttol@sign1,c
  3148  001DA6  8E0E               	bsf	___fttol@f1+1,7,c
  3149  001DA8  0EFF               	movlw	255
  3150  001DAA  160D               	andwf	___fttol@f1,f,c
  3151  001DAC  0EFF               	movlw	255
  3152  001DAE  160E               	andwf	___fttol@f1+1,f,c
  3153  001DB0  0E00               	movlw	0
  3154  001DB2  160F               	andwf	___fttol@f1+2,f,c
  3155  001DB4  500D               	movf	___fttol@f1,w,c
  3156  001DB6  6E17               	movwf	___fttol@lval,c
  3157  001DB8  500E               	movf	___fttol@f1+1,w,c
  3158  001DBA  6E18               	movwf	___fttol@lval+1,c
  3159  001DBC  500F               	movf	___fttol@f1+2,w,c
  3160  001DBE  6E19               	movwf	___fttol@lval+2,c
  3161  001DC0  6A1A               	clrf	___fttol@lval+3,c
  3162  001DC2  0E8E               	movlw	142
  3163  001DC4  5E1B               	subwf	___fttol@exp1,f,c
  3164  001DC6  AE1B               	btfss	___fttol@exp1,7,c
  3165  001DC8  D016               	goto	l764
  3166  001DCA  501B               	movf	___fttol@exp1,w,c
  3167  001DCC  0A80               	xorlw	128
  3168  001DCE  0F8F               	addlw	143
  3169  001DD0  B0D8               	btfsc	status,0,c
  3170  001DD2  D009               	goto	l765
  3171  001DD4  0E00               	movlw	0
  3172  001DD6  6E0D               	movwf	?___fttol,c
  3173  001DD8  0E00               	movlw	0
  3174  001DDA  6E0E               	movwf	?___fttol+1,c
  3175  001DDC  0E00               	movlw	0
  3176  001DDE  6E0F               	movwf	?___fttol+2,c
  3177  001DE0  0E00               	movlw	0
  3178  001DE2  6E10               	movwf	?___fttol+3,c
  3179  001DE4  0012               	return	
  3180  001DE6                     l765:
  3181  001DE6  90D8               	bcf	status,0,c
  3182  001DE8  321A               	rrcf	___fttol@lval+3,f,c
  3183  001DEA  3219               	rrcf	___fttol@lval+2,f,c
  3184  001DEC  3218               	rrcf	___fttol@lval+1,f,c
  3185  001DEE  3217               	rrcf	___fttol@lval,f,c
  3186  001DF0  3E1B               	incfsz	___fttol@exp1,f,c
  3187  001DF2  D7F9               	goto	l765
  3188  001DF4  D015               	goto	u2280
  3189  001DF6                     l764:
  3190  001DF6  0E17               	movlw	23
  3191  001DF8  641B               	cpfsgt	___fttol@exp1,c
  3192  001DFA  D00F               	goto	l770
  3193  001DFC  0E00               	movlw	0
  3194  001DFE  6E0D               	movwf	?___fttol,c
  3195  001E00  0E00               	movlw	0
  3196  001E02  6E0E               	movwf	?___fttol+1,c
  3197  001E04  0E00               	movlw	0
  3198  001E06  6E0F               	movwf	?___fttol+2,c
  3199  001E08  0E00               	movlw	0
  3200  001E0A  6E10               	movwf	?___fttol+3,c
  3201  001E0C  0012               	return	
  3202  001E0E  90D8               	bcf	status,0,c
  3203  001E10  3617               	rlcf	___fttol@lval,f,c
  3204  001E12  3618               	rlcf	___fttol@lval+1,f,c
  3205  001E14  3619               	rlcf	___fttol@lval+2,f,c
  3206  001E16  361A               	rlcf	___fttol@lval+3,f,c
  3207  001E18  061B               	decf	___fttol@exp1,f,c
  3208  001E1A                     l770:
  3209  001E1A  501B               	movf	___fttol@exp1,w,c
  3210  001E1C  A4D8               	btfss	status,2,c
  3211  001E1E  D7F7               	goto	l771
  3212  001E20                     u2280:
  3213  001E20  5016               	movf	___fttol@sign1,w,c
  3214  001E22  B4D8               	btfsc	status,2,c
  3215  001E24  D008               	goto	l773
  3216  001E26  1E1A               	comf	___fttol@lval+3,f,c
  3217  001E28  1E19               	comf	___fttol@lval+2,f,c
  3218  001E2A  1E18               	comf	___fttol@lval+1,f,c
  3219  001E2C  6C17               	negf	___fttol@lval,c
  3220  001E2E  0E00               	movlw	0
  3221  001E30  2218               	addwfc	___fttol@lval+1,f,c
  3222  001E32  2219               	addwfc	___fttol@lval+2,f,c
  3223  001E34  221A               	addwfc	___fttol@lval+3,f,c
  3224  001E36                     l773:
  3225  001E36  C017  F00D         	movff	___fttol@lval,?___fttol
  3226  001E3A  C018  F00E         	movff	___fttol@lval+1,?___fttol+1
  3227  001E3E  C019  F00F         	movff	___fttol@lval+2,?___fttol+2
  3228  001E42  C01A  F010         	movff	___fttol@lval+3,?___fttol+3
  3229  001E46  0012               	return	
  3230  001E48                     __end_of___fttol:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function ___ftge *****************
  3247 ;; Defined at:
  3248 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  ff1             3    0[COMRAM] float 
  3251 ;;  ff2             3    3[COMRAM] float 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;		None               void
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3263 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3265 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3266 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3267 ;;Total ram usage:        9 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_pow
  3273 ;;		_exp
  3274 ;;		_floor
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text8
  3279  0023D6                     __ptext8:
  3280                           	opt stack 0
  3281  0023D6                     ___ftge:
  3282                           	opt stack 27
  3283                           
  3284                           ;incstack = 0
  3285  0023D6  AE03               	btfss	___ftge@ff1+2,7,c
  3286  0023D8  D016               	goto	l734
  3287  0023DA  C001  F007         	movff	___ftge@ff1,??___ftge
  3288  0023DE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  3289  0023E2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  3290  0023E6  1E07               	comf	??___ftge,f,c
  3291  0023E8  1E08               	comf	??___ftge+1,f,c
  3292  0023EA  1E09               	comf	??___ftge+2,f,c
  3293  0023EC  2A07               	incf	??___ftge,f,c
  3294  0023EE  0E00               	movlw	0
  3295  0023F0  2208               	addwfc	??___ftge+1,f,c
  3296  0023F2  2209               	addwfc	??___ftge+2,f,c
  3297  0023F4  0E00               	movlw	0
  3298  0023F6  2407               	addwf	??___ftge,w,c
  3299  0023F8  6E01               	movwf	___ftge@ff1,c
  3300  0023FA  0E00               	movlw	0
  3301  0023FC  2008               	addwfc	??___ftge+1,w,c
  3302  0023FE  6E02               	movwf	___ftge@ff1+1,c
  3303  002400  0E80               	movlw	128
  3304  002402  2009               	addwfc	??___ftge+2,w,c
  3305  002404  6E03               	movwf	___ftge@ff1+2,c
  3306  002406                     l734:
  3307  002406  AE06               	btfss	___ftge@ff2+2,7,c
  3308  002408  D016               	goto	l735
  3309  00240A  C004  F007         	movff	___ftge@ff2,??___ftge
  3310  00240E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  3311  002412  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  3312  002416  1E07               	comf	??___ftge,f,c
  3313  002418  1E08               	comf	??___ftge+1,f,c
  3314  00241A  1E09               	comf	??___ftge+2,f,c
  3315  00241C  2A07               	incf	??___ftge,f,c
  3316  00241E  0E00               	movlw	0
  3317  002420  2208               	addwfc	??___ftge+1,f,c
  3318  002422  2209               	addwfc	??___ftge+2,f,c
  3319  002424  0E00               	movlw	0
  3320  002426  2407               	addwf	??___ftge,w,c
  3321  002428  6E04               	movwf	___ftge@ff2,c
  3322  00242A  0E00               	movlw	0
  3323  00242C  2008               	addwfc	??___ftge+1,w,c
  3324  00242E  6E05               	movwf	___ftge@ff2+1,c
  3325  002430  0E80               	movlw	128
  3326  002432  2009               	addwfc	??___ftge+2,w,c
  3327  002434  6E06               	movwf	___ftge@ff2+2,c
  3328  002436                     l735:
  3329  002436  0E00               	movlw	0
  3330  002438  1A01               	xorwf	___ftge@ff1,f,c
  3331  00243A  0E00               	movlw	0
  3332  00243C  1A02               	xorwf	___ftge@ff1+1,f,c
  3333  00243E  0E80               	movlw	128
  3334  002440  1A03               	xorwf	___ftge@ff1+2,f,c
  3335  002442  0E00               	movlw	0
  3336  002444  1A04               	xorwf	___ftge@ff2,f,c
  3337  002446  0E00               	movlw	0
  3338  002448  1A05               	xorwf	___ftge@ff2+1,f,c
  3339  00244A  0E80               	movlw	128
  3340  00244C  1A06               	xorwf	___ftge@ff2+2,f,c
  3341  00244E  5004               	movf	___ftge@ff2,w,c
  3342  002450  5C01               	subwf	___ftge@ff1,w,c
  3343  002452  5005               	movf	___ftge@ff2+1,w,c
  3344  002454  5802               	subwfb	___ftge@ff1+1,w,c
  3345  002456  5006               	movf	___ftge@ff2+2,w,c
  3346  002458  5803               	subwfb	___ftge@ff1+2,w,c
  3347  00245A  B0D8               	btfsc	status,0,c
  3348  00245C  D002               	goto	l2240
  3349  00245E  90D8               	bcf	status,0,c
  3350  002460  0012               	return	
  3351  002462                     l2240:
  3352  002462  80D8               	bsf	status,0,c
  3353  002464  0012               	return	
  3354  002466                     __end_of___ftge:
  3355                           	opt stack 0
  3356                           tblptru	equ	0xFF8
  3357                           tblptrh	equ	0xFF7
  3358                           tblptrl	equ	0xFF6
  3359                           tablat	equ	0xFF5
  3360                           postinc0	equ	0xFEE
  3361                           wreg	equ	0xFE8
  3362                           postdec1	equ	0xFE5
  3363                           fsr1l	equ	0xFE1
  3364                           postinc2	equ	0xFDE
  3365                           postdec2	equ	0xFDD
  3366                           fsr2h	equ	0xFDA
  3367                           fsr2l	equ	0xFD9
  3368                           status	equ	0xFD8
  3369                           
  3370 ;; *************** function ___altoft *****************
  3371 ;; Defined at:
  3372 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\altoft.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  c               4   27[COMRAM] long 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  sign            1   36[COMRAM] unsigned char 
  3377 ;;  exp             1   35[COMRAM] unsigned char 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  3   27[COMRAM] float 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2, status,0, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3389 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3390 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3391 ;;Total ram usage:       10 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    1
  3394 ;; This function calls:
  3395 ;;		___ftpack
  3396 ;; This function is called by:
  3397 ;;		_floor
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text9
  3402  0024EA                     __ptext9:
  3403                           	opt stack 0
  3404  0024EA                     ___altoft:
  3405                           	opt stack 26
  3406                           
  3407                           ;incstack = 0
  3408  0024EA  0E00               	movlw	0
  3409  0024EC  6E25               	movwf	___altoft@sign,c
  3410  0024EE  0E8E               	movlw	142
  3411  0024F0  6E24               	movwf	___altoft@exp,c
  3412  0024F2  AE1F               	btfss	___altoft@c+3,7,c
  3413  0024F4  D011               	goto	l511
  3414  0024F6  1E1F               	comf	___altoft@c+3,f,c
  3415  0024F8  1E1E               	comf	___altoft@c+2,f,c
  3416  0024FA  1E1D               	comf	___altoft@c+1,f,c
  3417  0024FC  6C1C               	negf	___altoft@c,c
  3418  0024FE  0E00               	movlw	0
  3419  002500  221D               	addwfc	___altoft@c+1,f,c
  3420  002502  221E               	addwfc	___altoft@c+2,f,c
  3421  002504  221F               	addwfc	___altoft@c+3,f,c
  3422  002506  0E01               	movlw	1
  3423  002508  6E25               	movwf	___altoft@sign,c
  3424  00250A  D006               	goto	l511
  3425  00250C  90D8               	bcf	status,0,c
  3426  00250E  321F               	rrcf	___altoft@c+3,f,c
  3427  002510  321E               	rrcf	___altoft@c+2,f,c
  3428  002512  321D               	rrcf	___altoft@c+1,f,c
  3429  002514  321C               	rrcf	___altoft@c,f,c
  3430  002516  2A24               	incf	___altoft@exp,f,c
  3431  002518                     l511:
  3432  002518  0E00               	movlw	0
  3433  00251A  141C               	andwf	___altoft@c,w,c
  3434  00251C  6E20               	movwf	??___altoft& (0+255),c
  3435  00251E  0E00               	movlw	0
  3436  002520  141D               	andwf	___altoft@c+1,w,c
  3437  002522  6E21               	movwf	(??___altoft+1)& (0+255),c
  3438  002524  0E00               	movlw	0
  3439  002526  141E               	andwf	___altoft@c+2,w,c
  3440  002528  6E22               	movwf	(??___altoft+2)& (0+255),c
  3441  00252A  0EFF               	movlw	255
  3442  00252C  141F               	andwf	___altoft@c+3,w,c
  3443  00252E  6E23               	movwf	(??___altoft+3)& (0+255),c
  3444  002530  5020               	movf	??___altoft,w,c
  3445  002532  1021               	iorwf	??___altoft+1,w,c
  3446  002534  1022               	iorwf	??___altoft+2,w,c
  3447  002536  1023               	iorwf	??___altoft+3,w,c
  3448  002538  A4D8               	btfss	status,2,c
  3449  00253A  D7E8               	goto	l512
  3450  00253C  C01C  F001         	movff	___altoft@c,___ftpack@arg
  3451  002540  C01D  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3452  002544  C01E  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3453  002548  C024  F004         	movff	___altoft@exp,___ftpack@exp
  3454  00254C  C025  F005         	movff	___altoft@sign,___ftpack@sign
  3455  002550  EC4C  F011         	call	___ftpack	;wreg free
  3456  002554  C001  F01C         	movff	?___ftpack,?___altoft
  3457  002558  C002  F01D         	movff	?___ftpack+1,?___altoft+1
  3458  00255C  C003  F01E         	movff	?___ftpack+2,?___altoft+2
  3459  002560  0012               	return	
  3460  002562                     __end_of___altoft:
  3461                           	opt stack 0
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           postdec1	equ	0xFE5
  3469                           fsr1l	equ	0xFE1
  3470                           postinc2	equ	0xFDE
  3471                           postdec2	equ	0xFDD
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _eval_poly *****************
  3477 ;; Defined at:
  3478 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  x               3   45[COMRAM] float 
  3481 ;;  d               2   48[COMRAM] PTR const 
  3482 ;;		 -> log@coeff(27), exp@coeff(30), 
  3483 ;;  n               2   50[COMRAM] int 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  res             3   54[COMRAM] int 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  3   45[COMRAM] int 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3495 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3496 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3498 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3499 ;;Total ram usage:       12 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    2
  3502 ;; This function calls:
  3503 ;;		___ftadd
  3504 ;;		___ftmul
  3505 ;;		___wmul
  3506 ;; This function is called by:
  3507 ;;		_exp
  3508 ;;		_log
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text10
  3513  002100                     __ptext10:
  3514                           	opt stack 0
  3515  002100                     _eval_poly:
  3516                           	opt stack 26
  3517                           
  3518                           ;incstack = 0
  3519  002100  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  3520  002104  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  3521  002108  0E00               	movlw	0
  3522  00210A  6E1F               	movwf	___wmul@multiplicand+1,c
  3523  00210C  0E03               	movlw	3
  3524  00210E  6E1E               	movwf	___wmul@multiplicand,c
  3525  002110  ECAA  F014         	call	___wmul	;wreg free
  3526  002114  C031  F035         	movff	eval_poly@d,??_eval_poly
  3527  002118  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  3528  00211C  501C               	movf	?___wmul,w,c
  3529  00211E  2635               	addwf	??_eval_poly,f,c
  3530  002120  501D               	movf	?___wmul+1,w,c
  3531  002122  2236               	addwfc	??_eval_poly+1,f,c
  3532  002124  C035  FFF6         	movff	??_eval_poly,tblptrl
  3533  002128  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  3534  00212C                     	if	0	;tblptru may be non-zero
  3535  00212C                     	endif
  3536  00212C                     	if	0	;tblptru may be non-zero
  3537  00212C                     	endif
  3538  00212C  0009               	tblrd		*+
  3539  00212E  CFF5 F037          	movff	tablat,eval_poly@res
  3540  002132  0009               	tblrd		*+
  3541  002134  CFF5 F038          	movff	tablat,eval_poly@res+1
  3542  002138  000A               	tblrd		*-
  3543  00213A  CFF5 F039          	movff	tablat,eval_poly@res+2
  3544  00213E  D03E               	goto	l1091
  3545  002140  C037  F010         	movff	eval_poly@res,___ftmul@f2
  3546  002144  C038  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  3547  002148  C039  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  3548  00214C  C02E  F00D         	movff	eval_poly@x,___ftmul@f1
  3549  002150  C02F  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  3550  002154  C030  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  3551  002158  EC24  F00F         	call	___ftmul	;wreg free
  3552  00215C  C00D  F022         	movff	?___ftmul,___ftadd@f1
  3553  002160  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  3554  002164  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  3555  002168  0E00               	movlw	0
  3556  00216A  6E1F               	movwf	___wmul@multiplicand+1,c
  3557  00216C  0E03               	movlw	3
  3558  00216E  6E1E               	movwf	___wmul@multiplicand,c
  3559  002170  0633               	decf	eval_poly@n,f,c
  3560  002172  A0D8               	btfss	status,0,c
  3561  002174  0634               	decf	eval_poly@n+1,f,c
  3562  002176  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  3563  00217A  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  3564  00217E  ECAA  F014         	call	___wmul	;wreg free
  3565  002182  C031  F035         	movff	eval_poly@d,??_eval_poly
  3566  002186  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  3567  00218A  501C               	movf	?___wmul,w,c
  3568  00218C  2635               	addwf	??_eval_poly,f,c
  3569  00218E  501D               	movf	?___wmul+1,w,c
  3570  002190  2236               	addwfc	??_eval_poly+1,f,c
  3571  002192  C035  FFF6         	movff	??_eval_poly,tblptrl
  3572  002196  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  3573  00219A                     	if	0	;tblptru may be non-zero
  3574  00219A                     	endif
  3575  00219A                     	if	0	;tblptru may be non-zero
  3576  00219A                     	endif
  3577  00219A  0009               	tblrd		*+
  3578  00219C  CFF5 F025          	movff	tablat,___ftadd@f2
  3579  0021A0  0009               	tblrd		*+
  3580  0021A2  CFF5 F026          	movff	tablat,___ftadd@f2+1
  3581  0021A6  000A               	tblrd		*-
  3582  0021A8  CFF5 F027          	movff	tablat,___ftadd@f2+2
  3583  0021AC  EC6F  F00B         	call	___ftadd	;wreg free
  3584  0021B0  C022  F037         	movff	?___ftadd,eval_poly@res
  3585  0021B4  C023  F038         	movff	?___ftadd+1,eval_poly@res+1
  3586  0021B8  C024  F039         	movff	?___ftadd+2,eval_poly@res+2
  3587  0021BC                     l1091:
  3588  0021BC  5033               	movf	eval_poly@n,w,c
  3589  0021BE  1034               	iorwf	eval_poly@n+1,w,c
  3590  0021C0  A4D8               	btfss	status,2,c
  3591  0021C2  D7BE               	goto	l1092
  3592  0021C4  C037  F02E         	movff	eval_poly@res,?_eval_poly
  3593  0021C8  C038  F02F         	movff	eval_poly@res+1,?_eval_poly+1
  3594  0021CC  C039  F030         	movff	eval_poly@res+2,?_eval_poly+2
  3595  0021D0  0012               	return		;funcret
  3596  0021D2                     __end_of_eval_poly:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postdec1	equ	0xFE5
  3605                           fsr1l	equ	0xFE1
  3606                           postinc2	equ	0xFDE
  3607                           postdec2	equ	0xFDD
  3608                           fsr2h	equ	0xFDA
  3609                           fsr2l	equ	0xFD9
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function ___wmul *****************
  3613 ;; Defined at:
  3614 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  multiplier      2   27[COMRAM] unsigned int 
  3617 ;;  multiplicand    2   29[COMRAM] unsigned int 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  product         2   31[COMRAM] unsigned int 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  2   27[COMRAM] unsigned int 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0, prodl, prodh
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3630 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3632 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3633 ;;Total ram usage:        6 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_main
  3639 ;;		_eval_poly
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text11
  3644  002954                     __ptext11:
  3645                           	opt stack 0
  3646  002954                     ___wmul:
  3647                           	opt stack 27
  3648                           
  3649                           ;incstack = 0
  3650  002954  501C               	movf	___wmul@multiplier,w,c
  3651  002956  021E               	mulwf	___wmul@multiplicand,c
  3652  002958  CFF3 F020          	movff	prodl,___wmul@product
  3653  00295C  CFF4 F021          	movff	prodh,___wmul@product+1
  3654  002960  501C               	movf	___wmul@multiplier,w,c
  3655  002962  021F               	mulwf	___wmul@multiplicand+1,c
  3656  002964  50F3               	movf	prodl,w,c
  3657  002966  2621               	addwf	___wmul@product+1,f,c
  3658  002968  501D               	movf	___wmul@multiplier+1,w,c
  3659  00296A  021E               	mulwf	___wmul@multiplicand,c
  3660  00296C  50F3               	movf	prodl,w,c
  3661  00296E  2621               	addwf	___wmul@product+1,f,c
  3662  002970  C020  F01C         	movff	___wmul@product,?___wmul
  3663  002974  C021  F01D         	movff	___wmul@product+1,?___wmul+1
  3664  002978  0012               	return	
  3665  00297A                     __end_of___wmul:
  3666                           	opt stack 0
  3667                           tblptru	equ	0xFF8
  3668                           tblptrh	equ	0xFF7
  3669                           tblptrl	equ	0xFF6
  3670                           tablat	equ	0xFF5
  3671                           prodh	equ	0xFF4
  3672                           prodl	equ	0xFF3
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           postdec1	equ	0xFE5
  3676                           fsr1l	equ	0xFE1
  3677                           postinc2	equ	0xFDE
  3678                           postdec2	equ	0xFDD
  3679                           fsr2h	equ	0xFDA
  3680                           fsr2l	equ	0xFD9
  3681                           status	equ	0xFD8
  3682                           
  3683 ;; *************** function ___ftmul *****************
  3684 ;; Defined at:
  3685 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  f1              3   12[COMRAM] float 
  3688 ;;  f2              3   15[COMRAM] float 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  3691 ;;  sign            1   26[COMRAM] unsigned char 
  3692 ;;  cntr            1   25[COMRAM] unsigned char 
  3693 ;;  exp             1   21[COMRAM] unsigned char 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  3   12[COMRAM] float 
  3696 ;; Registers used:
  3697 ;;		wreg, status,2, status,0, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3703 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3704 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3705 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3706 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3707 ;;Total ram usage:       15 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    1
  3710 ;; This function calls:
  3711 ;;		___ftpack
  3712 ;; This function is called by:
  3713 ;;		_pow
  3714 ;;		_exp
  3715 ;;		_log
  3716 ;;		_eval_poly
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text12
  3721  001E48                     __ptext12:
  3722                           	opt stack 0
  3723  001E48                     ___ftmul:
  3724                           	opt stack 26
  3725                           
  3726                           ;incstack = 0
  3727  001E48  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  3728  001E4C  6A14               	clrf	(??___ftmul+1)& (0+255),c
  3729  001E4E  6A15               	clrf	(??___ftmul+2)& (0+255),c
  3730  001E50  340E               	rlcf	___ftmul@f1+1,w,c
  3731  001E52  3613               	rlcf	??___ftmul& (0+255),f,c
  3732  001E54  E301               	bnc	u2131
  3733  001E56  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  3734  001E58                     u2131:
  3735  001E58  5013               	movf	??___ftmul,w,c
  3736  001E5A  6E16               	movwf	___ftmul@exp,c
  3737  001E5C  5016               	movf	___ftmul@exp,w,c
  3738  001E5E  A4D8               	btfss	status,2,c
  3739  001E60  D007               	goto	l741
  3740  001E62  0E00               	movlw	0
  3741  001E64  6E0D               	movwf	?___ftmul,c
  3742  001E66  0E00               	movlw	0
  3743  001E68  6E0E               	movwf	?___ftmul+1,c
  3744  001E6A  0E00               	movlw	0
  3745  001E6C  6E0F               	movwf	?___ftmul+2,c
  3746  001E6E  0012               	return	
  3747  001E70                     l741:
  3748  001E70  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  3749  001E74  6A14               	clrf	(??___ftmul+1)& (0+255),c
  3750  001E76  6A15               	clrf	(??___ftmul+2)& (0+255),c
  3751  001E78  3411               	rlcf	___ftmul@f2+1,w,c
  3752  001E7A  3613               	rlcf	??___ftmul& (0+255),f,c
  3753  001E7C  E301               	bnc	u2151
  3754  001E7E  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  3755  001E80                     u2151:
  3756  001E80  5013               	movf	??___ftmul,w,c
  3757  001E82  6E1B               	movwf	___ftmul@sign,c
  3758  001E84  501B               	movf	___ftmul@sign,w,c
  3759  001E86  A4D8               	btfss	status,2,c
  3760  001E88  D007               	goto	l743
  3761  001E8A  0E00               	movlw	0
  3762  001E8C  6E0D               	movwf	?___ftmul,c
  3763  001E8E  0E00               	movlw	0
  3764  001E90  6E0E               	movwf	?___ftmul+1,c
  3765  001E92  0E00               	movlw	0
  3766  001E94  6E0F               	movwf	?___ftmul+2,c
  3767  001E96  0012               	return	
  3768  001E98                     l743:
  3769  001E98  501B               	movf	___ftmul@sign,w,c
  3770  001E9A  0F7B               	addlw	123
  3771  001E9C  2616               	addwf	___ftmul@exp,f,c
  3772  001E9E  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  3773  001EA2  5012               	movf	___ftmul@f2+2,w,c
  3774  001EA4  1A1B               	xorwf	___ftmul@sign,f,c
  3775  001EA6  0E80               	movlw	128
  3776  001EA8  161B               	andwf	___ftmul@sign,f,c
  3777  001EAA  8E0E               	bsf	___ftmul@f1+1,7,c
  3778  001EAC  8E11               	bsf	___ftmul@f2+1,7,c
  3779  001EAE  0EFF               	movlw	255
  3780  001EB0  1610               	andwf	___ftmul@f2,f,c
  3781  001EB2  0EFF               	movlw	255
  3782  001EB4  1611               	andwf	___ftmul@f2+1,f,c
  3783  001EB6  0E00               	movlw	0
  3784  001EB8  1612               	andwf	___ftmul@f2+2,f,c
  3785  001EBA  0E00               	movlw	0
  3786  001EBC  6E17               	movwf	___ftmul@f3_as_product,c
  3787  001EBE  0E00               	movlw	0
  3788  001EC0  6E18               	movwf	___ftmul@f3_as_product+1,c
  3789  001EC2  0E00               	movlw	0
  3790  001EC4  6E19               	movwf	___ftmul@f3_as_product+2,c
  3791  001EC6  0E07               	movlw	7
  3792  001EC8  6E1A               	movwf	___ftmul@cntr,c
  3793  001ECA  A00D               	btfss	___ftmul@f1,0,c
  3794  001ECC  D006               	goto	l745
  3795  001ECE  5010               	movf	___ftmul@f2,w,c
  3796  001ED0  2617               	addwf	___ftmul@f3_as_product,f,c
  3797  001ED2  5011               	movf	___ftmul@f2+1,w,c
  3798  001ED4  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  3799  001ED6  5012               	movf	___ftmul@f2+2,w,c
  3800  001ED8  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  3801  001EDA                     l745:
  3802  001EDA  90D8               	bcf	status,0,c
  3803  001EDC  320F               	rrcf	___ftmul@f1+2,f,c
  3804  001EDE  320E               	rrcf	___ftmul@f1+1,f,c
  3805  001EE0  320D               	rrcf	___ftmul@f1,f,c
  3806  001EE2  90D8               	bcf	status,0,c
  3807  001EE4  3610               	rlcf	___ftmul@f2,f,c
  3808  001EE6  3611               	rlcf	___ftmul@f2+1,f,c
  3809  001EE8  3612               	rlcf	___ftmul@f2+2,f,c
  3810  001EEA  2E1A               	decfsz	___ftmul@cntr,f,c
  3811  001EEC  D7EE               	goto	l744
  3812  001EEE  0E09               	movlw	9
  3813  001EF0  6E1A               	movwf	___ftmul@cntr,c
  3814  001EF2  A00D               	btfss	___ftmul@f1,0,c
  3815  001EF4  D006               	goto	l748
  3816  001EF6  5010               	movf	___ftmul@f2,w,c
  3817  001EF8  2617               	addwf	___ftmul@f3_as_product,f,c
  3818  001EFA  5011               	movf	___ftmul@f2+1,w,c
  3819  001EFC  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  3820  001EFE  5012               	movf	___ftmul@f2+2,w,c
  3821  001F00  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  3822  001F02                     l748:
  3823  001F02  90D8               	bcf	status,0,c
  3824  001F04  320F               	rrcf	___ftmul@f1+2,f,c
  3825  001F06  320E               	rrcf	___ftmul@f1+1,f,c
  3826  001F08  320D               	rrcf	___ftmul@f1,f,c
  3827  001F0A  90D8               	bcf	status,0,c
  3828  001F0C  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  3829  001F0E  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  3830  001F10  3217               	rrcf	___ftmul@f3_as_product,f,c
  3831  001F12  2E1A               	decfsz	___ftmul@cntr,f,c
  3832  001F14  D7EE               	goto	l747
  3833  001F16  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3834  001F1A  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3835  001F1E  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3836  001F22  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  3837  001F26  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  3838  001F2A  EC4C  F011         	call	___ftpack	;wreg free
  3839  001F2E  C001  F00D         	movff	?___ftpack,?___ftmul
  3840  001F32  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  3841  001F36  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  3842  001F3A  0012               	return	
  3843  001F3C                     __end_of___ftmul:
  3844                           	opt stack 0
  3845                           tblptru	equ	0xFF8
  3846                           tblptrh	equ	0xFF7
  3847                           tblptrl	equ	0xFF6
  3848                           tablat	equ	0xFF5
  3849                           prodh	equ	0xFF4
  3850                           prodl	equ	0xFF3
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           postdec1	equ	0xFE5
  3854                           fsr1l	equ	0xFE1
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function ___ftsub *****************
  3862 ;; Defined at:
  3863 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  f1              3   45[COMRAM] float 
  3866 ;;  f2              3   48[COMRAM] float 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;		None
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  3   45[COMRAM] float 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3878 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;Total ram usage:        6 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    2
  3885 ;; This function calls:
  3886 ;;		___ftadd
  3887 ;; This function is called by:
  3888 ;;		_exp
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text13
  3893  0027DA                     __ptext13:
  3894                           	opt stack 0
  3895  0027DA                     ___ftsub:
  3896                           	opt stack 26
  3897                           
  3898                           ;incstack = 0
  3899  0027DA  5031               	movf	___ftsub@f2,w,c
  3900  0027DC  1032               	iorwf	___ftsub@f2+1,w,c
  3901  0027DE  1033               	iorwf	___ftsub@f2+2,w,c
  3902  0027E0  B4D8               	btfsc	status,2,c
  3903  0027E2  D006               	goto	l758
  3904  0027E4  0E00               	movlw	0
  3905  0027E6  1A31               	xorwf	___ftsub@f2,f,c
  3906  0027E8  0E00               	movlw	0
  3907  0027EA  1A32               	xorwf	___ftsub@f2+1,f,c
  3908  0027EC  0E80               	movlw	128
  3909  0027EE  1A33               	xorwf	___ftsub@f2+2,f,c
  3910  0027F0                     l758:
  3911  0027F0  C02E  F022         	movff	___ftsub@f1,___ftadd@f1
  3912  0027F4  C02F  F023         	movff	___ftsub@f1+1,___ftadd@f1+1
  3913  0027F8  C030  F024         	movff	___ftsub@f1+2,___ftadd@f1+2
  3914  0027FC  C031  F025         	movff	___ftsub@f2,___ftadd@f2
  3915  002800  C032  F026         	movff	___ftsub@f2+1,___ftadd@f2+1
  3916  002804  C033  F027         	movff	___ftsub@f2+2,___ftadd@f2+2
  3917  002808  EC6F  F00B         	call	___ftadd	;wreg free
  3918  00280C  C022  F02E         	movff	?___ftadd,?___ftsub
  3919  002810  C023  F02F         	movff	?___ftadd+1,?___ftsub+1
  3920  002814  C024  F030         	movff	?___ftadd+2,?___ftsub+2
  3921  002818  0012               	return	
  3922  00281A                     __end_of___ftsub:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           postinc0	equ	0xFEE
  3931                           wreg	equ	0xFE8
  3932                           postdec1	equ	0xFE5
  3933                           fsr1l	equ	0xFE1
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function ___ftadd *****************
  3941 ;; Defined at:
  3942 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  f1              3   33[COMRAM] float 
  3945 ;;  f2              3   36[COMRAM] float 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  exp1            1   44[COMRAM] unsigned char 
  3948 ;;  exp2            1   43[COMRAM] unsigned char 
  3949 ;;  sign            1   42[COMRAM] unsigned char 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  3   33[COMRAM] float 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3959 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3960 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3961 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3962 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3963 ;;Total ram usage:       12 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    1
  3966 ;; This function calls:
  3967 ;;		___ftpack
  3968 ;; This function is called by:
  3969 ;;		___ftsub
  3970 ;;		_floor
  3971 ;;		_log
  3972 ;;		_eval_poly
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text14
  3977  0016DE                     __ptext14:
  3978                           	opt stack 0
  3979  0016DE                     ___ftadd:
  3980                           	opt stack 26
  3981                           
  3982                           ;incstack = 0
  3983  0016DE  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  3984  0016E2  6A29               	clrf	(??___ftadd+1)& (0+255),c
  3985  0016E4  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  3986  0016E6  3423               	rlcf	___ftadd@f1+1,w,c
  3987  0016E8  3628               	rlcf	??___ftadd& (0+255),f,c
  3988  0016EA  E301               	bnc	u1921
  3989  0016EC  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  3990  0016EE                     u1921:
  3991  0016EE  5028               	movf	??___ftadd,w,c
  3992  0016F0  6E2D               	movwf	___ftadd@exp1,c
  3993  0016F2  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  3994  0016F6  6A29               	clrf	(??___ftadd+1)& (0+255),c
  3995  0016F8  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  3996  0016FA  3426               	rlcf	___ftadd@f2+1,w,c
  3997  0016FC  3628               	rlcf	??___ftadd& (0+255),f,c
  3998  0016FE  E301               	bnc	u1931
  3999  001700  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  4000  001702                     u1931:
  4001  001702  5028               	movf	??___ftadd,w,c
  4002  001704  6E2C               	movwf	___ftadd@exp2,c
  4003  001706  502D               	movf	___ftadd@exp1,w,c
  4004  001708  B4D8               	btfsc	status,2,c
  4005  00170A  D00B               	goto	u1960
  4006  00170C  502C               	movf	___ftadd@exp2,w,c
  4007  00170E  5C2D               	subwf	___ftadd@exp1,w,c
  4008  001710  B0D8               	btfsc	status,0,c
  4009  001712  D00E               	goto	l693
  4010  001714  502D               	movf	___ftadd@exp1,w,c
  4011  001716  0800               	sublw	0
  4012  001718  242C               	addwf	___ftadd@exp2,w,c
  4013  00171A  6E28               	movwf	??___ftadd& (0+255),c
  4014  00171C  0E18               	movlw	24
  4015  00171E  6428               	cpfsgt	??___ftadd,c
  4016  001720  D007               	goto	l693
  4017  001722                     u1960:
  4018  001722  C025  F022         	movff	___ftadd@f2,?___ftadd
  4019  001726  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  4020  00172A  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  4021  00172E  0012               	return	
  4022  001730                     l693:
  4023  001730  502C               	movf	___ftadd@exp2,w,c
  4024  001732  B4D8               	btfsc	status,2,c
  4025  001734  D00B               	goto	u1990
  4026  001736  502D               	movf	___ftadd@exp1,w,c
  4027  001738  5C2C               	subwf	___ftadd@exp2,w,c
  4028  00173A  B0D8               	btfsc	status,0,c
  4029  00173C  D00E               	goto	l697
  4030  00173E  502C               	movf	___ftadd@exp2,w,c
  4031  001740  0800               	sublw	0
  4032  001742  242D               	addwf	___ftadd@exp1,w,c
  4033  001744  6E28               	movwf	??___ftadd& (0+255),c
  4034  001746  0E18               	movlw	24
  4035  001748  6428               	cpfsgt	??___ftadd,c
  4036  00174A  D007               	goto	l697
  4037  00174C                     u1990:
  4038  00174C  C022  F022         	movff	___ftadd@f1,?___ftadd
  4039  001750  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  4040  001754  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  4041  001758  0012               	return	
  4042  00175A                     l697:
  4043  00175A  0E06               	movlw	6
  4044  00175C  6E2B               	movwf	___ftadd@sign,c
  4045  00175E  BE24               	btfsc	___ftadd@f1+2,7,c
  4046  001760  8E2B               	bsf	___ftadd@sign,7,c
  4047  001762  BE27               	btfsc	___ftadd@f2+2,7,c
  4048  001764  8C2B               	bsf	___ftadd@sign,6,c
  4049  001766  8E23               	bsf	___ftadd@f1+1,7,c
  4050  001768  0EFF               	movlw	255
  4051  00176A  1622               	andwf	___ftadd@f1,f,c
  4052  00176C  0EFF               	movlw	255
  4053  00176E  1623               	andwf	___ftadd@f1+1,f,c
  4054  001770  0E00               	movlw	0
  4055  001772  1624               	andwf	___ftadd@f1+2,f,c
  4056  001774  8E26               	bsf	___ftadd@f2+1,7,c
  4057  001776  0EFF               	movlw	255
  4058  001778  1625               	andwf	___ftadd@f2,f,c
  4059  00177A  0EFF               	movlw	255
  4060  00177C  1626               	andwf	___ftadd@f2+1,f,c
  4061  00177E  0E00               	movlw	0
  4062  001780  1627               	andwf	___ftadd@f2+2,f,c
  4063  001782  502C               	movf	___ftadd@exp2,w,c
  4064  001784  5C2D               	subwf	___ftadd@exp1,w,c
  4065  001786  B0D8               	btfsc	status,0,c
  4066  001788  D01B               	goto	l702
  4067  00178A                     u2020:
  4068  00178A  90D8               	bcf	status,0,c
  4069  00178C  3625               	rlcf	___ftadd@f2,f,c
  4070  00178E  3626               	rlcf	___ftadd@f2+1,f,c
  4071  001790  3627               	rlcf	___ftadd@f2+2,f,c
  4072  001792  062C               	decf	___ftadd@exp2,f,c
  4073  001794  502D               	movf	___ftadd@exp1,w,c
  4074  001796  182C               	xorwf	___ftadd@exp2,w,c
  4075  001798  B4D8               	btfsc	status,2,c
  4076  00179A  D00D               	goto	l707
  4077  00179C  062B               	decf	___ftadd@sign,f,c
  4078  00179E  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4079  0017A2  0E07               	movlw	7
  4080  0017A4  1628               	andwf	??___ftadd,f,c
  4081  0017A6  B4D8               	btfsc	status,2,c
  4082  0017A8  D006               	goto	l707
  4083  0017AA  D7EF               	goto	u2020
  4084  0017AC  90D8               	bcf	status,0,c
  4085  0017AE  3224               	rrcf	___ftadd@f1+2,f,c
  4086  0017B0  3223               	rrcf	___ftadd@f1+1,f,c
  4087  0017B2  3222               	rrcf	___ftadd@f1,f,c
  4088  0017B4  2A2D               	incf	___ftadd@exp1,f,c
  4089  0017B6                     l707:
  4090  0017B6  502C               	movf	___ftadd@exp2,w,c
  4091  0017B8  182D               	xorwf	___ftadd@exp1,w,c
  4092  0017BA  B4D8               	btfsc	status,2,c
  4093  0017BC  D01F               	goto	u2090
  4094  0017BE  D7F6               	goto	l708
  4095  0017C0                     l702:
  4096  0017C0  502D               	movf	___ftadd@exp1,w,c
  4097  0017C2  5C2C               	subwf	___ftadd@exp2,w,c
  4098  0017C4  B0D8               	btfsc	status,0,c
  4099  0017C6  D01A               	goto	u2090
  4100  0017C8                     u2060:
  4101  0017C8  90D8               	bcf	status,0,c
  4102  0017CA  3622               	rlcf	___ftadd@f1,f,c
  4103  0017CC  3623               	rlcf	___ftadd@f1+1,f,c
  4104  0017CE  3624               	rlcf	___ftadd@f1+2,f,c
  4105  0017D0  062D               	decf	___ftadd@exp1,f,c
  4106  0017D2  502D               	movf	___ftadd@exp1,w,c
  4107  0017D4  182C               	xorwf	___ftadd@exp2,w,c
  4108  0017D6  B4D8               	btfsc	status,2,c
  4109  0017D8  D00D               	goto	l716
  4110  0017DA  062B               	decf	___ftadd@sign,f,c
  4111  0017DC  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4112  0017E0  0E07               	movlw	7
  4113  0017E2  1628               	andwf	??___ftadd,f,c
  4114  0017E4  B4D8               	btfsc	status,2,c
  4115  0017E6  D006               	goto	l716
  4116  0017E8  D7EF               	goto	u2060
  4117  0017EA  90D8               	bcf	status,0,c
  4118  0017EC  3227               	rrcf	___ftadd@f2+2,f,c
  4119  0017EE  3226               	rrcf	___ftadd@f2+1,f,c
  4120  0017F0  3225               	rrcf	___ftadd@f2,f,c
  4121  0017F2  2A2C               	incf	___ftadd@exp2,f,c
  4122  0017F4                     l716:
  4123  0017F4  502C               	movf	___ftadd@exp2,w,c
  4124  0017F6  182D               	xorwf	___ftadd@exp1,w,c
  4125  0017F8  A4D8               	btfss	status,2,c
  4126  0017FA  D7F7               	goto	l717
  4127  0017FC                     u2090:
  4128  0017FC  AE2B               	btfss	___ftadd@sign,7,c
  4129  0017FE  D00C               	goto	l719
  4130  001800  0EFF               	movlw	255
  4131  001802  1A22               	xorwf	___ftadd@f1,f,c
  4132  001804  0EFF               	movlw	255
  4133  001806  1A23               	xorwf	___ftadd@f1+1,f,c
  4134  001808  0EFF               	movlw	255
  4135  00180A  1A24               	xorwf	___ftadd@f1+2,f,c
  4136  00180C  0E01               	movlw	1
  4137  00180E  2622               	addwf	___ftadd@f1,f,c
  4138  001810  0E00               	movlw	0
  4139  001812  2223               	addwfc	___ftadd@f1+1,f,c
  4140  001814  0E00               	movlw	0
  4141  001816  2224               	addwfc	___ftadd@f1+2,f,c
  4142  001818                     l719:
  4143  001818  AC2B               	btfss	___ftadd@sign,6,c
  4144  00181A  D00C               	goto	l720
  4145  00181C  0EFF               	movlw	255
  4146  00181E  1A25               	xorwf	___ftadd@f2,f,c
  4147  001820  0EFF               	movlw	255
  4148  001822  1A26               	xorwf	___ftadd@f2+1,f,c
  4149  001824  0EFF               	movlw	255
  4150  001826  1A27               	xorwf	___ftadd@f2+2,f,c
  4151  001828  0E01               	movlw	1
  4152  00182A  2625               	addwf	___ftadd@f2,f,c
  4153  00182C  0E00               	movlw	0
  4154  00182E  2226               	addwfc	___ftadd@f2+1,f,c
  4155  001830  0E00               	movlw	0
  4156  001832  2227               	addwfc	___ftadd@f2+2,f,c
  4157  001834                     l720:
  4158  001834  0E00               	movlw	0
  4159  001836  6E2B               	movwf	___ftadd@sign,c
  4160  001838  5022               	movf	___ftadd@f1,w,c
  4161  00183A  2625               	addwf	___ftadd@f2,f,c
  4162  00183C  5023               	movf	___ftadd@f1+1,w,c
  4163  00183E  2226               	addwfc	___ftadd@f2+1,f,c
  4164  001840  5024               	movf	___ftadd@f1+2,w,c
  4165  001842  2227               	addwfc	___ftadd@f2+2,f,c
  4166  001844  AE27               	btfss	___ftadd@f2+2,7,c
  4167  001846  D00E               	goto	l721
  4168  001848  0EFF               	movlw	255
  4169  00184A  1A25               	xorwf	___ftadd@f2,f,c
  4170  00184C  0EFF               	movlw	255
  4171  00184E  1A26               	xorwf	___ftadd@f2+1,f,c
  4172  001850  0EFF               	movlw	255
  4173  001852  1A27               	xorwf	___ftadd@f2+2,f,c
  4174  001854  0E01               	movlw	1
  4175  001856  2625               	addwf	___ftadd@f2,f,c
  4176  001858  0E00               	movlw	0
  4177  00185A  2226               	addwfc	___ftadd@f2+1,f,c
  4178  00185C  0E00               	movlw	0
  4179  00185E  2227               	addwfc	___ftadd@f2+2,f,c
  4180  001860  0E01               	movlw	1
  4181  001862  6E2B               	movwf	___ftadd@sign,c
  4182  001864                     l721:
  4183  001864  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  4184  001868  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4185  00186C  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4186  001870  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  4187  001874  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  4188  001878  EC4C  F011         	call	___ftpack	;wreg free
  4189  00187C  C001  F022         	movff	?___ftpack,?___ftadd
  4190  001880  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  4191  001884  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  4192  001888  0012               	return	
  4193  00188A                     __end_of___ftadd:
  4194                           	opt stack 0
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           postinc0	equ	0xFEE
  4202                           wreg	equ	0xFE8
  4203                           postdec1	equ	0xFE5
  4204                           fsr1l	equ	0xFE1
  4205                           postinc2	equ	0xFDE
  4206                           postdec2	equ	0xFDD
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function ___ftneg *****************
  4212 ;; Defined at:
  4213 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  f1              3    0[COMRAM] float 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  3    0[COMRAM] float 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4227 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4230 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4231 ;;Total ram usage:        3 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_pow
  4237 ;;		_exp
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text15
  4242  00297A                     __ptext15:
  4243                           	opt stack 0
  4244  00297A                     ___ftneg:
  4245                           	opt stack 28
  4246                           
  4247                           ;incstack = 0
  4248  00297A  5001               	movf	___ftneg@f1,w,c
  4249  00297C  1002               	iorwf	___ftneg@f1+1,w,c
  4250  00297E  1003               	iorwf	___ftneg@f1+2,w,c
  4251  002980  B4D8               	btfsc	status,2,c
  4252  002982  D006               	goto	l752
  4253  002984  0E00               	movlw	0
  4254  002986  1A01               	xorwf	___ftneg@f1,f,c
  4255  002988  0E00               	movlw	0
  4256  00298A  1A02               	xorwf	___ftneg@f1+1,f,c
  4257  00298C  0E80               	movlw	128
  4258  00298E  1A03               	xorwf	___ftneg@f1+2,f,c
  4259  002990                     l752:
  4260  002990  C001  F001         	movff	___ftneg@f1,?___ftneg
  4261  002994  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4262  002998  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4263  00299C  0012               	return		;funcret
  4264  00299E                     __end_of___ftneg:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1l	equ	0xFE1
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function ___ftdiv *****************
  4283 ;; Defined at:
  4284 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  f1              3    8[COMRAM] float 
  4287 ;;  f2              3   11[COMRAM] float 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  f3              3   18[COMRAM] float 
  4290 ;;  sign            1   22[COMRAM] unsigned char 
  4291 ;;  exp             1   21[COMRAM] unsigned char 
  4292 ;;  cntr            1   17[COMRAM] unsigned char 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  3    8[COMRAM] float 
  4295 ;; Registers used:
  4296 ;;		wreg, status,2, status,0, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4302 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4303 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4304 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4305 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4306 ;;Total ram usage:       15 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    1
  4309 ;; This function calls:
  4310 ;;		___ftpack
  4311 ;; This function is called by:
  4312 ;;		_exp
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text16
  4317  001F3C                     __ptext16:
  4318                           	opt stack 0
  4319  001F3C                     ___ftdiv:
  4320                           	opt stack 27
  4321                           
  4322                           ;incstack = 0
  4323  001F3C  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  4324  001F40  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  4325  001F42  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  4326  001F44  340A               	rlcf	___ftdiv@f1+1,w,c
  4327  001F46  360F               	rlcf	??___ftdiv& (0+255),f,c
  4328  001F48  E301               	bnc	u2471
  4329  001F4A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  4330  001F4C                     u2471:
  4331  001F4C  500F               	movf	??___ftdiv,w,c
  4332  001F4E  6E16               	movwf	___ftdiv@exp,c
  4333  001F50  5016               	movf	___ftdiv@exp,w,c
  4334  001F52  A4D8               	btfss	status,2,c
  4335  001F54  D007               	goto	l726
  4336  001F56  0E00               	movlw	0
  4337  001F58  6E09               	movwf	?___ftdiv,c
  4338  001F5A  0E00               	movlw	0
  4339  001F5C  6E0A               	movwf	?___ftdiv+1,c
  4340  001F5E  0E00               	movlw	0
  4341  001F60  6E0B               	movwf	?___ftdiv+2,c
  4342  001F62  0012               	return	
  4343  001F64                     l726:
  4344  001F64  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  4345  001F68  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  4346  001F6A  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  4347  001F6C  340D               	rlcf	___ftdiv@f2+1,w,c
  4348  001F6E  360F               	rlcf	??___ftdiv& (0+255),f,c
  4349  001F70  E301               	bnc	u2491
  4350  001F72  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  4351  001F74                     u2491:
  4352  001F74  500F               	movf	??___ftdiv,w,c
  4353  001F76  6E17               	movwf	___ftdiv@sign,c
  4354  001F78  5017               	movf	___ftdiv@sign,w,c
  4355  001F7A  A4D8               	btfss	status,2,c
  4356  001F7C  D007               	goto	l728
  4357  001F7E  0E00               	movlw	0
  4358  001F80  6E09               	movwf	?___ftdiv,c
  4359  001F82  0E00               	movlw	0
  4360  001F84  6E0A               	movwf	?___ftdiv+1,c
  4361  001F86  0E00               	movlw	0
  4362  001F88  6E0B               	movwf	?___ftdiv+2,c
  4363  001F8A  0012               	return	
  4364  001F8C                     l728:
  4365  001F8C  0E00               	movlw	0
  4366  001F8E  6E13               	movwf	___ftdiv@f3,c
  4367  001F90  0E00               	movlw	0
  4368  001F92  6E14               	movwf	___ftdiv@f3+1,c
  4369  001F94  0E00               	movlw	0
  4370  001F96  6E15               	movwf	___ftdiv@f3+2,c
  4371  001F98  5017               	movf	___ftdiv@sign,w,c
  4372  001F9A  0F89               	addlw	137
  4373  001F9C  5E16               	subwf	___ftdiv@exp,f,c
  4374  001F9E  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  4375  001FA2  500E               	movf	___ftdiv@f2+2,w,c
  4376  001FA4  1A17               	xorwf	___ftdiv@sign,f,c
  4377  001FA6  0E80               	movlw	128
  4378  001FA8  1617               	andwf	___ftdiv@sign,f,c
  4379  001FAA  8E0A               	bsf	___ftdiv@f1+1,7,c
  4380  001FAC  0EFF               	movlw	255
  4381  001FAE  1609               	andwf	___ftdiv@f1,f,c
  4382  001FB0  0EFF               	movlw	255
  4383  001FB2  160A               	andwf	___ftdiv@f1+1,f,c
  4384  001FB4  0E00               	movlw	0
  4385  001FB6  160B               	andwf	___ftdiv@f1+2,f,c
  4386  001FB8  8E0D               	bsf	___ftdiv@f2+1,7,c
  4387  001FBA  0EFF               	movlw	255
  4388  001FBC  160C               	andwf	___ftdiv@f2,f,c
  4389  001FBE  0EFF               	movlw	255
  4390  001FC0  160D               	andwf	___ftdiv@f2+1,f,c
  4391  001FC2  0E00               	movlw	0
  4392  001FC4  160E               	andwf	___ftdiv@f2+2,f,c
  4393  001FC6  0E18               	movlw	24
  4394  001FC8  6E12               	movwf	___ftdiv@cntr,c
  4395  001FCA  90D8               	bcf	status,0,c
  4396  001FCC  3613               	rlcf	___ftdiv@f3,f,c
  4397  001FCE  3614               	rlcf	___ftdiv@f3+1,f,c
  4398  001FD0  3615               	rlcf	___ftdiv@f3+2,f,c
  4399  001FD2  500C               	movf	___ftdiv@f2,w,c
  4400  001FD4  5C09               	subwf	___ftdiv@f1,w,c
  4401  001FD6  500D               	movf	___ftdiv@f2+1,w,c
  4402  001FD8  580A               	subwfb	___ftdiv@f1+1,w,c
  4403  001FDA  500E               	movf	___ftdiv@f2+2,w,c
  4404  001FDC  580B               	subwfb	___ftdiv@f1+2,w,c
  4405  001FDE  A0D8               	btfss	status,0,c
  4406  001FE0  D007               	goto	l730
  4407  001FE2  500C               	movf	___ftdiv@f2,w,c
  4408  001FE4  5E09               	subwf	___ftdiv@f1,f,c
  4409  001FE6  500D               	movf	___ftdiv@f2+1,w,c
  4410  001FE8  5A0A               	subwfb	___ftdiv@f1+1,f,c
  4411  001FEA  500E               	movf	___ftdiv@f2+2,w,c
  4412  001FEC  5A0B               	subwfb	___ftdiv@f1+2,f,c
  4413  001FEE  8013               	bsf	___ftdiv@f3,0,c
  4414  001FF0                     l730:
  4415  001FF0  90D8               	bcf	status,0,c
  4416  001FF2  3609               	rlcf	___ftdiv@f1,f,c
  4417  001FF4  360A               	rlcf	___ftdiv@f1+1,f,c
  4418  001FF6  360B               	rlcf	___ftdiv@f1+2,f,c
  4419  001FF8  2E12               	decfsz	___ftdiv@cntr,f,c
  4420  001FFA  D7E7               	goto	l729
  4421  001FFC  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  4422  002000  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4423  002004  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4424  002008  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  4425  00200C  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  4426  002010  EC4C  F011         	call	___ftpack	;wreg free
  4427  002014  C001  F009         	movff	?___ftpack,?___ftdiv
  4428  002018  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  4429  00201C  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  4430  002020  0012               	return	
  4431  002022                     __end_of___ftdiv:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           prodh	equ	0xFF4
  4438                           prodl	equ	0xFF3
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           postdec1	equ	0xFE5
  4442                           fsr1l	equ	0xFE1
  4443                           postinc2	equ	0xFDE
  4444                           postdec2	equ	0xFDD
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function ___awtoft *****************
  4450 ;; Defined at:
  4451 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awtoft.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  c               2    8[COMRAM] int 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  sign            1   11[COMRAM] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  3    8[COMRAM] float 
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4465 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4468 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4469 ;;Total ram usage:        4 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    1
  4472 ;; This function calls:
  4473 ;;		___ftpack
  4474 ;; This function is called by:
  4475 ;;		_main
  4476 ;;		_exp
  4477 ;;		_log
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text17
  4482  002896                     __ptext17:
  4483                           	opt stack 0
  4484  002896                     ___awtoft:
  4485                           	opt stack 27
  4486                           
  4487                           ;incstack = 0
  4488  002896  0E00               	movlw	0
  4489  002898  6E0C               	movwf	___awtoft@sign,c
  4490  00289A  AE0A               	btfss	___awtoft@c+1,7,c
  4491  00289C  D006               	goto	l622
  4492  00289E  6C09               	negf	___awtoft@c,c
  4493  0028A0  1E0A               	comf	___awtoft@c+1,f,c
  4494  0028A2  B0D8               	btfsc	status,0,c
  4495  0028A4  2A0A               	incf	___awtoft@c+1,f,c
  4496  0028A6  0E01               	movlw	1
  4497  0028A8  6E0C               	movwf	___awtoft@sign,c
  4498  0028AA                     l622:
  4499  0028AA  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4500  0028AE  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4501  0028B2  6A03               	clrf	___ftpack@arg+2,c
  4502  0028B4  0E8E               	movlw	142
  4503  0028B6  6E04               	movwf	___ftpack@exp,c
  4504  0028B8  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4505  0028BC  EC4C  F011         	call	___ftpack	;wreg free
  4506  0028C0  C001  F009         	movff	?___ftpack,?___awtoft
  4507  0028C4  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4508  0028C8  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4509  0028CC  0012               	return	
  4510  0028CE                     __end_of___awtoft:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           postinc0	equ	0xFEE
  4519                           wreg	equ	0xFE8
  4520                           postdec1	equ	0xFE5
  4521                           fsr1l	equ	0xFE1
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           
  4528 ;; *************** function ___lltoft *****************
  4529 ;; Defined at:
  4530 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  c               4    8[COMRAM] unsigned long 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  exp             1   16[COMRAM] unsigned char 
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  3    8[COMRAM] float 
  4537 ;; Registers used:
  4538 ;;		wreg, status,2, status,0, cstack
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4546 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4547 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4548 ;;Total ram usage:        9 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:    1
  4551 ;; This function calls:
  4552 ;;		___ftpack
  4553 ;; This function is called by:
  4554 ;;		_pow
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text18
  4559  00264E                     __ptext18:
  4560                           	opt stack 0
  4561  00264E                     ___lltoft:
  4562                           	opt stack 28
  4563                           
  4564                           ;incstack = 0
  4565  00264E  0E8E               	movlw	142
  4566  002650  6E11               	movwf	___lltoft@exp,c
  4567  002652  D006               	goto	l819
  4568  002654  90D8               	bcf	status,0,c
  4569  002656  320C               	rrcf	___lltoft@c+3,f,c
  4570  002658  320B               	rrcf	___lltoft@c+2,f,c
  4571  00265A  320A               	rrcf	___lltoft@c+1,f,c
  4572  00265C  3209               	rrcf	___lltoft@c,f,c
  4573  00265E  2A11               	incf	___lltoft@exp,f,c
  4574  002660                     l819:
  4575  002660  0E00               	movlw	0
  4576  002662  1409               	andwf	___lltoft@c,w,c
  4577  002664  6E0D               	movwf	??___lltoft& (0+255),c
  4578  002666  0E00               	movlw	0
  4579  002668  140A               	andwf	___lltoft@c+1,w,c
  4580  00266A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4581  00266C  0E00               	movlw	0
  4582  00266E  140B               	andwf	___lltoft@c+2,w,c
  4583  002670  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4584  002672  0EFF               	movlw	255
  4585  002674  140C               	andwf	___lltoft@c+3,w,c
  4586  002676  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4587  002678  500D               	movf	??___lltoft,w,c
  4588  00267A  100E               	iorwf	??___lltoft+1,w,c
  4589  00267C  100F               	iorwf	??___lltoft+2,w,c
  4590  00267E  1010               	iorwf	??___lltoft+3,w,c
  4591  002680  A4D8               	btfss	status,2,c
  4592  002682  D7E8               	goto	l820
  4593  002684  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4594  002688  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4595  00268C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4596  002690  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4597  002694  0E00               	movlw	0
  4598  002696  6E05               	movwf	___ftpack@sign,c
  4599  002698  EC4C  F011         	call	___ftpack	;wreg free
  4600  00269C  C001  F009         	movff	?___ftpack,?___lltoft
  4601  0026A0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4602  0026A4  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4603  0026A8  0012               	return	
  4604  0026AA                     __end_of___lltoft:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           prodh	equ	0xFF4
  4611                           prodl	equ	0xFF3
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postdec1	equ	0xFE5
  4615                           fsr1l	equ	0xFE1
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function ___ftpack *****************
  4623 ;; Defined at:
  4624 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  arg             3    0[COMRAM] unsigned um
  4627 ;;  exp             1    3[COMRAM] unsigned char 
  4628 ;;  sign            1    4[COMRAM] unsigned char 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  3    0[COMRAM] float 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4640 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4642 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4643 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4644 ;;Total ram usage:        8 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; This function calls:
  4647 ;;		Nothing
  4648 ;; This function is called by:
  4649 ;;		___altoft
  4650 ;;		___awtoft
  4651 ;;		___ftadd
  4652 ;;		___ftdiv
  4653 ;;		___ftmul
  4654 ;;		___lltoft
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text19
  4659  002298                     __ptext19:
  4660                           	opt stack 0
  4661  002298                     ___ftpack:
  4662                           	opt stack 26
  4663                           
  4664                           ;incstack = 0
  4665  002298  5004               	movf	___ftpack@exp,w,c
  4666  00229A  B4D8               	btfsc	status,2,c
  4667  00229C  D005               	goto	u1830
  4668  00229E  5001               	movf	___ftpack@arg,w,c
  4669  0022A0  1002               	iorwf	___ftpack@arg+1,w,c
  4670  0022A2  1003               	iorwf	___ftpack@arg+2,w,c
  4671  0022A4  A4D8               	btfss	status,2,c
  4672  0022A6  D00C               	goto	l662
  4673  0022A8                     u1830:
  4674  0022A8  0E00               	movlw	0
  4675  0022AA  6E01               	movwf	?___ftpack,c
  4676  0022AC  0E00               	movlw	0
  4677  0022AE  6E02               	movwf	?___ftpack+1,c
  4678  0022B0  0E00               	movlw	0
  4679  0022B2  6E03               	movwf	?___ftpack+2,c
  4680  0022B4  0012               	return	
  4681  0022B6  2A04               	incf	___ftpack@exp,f,c
  4682  0022B8  90D8               	bcf	status,0,c
  4683  0022BA  3203               	rrcf	___ftpack@arg+2,f,c
  4684  0022BC  3202               	rrcf	___ftpack@arg+1,f,c
  4685  0022BE  3201               	rrcf	___ftpack@arg,f,c
  4686  0022C0                     l662:
  4687  0022C0  0E00               	movlw	0
  4688  0022C2  1401               	andwf	___ftpack@arg,w,c
  4689  0022C4  6E06               	movwf	??___ftpack& (0+255),c
  4690  0022C6  0E00               	movlw	0
  4691  0022C8  1402               	andwf	___ftpack@arg+1,w,c
  4692  0022CA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4693  0022CC  0EFE               	movlw	254
  4694  0022CE  1403               	andwf	___ftpack@arg+2,w,c
  4695  0022D0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4696  0022D2  5006               	movf	??___ftpack,w,c
  4697  0022D4  1007               	iorwf	??___ftpack+1,w,c
  4698  0022D6  1008               	iorwf	??___ftpack+2,w,c
  4699  0022D8  B4D8               	btfsc	status,2,c
  4700  0022DA  D00C               	goto	l665
  4701  0022DC  D7EC               	goto	l663
  4702  0022DE  2A04               	incf	___ftpack@exp,f,c
  4703  0022E0  0E01               	movlw	1
  4704  0022E2  2601               	addwf	___ftpack@arg,f,c
  4705  0022E4  0E00               	movlw	0
  4706  0022E6  2202               	addwfc	___ftpack@arg+1,f,c
  4707  0022E8  0E00               	movlw	0
  4708  0022EA  2203               	addwfc	___ftpack@arg+2,f,c
  4709  0022EC  90D8               	bcf	status,0,c
  4710  0022EE  3203               	rrcf	___ftpack@arg+2,f,c
  4711  0022F0  3202               	rrcf	___ftpack@arg+1,f,c
  4712  0022F2  3201               	rrcf	___ftpack@arg,f,c
  4713  0022F4                     l665:
  4714  0022F4  0E00               	movlw	0
  4715  0022F6  1401               	andwf	___ftpack@arg,w,c
  4716  0022F8  6E06               	movwf	??___ftpack& (0+255),c
  4717  0022FA  0E00               	movlw	0
  4718  0022FC  1402               	andwf	___ftpack@arg+1,w,c
  4719  0022FE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4720  002300  0EFF               	movlw	255
  4721  002302  1403               	andwf	___ftpack@arg+2,w,c
  4722  002304  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4723  002306  5006               	movf	??___ftpack,w,c
  4724  002308  1007               	iorwf	??___ftpack+1,w,c
  4725  00230A  1008               	iorwf	??___ftpack+2,w,c
  4726  00230C  B4D8               	btfsc	status,2,c
  4727  00230E  D006               	goto	l668
  4728  002310  D7E6               	goto	l666
  4729  002312  0604               	decf	___ftpack@exp,f,c
  4730  002314  90D8               	bcf	status,0,c
  4731  002316  3601               	rlcf	___ftpack@arg,f,c
  4732  002318  3602               	rlcf	___ftpack@arg+1,f,c
  4733  00231A  3603               	rlcf	___ftpack@arg+2,f,c
  4734  00231C                     l668:
  4735  00231C  BE02               	btfsc	___ftpack@arg+1,7,c
  4736  00231E  D003               	goto	u1870
  4737  002320  0E02               	movlw	2
  4738  002322  6004               	cpfslt	___ftpack@exp,c
  4739  002324  D7F6               	goto	l669
  4740  002326                     u1870:
  4741  002326  A004               	btfss	___ftpack@exp,0,c
  4742  002328  9E02               	bcf	___ftpack@arg+1,7,c
  4743  00232A  90D8               	bcf	status,0,c
  4744  00232C  3204               	rrcf	___ftpack@exp,f,c
  4745  00232E  5004               	movf	___ftpack@exp,w,c
  4746  002330  1203               	iorwf	___ftpack@arg+2,f,c
  4747  002332  5005               	movf	___ftpack@sign,w,c
  4748  002334  A4D8               	btfss	status,2,c
  4749  002336  8E03               	bsf	___ftpack@arg+2,7,c
  4750  002338  C001  F001         	movff	___ftpack@arg,?___ftpack
  4751  00233C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4752  002340  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4753  002344  0012               	return	
  4754  002346                     __end_of___ftpack:
  4755                           	opt stack 0
  4756                           tblptru	equ	0xFF8
  4757                           tblptrh	equ	0xFF7
  4758                           tblptrl	equ	0xFF6
  4759                           tablat	equ	0xFF5
  4760                           prodh	equ	0xFF4
  4761                           prodl	equ	0xFF3
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           postdec1	equ	0xFE5
  4765                           fsr1l	equ	0xFE1
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function _lcd_puts *****************
  4773 ;; Defined at:
  4774 ;;		line 214 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  ptr             2    8[COMRAM] PTR unsigned char 
  4777 ;;		 -> STR_14(2), 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4793 ;;Total ram usage:        2 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    4
  4796 ;; This function calls:
  4797 ;;		_lcd_putc
  4798 ;; This function is called by:
  4799 ;;		_main
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text20
  4804  002900                     __ptext20:
  4805                           	opt stack 0
  4806  002900                     _lcd_puts:
  4807                           	opt stack 26
  4808                           
  4809                           ;unmc_lcd_216.c: 216: while(*ptr){
  4810                           
  4811                           ;incstack = 0
  4812  002900  D00A               	goto	l303
  4813  002902                     
  4814                           ;unmc_lcd_216.c: 217: lcd_putc(*ptr++);
  4815  002902  C009  FFF6         	movff	lcd_puts@ptr,tblptrl
  4816  002906  C00A  FFF7         	movff	lcd_puts@ptr+1,tblptrh
  4817  00290A                     	if	0	;tblptru may be non-zero
  4818  00290A                     	endif
  4819  00290A                     	if	0	;tblptru may be non-zero
  4820  00290A                     	endif
  4821  00290A  0008               	tblrd		*
  4822  00290C  50F5               	movf	tablat,w,c
  4823  00290E  ECA7  F013         	call	_lcd_putc
  4824  002912  4A09               	infsnz	lcd_puts@ptr,f,c
  4825  002914  2A0A               	incf	lcd_puts@ptr+1,f,c
  4826  002916                     l303:
  4827  002916  C009  FFF6         	movff	lcd_puts@ptr,tblptrl
  4828  00291A  C00A  FFF7         	movff	lcd_puts@ptr+1,tblptrh
  4829  00291E                     	if	0	;tblptru may be non-zero
  4830  00291E                     	endif
  4831  00291E                     	if	0	;tblptru may be non-zero
  4832  00291E                     	endif
  4833  00291E  0008               	tblrd		*
  4834  002920  50F5               	movf	tablat,w,c
  4835  002922  0900               	iorlw	0
  4836  002924  B4D8               	btfsc	status,2,c
  4837  002926  0012               	return	
  4838  002928  D7EC               	goto	l304
  4839  00292A                     __end_of_lcd_puts:
  4840                           	opt stack 0
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           postdec1	equ	0xFE5
  4850                           fsr1l	equ	0xFE1
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _escribir_numero *****************
  4858 ;; Defined at:
  4859 ;;		line 53 in file "main.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  num             2   27[COMRAM] PTR int 
  4862 ;;		 -> NULL(0), RAM(3775), 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  i               2   32[COMRAM] int 
  4865 ;;  i               2   30[COMRAM] int 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4876 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4878 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4879 ;;Total ram usage:        7 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    6
  4882 ;; This function calls:
  4883 ;;		_lcd_gotoxy
  4884 ;;		_write_in_lcd
  4885 ;; This function is called by:
  4886 ;;		_main
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text21
  4891  001C3E                     __ptext21:
  4892                           	opt stack 0
  4893  001C3E                     _escribir_numero:
  4894                           	opt stack 24
  4895                           
  4896                           ;main.c: 55: if (flag_sentido_escritura == 0) {
  4897                           
  4898                           ;incstack = 0
  4899  001C3E  0100               	movlb	0	; () banked
  4900  001C40  5198               	movf	_flag_sentido_escritura& (0+255),w,b
  4901  001C42  0100               	movlb	0	; () banked
  4902  001C44  1199               	iorwf	(_flag_sentido_escritura+1)& (0+255),w,b
  4903  001C46  A4D8               	btfss	status,2,c
  4904  001C48  D03F               	goto	l161
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;main.c: 56: if (contador_numeros_ingresados_izq < 6) {
  4908  001C4A  BE5E               	btfsc	_contador_numeros_ingresados_izq+1,7,c
  4909  001C4C  D006               	goto	u2810
  4910  001C4E  505E               	movf	_contador_numeros_ingresados_izq+1,w,c
  4911  001C50  E103               	bnz	u2811
  4912  001C52  0E06               	movlw	6
  4913  001C54  5C5D               	subwf	_contador_numeros_ingresados_izq,w,c
  4914  001C56  B0D8               	btfsc	status,0,c
  4915  001C58                     u2811:
  4916  001C58  0012               	return	
  4917  001C5A                     u2810:
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;main.c: 57: array_lcd_izq[contador_numeros_ingresados_izq] = num;
  4921  001C5A  90D8               	bcf	status,0,c
  4922  001C5C  345D               	rlcf	_contador_numeros_ingresados_izq,w,c
  4923  001C5E  6ED9               	movwf	fsr2l,c
  4924  001C60  345E               	rlcf	_contador_numeros_ingresados_izq+1,w,c
  4925  001C62  6EDA               	movwf	fsr2h,c
  4926  001C64  0E6C               	movlw	low _array_lcd_izq
  4927  001C66  26D9               	addwf	fsr2l,f,c
  4928  001C68  0E00               	movlw	high _array_lcd_izq
  4929  001C6A  22DA               	addwfc	fsr2h,f,c
  4930  001C6C  C01C  FFDE         	movff	escribir_numero@num,postinc2
  4931  001C70  C01D  FFDD         	movff	escribir_numero@num+1,postdec2
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;main.c: 58: contador_numeros_ingresados_izq++;
  4935  001C74  4A5D               	infsnz	_contador_numeros_ingresados_izq,f,c
  4936  001C76  2A5E               	incf	_contador_numeros_ingresados_izq+1,f,c
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;main.c: 59: lcd_gotoxy(7 - contador_numeros_ingresados_izq, 1);
  4940  001C78  0E01               	movlw	1
  4941  001C7A  6E05               	movwf	lcd_gotoxy@y,c
  4942  001C7C  505D               	movf	_contador_numeros_ingresados_izq,w,c
  4943  001C7E  0800               	sublw	0
  4944  001C80  0F07               	addlw	7
  4945  001C82  ECCF  F014         	call	_lcd_gotoxy
  4946                           
  4947                           ;main.c: 60: for (int i = 0; i < contador_numeros_ingresados_izq; i++) {
  4948  001C86  0E00               	movlw	0
  4949  001C88  6E20               	movwf	escribir_numero@i+1,c
  4950  001C8A  0E00               	movlw	0
  4951  001C8C  6E1F               	movwf	escribir_numero@i,c
  4952  001C8E  D011               	goto	l163
  4953  001C90                     
  4954                           ;main.c: 61: write_in_lcd(array_lcd_izq[i]);
  4955  001C90  90D8               	bcf	status,0,c
  4956  001C92  341F               	rlcf	escribir_numero@i,w,c
  4957  001C94  6ED9               	movwf	fsr2l,c
  4958  001C96  3420               	rlcf	escribir_numero@i+1,w,c
  4959  001C98  6EDA               	movwf	fsr2h,c
  4960  001C9A  0E6C               	movlw	low _array_lcd_izq
  4961  001C9C  26D9               	addwf	fsr2l,f,c
  4962  001C9E  0E00               	movlw	high _array_lcd_izq
  4963  001CA0  22DA               	addwfc	fsr2h,f,c
  4964  001CA2  CFDE F01A          	movff	postinc2,write_in_lcd@key
  4965  001CA6  CFDD F01B          	movff	postdec2,write_in_lcd@key+1
  4966  001CAA  EC95  F014         	call	_write_in_lcd	;wreg free
  4967  001CAE  4A1F               	infsnz	escribir_numero@i,f,c
  4968  001CB0  2A20               	incf	escribir_numero@i+1,f,c
  4969  001CB2                     l163:
  4970  001CB2  505D               	movf	_contador_numeros_ingresados_izq,w,c
  4971  001CB4  5C1F               	subwf	escribir_numero@i,w,c
  4972  001CB6  5020               	movf	escribir_numero@i+1,w,c
  4973  001CB8  0A80               	xorlw	128
  4974  001CBA  6E1E               	movwf	??_escribir_numero& (0+255),c
  4975  001CBC  505E               	movf	_contador_numeros_ingresados_izq+1,w,c
  4976  001CBE  0A80               	xorlw	128
  4977  001CC0  581E               	subwfb	??_escribir_numero& (0+255),w,c
  4978  001CC2  B0D8               	btfsc	status,0,c
  4979  001CC4  0012               	return	
  4980  001CC6  D7E4               	goto	l164
  4981  001CC8                     l161:
  4982                           
  4983                           ;main.c: 65: if (contador_numeros_ingresados_der < 6) {
  4984  001CC8  0100               	movlb	0	; () banked
  4985  001CCA  BF97               	btfsc	(_contador_numeros_ingresados_der+1)& (0+255),7,b
  4986  001CCC  D008               	goto	u2830
  4987  001CCE  0100               	movlb	0	; () banked
  4988  001CD0  5197               	movf	(_contador_numeros_ingresados_der+1)& (0+255),w,b
  4989  001CD2  E13F               	bnz	l171
  4990  001CD4  0E06               	movlw	6
  4991  001CD6  0100               	movlb	0	; () banked
  4992  001CD8  5D96               	subwf	_contador_numeros_ingresados_der& (0+255),w,b
  4993  001CDA  B0D8               	btfsc	status,0,c
  4994  001CDC  0012               	return	
  4995  001CDE                     u2830:
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;main.c: 66: array_lcd_der[contador_numeros_ingresados_der] = num;
  4999  001CDE  90D8               	bcf	status,0,c
  5000  001CE0  0100               	movlb	0	; () banked
  5001  001CE2  3596               	rlcf	_contador_numeros_ingresados_der& (0+255),w,b
  5002  001CE4  6ED9               	movwf	fsr2l,c
  5003  001CE6  0100               	movlb	0	; () banked
  5004  001CE8  3597               	rlcf	(_contador_numeros_ingresados_der+1)& (0+255),w,b
  5005  001CEA  6EDA               	movwf	fsr2h,c
  5006  001CEC  0E60               	movlw	low _array_lcd_der
  5007  001CEE  26D9               	addwf	fsr2l,f,c
  5008  001CF0  0E00               	movlw	high _array_lcd_der
  5009  001CF2  22DA               	addwfc	fsr2h,f,c
  5010  001CF4  C01C  FFDE         	movff	escribir_numero@num,postinc2
  5011  001CF8  C01D  FFDD         	movff	escribir_numero@num+1,postdec2
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;main.c: 67: contador_numeros_ingresados_der++;
  5015  001CFC  0100               	movlb	0	; () banked
  5016  001CFE  4B96               	infsnz	_contador_numeros_ingresados_der& (0+255),f,b
  5017  001D00  2B97               	incf	(_contador_numeros_ingresados_der+1)& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;main.c: 68: lcd_gotoxy(10, 1);
  5021  001D02  0E01               	movlw	1
  5022  001D04  6E05               	movwf	lcd_gotoxy@y,c
  5023  001D06  0E0A               	movlw	10
  5024  001D08  ECCF  F014         	call	_lcd_gotoxy
  5025                           
  5026                           ;main.c: 69: for (int i = 0; i < contador_numeros_ingresados_der; i++) {
  5027  001D0C  0E00               	movlw	0
  5028  001D0E  6E22               	movwf	escribir_numero@i_795+1,c
  5029  001D10  0E00               	movlw	0
  5030  001D12  6E21               	movwf	escribir_numero@i_795,c
  5031  001D14  D011               	goto	l168
  5032  001D16                     
  5033                           ;main.c: 70: write_in_lcd(array_lcd_der[i]);
  5034  001D16  90D8               	bcf	status,0,c
  5035  001D18  3421               	rlcf	escribir_numero@i_795,w,c
  5036  001D1A  6ED9               	movwf	fsr2l,c
  5037  001D1C  3422               	rlcf	escribir_numero@i_795+1,w,c
  5038  001D1E  6EDA               	movwf	fsr2h,c
  5039  001D20  0E60               	movlw	low _array_lcd_der
  5040  001D22  26D9               	addwf	fsr2l,f,c
  5041  001D24  0E00               	movlw	high _array_lcd_der
  5042  001D26  22DA               	addwfc	fsr2h,f,c
  5043  001D28  CFDE F01A          	movff	postinc2,write_in_lcd@key
  5044  001D2C  CFDD F01B          	movff	postdec2,write_in_lcd@key+1
  5045  001D30  EC95  F014         	call	_write_in_lcd	;wreg free
  5046  001D34  4A21               	infsnz	escribir_numero@i_795,f,c
  5047  001D36  2A22               	incf	escribir_numero@i_795+1,f,c
  5048  001D38                     l168:
  5049  001D38  0100               	movlb	0	; () banked
  5050  001D3A  5196               	movf	_contador_numeros_ingresados_der& (0+255),w,b
  5051  001D3C  5C21               	subwf	escribir_numero@i_795,w,c
  5052  001D3E  5022               	movf	escribir_numero@i_795+1,w,c
  5053  001D40  0A80               	xorlw	128
  5054  001D42  6E1E               	movwf	??_escribir_numero& (0+255),c
  5055  001D44  0100               	movlb	0	; () banked
  5056  001D46  5197               	movf	(_contador_numeros_ingresados_der+1)& (0+255),w,b
  5057  001D48  0A80               	xorlw	128
  5058  001D4A  581E               	subwfb	??_escribir_numero& (0+255),w,c
  5059  001D4C  B0D8               	btfsc	status,0,c
  5060  001D4E  0012               	return	
  5061  001D50  D7E2               	goto	l169
  5062  001D52                     l171:
  5063  001D52  0012               	return		;funcret
  5064  001D54                     __end_of_escribir_numero:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           postdec1	equ	0xFE5
  5075                           fsr1l	equ	0xFE1
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function _write_in_lcd *****************
  5083 ;; Defined at:
  5084 ;;		line 48 in file "main.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  key             2   25[COMRAM] PTR int 
  5087 ;;		 -> RAM(3775), 
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;		None
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      void 
  5092 ;; Registers used:
  5093 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5099 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5102 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5103 ;;Total ram usage:        2 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    5
  5106 ;; This function calls:
  5107 ;;		_lcd_putrs
  5108 ;;		_sprintf
  5109 ;; This function is called by:
  5110 ;;		_escribir_numero
  5111 ;;		_main
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text22
  5116  00292A                     __ptext22:
  5117                           	opt stack 0
  5118  00292A                     _write_in_lcd:
  5119                           	opt stack 25
  5120                           
  5121                           ;main.c: 49: sprintf(buffer2, "%u", key);
  5122                           
  5123                           ;incstack = 0
  5124  00292A  0EB5               	movlw	low _buffer2
  5125  00292C  6E0D               	movwf	sprintf@sp,c
  5126  00292E  0E00               	movlw	high _buffer2
  5127  002930  6E0E               	movwf	sprintf@sp+1,c
  5128  002932  0E48               	movlw	low STR_2
  5129  002934  6E0F               	movwf	sprintf@f,c
  5130  002936  0E0F               	movlw	high STR_2
  5131  002938  6E10               	movwf	sprintf@f+1,c
  5132  00293A  C01A  F011         	movff	write_in_lcd@key,?_sprintf+4
  5133  00293E  C01B  F012         	movff	write_in_lcd@key+1,?_sprintf+5
  5134  002942  EC00  F00D         	call	_sprintf	;wreg free
  5135                           
  5136                           ;main.c: 50: lcd_putrs(buffer2);
  5137  002946  0EB5               	movlw	low _buffer2
  5138  002948  6E09               	movwf	lcd_putrs@ptr,c
  5139  00294A  0E00               	movlw	high _buffer2
  5140  00294C  6E0A               	movwf	lcd_putrs@ptr+1,c
  5141  00294E  EC7E  F013         	call	_lcd_putrs	;wreg free
  5142  002952  0012               	return		;funcret
  5143  002954                     __end_of_write_in_lcd:
  5144                           	opt stack 0
  5145                           tblptru	equ	0xFF8
  5146                           tblptrh	equ	0xFF7
  5147                           tblptrl	equ	0xFF6
  5148                           tablat	equ	0xFF5
  5149                           prodh	equ	0xFF4
  5150                           prodl	equ	0xFF3
  5151                           postinc0	equ	0xFEE
  5152                           wreg	equ	0xFE8
  5153                           postdec1	equ	0xFE5
  5154                           fsr1l	equ	0xFE1
  5155                           postinc2	equ	0xFDE
  5156                           postdec2	equ	0xFDD
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _sprintf *****************
  5162 ;; Defined at:
  5163 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  sp              2   12[COMRAM] PTR unsigned char 
  5166 ;;		 -> buffer2(20), 
  5167 ;;  f               2   14[COMRAM] PTR const unsigned char 
  5168 ;;		 -> STR_2(3), 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  tmpval          4    0        struct .
  5171 ;;  cp              3    0        PTR const unsigned char 
  5172 ;;  val             2   21[COMRAM] unsigned int 
  5173 ;;  ap              2   19[COMRAM] PTR void [1]
  5174 ;;		 -> ?_sprintf(2), 
  5175 ;;  len             2    0        unsigned int 
  5176 ;;  c               1   24[COMRAM] char 
  5177 ;;  prec            1   23[COMRAM] char 
  5178 ;;  flag            1   18[COMRAM] unsigned char 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  2   12[COMRAM] int 
  5181 ;; Registers used:
  5182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5188 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5189 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5191 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5192 ;;Total ram usage:       13 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    1
  5195 ;; This function calls:
  5196 ;;		___lwdiv
  5197 ;;		___lwmod
  5198 ;; This function is called by:
  5199 ;;		_write_in_lcd
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text23
  5204  001A00                     __ptext23:
  5205                           	opt stack 0
  5206  001A00                     _sprintf:
  5207                           	opt stack 28
  5208                           
  5209                           ;doprnt.c: 494: va_list ap;
  5210                           ;doprnt.c: 499: signed char c;
  5211                           ;doprnt.c: 506: signed char prec;
  5212                           ;doprnt.c: 508: unsigned char flag;
  5213                           ;doprnt.c: 523: union {
  5214                           ;doprnt.c: 524: unsigned long vd;
  5215                           ;doprnt.c: 525: double integ;
  5216                           ;doprnt.c: 526: } tmpval;
  5217                           ;doprnt.c: 528: unsigned int val;
  5218                           ;doprnt.c: 529: unsigned len;
  5219                           ;doprnt.c: 530: const char * cp;
  5220                           ;doprnt.c: 533: *ap = __va_start();
  5221                           
  5222                           ;incstack = 0
  5223  001A00  0E11               	movlw	low (?_sprintf+4)
  5224  001A02  6E14               	movwf	sprintf@ap,c
  5225  001A04  0E00               	movlw	high (?_sprintf+4)
  5226  001A06  6E15               	movwf	sprintf@ap+1,c
  5227                           
  5228                           ;doprnt.c: 536: while(c = *f++) {
  5229  001A08  D078               	goto	u2420
  5230  001A0A                     
  5231                           ;doprnt.c: 538: if(c != '%')
  5232  001A0A  0E25               	movlw	37
  5233  001A0C  1819               	xorwf	sprintf@c,w,c
  5234  001A0E  B4D8               	btfsc	status,2,c
  5235  001A10  D009               	goto	l323
  5236                           
  5237                           ;doprnt.c: 540: {
  5238                           ;doprnt.c: 541: ((*sp++ = (c)));
  5239  001A12  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5240  001A16  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5241  001A1A  C019  FFDF         	movff	sprintf@c,indf2
  5242  001A1E  4A0D               	infsnz	sprintf@sp,f,c
  5243  001A20  2A0E               	incf	sprintf@sp+1,f,c
  5244                           
  5245                           ;doprnt.c: 542: continue;
  5246  001A22  D06B               	goto	u2420
  5247  001A24                     l323:
  5248                           
  5249                           ;doprnt.c: 543: }
  5250                           ;doprnt.c: 548: flag = 0;
  5251  001A24  0E00               	movlw	0
  5252  001A26  6E13               	movwf	sprintf@flag,c
  5253                           
  5254                           ;doprnt.c: 635: switch(c = *f++) {
  5255  001A28  D003               	goto	l324
  5256  001A2A                     
  5257                           ;doprnt.c: 818: flag |= 0xC0;
  5258  001A2A  0EC0               	movlw	192
  5259  001A2C  1213               	iorwf	sprintf@flag,f,c
  5260                           
  5261                           ;doprnt.c: 822: }
  5262                           
  5263                           ;doprnt.c: 819: break;
  5264  001A2E  D011               	goto	l329
  5265  001A30                     l324:
  5266  001A30  C00F  FFF6         	movff	sprintf@f,tblptrl
  5267  001A34  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5268  001A38  4A0F               	infsnz	sprintf@f,f,c
  5269  001A3A  2A10               	incf	sprintf@f+1,f,c
  5270  001A3C                     	if	0	;tblptru may be non-zero
  5271  001A3C                     	endif
  5272  001A3C                     	if	0	;tblptru may be non-zero
  5273  001A3C                     	endif
  5274  001A3C  0008               	tblrd		*
  5275  001A3E  CFF5 F019          	movff	tablat,sprintf@c
  5276  001A42  5019               	movf	sprintf@c,w,c
  5277                           
  5278                           ; Switch size 1, requested type "space"
  5279                           ; Number of cases is 2, Range of values is 0 to 117
  5280                           ; switch strategies available:
  5281                           ; Name         Instructions Cycles
  5282                           ; simple_byte            7     4 (average)
  5283                           ;	Chosen strategy is simple_byte
  5284  001A44  0A00               	xorlw	0	; case 0
  5285  001A46  B4D8               	btfsc	status,2,c
  5286  001A48  D064               	goto	u2430
  5287  001A4A  0A75               	xorlw	117	; case 117
  5288  001A4C  B4D8               	btfsc	status,2,c
  5289  001A4E  D7ED               	goto	l328
  5290  001A50  D054               	goto	u2420
  5291  001A52                     l329:
  5292                           
  5293                           ;doprnt.c: 1273: {
  5294                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5295  001A52  C014  FFD9         	movff	sprintf@ap,fsr2l
  5296  001A56  C015  FFDA         	movff	sprintf@ap+1,fsr2h
  5297  001A5A  CFDE F016          	movff	postinc2,sprintf@val
  5298  001A5E  CFDD F017          	movff	postdec2,sprintf@val+1
  5299  001A62  0E02               	movlw	2
  5300  001A64  2614               	addwf	sprintf@ap,f,c
  5301  001A66  0E00               	movlw	0
  5302  001A68  2215               	addwfc	sprintf@ap+1,f,c
  5303                           
  5304                           ;doprnt.c: 1287: }
  5305                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5306  001A6A  0E01               	movlw	1
  5307  001A6C  6E19               	movwf	sprintf@c,c
  5308  001A6E  D011               	goto	l2636
  5309  001A70                     
  5310                           ;doprnt.c: 1306: if(val < dpowers[c])
  5311  001A70  5019               	movf	sprintf@c,w,c
  5312  001A72  0D02               	mullw	2
  5313  001A74  0E01               	movlw	low _dpowers
  5314  001A76  24F3               	addwf	prodl,w,c
  5315  001A78  6EF6               	movwf	tblptrl,c
  5316  001A7A  0E0F               	movlw	high _dpowers
  5317  001A7C  20F4               	addwfc	prodh,w,c
  5318  001A7E  6EF7               	movwf	tblptrh,c
  5319  001A80                     	if	0	;There are less than 3 active tblptr bytes
  5320  001A80                     	endif
  5321  001A80  0009               	tblrd		*+
  5322  001A82  50F5               	movf	tablat,w,c
  5323  001A84  5C16               	subwf	sprintf@val,w,c
  5324  001A86  0009               	tblrd		*+
  5325  001A88  50F5               	movf	tablat,w,c
  5326  001A8A  5817               	subwfb	sprintf@val+1,w,c
  5327  001A8C  A0D8               	btfss	status,0,c
  5328  001A8E  D005               	goto	u2410
  5329                           
  5330                           ;doprnt.c: 1307: break;
  5331  001A90  2A19               	incf	sprintf@c,f,c
  5332  001A92                     l2636:
  5333  001A92  0E05               	movlw	5
  5334  001A94  1819               	xorwf	sprintf@c,w,c
  5335  001A96  A4D8               	btfss	status,2,c
  5336  001A98  D7EB               	goto	l330
  5337  001A9A                     u2410:
  5338                           
  5339                           ;doprnt.c: 1422: {
  5340                           ;doprnt.c: 1469: }
  5341                           ;doprnt.c: 1472: prec = c;
  5342  001A9A  C019  F018         	movff	sprintf@c,sprintf@prec
  5343                           
  5344                           ;doprnt.c: 1474: while(prec--) {
  5345  001A9E  D029               	goto	l333
  5346  001AA0                     
  5347                           ;doprnt.c: 1478: {
  5348                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5349  001AA0  5018               	movf	sprintf@prec,w,c
  5350  001AA2  0D02               	mullw	2
  5351  001AA4  0E01               	movlw	low _dpowers
  5352  001AA6  24F3               	addwf	prodl,w,c
  5353  001AA8  6EF6               	movwf	tblptrl,c
  5354  001AAA  0E0F               	movlw	high _dpowers
  5355  001AAC  20F4               	addwfc	prodh,w,c
  5356  001AAE  6EF7               	movwf	tblptrh,c
  5357  001AB0                     	if	0	;There are less than 3 active tblptr bytes
  5358  001AB0                     	endif
  5359  001AB0  0009               	tblrd		*+
  5360  001AB2  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5361  001AB6  000A               	tblrd		*-
  5362  001AB8  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5363  001ABC  C016  F001         	movff	sprintf@val,___lwdiv@dividend
  5364  001AC0  C017  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  5365  001AC4  EC55  F013         	call	___lwdiv	;wreg free
  5366  001AC8  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5367  001ACC  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5368  001AD0  0E00               	movlw	0
  5369  001AD2  6E0B               	movwf	___lwmod@divisor+1,c
  5370  001AD4  0E0A               	movlw	10
  5371  001AD6  6E0A               	movwf	___lwmod@divisor,c
  5372  001AD8  ECCC  F013         	call	___lwmod	;wreg free
  5373  001ADC  5008               	movf	?___lwmod,w,c
  5374  001ADE  0F30               	addlw	48
  5375  001AE0  6E19               	movwf	sprintf@c,c
  5376                           
  5377                           ;doprnt.c: 1523: }
  5378                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5379  001AE2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5380  001AE6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5381  001AEA  C019  FFDF         	movff	sprintf@c,indf2
  5382  001AEE  4A0D               	infsnz	sprintf@sp,f,c
  5383  001AF0  2A0E               	incf	sprintf@sp+1,f,c
  5384  001AF2                     l333:
  5385  001AF2  0618               	decf	sprintf@prec,f,c
  5386  001AF4  2818               	incf	sprintf@prec,w,c
  5387  001AF6  A4D8               	btfss	status,2,c
  5388  001AF8  D7D3               	goto	l334
  5389  001AFA                     u2420:
  5390  001AFA  C00F  FFF6         	movff	sprintf@f,tblptrl
  5391  001AFE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5392  001B02  4A0F               	infsnz	sprintf@f,f,c
  5393  001B04  2A10               	incf	sprintf@f+1,f,c
  5394  001B06                     	if	0	;tblptru may be non-zero
  5395  001B06                     	endif
  5396  001B06                     	if	0	;tblptru may be non-zero
  5397  001B06                     	endif
  5398  001B06  0008               	tblrd		*
  5399  001B08  CFF5 F019          	movff	tablat,sprintf@c
  5400  001B0C  5019               	movf	sprintf@c,w,c
  5401  001B0E  A4D8               	btfss	status,2,c
  5402  001B10  D77C               	goto	l322
  5403  001B12                     u2430:
  5404                           
  5405                           ;doprnt.c: 1538: *sp = 0;
  5406                           
  5407                           ;doprnt.c: 1525: }
  5408                           ;doprnt.c: 1533: }
  5409                           ;doprnt.c: 1535: alldone:
  5410  001B12  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5411  001B16  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5412  001B1A  0E00               	movlw	0
  5413  001B1C  6EDF               	movwf	indf2,c
  5414  001B1E  0012               	return	
  5415  001B20                     __end_of_sprintf:
  5416                           	opt stack 0
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           prodh	equ	0xFF4
  5422                           prodl	equ	0xFF3
  5423                           postinc0	equ	0xFEE
  5424                           wreg	equ	0xFE8
  5425                           postdec1	equ	0xFE5
  5426                           fsr1l	equ	0xFE1
  5427                           indf2	equ	0xFDF
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function ___lwmod *****************
  5435 ;; Defined at:
  5436 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  dividend        2    7[COMRAM] unsigned int 
  5439 ;;  divisor         2    9[COMRAM] unsigned int 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  counter         1   11[COMRAM] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  2    7[COMRAM] unsigned int 
  5444 ;; Registers used:
  5445 ;;		wreg, status,2, status,0
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5451 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5452 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5454 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5455 ;;Total ram usage:        5 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_sprintf
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text24
  5465  002798                     __ptext24:
  5466                           	opt stack 0
  5467  002798                     ___lwmod:
  5468                           	opt stack 28
  5469                           
  5470                           ;incstack = 0
  5471  002798  500A               	movf	___lwmod@divisor,w,c
  5472  00279A  100B               	iorwf	___lwmod@divisor+1,w,c
  5473  00279C  B4D8               	btfsc	status,2,c
  5474  00279E  D018               	goto	l866
  5475  0027A0  0E01               	movlw	1
  5476  0027A2  6E0C               	movwf	___lwmod@counter,c
  5477  0027A4  D004               	goto	l861
  5478  0027A6  90D8               	bcf	status,0,c
  5479  0027A8  360A               	rlcf	___lwmod@divisor,f,c
  5480  0027AA  360B               	rlcf	___lwmod@divisor+1,f,c
  5481  0027AC  2A0C               	incf	___lwmod@counter,f,c
  5482  0027AE                     l861:
  5483  0027AE  AE0B               	btfss	___lwmod@divisor+1,7,c
  5484  0027B0  D7FA               	goto	l862
  5485  0027B2                     u2340:
  5486  0027B2  500A               	movf	___lwmod@divisor,w,c
  5487  0027B4  5C08               	subwf	___lwmod@dividend,w,c
  5488  0027B6  500B               	movf	___lwmod@divisor+1,w,c
  5489  0027B8  5809               	subwfb	___lwmod@dividend+1,w,c
  5490  0027BA  A0D8               	btfss	status,0,c
  5491  0027BC  D004               	goto	l865
  5492  0027BE  500A               	movf	___lwmod@divisor,w,c
  5493  0027C0  5E08               	subwf	___lwmod@dividend,f,c
  5494  0027C2  500B               	movf	___lwmod@divisor+1,w,c
  5495  0027C4  5A09               	subwfb	___lwmod@dividend+1,f,c
  5496  0027C6                     l865:
  5497  0027C6  90D8               	bcf	status,0,c
  5498  0027C8  320B               	rrcf	___lwmod@divisor+1,f,c
  5499  0027CA  320A               	rrcf	___lwmod@divisor,f,c
  5500  0027CC  2E0C               	decfsz	___lwmod@counter,f,c
  5501  0027CE  D7F1               	goto	u2340
  5502  0027D0                     l866:
  5503  0027D0  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5504  0027D4  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5505  0027D8  0012               	return		;funcret
  5506  0027DA                     __end_of___lwmod:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           prodh	equ	0xFF4
  5513                           prodl	equ	0xFF3
  5514                           postinc0	equ	0xFEE
  5515                           wreg	equ	0xFE8
  5516                           postdec1	equ	0xFE5
  5517                           fsr1l	equ	0xFE1
  5518                           indf2	equ	0xFDF
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function ___lwdiv *****************
  5526 ;; Defined at:
  5527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  dividend        2    0[COMRAM] unsigned int 
  5530 ;;  divisor         2    2[COMRAM] unsigned int 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  quotient        2    4[COMRAM] unsigned int 
  5533 ;;  counter         1    6[COMRAM] unsigned char 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  2    0[COMRAM] unsigned int 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5544 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5546 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5547 ;;Total ram usage:        7 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; This function calls:
  5550 ;;		Nothing
  5551 ;; This function is called by:
  5552 ;;		_sprintf
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text25
  5557  0026AA                     __ptext25:
  5558                           	opt stack 0
  5559  0026AA                     ___lwdiv:
  5560                           	opt stack 28
  5561                           
  5562                           ;incstack = 0
  5563  0026AA  0E00               	movlw	0
  5564  0026AC  6E06               	movwf	___lwdiv@quotient+1,c
  5565  0026AE  0E00               	movlw	0
  5566  0026B0  6E05               	movwf	___lwdiv@quotient,c
  5567  0026B2  5003               	movf	___lwdiv@divisor,w,c
  5568  0026B4  1004               	iorwf	___lwdiv@divisor+1,w,c
  5569  0026B6  B4D8               	btfsc	status,2,c
  5570  0026B8  D01C               	goto	l856
  5571  0026BA  0E01               	movlw	1
  5572  0026BC  6E07               	movwf	___lwdiv@counter,c
  5573  0026BE  D004               	goto	l851
  5574  0026C0  90D8               	bcf	status,0,c
  5575  0026C2  3603               	rlcf	___lwdiv@divisor,f,c
  5576  0026C4  3604               	rlcf	___lwdiv@divisor+1,f,c
  5577  0026C6  2A07               	incf	___lwdiv@counter,f,c
  5578  0026C8                     l851:
  5579  0026C8  AE04               	btfss	___lwdiv@divisor+1,7,c
  5580  0026CA  D7FA               	goto	l852
  5581  0026CC                     u2310:
  5582  0026CC  90D8               	bcf	status,0,c
  5583  0026CE  3605               	rlcf	___lwdiv@quotient,f,c
  5584  0026D0  3606               	rlcf	___lwdiv@quotient+1,f,c
  5585  0026D2  5003               	movf	___lwdiv@divisor,w,c
  5586  0026D4  5C01               	subwf	___lwdiv@dividend,w,c
  5587  0026D6  5004               	movf	___lwdiv@divisor+1,w,c
  5588  0026D8  5802               	subwfb	___lwdiv@dividend+1,w,c
  5589  0026DA  A0D8               	btfss	status,0,c
  5590  0026DC  D005               	goto	l855
  5591  0026DE  5003               	movf	___lwdiv@divisor,w,c
  5592  0026E0  5E01               	subwf	___lwdiv@dividend,f,c
  5593  0026E2  5004               	movf	___lwdiv@divisor+1,w,c
  5594  0026E4  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5595  0026E6  8005               	bsf	___lwdiv@quotient,0,c
  5596  0026E8                     l855:
  5597  0026E8  90D8               	bcf	status,0,c
  5598  0026EA  3204               	rrcf	___lwdiv@divisor+1,f,c
  5599  0026EC  3203               	rrcf	___lwdiv@divisor,f,c
  5600  0026EE  2E07               	decfsz	___lwdiv@counter,f,c
  5601  0026F0  D7ED               	goto	u2310
  5602  0026F2                     l856:
  5603  0026F2  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5604  0026F6  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5605  0026FA  0012               	return		;funcret
  5606  0026FC                     __end_of___lwdiv:
  5607                           	opt stack 0
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           prodh	equ	0xFF4
  5613                           prodl	equ	0xFF3
  5614                           postinc0	equ	0xFEE
  5615                           wreg	equ	0xFE8
  5616                           postdec1	equ	0xFE5
  5617                           fsr1l	equ	0xFE1
  5618                           indf2	equ	0xFDF
  5619                           postinc2	equ	0xFDE
  5620                           postdec2	equ	0xFDD
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function _lcd_putrs *****************
  5626 ;; Defined at:
  5627 ;;		line 221 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  5630 ;;		 -> STR_15(2), STR_7(2), STR_5(2), STR_3(2), 
  5631 ;;		 -> buffer2(20), 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5646 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5647 ;;Total ram usage:        2 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    4
  5650 ;; This function calls:
  5651 ;;		_lcd_putc
  5652 ;; This function is called by:
  5653 ;;		_write_in_lcd
  5654 ;;		_main
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text26
  5659  0026FC                     __ptext26:
  5660                           	opt stack 0
  5661  0026FC                     _lcd_putrs:
  5662                           	opt stack 25
  5663                           
  5664                           ;unmc_lcd_216.c: 223: while(*ptr){
  5665                           
  5666                           ;incstack = 0
  5667  0026FC  D014               	goto	l309
  5668  0026FE                     
  5669                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  5670  0026FE  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  5671  002702  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  5672  002706  6AF8               	clrf	tblptru,c
  5673  002708  0E0E               	movlw	(high __ramtop+-1)
  5674  00270A  64F7               	cpfsgt	tblptrh,c
  5675  00270C  D003               	bra	u2447
  5676  00270E  0008               	tblrd		*
  5677  002710  50F5               	movf	tablat,w,c
  5678  002712  D005               	bra	u2440
  5679  002714                     u2447:
  5680  002714  CFF6 FFE9          	movff	tblptrl,fsr0l
  5681  002718  CFF7 FFEA          	movff	tblptrh,fsr0h
  5682  00271C  50EF               	movf	indf0,w,c
  5683  00271E                     u2440:
  5684  00271E  ECA7  F013         	call	_lcd_putc
  5685  002722  4A09               	infsnz	lcd_putrs@ptr,f,c
  5686  002724  2A0A               	incf	lcd_putrs@ptr+1,f,c
  5687  002726                     l309:
  5688  002726  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  5689  00272A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  5690  00272E  6AF8               	clrf	tblptru,c
  5691  002730  0E0E               	movlw	(high __ramtop+-1)
  5692  002732  64F7               	cpfsgt	tblptrh,c
  5693  002734  D003               	bra	u2457
  5694  002736  0008               	tblrd		*
  5695  002738  50F5               	movf	tablat,w,c
  5696  00273A  D005               	bra	u2450
  5697  00273C                     u2457:
  5698  00273C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5699  002740  CFF7 FFEA          	movff	tblptrh,fsr0h
  5700  002744  50EF               	movf	indf0,w,c
  5701  002746                     u2450:
  5702  002746  0900               	iorlw	0
  5703  002748  B4D8               	btfsc	status,2,c
  5704  00274A  0012               	return	
  5705  00274C  D7D8               	goto	l310
  5706  00274E                     __end_of_lcd_putrs:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           indf0	equ	0xFEF
  5715                           postinc0	equ	0xFEE
  5716                           fsr0h	equ	0xFEA
  5717                           fsr0l	equ	0xFE9
  5718                           wreg	equ	0xFE8
  5719                           postdec1	equ	0xFE5
  5720                           fsr1l	equ	0xFE1
  5721                           indf2	equ	0xFDF
  5722                           postinc2	equ	0xFDE
  5723                           postdec2	equ	0xFDD
  5724                           fsr2h	equ	0xFDA
  5725                           fsr2l	equ	0xFD9
  5726                           status	equ	0xFD8
  5727                           
  5728 ;; *************** function _lcd_putc *****************
  5729 ;; Defined at:
  5730 ;;		line 172 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  c               1    wreg     unsigned char 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  c               1    7[COMRAM] unsigned char 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5748 ;;Total ram usage:        1 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    3
  5751 ;; This function calls:
  5752 ;;		_lcd_gotoxy
  5753 ;;		_lcd_send_byte
  5754 ;; This function is called by:
  5755 ;;		_lcd_puts
  5756 ;;		_lcd_putrs
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text27
  5761  00274E                     __ptext27:
  5762                           	opt stack 0
  5763  00274E                     _lcd_putc:
  5764                           	opt stack 25
  5765                           
  5766                           ;incstack = 0
  5767                           ;lcd_putc@c stored from wreg
  5768  00274E  6E08               	movwf	lcd_putc@c,c
  5769                           
  5770                           ;unmc_lcd_216.c: 173: switch(c){
  5771  002750  D018               	goto	l288
  5772  002752                     
  5773                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  5774  002752  0E01               	movlw	1
  5775  002754  6E03               	movwf	lcd_send_byte@n,c
  5776  002756  0E00               	movlw	0
  5777  002758  EC67  F014         	call	_lcd_send_byte
  5778                           
  5779                           ;unmc_lcd_216.c: 176: break;
  5780  00275C  0012               	return	
  5781  00275E                     
  5782                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  5783  00275E  0E02               	movlw	2
  5784  002760  6E05               	movwf	lcd_gotoxy@y,c
  5785  002762  0E01               	movlw	1
  5786  002764  ECCF  F014         	call	_lcd_gotoxy
  5787                           
  5788                           ;unmc_lcd_216.c: 179: break;
  5789  002768  0012               	return	
  5790  00276A                     
  5791                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  5792  00276A  0E10               	movlw	16
  5793  00276C  6E03               	movwf	lcd_send_byte@n,c
  5794  00276E  0E00               	movlw	0
  5795  002770  EC67  F014         	call	_lcd_send_byte
  5796                           
  5797                           ;unmc_lcd_216.c: 182: break;
  5798  002774  0012               	return	
  5799  002776                     
  5800                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  5801  002776  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  5802  00277A  0E01               	movlw	1
  5803  00277C  EC67  F014         	call	_lcd_send_byte
  5804                           
  5805                           ;unmc_lcd_216.c: 186: }
  5806                           
  5807                           ;unmc_lcd_216.c: 185: break;
  5808  002780  0012               	return	
  5809  002782                     l288:
  5810  002782  5008               	movf	lcd_putc@c,w,c
  5811                           
  5812                           ; Switch size 1, requested type "space"
  5813                           ; Number of cases is 3, Range of values is 8 to 12
  5814                           ; switch strategies available:
  5815                           ; Name         Instructions Cycles
  5816                           ; simple_byte           10     6 (average)
  5817                           ;	Chosen strategy is simple_byte
  5818  002784  0A08               	xorlw	8	; case 8
  5819  002786  B4D8               	btfsc	status,2,c
  5820  002788  D7F0               	goto	l292
  5821  00278A  0A02               	xorlw	2	; case 10
  5822  00278C  B4D8               	btfsc	status,2,c
  5823  00278E  D7E7               	goto	l291
  5824  002790  0A06               	xorlw	6	; case 12
  5825  002792  B4D8               	btfsc	status,2,c
  5826  002794  D7DE               	goto	l289
  5827  002796  D7EF               	goto	l293
  5828  002798                     __end_of_lcd_putc:
  5829                           	opt stack 0
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           prodh	equ	0xFF4
  5835                           prodl	equ	0xFF3
  5836                           indf0	equ	0xFEF
  5837                           postinc0	equ	0xFEE
  5838                           fsr0h	equ	0xFEA
  5839                           fsr0l	equ	0xFE9
  5840                           wreg	equ	0xFE8
  5841                           postdec1	equ	0xFE5
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           fsr2h	equ	0xFDA
  5847                           fsr2l	equ	0xFD9
  5848                           status	equ	0xFD8
  5849                           
  5850 ;; *************** function _lcd_gotoxy *****************
  5851 ;; Defined at:
  5852 ;;		line 158 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  x               1    wreg     unsigned char 
  5855 ;;  y               1    4[COMRAM] unsigned char 
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;  x               1    5[COMRAM] unsigned char 
  5858 ;;  address         1    6[COMRAM] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, status,0, cstack
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5868 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5871 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5872 ;;Total ram usage:        3 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    2
  5875 ;; This function calls:
  5876 ;;		_lcd_send_byte
  5877 ;; This function is called by:
  5878 ;;		_escribir_numero
  5879 ;;		_main
  5880 ;;		_lcd_putc
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text28
  5885  00299E                     __ptext28:
  5886                           	opt stack 0
  5887  00299E                     _lcd_gotoxy:
  5888                           	opt stack 25
  5889                           
  5890                           ;incstack = 0
  5891                           ;lcd_gotoxy@x stored from wreg
  5892  00299E  6E06               	movwf	lcd_gotoxy@x,c
  5893                           
  5894                           ;unmc_lcd_216.c: 159: int8 address;
  5895                           ;unmc_lcd_216.c: 161: if(y != 1)
  5896  0029A0  0405               	decf	lcd_gotoxy@y,w,c
  5897  0029A2  B4D8               	btfsc	status,2,c
  5898  0029A4  D002               	goto	l283
  5899                           
  5900                           ;unmc_lcd_216.c: 162: address = 0x40;
  5901  0029A6  0E40               	movlw	64
  5902  0029A8  D001               	goto	L2
  5903  0029AA                     l283:
  5904                           
  5905                           ;unmc_lcd_216.c: 163: else
  5906                           ;unmc_lcd_216.c: 164: address=0;
  5907  0029AA  0E00               	movlw	0
  5908  0029AC                     L2:
  5909  0029AC  6E07               	movwf	lcd_gotoxy@address,c
  5910                           
  5911                           ;unmc_lcd_216.c: 166: address += x-1;
  5912  0029AE  0406               	decf	lcd_gotoxy@x,w,c
  5913  0029B0  2607               	addwf	lcd_gotoxy@address,f,c
  5914                           
  5915                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  5916  0029B2  5007               	movf	lcd_gotoxy@address,w,c
  5917  0029B4  0980               	iorlw	128
  5918  0029B6  6E03               	movwf	lcd_send_byte@n,c
  5919  0029B8  0E00               	movlw	0
  5920  0029BA  EC67  F014         	call	_lcd_send_byte
  5921  0029BE  0012               	return		;funcret
  5922  0029C0                     __end_of_lcd_gotoxy:
  5923                           	opt stack 0
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           prodh	equ	0xFF4
  5929                           prodl	equ	0xFF3
  5930                           indf0	equ	0xFEF
  5931                           postinc0	equ	0xFEE
  5932                           fsr0h	equ	0xFEA
  5933                           fsr0l	equ	0xFE9
  5934                           wreg	equ	0xFE8
  5935                           postdec1	equ	0xFE5
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function ___awdiv *****************
  5945 ;; Defined at:
  5946 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  dividend        2    0[COMRAM] int 
  5949 ;;  divisor         2    2[COMRAM] int 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  quotient        2    6[COMRAM] int 
  5952 ;;  sign            1    5[COMRAM] unsigned char 
  5953 ;;  counter         1    4[COMRAM] unsigned char 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  2    0[COMRAM] int 
  5956 ;; Registers used:
  5957 ;;		wreg, status,2, status,0
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5964 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5966 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5967 ;;Total ram usage:        8 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_main
  5973 ;;		_Write_RTC
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text29
  5978  002466                     __ptext29:
  5979                           	opt stack 0
  5980  002466                     ___awdiv:
  5981                           	opt stack 30
  5982                           
  5983                           ;incstack = 0
  5984  002466  0E00               	movlw	0
  5985  002468  6E06               	movwf	___awdiv@sign,c
  5986  00246A  AE04               	btfss	___awdiv@divisor+1,7,c
  5987  00246C  D006               	goto	l594
  5988  00246E  6C03               	negf	___awdiv@divisor,c
  5989  002470  1E04               	comf	___awdiv@divisor+1,f,c
  5990  002472  B0D8               	btfsc	status,0,c
  5991  002474  2A04               	incf	___awdiv@divisor+1,f,c
  5992  002476  0E01               	movlw	1
  5993  002478  6E06               	movwf	___awdiv@sign,c
  5994  00247A                     l594:
  5995  00247A  AE02               	btfss	___awdiv@dividend+1,7,c
  5996  00247C  D006               	goto	l595
  5997  00247E  6C01               	negf	___awdiv@dividend,c
  5998  002480  1E02               	comf	___awdiv@dividend+1,f,c
  5999  002482  B0D8               	btfsc	status,0,c
  6000  002484  2A02               	incf	___awdiv@dividend+1,f,c
  6001  002486  0E01               	movlw	1
  6002  002488  1A06               	xorwf	___awdiv@sign,f,c
  6003  00248A                     l595:
  6004  00248A  0E00               	movlw	0
  6005  00248C  6E08               	movwf	___awdiv@quotient+1,c
  6006  00248E  0E00               	movlw	0
  6007  002490  6E07               	movwf	___awdiv@quotient,c
  6008  002492  5003               	movf	___awdiv@divisor,w,c
  6009  002494  1004               	iorwf	___awdiv@divisor+1,w,c
  6010  002496  B4D8               	btfsc	status,2,c
  6011  002498  D01C               	goto	l602
  6012  00249A  0E01               	movlw	1
  6013  00249C  6E05               	movwf	___awdiv@counter,c
  6014  00249E  D004               	goto	l597
  6015  0024A0  90D8               	bcf	status,0,c
  6016  0024A2  3603               	rlcf	___awdiv@divisor,f,c
  6017  0024A4  3604               	rlcf	___awdiv@divisor+1,f,c
  6018  0024A6  2A05               	incf	___awdiv@counter,f,c
  6019  0024A8                     l597:
  6020  0024A8  AE04               	btfss	___awdiv@divisor+1,7,c
  6021  0024AA  D7FA               	goto	l598
  6022  0024AC                     u2950:
  6023  0024AC  90D8               	bcf	status,0,c
  6024  0024AE  3607               	rlcf	___awdiv@quotient,f,c
  6025  0024B0  3608               	rlcf	___awdiv@quotient+1,f,c
  6026  0024B2  5003               	movf	___awdiv@divisor,w,c
  6027  0024B4  5C01               	subwf	___awdiv@dividend,w,c
  6028  0024B6  5004               	movf	___awdiv@divisor+1,w,c
  6029  0024B8  5802               	subwfb	___awdiv@dividend+1,w,c
  6030  0024BA  A0D8               	btfss	status,0,c
  6031  0024BC  D005               	goto	l601
  6032  0024BE  5003               	movf	___awdiv@divisor,w,c
  6033  0024C0  5E01               	subwf	___awdiv@dividend,f,c
  6034  0024C2  5004               	movf	___awdiv@divisor+1,w,c
  6035  0024C4  5A02               	subwfb	___awdiv@dividend+1,f,c
  6036  0024C6  8007               	bsf	___awdiv@quotient,0,c
  6037  0024C8                     l601:
  6038  0024C8  90D8               	bcf	status,0,c
  6039  0024CA  3204               	rrcf	___awdiv@divisor+1,f,c
  6040  0024CC  3203               	rrcf	___awdiv@divisor,f,c
  6041  0024CE  2E05               	decfsz	___awdiv@counter,f,c
  6042  0024D0  D7ED               	goto	u2950
  6043  0024D2                     l602:
  6044  0024D2  5006               	movf	___awdiv@sign,w,c
  6045  0024D4  B4D8               	btfsc	status,2,c
  6046  0024D6  D004               	goto	l603
  6047  0024D8  6C07               	negf	___awdiv@quotient,c
  6048  0024DA  1E08               	comf	___awdiv@quotient+1,f,c
  6049  0024DC  B0D8               	btfsc	status,0,c
  6050  0024DE  2A08               	incf	___awdiv@quotient+1,f,c
  6051  0024E0                     l603:
  6052  0024E0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6053  0024E4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6054  0024E8  0012               	return	
  6055  0024EA                     __end_of___awdiv:
  6056                           	opt stack 0
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           indf0	equ	0xFEF
  6064                           postinc0	equ	0xFEE
  6065                           fsr0h	equ	0xFEA
  6066                           fsr0l	equ	0xFE9
  6067                           wreg	equ	0xFE8
  6068                           postdec1	equ	0xFE5
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _Setup *****************
  6078 ;; Defined at:
  6079 ;;		line 22 in file "main.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    3
  6100 ;; This function calls:
  6101 ;;		_lcd_comand
  6102 ;;		_lcd_init
  6103 ;; This function is called by:
  6104 ;;		_main
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text30
  6109  00281A                     __ptext30:
  6110                           	opt stack 0
  6111  00281A                     _Setup:
  6112                           	opt stack 27
  6113                           
  6114                           ;main.c: 23: OSCTUNEbits.INTSRC = 1;
  6115                           
  6116                           ;incstack = 0
  6117  00281A  8E9B               	bsf	3995,7,c	;volatile
  6118                           
  6119                           ;main.c: 24: OSCTUNEbits.PLLEN = 0;
  6120  00281C  9C9B               	bcf	3995,6,c	;volatile
  6121                           
  6122                           ;main.c: 25: OSCCONbits.IRCF0 = 1;
  6123  00281E  88D3               	bsf	4051,4,c	;volatile
  6124                           
  6125                           ;main.c: 26: OSCCONbits.IRCF1 = 1;
  6126  002820  8AD3               	bsf	4051,5,c	;volatile
  6127                           
  6128                           ;main.c: 27: OSCCONbits.IRCF2 = 1;
  6129  002822  8CD3               	bsf	4051,6,c	;volatile
  6130                           
  6131                           ;main.c: 28: OSCCONbits.SCS0 = 0;
  6132  002824  90D3               	bcf	4051,0,c	;volatile
  6133                           
  6134                           ;main.c: 29: OSCCONbits.SCS1 = 0;
  6135  002826  92D3               	bcf	4051,1,c	;volatile
  6136                           
  6137                           ;main.c: 30: TRISA = 0b00010111;
  6138  002828  0E17               	movlw	23
  6139  00282A  6E92               	movwf	3986,c	;volatile
  6140                           
  6141                           ;main.c: 31: TRISB = 0;
  6142  00282C  0E00               	movlw	0
  6143  00282E  6E93               	movwf	3987,c	;volatile
  6144                           
  6145                           ;main.c: 32: TRISC = 0b00000111;
  6146  002830  0E07               	movlw	7
  6147  002832  6E94               	movwf	3988,c	;volatile
  6148                           
  6149                           ;main.c: 33: INTCON2bits.RBPU = 1;
  6150  002834  8EF1               	bsf	intcon2,7,c	;volatile
  6151                           
  6152                           ;main.c: 34: ANCON0 = 0b11111111;
  6153  002836  010F               	movlb	15	; () banked
  6154  002838  6948               	setf	72,b	;volatile
  6155                           
  6156                           ;main.c: 35: ANCON0 = 0b10010111;
  6157  00283A  0E97               	movlw	151
  6158  00283C  010F               	movlb	15	; () banked
  6159  00283E  6F48               	movwf	72,b	;volatile
  6160                           
  6161                           ;main.c: 36: ADCON0 = 0b00101101;
  6162  002840  0E2D               	movlw	45
  6163  002842  6EC2               	movwf	4034,c	;volatile
  6164                           
  6165                           ;main.c: 37: ADCON1 = 0b00010000;
  6166  002844  0E10               	movlw	16
  6167  002846  6EC1               	movwf	4033,c	;volatile
  6168                           
  6169                           ; BSR set to: 15
  6170                           ;main.c: 40: T1CONbits.T1OSCEN = 1;
  6171  002848  86CD               	bsf	4045,3,c	;volatile
  6172                           
  6173                           ; BSR set to: 15
  6174                           ;main.c: 42: lcd_init();
  6175  00284A  ECB1  F012         	call	_lcd_init	;wreg free
  6176                           
  6177                           ;main.c: 43: lcd_comand(0b00001100);
  6178  00284E  0E0C               	movlw	12
  6179  002850  ECF7  F014         	call	_lcd_comand
  6180                           
  6181                           ;main.c: 44: LATBbits.LATB1 = 0;;
  6182  002854  928A               	bcf	3978,1,c	;volatile
  6183                           
  6184                           ;main.c: 45: LATBbits.LATB0 = 0;;
  6185  002856  908A               	bcf	3978,0,c	;volatile
  6186  002858  0012               	return		;funcret
  6187  00285A                     __end_of_Setup:
  6188                           	opt stack 0
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           prodh	equ	0xFF4
  6194                           prodl	equ	0xFF3
  6195                           intcon2	equ	0xFF1
  6196                           indf0	equ	0xFEF
  6197                           postinc0	equ	0xFEE
  6198                           fsr0h	equ	0xFEA
  6199                           fsr0l	equ	0xFE9
  6200                           wreg	equ	0xFE8
  6201                           postdec1	equ	0xFE5
  6202                           fsr1l	equ	0xFE1
  6203                           indf2	equ	0xFDF
  6204                           postinc2	equ	0xFDE
  6205                           postdec2	equ	0xFDD
  6206                           fsr2h	equ	0xFDA
  6207                           fsr2l	equ	0xFD9
  6208                           status	equ	0xFD8
  6209                           
  6210 ;; *************** function _lcd_init *****************
  6211 ;; Defined at:
  6212 ;;		line 119 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;		None
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;  i               1    4[COMRAM] unsigned char 
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  1    wreg      void 
  6219 ;; Registers used:
  6220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6230 ;;Total ram usage:        1 bytes
  6231 ;; Hardware stack levels used:    1
  6232 ;; Hardware stack levels required when called:    2
  6233 ;; This function calls:
  6234 ;;		_Delay1KTCYx
  6235 ;;		_lcd_send_byte
  6236 ;;		_lcd_send_nibble
  6237 ;; This function is called by:
  6238 ;;		_Setup
  6239 ;;		_main
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           	psect	text31
  6244  002562                     __ptext31:
  6245                           	opt stack 0
  6246  002562                     _lcd_init:
  6247                           	opt stack 28
  6248                           
  6249                           ;unmc_lcd_216.c: 120: int8 i;
  6250                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  6251                           
  6252                           ;incstack = 0
  6253  002562  9693               	bcf	3987,3,c	;volatile
  6254                           
  6255                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  6256  002564  9493               	bcf	3987,2,c	;volatile
  6257                           
  6258                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  6259  002566  968A               	bcf	3978,3,c	;volatile
  6260                           
  6261                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  6262  002568  948A               	bcf	3978,2,c	;volatile
  6263                           
  6264                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  6265  00256A  9893               	bcf	3987,4,c	;volatile
  6266                           
  6267                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  6268  00256C  9A93               	bcf	3987,5,c	;volatile
  6269                           
  6270                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  6271  00256E  9C93               	bcf	3987,6,c	;volatile
  6272                           
  6273                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  6274  002570  9E93               	bcf	3987,7,c	;volatile
  6275                           
  6276                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  6277  002572  0E0A               	movlw	10
  6278  002574  ECE0  F014         	call	_Delay1KTCYx
  6279                           
  6280                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  6281  002578  0E0A               	movlw	10
  6282  00257A  ECE0  F014         	call	_Delay1KTCYx
  6283                           
  6284                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  6285  00257E  0E0A               	movlw	10
  6286  002580  ECE0  F014         	call	_Delay1KTCYx
  6287                           
  6288                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  6289  002584  0E00               	movlw	0
  6290  002586  6E05               	movwf	lcd_init@i,c
  6291  002588                     l2802:
  6292  002588  0E02               	movlw	2
  6293  00258A  6405               	cpfsgt	lcd_init@i,c
  6294  00258C  D001               	goto	l276
  6295  00258E  D008               	goto	u2660
  6296  002590                     l276:
  6297                           
  6298                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  6299  002590  0E03               	movlw	3
  6300  002592  ECEC  F012         	call	_lcd_send_nibble
  6301                           
  6302                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  6303  002596  0E0A               	movlw	10
  6304  002598  ECE0  F014         	call	_Delay1KTCYx
  6305  00259C  2A05               	incf	lcd_init@i,f,c
  6306  00259E  D7F4               	goto	l2802
  6307  0025A0                     u2660:
  6308                           
  6309                           ;unmc_lcd_216.c: 146: }
  6310                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  6311  0025A0  0E02               	movlw	2
  6312  0025A2  ECEC  F012         	call	_lcd_send_nibble
  6313                           
  6314                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  6315  0025A6  0E00               	movlw	0
  6316  0025A8  6E05               	movwf	lcd_init@i,c
  6317  0025AA                     l2816:
  6318  0025AA  0E03               	movlw	3
  6319  0025AC  6405               	cpfsgt	lcd_init@i,c
  6320  0025AE  D001               	goto	l278
  6321  0025B0  0012               	return	
  6322  0025B2                     l278:
  6323                           
  6324                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  6325  0025B2  5005               	movf	lcd_init@i,w,c
  6326  0025B4  0D01               	mullw	1
  6327  0025B6  0E0B               	movlw	low _LCD_INIT_STRING
  6328  0025B8  24F3               	addwf	prodl,w,c
  6329  0025BA  6EF6               	movwf	tblptrl,c
  6330  0025BC  0E0F               	movlw	high _LCD_INIT_STRING
  6331  0025BE  20F4               	addwfc	prodh,w,c
  6332  0025C0  6EF7               	movwf	tblptrh,c
  6333  0025C2                     	if	0	;There are less than 3 active tblptr bytes
  6334  0025C2                     	endif
  6335  0025C2  0008               	tblrd		*
  6336  0025C4  CFF5 F003          	movff	tablat,lcd_send_byte@n
  6337  0025C8  0E00               	movlw	0
  6338  0025CA  EC67  F014         	call	_lcd_send_byte
  6339                           
  6340                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  6341  0025CE  0E0A               	movlw	10
  6342  0025D0  ECE0  F014         	call	_Delay1KTCYx
  6343  0025D4  2A05               	incf	lcd_init@i,f,c
  6344  0025D6  D7E9               	goto	l2816
  6345  0025D8                     __end_of_lcd_init:
  6346                           	opt stack 0
  6347                           tblptru	equ	0xFF8
  6348                           tblptrh	equ	0xFF7
  6349                           tblptrl	equ	0xFF6
  6350                           tablat	equ	0xFF5
  6351                           prodh	equ	0xFF4
  6352                           prodl	equ	0xFF3
  6353                           intcon2	equ	0xFF1
  6354                           indf0	equ	0xFEF
  6355                           postinc0	equ	0xFEE
  6356                           fsr0h	equ	0xFEA
  6357                           fsr0l	equ	0xFE9
  6358                           wreg	equ	0xFE8
  6359                           postdec1	equ	0xFE5
  6360                           fsr1l	equ	0xFE1
  6361                           indf2	equ	0xFDF
  6362                           postinc2	equ	0xFDE
  6363                           postdec2	equ	0xFDD
  6364                           fsr2h	equ	0xFDA
  6365                           fsr2l	equ	0xFD9
  6366                           status	equ	0xFD8
  6367                           
  6368 ;; *************** function _Delay1KTCYx *****************
  6369 ;; Defined at:
  6370 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d1ktcyx.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;  unit            1    wreg     unsigned char 
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  unit            1    0[COMRAM] unsigned char 
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  1    wreg      void 
  6377 ;; Registers used:
  6378 ;;		wreg
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6387 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6388 ;;Total ram usage:        1 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; This function calls:
  6391 ;;		Nothing
  6392 ;; This function is called by:
  6393 ;;		_lcd_init
  6394 ;;		_DelayPORXLCD
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text32
  6399  0029C0                     __ptext32:
  6400                           	opt stack 0
  6401  0029C0                     _Delay1KTCYx:
  6402                           	opt stack 29
  6403                           
  6404                           ;incstack = 0
  6405                           ;Delay1KTCYx@unit stored from wreg
  6406  0029C0  6E01               	movwf	Delay1KTCYx@unit,c
  6407  0029C2                     l642:
  6408  0029C2  0EC8               	movlw	200
  6409  0029C4                     u3707:
  6410  0029C4  D000               	nop2	
  6411  0029C6  2EE8               	decfsz	wreg,f,c
  6412  0029C8  D7FD               	bra	u3707
  6413  0029CA  2E01               	decfsz	Delay1KTCYx@unit,f,c
  6414  0029CC  D7FA               	goto	l642
  6415  0029CE  0012               	return	
  6416  0029D0                     __end_of_Delay1KTCYx:
  6417                           	opt stack 0
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon2	equ	0xFF1
  6425                           indf0	equ	0xFEF
  6426                           postinc0	equ	0xFEE
  6427                           fsr0h	equ	0xFEA
  6428                           fsr0l	equ	0xFE9
  6429                           wreg	equ	0xFE8
  6430                           postdec1	equ	0xFE5
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           fsr2h	equ	0xFDA
  6436                           fsr2l	equ	0xFD9
  6437                           status	equ	0xFD8
  6438                           
  6439 ;; *************** function _lcd_comand *****************
  6440 ;; Defined at:
  6441 ;;		line 189 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  d               1    wreg     unsigned char 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  d               1    4[COMRAM] unsigned char 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6459 ;;Total ram usage:        1 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    2
  6462 ;; This function calls:
  6463 ;;		_lcd_send_byte
  6464 ;; This function is called by:
  6465 ;;		_Setup
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text33
  6470  0029EE                     __ptext33:
  6471                           	opt stack 0
  6472  0029EE                     _lcd_comand:
  6473                           	opt stack 27
  6474                           
  6475                           ;incstack = 0
  6476                           ;lcd_comand@d stored from wreg
  6477  0029EE  6E05               	movwf	lcd_comand@d,c
  6478                           
  6479                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  6480  0029F0  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  6481  0029F4  0E00               	movlw	0
  6482  0029F6  EC67  F014         	call	_lcd_send_byte
  6483  0029FA  0012               	return		;funcret
  6484  0029FC                     __end_of_lcd_comand:
  6485                           	opt stack 0
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           intcon2	equ	0xFF1
  6493                           indf0	equ	0xFEF
  6494                           postinc0	equ	0xFEE
  6495                           fsr0h	equ	0xFEA
  6496                           fsr0l	equ	0xFE9
  6497                           wreg	equ	0xFE8
  6498                           postdec1	equ	0xFE5
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           postinc2	equ	0xFDE
  6502                           postdec2	equ	0xFDD
  6503                           fsr2h	equ	0xFDA
  6504                           fsr2l	equ	0xFD9
  6505                           status	equ	0xFD8
  6506                           
  6507 ;; *************** function _lcd_send_byte *****************
  6508 ;; Defined at:
  6509 ;;		line 86 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;  address         1    wreg     unsigned char 
  6512 ;;  n               1    2[COMRAM] unsigned char 
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  address         1    3[COMRAM] unsigned char 
  6515 ;; Return value:  Size  Location     Type
  6516 ;;                  1    wreg      void 
  6517 ;; Registers used:
  6518 ;;		wreg, status,2, status,0, cstack
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6524 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6528 ;;Total ram usage:        2 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:    1
  6531 ;; This function calls:
  6532 ;;		_Delay100TCYx
  6533 ;;		_lcd_send_nibble
  6534 ;; This function is called by:
  6535 ;;		_lcd_init
  6536 ;;		_lcd_gotoxy
  6537 ;;		_lcd_putc
  6538 ;;		_lcd_comand
  6539 ;;		_lcd_setcursor_vb
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text34
  6544  0028CE                     __ptext34:
  6545                           	opt stack 0
  6546  0028CE                     _lcd_send_byte:
  6547                           	opt stack 26
  6548                           
  6549                           ;incstack = 0
  6550                           ;lcd_send_byte@address stored from wreg
  6551  0028CE  6E04               	movwf	lcd_send_byte@address,c
  6552                           
  6553                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  6554  0028D0  968A               	bcf	3978,3,c	;volatile
  6555                           
  6556                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  6557  0028D2  0E02               	movlw	2
  6558  0028D4  ECE8  F014         	call	_Delay100TCYx
  6559                           
  6560                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  6561  0028D8  9893               	bcf	3987,4,c	;volatile
  6562                           
  6563                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  6564  0028DA  9A93               	bcf	3987,5,c	;volatile
  6565                           
  6566                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  6567  0028DC  9C93               	bcf	3987,6,c	;volatile
  6568                           
  6569                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  6570  0028DE  9E93               	bcf	3987,7,c	;volatile
  6571                           
  6572                           ;unmc_lcd_216.c: 101: if(address)
  6573  0028E0  5004               	movf	lcd_send_byte@address,w,c
  6574  0028E2  B4D8               	btfsc	status,2,c
  6575  0028E4  D002               	goto	l271
  6576                           
  6577                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  6578  0028E6  868A               	bsf	3978,3,c	;volatile
  6579  0028E8  D001               	goto	l272
  6580  0028EA                     l271:
  6581                           
  6582                           ;unmc_lcd_216.c: 103: else
  6583                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  6584  0028EA  968A               	bcf	3978,3,c	;volatile
  6585  0028EC                     l272:
  6586                           
  6587                           ;unmc_lcd_216.c: 106: __nop();
  6588  0028EC  F000               	nop	
  6589                           
  6590                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  6591  0028EE  3803               	swapf	lcd_send_byte@n,w,c
  6592  0028F0  0B0F               	andlw	15
  6593  0028F2  ECEC  F012         	call	_lcd_send_nibble
  6594                           
  6595                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  6596  0028F6  5003               	movf	lcd_send_byte@n,w,c
  6597  0028F8  0B0F               	andlw	15
  6598  0028FA  ECEC  F012         	call	_lcd_send_nibble
  6599  0028FE  0012               	return		;funcret
  6600  002900                     __end_of_lcd_send_byte:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon2	equ	0xFF1
  6609                           indf0	equ	0xFEF
  6610                           postinc0	equ	0xFEE
  6611                           fsr0h	equ	0xFEA
  6612                           fsr0l	equ	0xFE9
  6613                           wreg	equ	0xFE8
  6614                           postdec1	equ	0xFE5
  6615                           fsr1l	equ	0xFE1
  6616                           indf2	equ	0xFDF
  6617                           postinc2	equ	0xFDE
  6618                           postdec2	equ	0xFDD
  6619                           fsr2h	equ	0xFDA
  6620                           fsr2l	equ	0xFD9
  6621                           status	equ	0xFD8
  6622                           
  6623 ;; *************** function _lcd_send_nibble *****************
  6624 ;; Defined at:
  6625 ;;		line 25 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  nibble          1    wreg     unsigned char 
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  nibble          1    1[COMRAM] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg, status,2, status,0
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6640 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6643 ;;Total ram usage:        2 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		_lcd_send_byte
  6649 ;;		_lcd_init
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text35
  6654  0025D8                     __ptext35:
  6655                           	opt stack 0
  6656  0025D8                     _lcd_send_nibble:
  6657                           	opt stack 26
  6658                           
  6659                           ;incstack = 0
  6660                           ;lcd_send_nibble@nibble stored from wreg
  6661  0025D8  6E02               	movwf	lcd_send_nibble@nibble,c
  6662                           
  6663                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  6664  0025DA  A002               	btfss	lcd_send_nibble@nibble,0,c
  6665  0025DC  D003               	goto	u1720
  6666  0025DE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6667  0025E0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6668  0025E2  D001               	goto	u1738
  6669  0025E4                     u1720:
  6670  0025E4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6671  0025E6                     u1738:
  6672  0025E6  3A01               	swapf	??_lcd_send_nibble,f,c
  6673  0025E8  508A               	movf	3978,w,c	;volatile
  6674  0025EA  1801               	xorwf	??_lcd_send_nibble,w,c
  6675  0025EC  0BEF               	andlw	-17
  6676  0025EE  1801               	xorwf	??_lcd_send_nibble,w,c
  6677  0025F0  6E8A               	movwf	3978,c	;volatile
  6678                           
  6679                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  6680  0025F2  A202               	btfss	lcd_send_nibble@nibble,1,c
  6681  0025F4  D003               	goto	u1740
  6682  0025F6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6683  0025F8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6684  0025FA  D001               	goto	u1758
  6685  0025FC                     u1740:
  6686  0025FC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6687  0025FE                     u1758:
  6688  0025FE  3A01               	swapf	??_lcd_send_nibble,f,c
  6689  002600  4601               	rlncf	??_lcd_send_nibble,f,c
  6690  002602  508A               	movf	3978,w,c	;volatile
  6691  002604  1801               	xorwf	??_lcd_send_nibble,w,c
  6692  002606  0BDF               	andlw	-33
  6693  002608  1801               	xorwf	??_lcd_send_nibble,w,c
  6694  00260A  6E8A               	movwf	3978,c	;volatile
  6695                           
  6696                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  6697  00260C  A402               	btfss	lcd_send_nibble@nibble,2,c
  6698  00260E  D003               	goto	u1760
  6699  002610  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6700  002612  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6701  002614  D001               	goto	u1778
  6702  002616                     u1760:
  6703  002616  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6704  002618                     u1778:
  6705  002618  3A01               	swapf	??_lcd_send_nibble,f,c
  6706  00261A  4601               	rlncf	??_lcd_send_nibble,f,c
  6707  00261C  4601               	rlncf	??_lcd_send_nibble,f,c
  6708  00261E  508A               	movf	3978,w,c	;volatile
  6709  002620  1801               	xorwf	??_lcd_send_nibble,w,c
  6710  002622  0BBF               	andlw	-65
  6711  002624  1801               	xorwf	??_lcd_send_nibble,w,c
  6712  002626  6E8A               	movwf	3978,c	;volatile
  6713                           
  6714                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  6715  002628  A602               	btfss	lcd_send_nibble@nibble,3,c
  6716  00262A  D003               	goto	u1780
  6717  00262C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6718  00262E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6719  002630  D001               	goto	u1798
  6720  002632                     u1780:
  6721  002632  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6722  002634                     u1798:
  6723  002634  3201               	rrcf	??_lcd_send_nibble,f,c
  6724  002636  3201               	rrcf	??_lcd_send_nibble,f,c
  6725  002638  508A               	movf	3978,w,c	;volatile
  6726  00263A  1801               	xorwf	??_lcd_send_nibble,w,c
  6727  00263C  0B7F               	andlw	-129
  6728  00263E  1801               	xorwf	??_lcd_send_nibble,w,c
  6729  002640  6E8A               	movwf	3978,c	;volatile
  6730                           
  6731                           ;unmc_lcd_216.c: 32: __nop();
  6732  002642  F000               	nop	
  6733                           
  6734                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  6735  002644  848A               	bsf	3978,2,c	;volatile
  6736                           
  6737                           ;unmc_lcd_216.c: 34: __nop();__nop();
  6738  002646  F000               	nop	
  6739  002648  F000               	nop	
  6740                           
  6741                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  6742  00264A  948A               	bcf	3978,2,c	;volatile
  6743  00264C  0012               	return		;funcret
  6744  00264E                     __end_of_lcd_send_nibble:
  6745                           	opt stack 0
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           intcon2	equ	0xFF1
  6753                           indf0	equ	0xFEF
  6754                           postinc0	equ	0xFEE
  6755                           fsr0h	equ	0xFEA
  6756                           fsr0l	equ	0xFE9
  6757                           wreg	equ	0xFE8
  6758                           postdec1	equ	0xFE5
  6759                           fsr1l	equ	0xFE1
  6760                           indf2	equ	0xFDF
  6761                           postinc2	equ	0xFDE
  6762                           postdec2	equ	0xFDD
  6763                           fsr2h	equ	0xFDA
  6764                           fsr2l	equ	0xFD9
  6765                           status	equ	0xFD8
  6766                           
  6767 ;; *************** function _Delay100TCYx *****************
  6768 ;; Defined at:
  6769 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d100tcyx.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  unit            1    wreg     unsigned char 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;  unit            1    0[COMRAM] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  1    wreg      void 
  6776 ;; Registers used:
  6777 ;;		wreg
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6786 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6787 ;;Total ram usage:        1 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_lcd_send_byte
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           	psect	text36
  6797  0029D0                     __ptext36:
  6798                           	opt stack 0
  6799  0029D0                     _Delay100TCYx:
  6800                           	opt stack 26
  6801                           
  6802                           ;incstack = 0
  6803                           ;Delay100TCYx@unit stored from wreg
  6804  0029D0  6E01               	movwf	Delay100TCYx@unit,c
  6805  0029D2                     l628:
  6806  0029D2  0E21               	movlw	33
  6807  0029D4                     u3717:
  6808  0029D4  2EE8               	decfsz	wreg,f,c
  6809  0029D6  D7FE               	bra	u3717
  6810  0029D8  F000               	nop	
  6811  0029DA  2E01               	decfsz	Delay100TCYx@unit,f,c
  6812  0029DC  D7FA               	goto	l628
  6813  0029DE  0012               	return	
  6814  0029E0                     __end_of_Delay100TCYx:
  6815                           	opt stack 0
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           intcon2	equ	0xFF1
  6823                           indf0	equ	0xFEF
  6824                           postinc0	equ	0xFEE
  6825                           fsr0h	equ	0xFEA
  6826                           fsr0l	equ	0xFE9
  6827                           wreg	equ	0xFE8
  6828                           postdec1	equ	0xFE5
  6829                           fsr1l	equ	0xFE1
  6830                           indf2	equ	0xFDF
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8
  6836                           tblptru	equ	0xFF8
  6837                           tblptrh	equ	0xFF7
  6838                           tblptrl	equ	0xFF6
  6839                           tablat	equ	0xFF5
  6840                           prodh	equ	0xFF4
  6841                           prodl	equ	0xFF3
  6842                           intcon2	equ	0xFF1
  6843                           indf0	equ	0xFEF
  6844                           postinc0	equ	0xFEE
  6845                           fsr0h	equ	0xFEA
  6846                           fsr0l	equ	0xFE9
  6847                           wreg	equ	0xFE8
  6848                           postdec1	equ	0xFE5
  6849                           fsr1l	equ	0xFE1
  6850                           indf2	equ	0xFDF
  6851                           postinc2	equ	0xFDE
  6852                           postdec2	equ	0xFDD
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857                           	psect	rparam
  6858  0000                     tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           intcon2	equ	0xFF1
  6865                           indf0	equ	0xFEF
  6866                           postinc0	equ	0xFEE
  6867                           fsr0h	equ	0xFEA
  6868                           fsr0l	equ	0xFE9
  6869                           wreg	equ	0xFE8
  6870                           postdec1	equ	0xFE5
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    71
    Data        14
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      95
    BANK0           160     22     149
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_15(CODE[2]), STR_7(CODE[2]), STR_5(CODE[2]), STR_3(CODE[2]), 
		 -> buffer2(BANK0[20]), 

    lcd_puts@ptr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), 

    escribir_numero@num	PTR int  size(2) Largest target is 3775
		 -> NULL(NULL[0]), RAM(DATA[3775]), 

    write_in_lcd@key	PTR int  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    operador	PTR unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), STR_9(CODE[1]), STR_8(CODE[2]), STR_6(CODE[2]), 
		 -> STR_4(CODE[2]), STR_1(CODE[1]), 


Critical Paths under _main in COMRAM

    _main->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___awtoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___fttol
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___wmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _lcd_puts->_lcd_putc
    _escribir_numero->_write_in_lcd
    _write_in_lcd->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _Setup->_lcd_comand
    _Setup->_lcd_init
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   93352
                                             90 COMRAM     2     2      0
                                              0 BANK0     22    22      0
                              _Setup
                            ___awdiv
                           ___awtoft
                            ___fttol
                             ___wmul
                    _escribir_numero
                         _lcd_gotoxy
                           _lcd_init
                          _lcd_putrs
                           _lcd_puts
                                _pow
                       _write_in_lcd
 ---------------------------------------------------------------------------------
 (1) _pow                                                 17    11      6   66519
                                             73 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   21628
                                             57 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                  9     6      3   36008
                                             64 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                7     2      5     400
                                             57 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3    9259
                                             45 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     632
                                             12 COMRAM    15    11      4
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2758
                                             27 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    9705
                                             45 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     919
                                             27 COMRAM     6     2      4
                           ___awtoft (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3882
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4615
                                             45 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4270
                                             33 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3102
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2939
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2689
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    2334
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (1) _escribir_numero                                      7     5      2    6713
                                             27 COMRAM     7     5      2
                         _lcd_gotoxy
                       _write_in_lcd
 ---------------------------------------------------------------------------------
 (1) _write_in_lcd                                         2     0      2    4356
                                             25 COMRAM     2     0      2
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    1164
                                             12 COMRAM    13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    2638
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    2213
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1461
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1364
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    1662
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     932
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (2) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     730
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     708
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   ___awdiv
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
   ___wmul
     ___awtoft (ARG)
       ___ftpack
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
   _escribir_numero
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _write_in_lcd
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_init
     _Delay1KTCYx
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
     _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_puts
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _pow
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
     ___fttol
       ___awtoft (ARG)
         ___ftpack
     ___lltoft
       ___ftpack
     _exp
       ___awtoft
         ___ftpack
       ___ftdiv
         ___ftpack
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
           ___awtoft (ARG)
             ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
         _frexp
       _ldexp
         _eval_poly (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
         _frexp
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
           ___awtoft (ARG)
             ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
       _frexp
   _write_in_lcd
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      95       5       93.1%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     5C      5F       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F4       6        0.0%
DATA                 0      0      F4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Sep 18 23:42:38 2017

                   ___altoft@exp 0024                 escribir_numero@i 001F  
                              _a 00A2                                _b 00A0  
                              _c 009E                                _i 00A6  
                              _j 00A4                                _k 009C  
                  ___altoft@sign 0025                   ?_lcd_send_byte 0003  
                   ___awdiv@sign 0006              ___wmul@multiplicand 001E  
                    lcd_comand@d 0005                     __CFG_CP0$OFF 000000  
                   ___ftadd@exp1 002D                     ___ftadd@exp2 002C  
                   ___ftadd@sign 002B               escribir_numero@num 001C  
                            l211 1060                              l203 1010  
                            l310 26FE                              l303 2916  
                            l231 1110                              l223 10BC  
                            l215 1074                              l207 1044  
                            l304 2902                              l240 13C2  
                            l161 1CC8                              l330 1A70  
                            l322 1A0A                              l242 1442  
                            l323 1A24                              l163 1CB2  
                            l171 1D52                              l243 147E  
                            l227 10FC                              l219 1088  
                            l324 1A30                              l164 1C90  
                            l244 147E                              l309 2726  
                            l333 1AF2                              l334 1AA0  
                            l238 1322                              l271 28EA  
                            l511 2518                              l239 1372  
                            l191 0FCC                              l183 0F84  
                            l272 28EC                              l328 1A2A  
                            l168 1D38                              l512 250C  
                            l176 0F58                              l601 24C8  
                            l329 1A52                              l169 1D16  
                            l249 14B2                              l602 24D2  
                            l603 24E0                              l283 29AA  
                            l291 275E                              l195 0FE8  
                            l187 0F98                              l179 0F70  
                            l276 2590                              l292 276A  
                            l293 2776                              l278 25B2  
                            l622 28AA                              l702 17C0  
                            l199 0FFC                              l288 2782  
                            l720 1834                              l289 2752  
                            l721 1864                              l642 29C2  
                            l730 1FF0                              l707 17B6  
                            l628 29D2                              l820 2654  
                            l716 17F4                              l708 17AC  
                            l717 17EA                              l741 1E70  
                            l662 22C0                              l726 1F64  
                            l734 2406                              l663 22B6  
                            l719 1818                              l743 1E98  
                            l735 2436                              l728 1F8C  
                            l752 2990                              l744 1ECA  
                            l665 22F4                              l729 1FCA  
                            l745 1EDA                              l594 247A  
                            l666 22DE                              l770 1E1A  
                            l762 1D80                              l595 248A  
                            l851 26C8                              l819 2660  
                            l747 1EF2                              l771 1E0E  
                            l852 26C0                              l668 231C  
                            l748 1F02                              l764 1DF6  
                            l597 24A8                              l861 27AE  
                            l669 2312                              l693 1730  
                            l773 1E36                              l765 1DE6  
                            l598 24A0                              l862 27A6  
                            l758 27F0                              l855 26E8  
                            l856 26F2                              l865 27C6  
                            l697 175A                              l881 18D0  
                            l866 27D0                              l882 18C2  
                            l884 18E8                              l885 196E  
                            l886 194C                              l887 19F2  
                            _dia 00ED                              _mes 00F1  
                            _exp 14F6                              _log 1B20  
                            _pow 188A                              wreg 000FE8  
                    lcd_gotoxy@x 0006                      lcd_gotoxy@y 0005  
                   ___ftdiv@cntr 0012                     ___ftdiv@sign 0017  
                           l1041 150E                             l1043 1546  
                           l1052 205E                             l1044 157E  
                           l1061 236E                             l1053 2050  
                           l1045 15AC                             l1070 2254  
                           l1046 16D0                             l1055 2078  
                           l1047 16A6                             l1056 20F2  
                           l1065 21EA                             l1091 21BC  
                           l1067 2230                             l1083 1B3C  
                           l1092 2140                             l1069 2260  
                           l1085 1B5E                             l2240 2462  
                           l3420 1132                             l2802 2588  
                           l2636 1A92                             l3470 1372  
                           l3462 1322                             l3438 120A  
                           l2816 25AA                             l2906 16A6  
                           l3478 13C2                             ?_exp 0041  
                           ?_log 003A                             ?_pow 004A  
                           STR_1 0F4C                             STR_2 0F48  
                           STR_3 0F4B                             STR_4 0F4B  
                           STR_5 0F51                             STR_6 0F51  
                           STR_7 0F4F                             STR_8 0F4F  
                           STR_9 0F4C                             u2020 178A  
                           u2131 1E58                             u2060 17C8  
                           u2221 1D64                             u2310 26CC  
                           u2151 1E80                             u2240 1D9E  
                           u2410 1A9A                             u2090 17FC  
                           u2340 27B2                             u2420 1AFA  
                           u2245 1D96                             u2430 1B12  
                           u3310 0FD0                             u1720 25E4  
                           u2440 271E                             u2280 1E20  
                           u2450 2746                             u2370 2396  
                           u2610 220A                             u3410 1064  
                           u3330 0FEC                             u3250 0F74  
                           u1740 25FC                             u1830 22A8  
                           u3510 1114                             u3430 1078  
                           u3350 1000                             u3270 0F88  
                           u2447 2714                             u2471 1F4C  
                           u1760 2616                             u2457 273C  
                           u1921 16EE                             u1738 25E6  
                           u2810 1C5A                             u2378 2398  
                           u2570 206A                             u2618 220C  
                           u3450 108C                             u3370 1014  
                           u3290 0F9C                             u2811 1C58  
                           u2491 1F74                             u1931 1702  
                           u1780 2632                             u2660 25A0  
                           u3620 1482                             u3540 11EC  
                           u1758 25FE                             u2830 1CDE  
                           u1870 2326                             u2750 1586  
                           u3470 10C0                             u3390 1048  
                           u1960 1722                             u2760 1588  
                           u3640 14B6                             u3560 12C8  
                           u1778 2618                             u3650 14C0  
                           u3490 1100                             u3707 29C4  
                           u3717 29D4                             u1798 2634  
                           u2950 24AC                             u1990 174C  
                           u3670 14D8                             u2890 1934  
                           u3668 14C2                             u3688 14DA  
                           u3697 14EA                 ?_lcd_send_nibble 0001  
                           _anio 00F3                             _flag 02F8  
                           _main 0F54                             _hora 00EB  
                   ___ftpack@arg 0001                     ___ftpack@exp 0004  
                           fsr0h 000FEA                             indf0 000FEF  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                      main@num_der 00E5  
                           exp@x 0041                             log@x 003A  
                  __CFG_T1DIG$ON 000000                      main@num_izq 00E3  
                    lcd_puts@ptr 0009                             pow@x 004A  
                           pow@y 004D                             prodh 000FF4  
                           prodl 000FF3                             start 0000  
                  __CFG_IESO$OFF 000000         __size_of_escribir_numero 0116  
                   ___ftmul@cntr 001A                     ___param_bank 000000  
                   ___ftmul@sign 001B                     ___fttol@exp1 001B  
           escribir_numero@i_795 0021                            ??_exp 0044  
                          ??_log 003D                     ___fttol@lval 0017  
                          ??_pow 0050                      _Delay1KTCYx 29C0  
                  __CFG_PLLDIV$1 000000                            ?_main 0001  
                __end_of___awdiv 24EA                  __end_of___ftadd 188A  
                          STR_10 0F4D                            STR_11 0F51  
                          STR_12 0F4B                            STR_13 0F4F  
                          STR_14 0F4F                            STR_15 0F4D  
                          STR_16 0F4D            __size_of_Delay100TCYx 0010  
                __end_of___ftdiv 2022                  __end_of___ftneg 299E  
                __end_of___ftmul 1F3C                  ___awdiv@divisor 0003  
                __end_of___ftsub 281A                  __end_of___fttol 1E48  
                __end_of___lwdiv 26FC                  __end_of___lwmod 27DA  
                ___awdiv@counter 0005                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                   ___lltoft@exp 0011                   __CFG_FCMEN$OFF 000000  
                          _Setup 281A                    ___awtoft@sign 000C  
                __end_of_dpowers 0F0B                            _floor 2022  
                          _ldexp 21D2                            _frexp 2346  
                          _mes_d 00AB                            _errno 0094  
                          _mes_u 00AC                    ___ftpack@sign 0005  
                          main@i 00DF                   __pbitbssCOMRAM 02F8  
                          tablat 000FF5                            pow@yi 0057  
                   lcd_putrs@ptr 0009                            status 000FD8  
                __end_of_sprintf 1B20                      exp@exponent 0047  
        __CFG_DSWDTOSC$INTOSCREF 000000                      ldexp@newexp 003D  
                __initialization 285A                      log@exponent 003D  
                   _Delay100TCYx 29D0                     __end_of_main 14F6  
                ??_lcd_send_byte 0004            __size_of_write_in_lcd 002A  
                         ??_main 005B                    ___fttol@sign1 0016  
                  __activetblptr 000002                           ?_Setup 0001  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
             main@resultado_suma 00D7                           ?_floor 002E  
                         ?_ldexp 003A                           ?_frexp 0001  
               __end_of___altoft 2562                           _EECON2 000FA7  
                         _ANCON0 000F48                 ___awdiv@dividend 0001  
               __end_of___awtoft 28CE                 __end_of___ftpack 2346  
               __end_of___lltoft 26AA                   __CFG_WDTEN$OFF 000000  
                         _RTCCFG 000F3F                   __CFG_WPCFG$OFF 000000  
                 __CFG_WPDIS$OFF 000000                     _write_in_lcd 292A  
                 __CFG_XINST$OFF 000000                 __end_of_lcd_init 25D8  
               __end_of_lcd_putc 2798                 __end_of_lcd_puts 292A  
                         ___ftge 23D6                           ___wmul 2954  
                      ??___awdiv 0005                        ??___ftadd 0028  
                 __CFG_STVREN$ON 000000                        ??___ftdiv 000F  
                      ??___ftneg 0004                  write_in_lcd@key 001A  
                         _diasem 00EF                        ??___ftmul 0013  
                         _anio_d 00A8                        ??___ftsub 0034  
                      ??___fttol 0011                           _anio_u 00A9  
                      ??___lwdiv 0005                        ??___lwmod 000C  
                         _hora_d 00AF                           _hora_u 00B0  
                         clear_0 2880                 ___awdiv@quotient 0007  
                         _minuto 00E9                ??_escribir_numero 001E  
                         floor@i 0031                           floor@x 002E  
          ___ftmul@f3_as_product 0017                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                        ??_sprintf 0013  
               __end_ofexp@coeff 0F2D                 __end_oflog@coeff 0F48  
                     __accesstop 0060          __end_of__initialization 288C  
                     ___altoft@c 001C                       ___ftadd@f1 0022  
                     ___ftadd@f2 0025                       ___ftge@ff1 0001  
                     ___ftge@ff2 0004                     eval_poly@res 0037  
                  ___rparam_used 000001                       ___ftdiv@f1 0009  
                     ___ftdiv@f2 000C                       ___ftdiv@f3 0013  
                     ___ftneg@f1 0001                       ___awtoft@c 0009  
                     ___ftmul@f1 000D                       ___ftmul@f2 0010  
                     ___ftsub@f1 002E                       ___ftsub@f2 0031  
                     ___fttol@f1 000D                   __pcstackCOMRAM 0001  
                  __end_of_Setup 285A                     __pidataBANK0 29E0  
                     ___lltoft@c 0009                    __end_of_floor 2100  
                  __end_of_ldexp 2298                    __end_of_frexp 23D6  
                __CFG_DSWDTPS$G2 000000                  __CFG_OSC$INTOSC 000000  
                        ??_Setup 0006                lcd_gotoxy@address 0007  
             __size_of_lcd_putrs 0052                          ??_floor 0031  
                        ??_ldexp 003F                          ??_frexp 0006  
                     __pbssBANK0 0060               __size_of_eval_poly 00D2  
                     _dia_semana 00AA                   lcd_send_byte@n 0003  
                        ?___ftge 0001                          ?___wmul 001C  
            main@resultado_resta 00DD                     ?_Delay1KTCYx 0001  
                      ?___altoft 001C                        ?___awtoft 0009  
                      ?___ftpack 0001                        ?___lltoft 0009  
                     _lcd_comand 29EE                       _lcd_gotoxy 299E  
                        _RTCVALH 000F99                          _RTCVALL 000F98  
                      ?_lcd_init 0001                        ?_lcd_putc 0001  
                      ?_lcd_puts 0009                          __Hparam 0000  
                        __Lparam 0000         __size_of_lcd_send_nibble 0076  
                __size_of___ftge 0090                          ___awdiv 2466  
_contador_numeros_ingresados_der 0096                          ___ftadd 16DE  
              __end_of_lcd_putrs 274E                          ___ftdiv 1F3C  
_contador_numeros_ingresados_izq 005D                          ___ftneg 297A  
                __size_of___wmul 0026                          ___ftmul 1E48  
                        ___ftsub 27DA                          ___fttol 1D54  
                        ___lwdiv 26AA                          ___lwmod 2798  
                   __psmallconst 0F00                       ??___altoft 0020  
                    _RtccTimeVal 0090                          __pcinit 285A  
                        _fecha_d 00AD                          _fecha_u 00AE  
                     ??___awtoft 000C                       ??___ftpack 0006  
              __end_of_eval_poly 21D2                          __ramtop 0F00  
                     ??___lltoft 000D                          __ptext0 0F54  
                        __ptext1 188A                          __ptext2 1B20  
                        __ptext3 14F6                          __ptext4 21D2  
                        __ptext5 2022                          __ptext6 2346  
                        __ptext7 1D54                          __ptext8 23D6  
                        __ptext9 24EA                          _buffer2 00B5  
                      _T1CONbits 000FCD                          _dpowers 0F01  
                   __size_of_exp 01E8                     __size_of_log 011E  
                   __size_of_pow 0176                          _segundo 009A  
                        _sprintf 1A00                       ??_lcd_init 0005  
                     ??_lcd_putc 0008                       ??_lcd_puts 000B  
           end_of_initialization 288C                          exp@sign 0049  
           lcd_send_byte@address 0004                    __Lmediumconst 0000  
                _escribir_numero 1C3E                          pow@sign 0056  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
          __end_of_lcd_send_byte 2900                        _PORTAbits 000F80  
                      _PORTCbits 000F82                 __CFG_DSBOREN$OFF 000000  
                    ?_lcd_comand 0001                 __CFG_CPUDIV$OSC1 000000  
                      _TRISBbits 000F93                      ?_lcd_gotoxy 0005  
                _LCD_INIT_STRING 0F0B                      ___ftdiv@exp 0016  
               __CFG_IOL1WAY$OFF 000000              __CFG_MSSP7B_EN$MSK7 000000  
                    ___ftmul@exp 0016                 Delay100TCYx@unit 0001  
                 __end_of___ftge 2466                   __end_of___wmul 297A  
              ??_lcd_send_nibble 0001             __size_of_Delay1KTCYx 0010  
               __CFG_DSWDTEN$OFF 000000                       floor@expon 0034  
            start_initialization 285A                       eval_poly@d 0031  
                     eval_poly@n 0033                       eval_poly@x 002E  
                     ldexp@value 003A                      __end_of_exp 16DE  
                    __end_of_log 1C3E                      __end_of_pow 1A00  
        __end_of_escribir_numero 1D54                       frexp@value 0001  
            __size_of_lcd_comand 000E                         ??___ftge 0007  
            __size_of_lcd_gotoxy 0022                         ??___wmul 0020  
                    __pdataBANK0 00E7                 __CFG_LPT1OSC$OFF 000000  
              __size_of___altoft 0078                      _ALRMCFGbits 000F91  
        __end_of_LCD_INIT_STRING 0F0F                __size_of___awtoft 0038  
              __size_of___ftpack 00AE                __size_of___lltoft 005C  
                    __pbssCOMRAM 005D                    __pcstackBANK0 00D1  
                Delay1KTCYx@unit 0001                __size_of_lcd_init 0076  
                    sprintf@flag 0013                __size_of_lcd_putc 004A  
              __size_of_lcd_puts 002A                      sprintf@prec 0018  
                      _main$2342 00D1                        _main$2343 00D4  
               ___lwdiv@dividend 0001                    ?_Delay100TCYx 0001  
                       ?___awdiv 0001                         ?___ftadd 0022  
                       ?___ftdiv 0009                         ?___ftneg 0001  
                       ?___ftmul 000D                         ?___ftsub 002E  
                       ?___fttol 000D                         ?___lwdiv 0001  
                       ?___lwmod 0008                        _lcd_putrs 26FC  
                    __smallconst 0F00                        _eval_poly 2100  
           __CFG_RTCOSC$T1OSCREF 000000                   __size_of_Setup 0040  
               ___lwdiv@quotient 0005                         ?_sprintf 000D  
                 __size_of_floor 00DE                   __size_of_ldexp 00C6  
                 __size_of_frexp 0090                 ?_escribir_numero 001C  
               _RtccAlrmTimeDate 0080                   ___wmul@product 0020  
                       _LATBbits 000F8A           main@resultado_division 00DB  
                       _PIE3bits 000FA3                    ?_write_in_lcd 001A  
                      _segundo_d 00B3                   ??_Delay100TCYx 0001  
                      _segundo_u 00B4                 __CFG_WDTPS$32768 000000  
             _Rtcc_read_TimeDate 0078                       ?_lcd_putrs 0009  
                      main@i_830 00E1                ___wmul@multiplier 001C  
                      lcd_init@i 0005                     ??_lcd_comand 0005  
                     ?_eval_poly 002E                        lcd_putc@c 0008  
         _flag_sentido_escritura 0098                     ??_lcd_gotoxy 0006  
                    _INTCON2bits 000FF1                        copy_data0 286E  
                 ??_write_in_lcd 001C                        frexp@eptr 0004  
                _lcd_send_nibble 25D8                         __Hrparam 0000  
                       _RtccDate 00C9                         __Lrparam 0000  
                       _RtccTime 00CD               __end_of_lcd_comand 29FC  
             __end_of_lcd_gotoxy 29C0                 __size_of___awdiv 0084  
               __size_of___ftadd 01AC                 __size_of___ftdiv 00E6  
               __size_of___ftneg 0024                         ___altoft 24EA  
               __size_of___ftmul 00F4                 __size_of___ftsub 0040  
               __size_of___fttol 00F4                 __size_of___lwdiv 0052  
               __size_of___lwmod 0042                         ___awtoft 2896  
                       ___ftpack 2298                         ___lltoft 264E  
                   _RtccTimeDate 0088                         _exp$2346 0044  
                     sprintf@val 0016                  ___lwdiv@divisor 0003  
                ___lwdiv@counter 0007                         __ptext10 2100  
                       __ptext11 2954                         __ptext20 2900  
                       __ptext12 1E48                         __ptext21 1C3E  
                       __ptext13 27DA                         __ptext30 281A  
                       __ptext22 292A                         __ptext14 16DE  
                       __ptext31 2562                         __ptext23 1A00  
                       __ptext15 297A                         __ptext32 29C0  
                       __ptext24 2798                         __ptext16 1F3C  
                       __ptext33 29EE                         __ptext25 26AA  
                       __ptext17 2896                         __ptext34 28CE  
                       __ptext26 26FC                         __ptext18 264E  
                       __ptext35 25D8                         __ptext27 274E  
                       __ptext19 2298                         __ptext36 29D0  
                       __ptext28 299E                         __ptext29 2466  
                       _lcd_init 2562                         _lcd_putc 274E  
                       _pow$2344 0050                         _pow$2345 0053  
                       _lcd_puts 2900                 __size_of_sprintf 0120  
         __size_of_lcd_send_byte 0032     main@resultado_multiplicacion 00D9  
                  __size_of_main 05A2                         _minuto_d 00B1  
                       _minuto_u 00B2                         _operador 00E7  
                  ??_Delay1KTCYx 0001                      ??_lcd_putrs 000B  
                       exp@coeff 0F0F                         log@coeff 0F2D  
                    _OSCTUNEbits 000F9B                       _INTCONbits 000FF2  
                    ??_eval_poly 0035             __end_of_Delay100TCYx 29E0  
                      sprintf@ap 0014          __end_of_lcd_send_nibble 264E  
                      sprintf@sp 000D                 ___lwmod@dividend 0008  
                     _OSCCONbits 000FD3                    _lcd_send_byte 28CE  
                     _RTCCFGbits 000F3F                         sprintf@c 0019  
                       sprintf@f 000F             __end_of_write_in_lcd 2954  
                ___lwmod@divisor 000A              __end_of_Delay1KTCYx 29D0  
                ___lwmod@counter 000C                    _array_lcd_der 0060  
                  _array_lcd_izq 006C            lcd_send_nibble@nibble 0002  
