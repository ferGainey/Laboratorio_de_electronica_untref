

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Oct 27 21:04:30 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80  0000                     
    81                           ; Version 1.43
    82                           ; Generated 25/07/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F26J50 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	idataBANK0
   117  003994                     __pidataBANK0:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _array_contrasenia
   121  003994  0001               	dw	1
   122  003996  0002               	dw	2
   123  003998  0003               	dw	3
   124  00399A  0004               	dw	4
   125                           
   126                           ;initializer for _minuto
   127  00399C  001E               	dw	30
   128                           
   129                           ;initializer for _hora
   130  00399E  0012               	dw	18
   131                           
   132                           ;initializer for _dia
   133  0039A0  0008               	dw	8
   134                           
   135                           ;initializer for _diasem
   136  0039A2  0003               	dw	3
   137                           
   138                           ;initializer for _mes
   139  0039A4  0009               	dw	9
   140                           
   141                           ;initializer for _anio
   142  0039A6  000F               	dw	15
   143                           
   144                           	psect	idataBANK1
   145  0039F6                     __pidataBANK1:
   146                           	opt stack 0
   147                           
   148                           ;initializer for _array_seleccionar
   149  0039F6  D7                 	db	low STR_1
   150  0039F7  0F                 	db	high STR_1
   151  0039F8  F0                 	db	low STR_2
   152  0039F9  0F                 	db	high STR_2
   153  0039FA  EB                 	db	low STR_3
   154  0039FB  0F                 	db	high STR_3
   155  0039FC  DC                 	db	low STR_4
   156  0039FD  0F                 	db	high STR_4
   157  0039FE  E6                 	db	low STR_5
   158  0039FF  0F                 	db	high STR_5
   159  003A00  E1                 	db	low STR_6
   160  003A01  0F                 	db	high STR_6
   161                           
   162                           	psect	smallconst
   163  000F00                     __psmallconst:
   164                           	opt stack 0
   165  000F00  00                 	db	0
   166  000F01                     _dpowers:
   167                           	opt stack 0
   168  000F01  0001               	dw	1
   169  000F03  000A               	dw	10
   170  000F05  0064               	dw	100
   171  000F07  03E8               	dw	1000
   172  000F09  2710               	dw	10000
   173  000F0B                     __end_of_dpowers:
   174                           	opt stack 0
   175  000F0B                     _LCD_INIT_STRING:
   176                           	opt stack 0
   177  000F0B  28                 	db	40
   178  000F0C  0C                 	db	12
   179  000F0D  01                 	db	1
   180  000F0E  06                 	db	6
   181  000F0F                     __end_of_LCD_INIT_STRING:
   182                           	opt stack 0
   183  000F0F                     exp@coeff:
   184                           	opt stack 0
   185  000F0F  00                 	db	0
   186  000F10  80                 	db	128
   187  000F11  3F                 	db	63
   188  000F12  72                 	db	114
   189  000F13  31                 	db	49
   190  000F14  3F                 	db	63
   191  000F15  FE                 	db	254
   192  000F16  75                 	db	117
   193  000F17  3E                 	db	62
   194  000F18  58                 	db	88
   195  000F19  63                 	db	99
   196  000F1A  3D                 	db	61
   197  000F1B  95                 	db	149
   198  000F1C  1D                 	db	29
   199  000F1D  3C                 	db	60
   200  000F1E  C5                 	db	197
   201  000F1F  AE                 	db	174
   202  000F20  3A                 	db	58
   203  000F21  79                 	db	121
   204  000F22  21                 	db	33
   205  000F23  39                 	db	57
   206  000F24  94                 	db	148
   207  000F25  80                 	db	128
   208  000F26  37                 	db	55
   209  000F27  93                 	db	147
   210  000F28  A7                 	db	167
   211  000F29  35                 	db	53
   212  000F2A  56                 	db	86
   213  000F2B  15                 	db	21
   214  000F2C  34                 	db	52
   215  000F2D                     __end_ofexp@coeff:
   216                           	opt stack 0
   217  000F2D                     log@coeff:
   218                           	opt stack 0
   219  000F2D  00                 	db	0
   220  000F2E  00                 	db	0
   221  000F2F  00                 	db	0
   222  000F30  00                 	db	0
   223  000F31  80                 	db	128
   224  000F32  3F                 	db	63
   225  000F33  F0                 	db	240
   226  000F34  FF                 	db	255
   227  000F35  BE                 	db	190
   228  000F36  E2                 	db	226
   229  000F37  A9                 	db	169
   230  000F38  3E                 	db	62
   231  000F39  83                 	db	131
   232  000F3A  76                 	db	118
   233  000F3B  BE                 	db	190
   234  000F3C  AE                 	db	174
   235  000F3D  2B                 	db	43
   236  000F3E  3E                 	db	62
   237  000F3F  3C                 	db	60
   238  000F40  C3                 	db	195
   239  000F41  BD                 	db	189
   240  000F42  D2                 	db	210
   241  000F43  13                 	db	19
   242  000F44  3D                 	db	61
   243  000F45  78                 	db	120
   244  000F46  D3                 	db	211
   245  000F47  BB                 	db	187
   246  000F48                     __end_oflog@coeff:
   247                           	opt stack 0
   248  000F48                     STR_23:
   249                           
   250                           ; BSR set to: 15
   251  000F48  49                 	db	73	;'I'
   252  000F49  6E                 	db	110	;'n'
   253  000F4A  73                 	db	115	;'s'
   254  000F4B  65                 	db	101	;'e'
   255  000F4C  72                 	db	114	;'r'
   256  000F4D  74                 	db	116	;'t'
   257  000F4E  20                 	db	32
   258  000F4F  6E                 	db	110	;'n'
   259  000F50  65                 	db	101	;'e'
   260  000F51  77                 	db	119	;'w'
   261  000F52  20                 	db	32
   262  000F53  50                 	db	80	;'P'
   263  000F54  61                 	db	97	;'a'
   264  000F55  73                 	db	115	;'s'
   265  000F56  73                 	db	115	;'s'
   266  000F57  77                 	db	119	;'w'
   267  000F58  6F                 	db	111	;'o'
   268  000F59  72                 	db	114	;'r'
   269  000F5A  64                 	db	100	;'d'
   270  000F5B  20                 	db	32
   271  000F5C  00                 	db	0
   272  000F5D                     STR_18:
   273                           
   274                           ; BSR set to: 15
   275  000F5D  20                 	db	32
   276  000F5E  20                 	db	32
   277  000F5F  20                 	db	32
   278  000F60  20                 	db	32
   279  000F61  20                 	db	32
   280  000F62  20                 	db	32
   281  000F63  20                 	db	32
   282  000F64  20                 	db	32
   283  000F65  20                 	db	32
   284  000F66  20                 	db	32
   285  000F67  20                 	db	32
   286  000F68  20                 	db	32
   287  000F69  20                 	db	32
   288  000F6A  20                 	db	32
   289  000F6B  20                 	db	32
   290  000F6C  20                 	db	32
   291  000F6D  00                 	db	0
   292  000F6E                     STR_17:
   293                           
   294                           ; BSR set to: 15
   295  000F6E  41                 	db	65	;'A'
   296  000F6F  6C                 	db	108	;'l'
   297  000F70  61                 	db	97	;'a'
   298  000F71  72                 	db	114	;'r'
   299  000F72  6D                 	db	109	;'m'
   300  000F73  20                 	db	32
   301  000F74  61                 	db	97	;'a'
   302  000F75  63                 	db	99	;'c'
   303  000F76  74                 	db	116	;'t'
   304  000F77  69                 	db	105	;'i'
   305  000F78  76                 	db	118	;'v'
   306  000F79  61                 	db	97	;'a'
   307  000F7A  74                 	db	116	;'t'
   308  000F7B  65                 	db	101	;'e'
   309  000F7C  64                 	db	100	;'d'
   310  000F7D  20                 	db	32
   311  000F7E  00                 	db	0
   312  000F7F                     STR_21:
   313                           
   314                           ; BSR set to: 15
   315  000F7F  49                 	db	73	;'I'
   316  000F80  6E                 	db	110	;'n'
   317  000F81  73                 	db	115	;'s'
   318  000F82  65                 	db	101	;'e'
   319  000F83  72                 	db	114	;'r'
   320  000F84  74                 	db	116	;'t'
   321  000F85  20                 	db	32
   322  000F86  50                 	db	80	;'P'
   323  000F87  61                 	db	97	;'a'
   324  000F88  73                 	db	115	;'s'
   325  000F89  73                 	db	115	;'s'
   326  000F8A  77                 	db	119	;'w'
   327  000F8B  6F                 	db	111	;'o'
   328  000F8C  72                 	db	114	;'r'
   329  000F8D  64                 	db	100	;'d'
   330  000F8E  20                 	db	32
   331  000F8F  00                 	db	0
   332  000F90                     STR_7:
   333                           
   334                           ; BSR set to: 15
   335  000F90  25                 	db	37
   336  000F91  30                 	db	48	;'0'
   337  000F92  32                 	db	50	;'2'
   338  000F93  75                 	db	117	;'u'
   339  000F94  2F                 	db	47
   340  000F95  25                 	db	37
   341  000F96  30                 	db	48	;'0'
   342  000F97  32                 	db	50	;'2'
   343  000F98  75                 	db	117	;'u'
   344  000F99  2F                 	db	47
   345  000F9A  25                 	db	37
   346  000F9B  30                 	db	48	;'0'
   347  000F9C  32                 	db	50	;'2'
   348  000F9D  75                 	db	117	;'u'
   349  000F9E  00                 	db	0
   350  000F9F                     STR_8:
   351                           
   352                           ; BSR set to: 15
   353  000F9F  25                 	db	37
   354  000FA0  30                 	db	48	;'0'
   355  000FA1  32                 	db	50	;'2'
   356  000FA2  75                 	db	117	;'u'
   357  000FA3  3A                 	db	58	;':'
   358  000FA4  25                 	db	37
   359  000FA5  30                 	db	48	;'0'
   360  000FA6  32                 	db	50	;'2'
   361  000FA7  75                 	db	117	;'u'
   362  000FA8  3A                 	db	58	;':'
   363  000FA9  25                 	db	37
   364  000FAA  30                 	db	48	;'0'
   365  000FAB  32                 	db	50	;'2'
   366  000FAC  75                 	db	117	;'u'
   367  000FAD  00                 	db	0
   368  000FAE                     STR_10:
   369                           
   370                           ; BSR set to: 15
   371  000FAE  50                 	db	80	;'P'
   372  000FAF  61                 	db	97	;'a'
   373  000FB0  73                 	db	115	;'s'
   374  000FB1  73                 	db	115	;'s'
   375  000FB2  77                 	db	119	;'w'
   376  000FB3  6F                 	db	111	;'o'
   377  000FB4  72                 	db	114	;'r'
   378  000FB5  64                 	db	100	;'d'
   379  000FB6  00                 	db	0
   380  000FB7                     STR_20:
   381                           
   382                           ; BSR set to: 15
   383  000FB7  45                 	db	69	;'E'
   384  000FB8  64                 	db	100	;'d'
   385  000FB9  74                 	db	116	;'t'
   386  000FBA  20                 	db	32
   387  000FBB  50                 	db	80	;'P'
   388  000FBC  61                 	db	97	;'a'
   389  000FBD  73                 	db	115	;'s'
   390  000FBE  73                 	db	115	;'s'
   391  000FBF  00                 	db	0
   392  000FC0                     STR_19:
   393                           
   394                           ; BSR set to: 15
   395  000FC0  41                 	db	65	;'A'
   396  000FC1  63                 	db	99	;'c'
   397  000FC2  74                 	db	116	;'t'
   398  000FC3  69                 	db	105	;'i'
   399  000FC4  76                 	db	118	;'v'
   400  000FC5  65                 	db	101	;'e'
   401  000FC6  20                 	db	32
   402  000FC7  00                 	db	0
   403  000FC8                     STR_14:
   404                           
   405                           ; BSR set to: 15
   406  000FC8  50                 	db	80	;'P'
   407  000FC9  72                 	db	114	;'r'
   408  000FCA  65                 	db	101	;'e'
   409  000FCB  73                 	db	115	;'s'
   410  000FCC  73                 	db	115	;'s'
   411  000FCD  20                 	db	32
   412  000FCE  41                 	db	65	;'A'
   413  000FCF  00                 	db	0
   414  000FD0                     STR_9:
   415                           
   416                           ; BSR set to: 15
   417  000FD0  49                 	db	73	;'I'
   418  000FD1  6E                 	db	110	;'n'
   419  000FD2  73                 	db	115	;'s'
   420  000FD3  65                 	db	101	;'e'
   421  000FD4  72                 	db	114	;'r'
   422  000FD5  74                 	db	116	;'t'
   423  000FD6  00                 	db	0
   424  000FD7                     STR_1:
   425                           
   426                           ; BSR set to: 15
   427  000FD7  20                 	db	32
   428  000FD8  44                 	db	68	;'D'
   429  000FD9  69                 	db	105	;'i'
   430  000FDA  61                 	db	97	;'a'
   431  000FDB  00                 	db	0
   432  000FDC                     STR_4:
   433                           
   434                           ; BSR set to: 15
   435  000FDC  48                 	db	72	;'H'
   436  000FDD  6F                 	db	111	;'o'
   437  000FDE  72                 	db	114	;'r'
   438  000FDF  61                 	db	97	;'a'
   439  000FE0  00                 	db	0
   440  000FE1                     STR_6:
   441                           
   442                           ; BSR set to: 15
   443  000FE1  20                 	db	32
   444  000FE2  53                 	db	83	;'S'
   445  000FE3  65                 	db	101	;'e'
   446  000FE4  67                 	db	103	;'g'
   447  000FE5  00                 	db	0
   448  000FE6                     STR_5:
   449                           
   450                           ; BSR set to: 15
   451  000FE6  20                 	db	32
   452  000FE7  4D                 	db	77	;'M'
   453  000FE8  69                 	db	105	;'i'
   454  000FE9  6E                 	db	110	;'n'
   455  000FEA  00                 	db	0
   456  000FEB                     STR_3:
   457                           
   458                           ; BSR set to: 15
   459  000FEB  41                 	db	65	;'A'
   460  000FEC  6E                 	db	110	;'n'
   461  000FED  69                 	db	105	;'i'
   462  000FEE  6F                 	db	111	;'o'
   463  000FEF  00                 	db	0
   464  000FF0                     STR_2:
   465                           
   466                           ; BSR set to: 15
   467  000FF0  20                 	db	32
   468  000FF1  4D                 	db	77	;'M'
   469  000FF2  65                 	db	101	;'e'
   470  000FF3  73                 	db	115	;'s'
   471  000FF4  00                 	db	0
   472  000FF5                     STR_13:
   473                           
   474                           ; BSR set to: 15
   475  000FF5  25                 	db	37
   476  000FF6  30                 	db	48	;'0'
   477  000FF7  31                 	db	49	;'1'
   478  000FF8  75                 	db	117	;'u'
   479  000FF9  00                 	db	0
   480  0000                     
   481                           ; #config settings
   482  000FFA  00                 	db	0	; dummy byte at the end
   483  0000                     
   484                           	psect	nvBANK0
   485  0000E7                     __pnvBANK0:
   486                           	opt stack 0
   487  0000E7                     _anio_d:
   488                           	opt stack 0
   489  0000E7                     	ds	1
   490  0000E8                     _anio_u:
   491                           	opt stack 0
   492  0000E8                     	ds	1
   493  0000E9                     _dia_semana:
   494                           	opt stack 0
   495  0000E9                     	ds	1
   496  0000EA                     _mes_d:
   497                           	opt stack 0
   498  0000EA                     	ds	1
   499  0000EB                     _mes_u:
   500                           	opt stack 0
   501  0000EB                     	ds	1
   502  0000EC                     _fecha_d:
   503                           	opt stack 0
   504  0000EC                     	ds	1
   505  0000ED                     _fecha_u:
   506                           	opt stack 0
   507  0000ED                     	ds	1
   508  0000EE                     _hora_d:
   509                           	opt stack 0
   510  0000EE                     	ds	1
   511  0000EF                     _hora_u:
   512                           	opt stack 0
   513  0000EF                     	ds	1
   514  0000F0                     _minuto_d:
   515                           	opt stack 0
   516  0000F0                     	ds	1
   517  0000F1                     _minuto_u:
   518                           	opt stack 0
   519  0000F1                     	ds	1
   520  0000F2                     _segundo_d:
   521                           	opt stack 0
   522  0000F2                     	ds	1
   523  0000F3                     _segundo_u:
   524                           	opt stack 0
   525  0000F3                     	ds	1
   526  0000                     _RTCCFG	set	3903
   527  0000                     _ANCON1	set	3913
   528  0000                     _ANCON0	set	3912
   529  0000                     _RTCCFGbits	set	3903
   530  0000                     _ALRMCFGbits	set	3985
   531  0000                     _EECON2	set	4007
   532  0000                     _INTCONbits	set	4082
   533  0000                     _RTCVALH	set	3993
   534  0000                     _RTCVALL	set	3992
   535  0000                     _TRISBbits	set	3987
   536  0000                     _T1CONbits	set	4045
   537  0000                     _TRISC	set	3988
   538  0000                     _TRISB	set	3987
   539  0000                     _TRISA	set	3986
   540  0000                     _OSCCONbits	set	4051
   541  0000                     _OSCTUNEbits	set	3995
   542  0000                     _LATBbits	set	3978
   543  0000                     _PORTCbits	set	3970
   544  0000                     _PORTAbits	set	3968
   545  0000                     _LATAbits	set	3977
   546  0000                     _PIE3bits	set	4003
   547                           
   548                           	psect	cinit
   549  0035B2                     __pcinit:
   550                           	opt stack 0
   551  0035B2                     start_initialization:
   552                           	opt stack 0
   553  0035B2                     __initialization:
   554                           	opt stack 0
   555                           
   556                           ; Initialize objects allocated to BANK1 (12 bytes)
   557                           ; load TBLPTR registers with __pidataBANK1
   558  0035B2  0EF6               	movlw	low __pidataBANK1
   559  0035B4  6EF6               	movwf	tblptrl,c
   560  0035B6  0E39               	movlw	high __pidataBANK1
   561  0035B8  6EF7               	movwf	tblptrh,c
   562  0035BA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   563  0035BC  6EF8               	movwf	tblptru,c
   564  0035BE  EE01  F000         	lfsr	0,__pdataBANK1
   565  0035C2  EE10 F00C          	lfsr	1,12
   566  0035C6                     copy_data0:
   567  0035C6  0009               	tblrd		*+
   568  0035C8  CFF5 FFEE          	movff	tablat,postinc0
   569  0035CC  50E5               	movf	postdec1,w,c
   570  0035CE  50E1               	movf	fsr1l,w,c
   571  0035D0  E1FA               	bnz	copy_data0
   572                           
   573                           ; Initialize objects allocated to BANK0 (20 bytes)
   574                           ; load TBLPTR registers with __pidataBANK0
   575  0035D2  0E94               	movlw	low __pidataBANK0
   576  0035D4  6EF6               	movwf	tblptrl,c
   577  0035D6  0E39               	movlw	high __pidataBANK0
   578  0035D8  6EF7               	movwf	tblptrh,c
   579  0035DA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   580  0035DC  6EF8               	movwf	tblptru,c
   581  0035DE  EE00  F0BF         	lfsr	0,__pdataBANK0
   582  0035E2  EE10 F014          	lfsr	1,20
   583  0035E6                     copy_data1:
   584  0035E6  0009               	tblrd		*+
   585  0035E8  CFF5 FFEE          	movff	tablat,postinc0
   586  0035EC  50E5               	movf	postdec1,w,c
   587  0035EE  50E1               	movf	fsr1l,w,c
   588  0035F0  E1FA               	bnz	copy_data1
   589                           
   590                           ; Clear objects allocated to BITBANK0 (1 bytes)
   591  0035F2  0100               	movlb	0
   592  0035F4  6BF4               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   593                           
   594                           ; Clear objects allocated to BANK0 (95 bytes)
   595  0035F6  EE00  F060         	lfsr	0,__pbssBANK0
   596  0035FA  0E5F               	movlw	95
   597  0035FC                     clear_0:
   598  0035FC  6AEE               	clrf	postinc0,c
   599  0035FE  06E8               	decf	wreg,f,c
   600  003600  E1FD               	bnz	clear_0
   601  003602                     end_of_initialization:
   602                           	opt stack 0
   603  003602                     __end_of__initialization:
   604                           	opt stack 0
   605  003602  0E00               	movlw	low (__Lmediumconst shr (0+16))
   606  003604  6EF8               	movwf	tblptru,c
   607  003606  0100               	movlb	0
   608  003608  EF7A  F01C         	goto	_main	;jump to C main() function
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1l	equ	0xFE1
   617                           
   618                           	psect	bitbssBANK0
   619  0007A0                     __pbitbssBANK0:
   620                           	opt stack 0
   621  0007A0                     _flag:
   622                           	opt stack 0
   623  0007A0                     	ds	1
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	bssBANK0
   634  000060                     __pbssBANK0:
   635                           	opt stack 0
   636  000060                     _array_contrasenia_ingresada:
   637                           	opt stack 0
   638  000060                     	ds	8
   639  000068                     _Rtcc_read_TimeDate:
   640                           	opt stack 0
   641  000068                     	ds	8
   642  000070                     _RtccAlrmTimeDate:
   643                           	opt stack 0
   644  000070                     	ds	8
   645  000078                     _RtccTimeDate:
   646                           	opt stack 0
   647  000078                     	ds	8
   648  000080                     _numeros_para_fecha:
   649                           	opt stack 0
   650  000080                     	ds	4
   651  000084                     _RtccTimeVal:
   652                           	opt stack 0
   653  000084                     	ds	4
   654  000088                     _errno:
   655                           	opt stack 0
   656  000088                     	ds	2
   657  00008A                     _txt_insert_pass:
   658                           	opt stack 0
   659  00008A                     	ds	2
   660  00008C                     _boton_seleccionar:
   661                           	opt stack 0
   662  00008C                     	ds	2
   663  00008E                     _alarma_activada:
   664                           	opt stack 0
   665  00008E                     	ds	2
   666  000090                     _motivo_ingreso_de_numeros:
   667                           	opt stack 0
   668  000090                     	ds	2
   669  000092                     _numeros_ingresados:
   670                           	opt stack 0
   671  000092                     	ds	2
   672  000094                     _segundo:
   673                           	opt stack 0
   674  000094                     	ds	2
   675  000096                     _k:
   676                           	opt stack 0
   677  000096                     	ds	2
   678  000098                     _c:
   679                           	opt stack 0
   680  000098                     	ds	2
   681  00009A                     _b:
   682                           	opt stack 0
   683  00009A                     	ds	2
   684  00009C                     _a:
   685                           	opt stack 0
   686  00009C                     	ds	2
   687  00009E                     _j:
   688                           	opt stack 0
   689  00009E                     	ds	2
   690  0000A0                     _i:
   691                           	opt stack 0
   692  0000A0                     	ds	2
   693  0000A2                     _key:
   694                           	opt stack 0
   695  0000A2                     	ds	1
   696  0000A3                     _buffer2:
   697                           	opt stack 0
   698  0000A3                     	ds	20
   699  0000B7                     _RtccDate:
   700                           	opt stack 0
   701  0000B7                     	ds	4
   702  0000BB                     _RtccTime:
   703                           	opt stack 0
   704  0000BB                     	ds	4
   705                           tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           postdec1	equ	0xFE5
   712                           fsr1l	equ	0xFE1
   713                           
   714                           	psect	dataBANK0
   715  0000BF                     __pdataBANK0:
   716                           	opt stack 0
   717  0000BF                     _array_contrasenia:
   718                           	opt stack 0
   719  0000BF                     	ds	8
   720  0000C7                     _minuto:
   721                           	opt stack 0
   722  0000C7                     	ds	2
   723  0000C9                     _hora:
   724                           	opt stack 0
   725  0000C9                     	ds	2
   726  0000CB                     _dia:
   727                           	opt stack 0
   728  0000CB                     	ds	2
   729  0000CD                     _diasem:
   730                           	opt stack 0
   731  0000CD                     	ds	2
   732  0000CF                     _mes:
   733                           	opt stack 0
   734  0000CF                     	ds	2
   735  0000D1                     _anio:
   736                           	opt stack 0
   737  0000D1                     	ds	2
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747                           	psect	dataBANK1
   748  000100                     __pdataBANK1:
   749                           	opt stack 0
   750  000100                     _array_seleccionar:
   751                           	opt stack 0
   752  000100                     	ds	12
   753                           tblptru	equ	0xFF8
   754                           tblptrh	equ	0xFF7
   755                           tblptrl	equ	0xFF6
   756                           tablat	equ	0xFF5
   757                           postinc0	equ	0xFEE
   758                           wreg	equ	0xFE8
   759                           postdec1	equ	0xFE5
   760                           fsr1l	equ	0xFE1
   761                           
   762                           	psect	cstackBANK0
   763  0000D3                     __pcstackBANK0:
   764                           	opt stack 0
   765  0000D3                     _covertir_valores_de_array_a_escala_decimal$2441:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x0
   769  0000D3                     	ds	3
   770  0000D6                     _covertir_valores_de_array_a_escala_decimal$2442:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0x3
   774  0000D6                     	ds	3
   775  0000D9                     covertir_valores_de_array_a_escala_decimal@numero:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x6
   779  0000D9                     	ds	2
   780  0000DB                     covertir_valores_de_array_a_escala_decimal@i:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x8
   784  0000DB                     	ds	2
   785  0000DD                     editar_fecha_reloj_digital@dia_ingresado:
   786                           	opt stack 0
   787  0000DD                     editar_hora_reloj_digital@hora_ingresada:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0xA
   791  0000DD                     	ds	2
   792  0000DF                     editar_fecha_reloj_digital@mes_ingresado:
   793                           	opt stack 0
   794  0000DF                     editar_hora_reloj_digital@minuto_ingresado:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0xC
   798  0000DF                     	ds	2
   799  0000E1                     editar_fecha_reloj_digital@anio_ingresado:
   800                           	opt stack 0
   801  0000E1                     editar_hora_reloj_digital@segundo_ingresado:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0xE
   805  0000E1                     	ds	2
   806  0000E3                     editar_fecha_reloj_digital@posicion:
   807                           	opt stack 0
   808  0000E3                     editar_hora_reloj_digital@posicion:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x10
   812  0000E3                     	ds	2
   813  0000E5                     ??_ir_a_pantalla_edicion:
   814                           
   815                           ; 1 bytes @ 0x12
   816  0000E5                     	ds	1
   817  0000E6                     ??_main:
   818                           
   819                           ; 1 bytes @ 0x13
   820  0000E6                     	ds	1
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           postdec1	equ	0xFE5
   828                           fsr1l	equ	0xFE1
   829                           
   830                           	psect	cstackCOMRAM
   831  000001                     __pcstackCOMRAM:
   832                           	opt stack 0
   833  000001                     ??_isdigit:
   834  000001                     ??_lcd_send_nibble:
   835  000001                     ?_verificar_contrasenia:
   836                           	opt stack 0
   837  000001                     ?___awdiv:
   838                           	opt stack 0
   839  000001                     ?___lwdiv:
   840                           	opt stack 0
   841  000001                     ?___ftpack:
   842                           	opt stack 0
   843  000001                     ?_frexp:
   844                           	opt stack 0
   845  000001                     ?___ftneg:
   846                           	opt stack 0
   847  000001                     Delay100TCYx@unit:
   848                           	opt stack 0
   849  000001                     Delay1KTCYx@unit:
   850                           	opt stack 0
   851  000001                     RtccReadDate@pDt:
   852                           	opt stack 0
   853  000001                     RtccReadTime@pTm:
   854                           	opt stack 0
   855  000001                     RtccWriteDate@pDt:
   856                           	opt stack 0
   857  000001                     RtccWriteTime@pTm:
   858                           	opt stack 0
   859  000001                     ___awdiv@dividend:
   860                           	opt stack 0
   861  000001                     ___lwdiv@dividend:
   862                           	opt stack 0
   863  000001                     ___ftpack@arg:
   864                           	opt stack 0
   865  000001                     ___ftge@ff1:
   866                           	opt stack 0
   867  000001                     ___ftneg@f1:
   868                           	opt stack 0
   869  000001                     frexp@value:
   870                           	opt stack 0
   871                           
   872                           ; 3 bytes @ 0x0
   873  000001                     	ds	1
   874  000002                     lcd_send_nibble@nibble:
   875                           	opt stack 0
   876  000002                     _isdigit$1970:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x1
   880  000002                     	ds	1
   881  000003                     lcd_send_byte@n:
   882                           	opt stack 0
   883  000003                     RtccWriteDate@di:
   884                           	opt stack 0
   885  000003                     RtccWriteTime@di:
   886                           	opt stack 0
   887  000003                     isdigit@c:
   888                           	opt stack 0
   889  000003                     ___awdiv@divisor:
   890                           	opt stack 0
   891  000003                     ___lwdiv@divisor:
   892                           	opt stack 0
   893  000003                     RtccReadDate@rTD1:
   894                           	opt stack 0
   895  000003                     RtccReadTime@rTD1:
   896                           	opt stack 0
   897                           
   898                           ; 8 bytes @ 0x2
   899  000003                     	ds	1
   900  000004                     lcd_send_byte@address:
   901                           	opt stack 0
   902  000004                     ___ftpack@exp:
   903                           	opt stack 0
   904  000004                     frexp@eptr:
   905                           	opt stack 0
   906  000004                     ___ftge@ff2:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x3
   910  000004                     	ds	1
   911  000005                     lcd_init@i:
   912                           	opt stack 0
   913  000005                     lcd_gotoxy@y:
   914                           	opt stack 0
   915  000005                     lcd_comand@d:
   916                           	opt stack 0
   917  000005                     RtccWriteDate@wasOn:
   918                           	opt stack 0
   919  000005                     RtccWriteTime@wasOn:
   920                           	opt stack 0
   921  000005                     ___awdiv@counter:
   922                           	opt stack 0
   923  000005                     ___ftpack@sign:
   924                           	opt stack 0
   925  000005                     ___lwdiv@quotient:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x4
   929  000005                     	ds	1
   930  000006                     ??___ftpack:
   931  000006                     ??_frexp:
   932  000006                     lcd_gotoxy@x:
   933                           	opt stack 0
   934  000006                     RtccWriteDate@wasAlrm:
   935                           	opt stack 0
   936  000006                     RtccWriteTime@wasAlrm:
   937                           	opt stack 0
   938  000006                     ___awdiv@sign:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x5
   942  000006                     	ds	1
   943  000007                     ??___ftge:
   944  000007                     lcd_gotoxy@address:
   945                           	opt stack 0
   946  000007                     RtccWriteTime@wasWrEn:
   947                           	opt stack 0
   948  000007                     ___lwdiv@counter:
   949                           	opt stack 0
   950  000007                     verificar_contrasenia@equals:
   951                           	opt stack 0
   952  000007                     RtccWriteDate@tempYear:
   953                           	opt stack 0
   954  000007                     ___awdiv@quotient:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x6
   958  000007                     	ds	1
   959  000008                     ?___lwmod:
   960                           	opt stack 0
   961  000008                     lcd_putc@c:
   962                           	opt stack 0
   963  000008                     RtccWriteTime@tempMinSec:
   964                           	opt stack 0
   965  000008                     ___lwmod@dividend:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x7
   969  000008                     	ds	1
   970  000009                     ?___ftdiv:
   971                           	opt stack 0
   972  000009                     ?___awtoft:
   973                           	opt stack 0
   974  000009                     ?___lltoft:
   975                           	opt stack 0
   976  000009                     RtccWriteDate@wasWrEn:
   977                           	opt stack 0
   978  000009                     verificar_contrasenia@i:
   979                           	opt stack 0
   980  000009                     lcd_putrs@ptr:
   981                           	opt stack 0
   982  000009                     ___awtoft@c:
   983                           	opt stack 0
   984  000009                     ___ftdiv@f1:
   985                           	opt stack 0
   986  000009                     ___lltoft@c:
   987                           	opt stack 0
   988                           
   989                           ; 4 bytes @ 0x8
   990  000009                     	ds	1
   991  00000A                     RtccWriteDate@tempDayMonth:
   992                           	opt stack 0
   993  00000A                     RtccWriteTime@tempHourWDay:
   994                           	opt stack 0
   995  00000A                     ___lwmod@divisor:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x9
   999  00000A                     	ds	1
  1000  00000B                     ??_titila_texto_insert_password:
  1001  00000B                     resetear_pantalla_ingresar_contrasenia@i:
  1002                           	opt stack 0
  1003  00000B                     RtccReadDate@rTD0:
  1004                           	opt stack 0
  1005  00000B                     RtccReadTime@rTD0:
  1006                           	opt stack 0
  1007                           
  1008                           ; 8 bytes @ 0xA
  1009  00000B                     	ds	1
  1010  00000C                     ___awtoft@sign:
  1011                           	opt stack 0
  1012  00000C                     ___lwmod@counter:
  1013                           	opt stack 0
  1014  00000C                     RtccWriteDate@tempHourWDay:
  1015                           	opt stack 0
  1016  00000C                     ___ftdiv@f2:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0xB
  1020  00000C                     	ds	1
  1021  00000D                     ??___lltoft:
  1022  00000D                     ?___ftmul:
  1023                           	opt stack 0
  1024  00000D                     ?___fttol:
  1025                           	opt stack 0
  1026  00000D                     ___ftmul@f1:
  1027                           	opt stack 0
  1028  00000D                     ___fttol@f1:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0xC
  1032  00000D                     	ds	1
  1033  00000E                     
  1034                           ; 1 bytes @ 0xD
  1035  00000E                     	ds	1
  1036  00000F                     ??___ftdiv:
  1037                           
  1038                           ; 1 bytes @ 0xE
  1039  00000F                     	ds	1
  1040  000010                     ___ftmul@f2:
  1041                           	opt stack 0
  1042                           
  1043                           ; 3 bytes @ 0xF
  1044  000010                     	ds	1
  1045  000011                     ??___fttol:
  1046  000011                     ___lltoft@exp:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x10
  1050  000011                     	ds	1
  1051  000012                     ___ftdiv@cntr:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x11
  1055  000012                     	ds	1
  1056  000013                     ??___ftmul:
  1057  000013                     ___ftdiv@f3:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0x12
  1061  000013                     	ds	3
  1062  000016                     ___ftdiv@exp:
  1063                           	opt stack 0
  1064  000016                     ___ftmul@exp:
  1065                           	opt stack 0
  1066  000016                     ___fttol@sign1:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x15
  1070  000016                     	ds	1
  1071  000017                     ___ftdiv@sign:
  1072                           	opt stack 0
  1073  000017                     ___ftmul@f3_as_product:
  1074                           	opt stack 0
  1075  000017                     ___fttol@lval:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x16
  1079  000017                     	ds	3
  1080  00001A                     ___ftmul@cntr:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x19
  1084  00001A                     	ds	1
  1085  00001B                     ___ftmul@sign:
  1086                           	opt stack 0
  1087  00001B                     ___fttol@exp1:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x1A
  1091  00001B                     	ds	1
  1092  00001C                     ?___wmul:
  1093                           	opt stack 0
  1094  00001C                     ?___altoft:
  1095                           	opt stack 0
  1096  00001C                     ___wmul@multiplier:
  1097                           	opt stack 0
  1098  00001C                     ___altoft@c:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x1B
  1102  00001C                     	ds	2
  1103  00001E                     ___wmul@multiplicand:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x1D
  1107  00001E                     	ds	2
  1108  000020                     ??___altoft:
  1109  000020                     ___wmul@product:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x1F
  1113  000020                     	ds	2
  1114  000022                     ?_sprintf:
  1115                           	opt stack 0
  1116  000022                     ?___ftadd:
  1117                           	opt stack 0
  1118  000022                     sprintf@sp:
  1119                           	opt stack 0
  1120  000022                     ___ftadd@f1:
  1121                           	opt stack 0
  1122                           
  1123                           ; 3 bytes @ 0x21
  1124  000022                     	ds	2
  1125  000024                     ___altoft@exp:
  1126                           	opt stack 0
  1127  000024                     sprintf@f:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x23
  1131  000024                     	ds	1
  1132  000025                     ___altoft@sign:
  1133                           	opt stack 0
  1134  000025                     ___ftadd@f2:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x24
  1138  000025                     	ds	3
  1139  000028                     ??___ftadd:
  1140                           
  1141                           ; 1 bytes @ 0x27
  1142  000028                     	ds	3
  1143  00002B                     ___ftadd@sign:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x2A
  1147  00002B                     	ds	1
  1148  00002C                     ??_sprintf:
  1149  00002C                     ___ftadd@exp2:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x2B
  1153  00002C                     	ds	1
  1154  00002D                     ___ftadd@exp1:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x2C
  1158  00002D                     	ds	1
  1159  00002E                     ?___ftsub:
  1160                           	opt stack 0
  1161  00002E                     ?_floor:
  1162                           	opt stack 0
  1163  00002E                     ?_eval_poly:
  1164                           	opt stack 0
  1165  00002E                     ___ftsub@f1:
  1166                           	opt stack 0
  1167  00002E                     floor@x:
  1168                           	opt stack 0
  1169  00002E                     eval_poly@x:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x2D
  1173  00002E                     	ds	2
  1174  000030                     sprintf@ap:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x2F
  1178  000030                     	ds	1
  1179  000031                     eval_poly@d:
  1180                           	opt stack 0
  1181  000031                     ___ftsub@f2:
  1182                           	opt stack 0
  1183  000031                     floor@i:
  1184                           	opt stack 0
  1185                           
  1186                           ; 3 bytes @ 0x30
  1187  000031                     	ds	1
  1188  000032                     sprintf@flag:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x31
  1192  000032                     	ds	1
  1193  000033                     sprintf@val:
  1194                           	opt stack 0
  1195  000033                     eval_poly@n:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x32
  1199  000033                     	ds	1
  1200  000034                     floor@expon:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x33
  1204  000034                     	ds	1
  1205  000035                     ??_eval_poly:
  1206  000035                     sprintf@prec:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x34
  1210  000035                     	ds	1
  1211  000036                     sprintf@width:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x35
  1215  000036                     	ds	1
  1216  000037                     eval_poly@res:
  1217                           	opt stack 0
  1218                           
  1219                           ; 3 bytes @ 0x36
  1220  000037                     	ds	1
  1221  000038                     sprintf@c:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x37
  1225  000038                     	ds	1
  1226  000039                     ??_cambiar_opcion:
  1227  000039                     guarda_numero_ingresado@num:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x38
  1231  000039                     	ds	1
  1232  00003A                     ?_log:
  1233                           	opt stack 0
  1234  00003A                     ?_ldexp:
  1235                           	opt stack 0
  1236  00003A                     ldexp@value:
  1237                           	opt stack 0
  1238  00003A                     log@x:
  1239                           	opt stack 0
  1240                           
  1241                           ; 3 bytes @ 0x39
  1242  00003A                     	ds	1
  1243  00003B                     ??_ingreso_numero:
  1244                           
  1245                           ; 1 bytes @ 0x3A
  1246  00003B                     	ds	2
  1247  00003D                     ??_activar_alarma:
  1248  00003D                     ir_a_pantalla_editar_contrasenia@i:
  1249                           	opt stack 0
  1250  00003D                     ldexp@newexp:
  1251                           	opt stack 0
  1252  00003D                     log@exponent:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x3C
  1256  00003D                     	ds	2
  1257  00003F                     ??_ldexp:
  1258                           
  1259                           ; 1 bytes @ 0x3E
  1260  00003F                     	ds	2
  1261  000041                     ?_exp:
  1262                           	opt stack 0
  1263  000041                     exp@x:
  1264                           	opt stack 0
  1265                           
  1266                           ; 3 bytes @ 0x40
  1267  000041                     	ds	3
  1268  000044                     _exp$2445:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x43
  1272  000044                     	ds	3
  1273  000047                     exp@exponent:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x46
  1277  000047                     	ds	2
  1278  000049                     exp@sign:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x48
  1282  000049                     	ds	1
  1283  00004A                     ?_pow:
  1284                           	opt stack 0
  1285  00004A                     pow@x:
  1286                           	opt stack 0
  1287                           
  1288                           ; 3 bytes @ 0x49
  1289  00004A                     	ds	3
  1290  00004D                     pow@y:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0x4C
  1294  00004D                     	ds	3
  1295  000050                     _pow$2443:
  1296                           	opt stack 0
  1297                           
  1298                           ; 3 bytes @ 0x4F
  1299  000050                     	ds	3
  1300  000053                     _pow$2444:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x52
  1304  000053                     	ds	3
  1305  000056                     pow@sign:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x55
  1309  000056                     	ds	1
  1310  000057                     pow@yi:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x56
  1314  000057                     	ds	4
  1315  00005B                     ?_covertir_valores_de_array_a_escala_decimal:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x5A
  1319  00005B                     	ds	2
  1320  00005D                     ??_covertir_valores_de_array_a_escala_decimal:
  1321                           
  1322                           ; 1 bytes @ 0x5C
  1323  00005D                     	ds	2
  1324  00005F                     ??_editar_fecha_reloj_digital:
  1325  00005F                     ??_editar_hora_reloj_digital:
  1326                           
  1327                           ; 1 bytes @ 0x5E
  1328  00005F                     	ds	1
  1329  000060                     tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           postinc0	equ	0xFEE
  1334                           wreg	equ	0xFE8
  1335                           postdec1	equ	0xFE5
  1336                           fsr1l	equ	0xFE1
  1337                           
  1338                           ; 1 bytes @ 0x5F
  1339 ;;
  1340 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1341 ;;
  1342 ;; *************** function _main *****************
  1343 ;; Defined at:
  1344 ;;		line 677 in file "main.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;		None
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;		None
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  2  429[None  ] int 
  1351 ;; Registers used:
  1352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1361 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1362 ;;Total ram usage:        1 bytes
  1363 ;; Hardware stack levels required when called:   13
  1364 ;; This function calls:
  1365 ;;		_Read_RTC
  1366 ;;		_ir_a_pantalla_inicial
  1367 ;;		_setup
  1368 ;; This function is called by:
  1369 ;;		Startup code after reset
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text0
  1374  0038F4                     __ptext0:
  1375                           	opt stack 0
  1376  0038F4                     _main:
  1377                           	opt stack 18
  1378                           
  1379                           ;main.c: 678: setup();
  1380                           
  1381                           ;incstack = 0
  1382  0038F4  ECA7  F01B         	call	_setup	;wreg free
  1383  0038F8                     
  1384                           ;main.c: 682: Read_RTC();
  1385  0038F8  ECC7  F00F         	call	_Read_RTC	;wreg free
  1386                           
  1387                           ;main.c: 684: ir_a_pantalla_inicial();
  1388  0038FC  ECED  F01C         	call	_ir_a_pantalla_inicial	;wreg free
  1389  003900  D7FB               	goto	l430
  1390                           
  1391                           ;main.c: 685: }
  1392                           ;main.c: 687: _delay((unsigned long)((98)*(8000000/4000.0)));
  1393  003902  0EFF               	movlw	255
  1394  003904  0100               	movlb	0	; () banked
  1395  003906  6FE6               	movwf	??_main& (0+255),b
  1396  003908  0E8A               	movlw	138
  1397  00390A                     u5997:
  1398  00390A  2EE8               	decfsz	wreg,f,c
  1399  00390C  D7FE               	bra	u5997
  1400  00390E  2FE6               	decfsz	??_main& (0+255),f,b
  1401  003910  D7FC               	bra	u5997
  1402  003912  F000               	nop	
  1403                           
  1404                           ;main.c: 688: return 0;
  1405                           ;	Return value of _main is never used
  1406  003914  EF00  F000         	goto	start
  1407  003918                     __end_of_main:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           postdec1	equ	0xFE5
  1416                           fsr1l	equ	0xFE1
  1417                           
  1418 ;; *************** function _setup *****************
  1419 ;; Defined at:
  1420 ;;		line 639 in file "main.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    7
  1441 ;; This function calls:
  1442 ;;		_Write_RTC
  1443 ;;		_lcd_comand
  1444 ;;		_lcd_init
  1445 ;;		_set_reloj_digital
  1446 ;; This function is called by:
  1447 ;;		_main
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text1
  1452  00374E                     __ptext1:
  1453                           	opt stack 0
  1454  00374E                     _setup:
  1455                           	opt stack 23
  1456                           
  1457                           ;main.c: 640: OSCTUNEbits.INTSRC = 1;
  1458                           
  1459                           ;incstack = 0
  1460  00374E  8E9B               	bsf	3995,7,c	;volatile
  1461                           
  1462                           ;main.c: 641: OSCTUNEbits.PLLEN = 0;
  1463  003750  9C9B               	bcf	3995,6,c	;volatile
  1464                           
  1465                           ;main.c: 642: OSCCONbits.IRCF0 = 1;
  1466  003752  88D3               	bsf	4051,4,c	;volatile
  1467                           
  1468                           ;main.c: 643: OSCCONbits.IRCF1 = 1;
  1469  003754  8AD3               	bsf	4051,5,c	;volatile
  1470                           
  1471                           ;main.c: 644: OSCCONbits.IRCF2 = 1;
  1472  003756  8CD3               	bsf	4051,6,c	;volatile
  1473                           
  1474                           ;main.c: 645: OSCCONbits.SCS0 = 0;
  1475  003758  90D3               	bcf	4051,0,c	;volatile
  1476                           
  1477                           ;main.c: 646: OSCCONbits.SCS1 = 0;
  1478  00375A  92D3               	bcf	4051,1,c	;volatile
  1479                           
  1480                           ;main.c: 652: TRISA = 0b11110000;
  1481  00375C  0EF0               	movlw	240
  1482  00375E  6E92               	movwf	3986,c	;volatile
  1483                           
  1484                           ;main.c: 653: TRISB = 0;
  1485  003760  0E00               	movlw	0
  1486  003762  6E93               	movwf	3987,c	;volatile
  1487                           
  1488                           ;main.c: 654: TRISC = 0b00000111;
  1489  003764  0E07               	movlw	7
  1490  003766  6E94               	movwf	3988,c	;volatile
  1491                           
  1492                           ;main.c: 658: ANCON0 = 0b11111111;
  1493  003768  010F               	movlb	15	; () banked
  1494  00376A  6948               	setf	72,b	;volatile
  1495                           
  1496                           ; BSR set to: 15
  1497                           ;main.c: 660: ANCON1 = 0b11111111;
  1498  00376C  010F               	movlb	15	; () banked
  1499  00376E  6949               	setf	73,b	;volatile
  1500                           
  1501                           ; BSR set to: 15
  1502                           ;main.c: 663: RTCCFGbits.RTCEN = 1;
  1503  003770  010F               	movlb	15	; () banked
  1504  003772  8F3F               	bsf	63,7,b	;volatile
  1505                           
  1506                           ; BSR set to: 15
  1507                           ;main.c: 664: RTCCFGbits.RTCWREN = 1;
  1508  003774  010F               	movlb	15	; () banked
  1509  003776  8B3F               	bsf	63,5,b	;volatile
  1510                           
  1511                           ; BSR set to: 15
  1512                           ;main.c: 665: T1CONbits.T1OSCEN = 1;
  1513  003778  86CD               	bsf	4045,3,c	;volatile
  1514                           
  1515                           ; BSR set to: 15
  1516                           ;main.c: 666: Write_RTC();
  1517  00377A  EC3E  F00E         	call	_Write_RTC	;wreg free
  1518                           
  1519                           ;main.c: 667: lcd_init();
  1520  00377E  EC96  F019         	call	_lcd_init	;wreg free
  1521                           
  1522                           ;main.c: 668: lcd_comand(0b00001100);
  1523  003782  0E0C               	movlw	12
  1524  003784  ECF4  F01C         	call	_lcd_comand
  1525                           
  1526                           ;main.c: 669: LATBbits.LATB2 = 0;;
  1527  003788  948A               	bcf	3978,2,c	;volatile
  1528                           
  1529                           ;main.c: 670: LATBbits.LATB1 = 0;;
  1530  00378A  928A               	bcf	3978,1,c	;volatile
  1531                           
  1532                           ;main.c: 671: LATBbits.LATB0 = 0;;
  1533  00378C  908A               	bcf	3978,0,c	;volatile
  1534                           
  1535                           ;main.c: 673: set_reloj_digital();
  1536  00378E  EC01  F01D         	call	_set_reloj_digital	;wreg free
  1537                           
  1538                           ;main.c: 674: Write_RTC();
  1539  003792  EC3E  F00E         	call	_Write_RTC	;wreg free
  1540  003796  0012               	return		;funcret
  1541  003798                     __end_of_setup:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postdec1	equ	0xFE5
  1550                           fsr1l	equ	0xFE1
  1551                           
  1552 ;; *************** function _lcd_init *****************
  1553 ;; Defined at:
  1554 ;;		line 119 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;		None
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;  i               1    4[COMRAM] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1571 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1572 ;;Total ram usage:        1 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    2
  1575 ;; This function calls:
  1576 ;;		_Delay1KTCYx
  1577 ;;		_lcd_send_byte
  1578 ;;		_lcd_send_nibble
  1579 ;; This function is called by:
  1580 ;;		_setup
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text2
  1585  00332C                     __ptext2:
  1586                           	opt stack 0
  1587  00332C                     _lcd_init:
  1588                           	opt stack 27
  1589                           
  1590                           ;unmc_lcd_216.c: 120: int8 i;
  1591                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  1592                           
  1593                           ;incstack = 0
  1594  00332C  9693               	bcf	3987,3,c	;volatile
  1595                           
  1596                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  1597  00332E  9493               	bcf	3987,2,c	;volatile
  1598                           
  1599                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  1600  003330  968A               	bcf	3978,3,c	;volatile
  1601                           
  1602                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  1603  003332  948A               	bcf	3978,2,c	;volatile
  1604                           
  1605                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  1606  003334  9893               	bcf	3987,4,c	;volatile
  1607                           
  1608                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  1609  003336  9A93               	bcf	3987,5,c	;volatile
  1610                           
  1611                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  1612  003338  9C93               	bcf	3987,6,c	;volatile
  1613                           
  1614                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  1615  00333A  9E93               	bcf	3987,7,c	;volatile
  1616                           
  1617                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  1618  00333C  0E0A               	movlw	10
  1619  00333E  ECDD  F01C         	call	_Delay1KTCYx
  1620                           
  1621                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  1622  003342  0E0A               	movlw	10
  1623  003344  ECDD  F01C         	call	_Delay1KTCYx
  1624                           
  1625                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  1626  003348  0E0A               	movlw	10
  1627  00334A  ECDD  F01C         	call	_Delay1KTCYx
  1628                           
  1629                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  1630  00334E  0E00               	movlw	0
  1631  003350  6E05               	movwf	lcd_init@i,c
  1632  003352                     l4982:
  1633  003352  0E02               	movlw	2
  1634  003354  6405               	cpfsgt	lcd_init@i,c
  1635  003356  D001               	goto	l456
  1636  003358  D008               	goto	u5950
  1637  00335A                     l456:
  1638                           
  1639                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  1640  00335A  0E03               	movlw	3
  1641  00335C  ECD1  F019         	call	_lcd_send_nibble
  1642                           
  1643                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  1644  003360  0E0A               	movlw	10
  1645  003362  ECDD  F01C         	call	_Delay1KTCYx
  1646  003366  2A05               	incf	lcd_init@i,f,c
  1647  003368  D7F4               	goto	l4982
  1648  00336A                     u5950:
  1649                           
  1650                           ;unmc_lcd_216.c: 146: }
  1651                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  1652  00336A  0E02               	movlw	2
  1653  00336C  ECD1  F019         	call	_lcd_send_nibble
  1654                           
  1655                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  1656  003370  0E00               	movlw	0
  1657  003372  6E05               	movwf	lcd_init@i,c
  1658  003374                     l4996:
  1659  003374  0E03               	movlw	3
  1660  003376  6405               	cpfsgt	lcd_init@i,c
  1661  003378  D001               	goto	l458
  1662  00337A  0012               	return	
  1663  00337C                     l458:
  1664                           
  1665                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  1666  00337C  5005               	movf	lcd_init@i,w,c
  1667  00337E  0D01               	mullw	1
  1668  003380  0E0B               	movlw	low _LCD_INIT_STRING
  1669  003382  24F3               	addwf	prodl,w,c
  1670  003384  6EF6               	movwf	tblptrl,c
  1671  003386  0E0F               	movlw	high _LCD_INIT_STRING
  1672  003388  20F4               	addwfc	prodh,w,c
  1673  00338A  6EF7               	movwf	tblptrh,c
  1674  00338C                     	if	0	;There are less than 3 active tblptr bytes
  1675  00338C                     	endif
  1676  00338C  0008               	tblrd		*
  1677  00338E  CFF5 F003          	movff	tablat,lcd_send_byte@n
  1678  003392  0E00               	movlw	0
  1679  003394  EC4E  F01C         	call	_lcd_send_byte
  1680                           
  1681                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  1682  003398  0E0A               	movlw	10
  1683  00339A  ECDD  F01C         	call	_Delay1KTCYx
  1684  00339E  2A05               	incf	lcd_init@i,f,c
  1685  0033A0  D7E9               	goto	l4996
  1686  0033A2                     __end_of_lcd_init:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           prodh	equ	0xFF4
  1693                           prodl	equ	0xFF3
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1l	equ	0xFE1
  1698                           
  1699 ;; *************** function _Delay1KTCYx *****************
  1700 ;; Defined at:
  1701 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d1ktcyx.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;  unit            1    wreg     unsigned char 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  unit            1    0[COMRAM] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1719 ;;Total ram usage:        1 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_lcd_init
  1725 ;;		_DelayPORXLCD
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text3
  1730  0039BA                     __ptext3:
  1731                           	opt stack 0
  1732  0039BA                     _Delay1KTCYx:
  1733                           	opt stack 28
  1734                           
  1735                           ;incstack = 0
  1736                           ;Delay1KTCYx@unit stored from wreg
  1737  0039BA  6E01               	movwf	Delay1KTCYx@unit,c
  1738  0039BC                     l843:
  1739  0039BC  0EC8               	movlw	200
  1740  0039BE                     u6007:
  1741  0039BE  D000               	nop2	
  1742  0039C0  2EE8               	decfsz	wreg,f,c
  1743  0039C2  D7FD               	bra	u6007
  1744  0039C4  2E01               	decfsz	Delay1KTCYx@unit,f,c
  1745  0039C6  D7FA               	goto	l843
  1746  0039C8  0012               	return	
  1747  0039CA                     __end_of_Delay1KTCYx:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           
  1760 ;; *************** function _ir_a_pantalla_inicial *****************
  1761 ;; Defined at:
  1762 ;;		line 442 in file "main.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1780 ;;Total ram usage:        0 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:   12
  1783 ;; This function calls:
  1784 ;;		_set_reloj_digital
  1785 ;;		_si_apreta_numero_va_a_pantalla_contrasenia
  1786 ;;		_titila_texto_insert_password
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text4
  1793  0039DA                     __ptext4:
  1794                           	opt stack 0
  1795  0039DA                     _ir_a_pantalla_inicial:
  1796                           	opt stack 18
  1797                           
  1798                           ;main.c: 443: set_reloj_digital();
  1799                           
  1800                           ;incstack = 0
  1801  0039DA  EC01  F01D         	call	_set_reloj_digital	;wreg free
  1802                           
  1803                           ;main.c: 444: titila_texto_insert_password();
  1804  0039DE  EC53  F016         	call	_titila_texto_insert_password	;wreg free
  1805                           
  1806                           ;main.c: 445: si_apreta_numero_va_a_pantalla_contrasenia();
  1807  0039E2  ECCB  F017         	call	_si_apreta_numero_va_a_pantalla_contrasenia	;wreg free
  1808  0039E6  0012               	return		;funcret
  1809  0039E8                     __end_of_ir_a_pantalla_inicial:
  1810                           	opt stack 0
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           prodh	equ	0xFF4
  1816                           prodl	equ	0xFF3
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           postdec1	equ	0xFE5
  1820                           fsr1l	equ	0xFE1
  1821                           
  1822 ;; *************** function _titila_texto_insert_password *****************
  1823 ;; Defined at:
  1824 ;;		line 97 in file "main.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;		None
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;		None
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      void 
  1831 ;; Registers used:
  1832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1841 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1842 ;;Total ram usage:        1 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    5
  1845 ;; This function calls:
  1846 ;;		_lcd_gotoxy
  1847 ;;		_lcd_putrs
  1848 ;; This function is called by:
  1849 ;;		_ir_a_pantalla_inicial
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text5
  1854  002CA6                     __ptext5:
  1855                           	opt stack 0
  1856  002CA6                     _titila_texto_insert_password:
  1857                           	opt stack 24
  1858                           
  1859                           ;main.c: 98: if (txt_insert_pass == 0) {
  1860                           
  1861                           ;incstack = 0
  1862  002CA6  0100               	movlb	0	; () banked
  1863  002CA8  518A               	movf	_txt_insert_pass& (0+255),w,b
  1864  002CAA  0100               	movlb	0	; () banked
  1865  002CAC  118B               	iorwf	(_txt_insert_pass+1)& (0+255),w,b
  1866  002CAE  A4D8               	btfss	status,2,c
  1867  002CB0  D022               	goto	l179
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 99: txt_insert_pass = 1;
  1871  002CB2  0E00               	movlw	0
  1872  002CB4  0100               	movlb	0	; () banked
  1873  002CB6  6F8B               	movwf	(_txt_insert_pass+1)& (0+255),b
  1874  002CB8  0E01               	movlw	1
  1875  002CBA  6F8A               	movwf	_txt_insert_pass& (0+255),b
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 100: lcd_gotoxy(1, 1);
  1879  002CBC  0E01               	movlw	1
  1880  002CBE  6E05               	movwf	lcd_gotoxy@y,c
  1881  002CC0  0E01               	movlw	1
  1882  002CC2  EC9E  F01C         	call	_lcd_gotoxy
  1883                           
  1884                           ;main.c: 101: lcd_putrs("Insert");
  1885  002CC6  0ED0               	movlw	low STR_9
  1886  002CC8  6E09               	movwf	lcd_putrs@ptr,c
  1887  002CCA  0E0F               	movlw	high STR_9
  1888  002CCC  6E0A               	movwf	lcd_putrs@ptr+1,c
  1889  002CCE  EC2F  F01B         	call	_lcd_putrs	;wreg free
  1890                           
  1891                           ;main.c: 102: lcd_gotoxy(1, 2);
  1892  002CD2  0E02               	movlw	2
  1893  002CD4  6E05               	movwf	lcd_gotoxy@y,c
  1894  002CD6  0E01               	movlw	1
  1895  002CD8  EC9E  F01C         	call	_lcd_gotoxy
  1896                           
  1897                           ;main.c: 103: lcd_putrs("Password");
  1898  002CDC  0EAE               	movlw	low STR_10
  1899  002CDE  6E09               	movwf	lcd_putrs@ptr,c
  1900  002CE0  0E0F               	movlw	high STR_10
  1901  002CE2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1902  002CE4  EC2F  F01B         	call	_lcd_putrs	;wreg free
  1903                           
  1904                           ;main.c: 104: _delay((unsigned long)((80)*(8000000/4000.0)));
  1905  002CE8  0ED0               	movlw	208
  1906  002CEA  6E0B               	movwf	??_titila_texto_insert_password& (0+255),c
  1907  002CEC  0ECA               	movlw	202
  1908  002CEE                     u6017:
  1909  002CEE  2EE8               	decfsz	wreg,f,c
  1910  002CF0  D7FE               	bra	u6017
  1911  002CF2  2E0B               	decfsz	??_titila_texto_insert_password& (0+255),f,c
  1912  002CF4  D7FC               	bra	u6017
  1913  002CF6                     l179:
  1914                           
  1915                           ;main.c: 105: }
  1916                           ;main.c: 107: if (txt_insert_pass == 1) {
  1917  002CF6  0100               	movlb	0	; () banked
  1918  002CF8  058A               	decf	_txt_insert_pass& (0+255),w,b
  1919  002CFA  0100               	movlb	0	; () banked
  1920  002CFC  118B               	iorwf	(_txt_insert_pass+1)& (0+255),w,b
  1921  002CFE  A4D8               	btfss	status,2,c
  1922  002D00  0012               	return	
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;main.c: 108: txt_insert_pass = 0;
  1926  002D02  0E00               	movlw	0
  1927  002D04  0100               	movlb	0	; () banked
  1928  002D06  6F8B               	movwf	(_txt_insert_pass+1)& (0+255),b
  1929  002D08  0E00               	movlw	0
  1930  002D0A  6F8A               	movwf	_txt_insert_pass& (0+255),b
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;main.c: 109: lcd_gotoxy(1, 1);
  1934  002D0C  0E01               	movlw	1
  1935  002D0E  6E05               	movwf	lcd_gotoxy@y,c
  1936  002D10  0E01               	movlw	1
  1937  002D12  EC9E  F01C         	call	_lcd_gotoxy
  1938                           
  1939                           ;main.c: 110: lcd_putrs("        ");
  1940  002D16  0E65               	movlw	low (STR_18+8)
  1941  002D18  6E09               	movwf	lcd_putrs@ptr,c
  1942  002D1A  0E0F               	movlw	high (STR_18+8)
  1943  002D1C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1944  002D1E  EC2F  F01B         	call	_lcd_putrs	;wreg free
  1945                           
  1946                           ;main.c: 111: lcd_gotoxy(1, 2);
  1947  002D22  0E02               	movlw	2
  1948  002D24  6E05               	movwf	lcd_gotoxy@y,c
  1949  002D26  0E01               	movlw	1
  1950  002D28  EC9E  F01C         	call	_lcd_gotoxy
  1951                           
  1952                           ;main.c: 112: lcd_putrs("        ");
  1953  002D2C  0E65               	movlw	low (STR_18+8)
  1954  002D2E  6E09               	movwf	lcd_putrs@ptr,c
  1955  002D30  0E0F               	movlw	high (STR_18+8)
  1956  002D32  6E0A               	movwf	lcd_putrs@ptr+1,c
  1957  002D34  EC2F  F01B         	call	_lcd_putrs	;wreg free
  1958                           
  1959                           ;main.c: 113: _delay((unsigned long)((60)*(8000000/4000.0)));
  1960  002D38  0E9C               	movlw	156
  1961  002D3A  6E0B               	movwf	??_titila_texto_insert_password& (0+255),c
  1962  002D3C  0ED7               	movlw	215
  1963  002D3E                     u6027:
  1964  002D3E  2EE8               	decfsz	wreg,f,c
  1965  002D40  D7FE               	bra	u6027
  1966  002D42  2E0B               	decfsz	??_titila_texto_insert_password& (0+255),f,c
  1967  002D44  D7FC               	bra	u6027
  1968  002D46  F000               	nop	
  1969  002D48  0012               	return	
  1970  002D4A                     __end_of_titila_texto_insert_password:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           prodh	equ	0xFF4
  1977                           prodl	equ	0xFF3
  1978                           postinc0	equ	0xFEE
  1979                           wreg	equ	0xFE8
  1980                           postdec1	equ	0xFE5
  1981                           fsr1l	equ	0xFE1
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _si_apreta_numero_va_a_pantalla_contrasenia *****************
  1985 ;; Defined at:
  1986 ;;		line 391 in file "main.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;		None
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;		None
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      void 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2004 ;;Total ram usage:        0 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:   11
  2007 ;; This function calls:
  2008 ;;		_ir_a_pantalla_ingresar_contrasenia
  2009 ;; This function is called by:
  2010 ;;		_ir_a_pantalla_inicial
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text6
  2015  002F96                     __ptext6:
  2016                           	opt stack 0
  2017  002F96                     _si_apreta_numero_va_a_pantalla_contrasenia:
  2018                           	opt stack 18
  2019                           
  2020                           ;main.c: 392: LATAbits.LATA0 = 1;
  2021                           
  2022                           ;incstack = 0
  2023  002F96  8089               	bsf	3977,0,c	;volatile
  2024                           
  2025                           ;main.c: 393: LATAbits.LATA1 = 0;
  2026  002F98  9289               	bcf	3977,1,c	;volatile
  2027                           
  2028                           ;main.c: 394: LATAbits.LATA2 = 0;
  2029  002F9A  9489               	bcf	3977,2,c	;volatile
  2030                           
  2031                           ;main.c: 395: LATAbits.LATA3 = 0;
  2032  002F9C  9689               	bcf	3977,3,c	;volatile
  2033                           
  2034                           ;main.c: 396: {
  2035                           ;main.c: 397: if ((PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) ||
  2036                           ;main.c: 398: (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) ||
  2037                           ;main.c: 399: (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1)) {
  2038  002F9E  AA80               	btfss	3968,5,c	;volatile
  2039  002FA0  D002               	goto	u5710
  2040  002FA2  B089               	btfsc	3977,0,c	;volatile
  2041  002FA4  D007               	goto	u5750
  2042  002FA6                     u5710:
  2043  002FA6  AE80               	btfss	3968,7,c	;volatile
  2044  002FA8  D002               	goto	u5730
  2045  002FAA  B089               	btfsc	3977,0,c	;volatile
  2046  002FAC  D003               	goto	u5750
  2047  002FAE                     u5730:
  2048  002FAE  BC80               	btfsc	3968,6,c	;volatile
  2049  002FB0  A089               	btfss	3977,0,c	;volatile
  2050  002FB2  D002               	goto	l321
  2051  002FB4                     u5750:
  2052                           
  2053                           ;main.c: 401: ir_a_pantalla_ingresar_contrasenia();
  2054  002FB4  EC0C  F01A         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2055  002FB8                     l321:
  2056                           
  2057                           ;main.c: 402: }
  2058                           ;main.c: 403: }
  2059                           ;main.c: 404: LATAbits.LATA0 = 0;
  2060  002FB8  9089               	bcf	3977,0,c	;volatile
  2061                           
  2062                           ;main.c: 405: LATAbits.LATA1 = 1;
  2063  002FBA  8289               	bsf	3977,1,c	;volatile
  2064                           
  2065                           ;main.c: 406: LATAbits.LATA2 = 0;
  2066  002FBC  9489               	bcf	3977,2,c	;volatile
  2067                           
  2068                           ;main.c: 407: LATAbits.LATA3 = 0;
  2069  002FBE  9689               	bcf	3977,3,c	;volatile
  2070                           
  2071                           ;main.c: 408: {
  2072                           ;main.c: 409: if ((PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) ||
  2073                           ;main.c: 410: (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) ||
  2074                           ;main.c: 411: (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1)) {
  2075  002FC0  AA80               	btfss	3968,5,c	;volatile
  2076  002FC2  D002               	goto	u5770
  2077  002FC4  B289               	btfsc	3977,1,c	;volatile
  2078  002FC6  D007               	goto	u5810
  2079  002FC8                     u5770:
  2080  002FC8  AE80               	btfss	3968,7,c	;volatile
  2081  002FCA  D002               	goto	u5790
  2082  002FCC  B289               	btfsc	3977,1,c	;volatile
  2083  002FCE  D003               	goto	u5810
  2084  002FD0                     u5790:
  2085  002FD0  BC80               	btfsc	3968,6,c	;volatile
  2086  002FD2  A289               	btfss	3977,1,c	;volatile
  2087  002FD4  D002               	goto	l328
  2088  002FD6                     u5810:
  2089                           
  2090                           ;main.c: 413: ir_a_pantalla_ingresar_contrasenia();
  2091  002FD6  EC0C  F01A         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2092  002FDA                     l328:
  2093                           
  2094                           ;main.c: 414: }
  2095                           ;main.c: 415: }
  2096                           ;main.c: 416: LATAbits.LATA0 = 0;
  2097  002FDA  9089               	bcf	3977,0,c	;volatile
  2098                           
  2099                           ;main.c: 417: LATAbits.LATA1 = 0;
  2100  002FDC  9289               	bcf	3977,1,c	;volatile
  2101                           
  2102                           ;main.c: 418: LATAbits.LATA2 = 1;
  2103  002FDE  8489               	bsf	3977,2,c	;volatile
  2104                           
  2105                           ;main.c: 419: LATAbits.LATA3 = 0;
  2106  002FE0  9689               	bcf	3977,3,c	;volatile
  2107                           
  2108                           ;main.c: 420: {
  2109                           ;main.c: 421: if ((PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) ||
  2110                           ;main.c: 422: (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) ||
  2111                           ;main.c: 423: (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1)) {
  2112  002FE2  AA80               	btfss	3968,5,c	;volatile
  2113  002FE4  D002               	goto	u5830
  2114  002FE6  B489               	btfsc	3977,2,c	;volatile
  2115  002FE8  D007               	goto	u5870
  2116  002FEA                     u5830:
  2117  002FEA  AE80               	btfss	3968,7,c	;volatile
  2118  002FEC  D002               	goto	u5850
  2119  002FEE  B489               	btfsc	3977,2,c	;volatile
  2120  002FF0  D003               	goto	u5870
  2121  002FF2                     u5850:
  2122  002FF2  BC80               	btfsc	3968,6,c	;volatile
  2123  002FF4  A489               	btfss	3977,2,c	;volatile
  2124  002FF6  D002               	goto	l335
  2125  002FF8                     u5870:
  2126                           
  2127                           ;main.c: 425: ir_a_pantalla_ingresar_contrasenia();
  2128  002FF8  EC0C  F01A         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2129  002FFC                     l335:
  2130                           
  2131                           ;main.c: 426: }
  2132                           ;main.c: 427: }
  2133                           ;main.c: 428: LATAbits.LATA0 = 0;
  2134  002FFC  9089               	bcf	3977,0,c	;volatile
  2135                           
  2136                           ;main.c: 429: LATAbits.LATA1 = 0;
  2137  002FFE  9289               	bcf	3977,1,c	;volatile
  2138                           
  2139                           ;main.c: 430: LATAbits.LATA2 = 0;
  2140  003000  9489               	bcf	3977,2,c	;volatile
  2141                           
  2142                           ;main.c: 431: LATAbits.LATA3 = 1;
  2143  003002  8689               	bsf	3977,3,c	;volatile
  2144                           
  2145                           ;main.c: 432: {
  2146                           ;main.c: 433: if ((PORTAbits.RA5 == 1 && LATAbits.LATA3 == 1) ||
  2147                           ;main.c: 434: (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) ||
  2148                           ;main.c: 435: (PORTAbits.RA6 == 1 && LATAbits.LATA3 == 1)) {
  2149  003004  AA80               	btfss	3968,5,c	;volatile
  2150  003006  D002               	goto	u5890
  2151  003008  B689               	btfsc	3977,3,c	;volatile
  2152  00300A  D008               	goto	u5930
  2153  00300C                     u5890:
  2154  00300C  AE80               	btfss	3968,7,c	;volatile
  2155  00300E  D002               	goto	u5910
  2156  003010  B689               	btfsc	3977,3,c	;volatile
  2157  003012  D004               	goto	u5930
  2158  003014                     u5910:
  2159  003014  AC80               	btfss	3968,6,c	;volatile
  2160  003016  0012               	return	
  2161  003018  A689               	btfss	3977,3,c	;volatile
  2162  00301A  0012               	return	
  2163  00301C                     u5930:
  2164                           
  2165                           ;main.c: 437: ir_a_pantalla_ingresar_contrasenia();
  2166  00301C  EC0C  F01A         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2167  003020  0012               	return	
  2168  003022                     __end_of_si_apreta_numero_va_a_pantalla_contrasenia:
  2169                           	opt stack 0
  2170                           tblptru	equ	0xFF8
  2171                           tblptrh	equ	0xFF7
  2172                           tblptrl	equ	0xFF6
  2173                           tablat	equ	0xFF5
  2174                           prodh	equ	0xFF4
  2175                           prodl	equ	0xFF3
  2176                           postinc0	equ	0xFEE
  2177                           wreg	equ	0xFE8
  2178                           postdec1	equ	0xFE5
  2179                           fsr1l	equ	0xFE1
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _ir_a_pantalla_ingresar_contrasenia *****************
  2183 ;; Defined at:
  2184 ;;		line 368 in file "main.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2202 ;;Total ram usage:        0 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:   10
  2205 ;; This function calls:
  2206 ;;		_ingreso_numero
  2207 ;;		_ir_a_pantalla_edicion
  2208 ;;		_lcd_gotoxy
  2209 ;;		_lcd_putrs
  2210 ;;		_mostrar_presionar_a
  2211 ;;		_resetear_pantalla_ingresar_contrasenia
  2212 ;;		_verificar_contrasenia
  2213 ;; This function is called by:
  2214 ;;		_si_apreta_numero_va_a_pantalla_contrasenia
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text7
  2219  003418                     __ptext7:
  2220                           	opt stack 0
  2221  003418                     _ir_a_pantalla_ingresar_contrasenia:
  2222                           	opt stack 18
  2223                           
  2224                           ;main.c: 370: numeros_ingresados = 0;
  2225                           
  2226                           ;incstack = 0
  2227  003418  0E00               	movlw	0
  2228  00341A  0100               	movlb	0	; () banked
  2229  00341C  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  2230  00341E  0E00               	movlw	0
  2231  003420  6F92               	movwf	_numeros_ingresados& (0+255),b
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;main.c: 371: lcd_gotoxy(1, 1);
  2235  003422  0E01               	movlw	1
  2236  003424  6E05               	movwf	lcd_gotoxy@y,c
  2237  003426  0E01               	movlw	1
  2238  003428  EC9E  F01C         	call	_lcd_gotoxy
  2239                           
  2240                           ;main.c: 372: lcd_putrs("Insert Password ");
  2241  00342C  0E7F               	movlw	low STR_21
  2242  00342E  6E09               	movwf	lcd_putrs@ptr,c
  2243  003430  0E0F               	movlw	high STR_21
  2244  003432  6E0A               	movwf	lcd_putrs@ptr+1,c
  2245  003434  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2246                           
  2247                           ;main.c: 373: lcd_gotoxy(1, 2);
  2248  003438  0E02               	movlw	2
  2249  00343A  6E05               	movwf	lcd_gotoxy@y,c
  2250  00343C  0E01               	movlw	1
  2251  00343E  EC9E  F01C         	call	_lcd_gotoxy
  2252                           
  2253                           ;main.c: 374: lcd_putrs("                ");
  2254  003442  0E5D               	movlw	low STR_18
  2255  003444  6E09               	movwf	lcd_putrs@ptr,c
  2256  003446  0E0F               	movlw	high STR_18
  2257  003448  6E0A               	movwf	lcd_putrs@ptr+1,c
  2258  00344A  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2259  00344E                     
  2260                           ;main.c: 377: if (numeros_ingresados < 4) {
  2261  00344E  0100               	movlb	0	; () banked
  2262  003450  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  2263  003452  D008               	goto	u5660
  2264  003454  0100               	movlb	0	; () banked
  2265  003456  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  2266  003458  E108               	bnz	l4874
  2267  00345A  0E04               	movlw	4
  2268  00345C  0100               	movlb	0	; () banked
  2269  00345E  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  2270  003460  B0D8               	btfsc	status,0,c
  2271  003462  D003               	goto	l312
  2272  003464                     u5660:
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;main.c: 378: ingreso_numero();
  2276  003464  ECFE  F007         	call	_ingreso_numero	;wreg free
  2277                           
  2278                           ;main.c: 379: } else {
  2279  003468  D7F2               	goto	l311
  2280  00346A                     l312:
  2281  00346A                     l4874:
  2282                           
  2283                           ;main.c: 380: mostrar_presionar_a();
  2284  00346A  ECBE  F01C         	call	_mostrar_presionar_a	;wreg free
  2285                           
  2286                           ;main.c: 381: if (verificar_contrasenia() == 1) {
  2287  00346E  EC1D  F019         	call	_verificar_contrasenia	;wreg free
  2288  003472  0401               	decf	?_verificar_contrasenia,w,c
  2289  003474  1002               	iorwf	?_verificar_contrasenia+1,w,c
  2290  003476  A4D8               	btfss	status,2,c
  2291  003478  D003               	goto	l314
  2292                           
  2293                           ;main.c: 382: ir_a_pantalla_edicion();
  2294  00347A  EC7A  F01A         	call	_ir_a_pantalla_edicion	;wreg free
  2295                           
  2296                           ;main.c: 383: break;
  2297  00347E  0012               	return	
  2298  003480                     l314:
  2299                           
  2300                           ;main.c: 385: resetear_pantalla_ingresar_contrasenia();
  2301  003480  EC80  F01B         	call	_resetear_pantalla_ingresar_contrasenia	;wreg free
  2302  003484  D7E4               	goto	l311
  2303  003486                     __end_of_ir_a_pantalla_ingresar_contrasenia:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           postinc0	equ	0xFEE
  2312                           wreg	equ	0xFE8
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _resetear_pantalla_ingresar_contrasenia *****************
  2318 ;; Defined at:
  2319 ;;		line 231 in file "main.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  i               2   10[COMRAM] int 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2337 ;;Total ram usage:        2 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    5
  2340 ;; This function calls:
  2341 ;;		_lcd_gotoxy
  2342 ;;		_lcd_putrs
  2343 ;; This function is called by:
  2344 ;;		_ir_a_pantalla_ingresar_contrasenia
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text8
  2349  003700                     __ptext8:
  2350                           	opt stack 0
  2351  003700                     _resetear_pantalla_ingresar_contrasenia:
  2352                           	opt stack 22
  2353                           
  2354                           ;main.c: 232: lcd_gotoxy(1, 2);
  2355                           
  2356                           ;incstack = 0
  2357  003700  0E02               	movlw	2
  2358  003702  6E05               	movwf	lcd_gotoxy@y,c
  2359  003704  0E01               	movlw	1
  2360  003706  EC9E  F01C         	call	_lcd_gotoxy
  2361                           
  2362                           ;main.c: 233: lcd_putrs("              ");
  2363  00370A  0E5F               	movlw	low (STR_18+2)
  2364  00370C  6E09               	movwf	lcd_putrs@ptr,c
  2365  00370E  0E0F               	movlw	high (STR_18+2)
  2366  003710  6E0A               	movwf	lcd_putrs@ptr+1,c
  2367  003712  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2368                           
  2369                           ;main.c: 235: for (int i = 0; i < 0; i++) {
  2370  003716  0E00               	movlw	0
  2371  003718  6E0C               	movwf	resetear_pantalla_ingresar_contrasenia@i+1,c
  2372  00371A  0E00               	movlw	0
  2373  00371C  6E0B               	movwf	resetear_pantalla_ingresar_contrasenia@i,c
  2374  00371E                     l4816:
  2375  00371E  AE0C               	btfss	resetear_pantalla_ingresar_contrasenia@i+1,7,c
  2376  003720  D010               	goto	u5630
  2377                           
  2378                           ;main.c: 236: array_contrasenia_ingresada[i] = 0;
  2379  003722  90D8               	bcf	status,0,c
  2380  003724  340B               	rlcf	resetear_pantalla_ingresar_contrasenia@i,w,c
  2381  003726  6ED9               	movwf	fsr2l,c
  2382  003728  340C               	rlcf	resetear_pantalla_ingresar_contrasenia@i+1,w,c
  2383  00372A  6EDA               	movwf	fsr2h,c
  2384  00372C  0E60               	movlw	low _array_contrasenia_ingresada
  2385  00372E  26D9               	addwf	fsr2l,f,c
  2386  003730  0E00               	movlw	high _array_contrasenia_ingresada
  2387  003732  22DA               	addwfc	fsr2h,f,c
  2388  003734  0E00               	movlw	0
  2389  003736  6EDE               	movwf	postinc2,c
  2390  003738  0E00               	movlw	0
  2391  00373A  6EDD               	movwf	postdec2,c
  2392  00373C  4A0B               	infsnz	resetear_pantalla_ingresar_contrasenia@i,f,c
  2393  00373E  2A0C               	incf	resetear_pantalla_ingresar_contrasenia@i+1,f,c
  2394  003740  D7EE               	goto	l4816
  2395  003742                     u5630:
  2396                           
  2397                           ;main.c: 237: }
  2398                           ;main.c: 239: numeros_ingresados = 0;
  2399  003742  0E00               	movlw	0
  2400  003744  0100               	movlb	0	; () banked
  2401  003746  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  2402  003748  0E00               	movlw	0
  2403  00374A  6F92               	movwf	_numeros_ingresados& (0+255),b
  2404                           
  2405                           ; BSR set to: 0
  2406  00374C  0012               	return		;funcret
  2407  00374E                     __end_of_resetear_pantalla_ingresar_contrasenia:
  2408                           	opt stack 0
  2409                           tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           prodh	equ	0xFF4
  2414                           prodl	equ	0xFF3
  2415                           postinc0	equ	0xFEE
  2416                           wreg	equ	0xFE8
  2417                           postdec1	equ	0xFE5
  2418                           fsr1l	equ	0xFE1
  2419                           postinc2	equ	0xFDE
  2420                           postdec2	equ	0xFDD
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _mostrar_presionar_a *****************
  2426 ;; Defined at:
  2427 ;;		line 226 in file "main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2445 ;;Total ram usage:        0 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    5
  2448 ;; This function calls:
  2449 ;;		_lcd_gotoxy
  2450 ;;		_lcd_putrs
  2451 ;; This function is called by:
  2452 ;;		_ir_a_pantalla_ingresar_contrasenia
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text9
  2457  00397C                     __ptext9:
  2458                           	opt stack 0
  2459  00397C                     _mostrar_presionar_a:
  2460                           	opt stack 22
  2461                           
  2462                           ;main.c: 227: lcd_gotoxy(7, 2);
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;incstack = 0
  2466  00397C  0E02               	movlw	2
  2467  00397E  6E05               	movwf	lcd_gotoxy@y,c
  2468  003980  0E07               	movlw	7
  2469  003982  EC9E  F01C         	call	_lcd_gotoxy
  2470                           
  2471                           ;main.c: 228: lcd_putrs("Press A");
  2472  003986  0EC8               	movlw	low STR_14
  2473  003988  6E09               	movwf	lcd_putrs@ptr,c
  2474  00398A  0E0F               	movlw	high STR_14
  2475  00398C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2476  00398E  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2477  003992  0012               	return		;funcret
  2478  003994                     __end_of_mostrar_presionar_a:
  2479                           	opt stack 0
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           prodh	equ	0xFF4
  2485                           prodl	equ	0xFF3
  2486                           postinc0	equ	0xFEE
  2487                           wreg	equ	0xFE8
  2488                           postdec1	equ	0xFE5
  2489                           fsr1l	equ	0xFE1
  2490                           postinc2	equ	0xFDE
  2491                           postdec2	equ	0xFDD
  2492                           fsr2h	equ	0xFDA
  2493                           fsr2l	equ	0xFD9
  2494                           status	equ	0xFD8
  2495                           
  2496 ;; *************** function _ir_a_pantalla_edicion *****************
  2497 ;; Defined at:
  2498 ;;		line 340 in file "main.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;		None
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2516 ;;Total ram usage:        1 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    9
  2519 ;; This function calls:
  2520 ;;		_Read_RTC
  2521 ;;		_cambiar_opcion
  2522 ;;		_lcd_gotoxy
  2523 ;;		_lcd_putrs
  2524 ;;		_seleccionar_opcion
  2525 ;;		_set_reloj_digital
  2526 ;; This function is called by:
  2527 ;;		_ir_a_pantalla_ingresar_contrasenia
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text10
  2532  0034F4                     __ptext10:
  2533                           	opt stack 0
  2534  0034F4                     _ir_a_pantalla_edicion:
  2535                           	opt stack 18
  2536                           
  2537                           ;main.c: 342: lcd_gotoxy(1, 1);
  2538                           
  2539                           ;incstack = 0
  2540                           ;main.c: 341: while (1) {
  2541  0034F4  0E01               	movlw	1
  2542  0034F6  6E05               	movwf	lcd_gotoxy@y,c
  2543  0034F8  0E01               	movlw	1
  2544  0034FA  EC9E  F01C         	call	_lcd_gotoxy
  2545                           
  2546                           ;main.c: 343: lcd_putrs("Active ");
  2547  0034FE  0EC0               	movlw	low STR_19
  2548  003500  6E09               	movwf	lcd_putrs@ptr,c
  2549  003502  0E0F               	movlw	high STR_19
  2550  003504  6E0A               	movwf	lcd_putrs@ptr+1,c
  2551  003506  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2552                           
  2553                           ;main.c: 344: lcd_gotoxy(1, 2);
  2554  00350A  0E02               	movlw	2
  2555  00350C  6E05               	movwf	lcd_gotoxy@y,c
  2556  00350E  0E01               	movlw	1
  2557  003510  EC9E  F01C         	call	_lcd_gotoxy
  2558                           
  2559                           ;main.c: 345: lcd_putrs("Edt Pass");
  2560  003514  0EB7               	movlw	low STR_20
  2561  003516  6E09               	movwf	lcd_putrs@ptr,c
  2562  003518  0E0F               	movlw	high STR_20
  2563  00351A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2564  00351C  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2565                           
  2566                           ;main.c: 347: Read_RTC();
  2567  003520  ECC7  F00F         	call	_Read_RTC	;wreg free
  2568                           
  2569                           ;main.c: 349: set_reloj_digital();
  2570  003524  EC01  F01D         	call	_set_reloj_digital	;wreg free
  2571                           
  2572                           ;main.c: 350: cambiar_opcion();
  2573  003528  EC39  F015         	call	_cambiar_opcion	;wreg free
  2574                           
  2575                           ;main.c: 351: seleccionar_opcion();
  2576  00352C  EC58  F01B         	call	_seleccionar_opcion	;wreg free
  2577                           
  2578                           ;main.c: 355: LATAbits.LATA0 = 0;
  2579  003530  9089               	bcf	3977,0,c	;volatile
  2580                           
  2581                           ;main.c: 356: LATAbits.LATA1 = 1;
  2582  003532  8289               	bsf	3977,1,c	;volatile
  2583                           
  2584                           ;main.c: 357: LATAbits.LATA2 = 0;
  2585  003534  9489               	bcf	3977,2,c	;volatile
  2586                           
  2587                           ;main.c: 358: LATAbits.LATA3 = 0;
  2588  003536  9689               	bcf	3977,3,c	;volatile
  2589                           
  2590                           ;main.c: 359: if (PORTCbits.RC2 == 1) {
  2591  003538  B482               	btfsc	3970,2,c	;volatile
  2592  00353A  0012               	return	
  2593  00353C  D7DB               	goto	_ir_a_pantalla_edicion
  2594  00353E                     
  2595                           ;main.c: 362: _delay((unsigned long)((98)*(8000000/4000.0)));
  2596  00353E  0EFF               	movlw	255
  2597  003540  0100               	movlb	0	; () banked
  2598  003542  6FE5               	movwf	??_ir_a_pantalla_edicion& (0+255),b
  2599  003544  0E8A               	movlw	138
  2600  003546                     u6037:
  2601  003546  2EE8               	decfsz	wreg,f,c
  2602  003548  D7FE               	bra	u6037
  2603  00354A  2FE5               	decfsz	??_ir_a_pantalla_edicion& (0+255),f,b
  2604  00354C  D7FC               	bra	u6037
  2605  00354E  F000               	nop	
  2606  003550  A482               	btfss	3970,2,c	;volatile
  2607  003552  D7D0               	goto	_ir_a_pantalla_edicion
  2608  003554  D7F4               	goto	l305
  2609  003556                     __end_of_ir_a_pantalla_edicion:
  2610                           	opt stack 0
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           prodh	equ	0xFF4
  2616                           prodl	equ	0xFF3
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           fsr1l	equ	0xFE1
  2621                           postinc2	equ	0xFDE
  2622                           postdec2	equ	0xFDD
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _set_reloj_digital *****************
  2628 ;; Defined at:
  2629 ;;		line 92 in file "main.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2647 ;;Total ram usage:        0 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    6
  2650 ;; This function calls:
  2651 ;;		_setDiaMesAnio
  2652 ;;		_setHoraMinutoSegundo
  2653 ;; This function is called by:
  2654 ;;		_ir_a_pantalla_edicion
  2655 ;;		_ir_a_pantalla_inicial
  2656 ;;		_setup
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text11
  2661  003A02                     __ptext11:
  2662                           	opt stack 0
  2663  003A02                     _set_reloj_digital:
  2664                           	opt stack 23
  2665                           
  2666                           ;main.c: 93: setDiaMesAnio();
  2667                           
  2668                           ;incstack = 0
  2669  003A02  EC11  F018         	call	_setDiaMesAnio	;wreg free
  2670                           
  2671                           ;main.c: 94: setHoraMinutoSegundo();
  2672  003A06  ECDF  F018         	call	_setHoraMinutoSegundo	;wreg free
  2673  003A0A  0012               	return		;funcret
  2674  003A0C                     __end_of_set_reloj_digital:
  2675                           	opt stack 0
  2676                           tblptru	equ	0xFF8
  2677                           tblptrh	equ	0xFF7
  2678                           tblptrl	equ	0xFF6
  2679                           tablat	equ	0xFF5
  2680                           prodh	equ	0xFF4
  2681                           prodl	equ	0xFF3
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           postdec1	equ	0xFE5
  2685                           fsr1l	equ	0xFE1
  2686                           postinc2	equ	0xFDE
  2687                           postdec2	equ	0xFDD
  2688                           fsr2h	equ	0xFDA
  2689                           fsr2l	equ	0xFD9
  2690                           status	equ	0xFD8
  2691                           
  2692 ;; *************** function _seleccionar_opcion *****************
  2693 ;; Defined at:
  2694 ;;		line 319 in file "main.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;		None
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2712 ;;Total ram usage:        0 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    8
  2715 ;; This function calls:
  2716 ;;		_activar_alarma
  2717 ;;		_editar_fecha_reloj_digital
  2718 ;;		_editar_hora_reloj_digital
  2719 ;;		_ir_a_pantalla_editar_contrasenia
  2720 ;; This function is called by:
  2721 ;;		_ir_a_pantalla_edicion
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text12
  2726  0036B0                     __ptext12:
  2727                           	opt stack 0
  2728  0036B0                     _seleccionar_opcion:
  2729                           	opt stack 18
  2730                           
  2731                           ;main.c: 320: LATAbits.LATA0 = 1;
  2732                           
  2733                           ;incstack = 0
  2734  0036B0  8089               	bsf	3977,0,c	;volatile
  2735                           
  2736                           ;main.c: 321: LATAbits.LATA1 = 0;
  2737  0036B2  9289               	bcf	3977,1,c	;volatile
  2738                           
  2739                           ;main.c: 322: LATAbits.LATA2 = 0;
  2740  0036B4  9489               	bcf	3977,2,c	;volatile
  2741                           
  2742                           ;main.c: 323: LATAbits.LATA3 = 0;
  2743  0036B6  9689               	bcf	3977,3,c	;volatile
  2744                           
  2745                           ;main.c: 324: if (PORTCbits.RC2 == 1 && LATAbits.LATA0 == 1) {
  2746  0036B8  A482               	btfss	3970,2,c	;volatile
  2747  0036BA  0012               	return	
  2748  0036BC  A089               	btfss	3977,0,c	;volatile
  2749  0036BE  0012               	return	
  2750                           
  2751                           ;main.c: 325: if (boton_seleccionar == 0) {
  2752  0036C0  0100               	movlb	0	; () banked
  2753  0036C2  518C               	movf	_boton_seleccionar& (0+255),w,b
  2754  0036C4  0100               	movlb	0	; () banked
  2755  0036C6  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2756  0036C8  B4D8               	btfsc	status,2,c
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;main.c: 326: activar_alarma();
  2760  0036CA  EC9B  F015         	call	_activar_alarma	;wreg free
  2761                           
  2762                           ;main.c: 327: }
  2763                           ;main.c: 328: if (boton_seleccionar == 1) {
  2764  0036CE  0100               	movlb	0	; () banked
  2765  0036D0  058C               	decf	_boton_seleccionar& (0+255),w,b
  2766  0036D2  0100               	movlb	0	; () banked
  2767  0036D4  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2768  0036D6  B4D8               	btfsc	status,2,c
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 329: ir_a_pantalla_editar_contrasenia();
  2772  0036D8  ECA5  F016         	call	_ir_a_pantalla_editar_contrasenia	;wreg free
  2773                           
  2774                           ;main.c: 330: }
  2775                           ;main.c: 331: if (boton_seleccionar == 2) {
  2776  0036DC  0E02               	movlw	2
  2777  0036DE  0100               	movlb	0	; () banked
  2778  0036E0  198C               	xorwf	_boton_seleccionar& (0+255),w,b
  2779  0036E2  0100               	movlb	0	; () banked
  2780  0036E4  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2781  0036E6  B4D8               	btfsc	status,2,c
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 332: editar_fecha_reloj_digital();
  2785  0036E8  EC32  F009         	call	_editar_fecha_reloj_digital	;wreg free
  2786                           
  2787                           ;main.c: 333: }
  2788                           ;main.c: 334: if (boton_seleccionar == 3) {
  2789  0036EC  0E03               	movlw	3
  2790  0036EE  0100               	movlb	0	; () banked
  2791  0036F0  198C               	xorwf	_boton_seleccionar& (0+255),w,b
  2792  0036F2  0100               	movlb	0	; () banked
  2793  0036F4  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2794  0036F6  A4D8               	btfss	status,2,c
  2795  0036F8  0012               	return	
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 335: editar_hora_reloj_digital();
  2799  0036FA  EC66  F00B         	call	_editar_hora_reloj_digital	;wreg free
  2800  0036FE  0012               	return	
  2801  003700                     __end_of_seleccionar_opcion:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           postinc0	equ	0xFEE
  2810                           wreg	equ	0xFE8
  2811                           postdec1	equ	0xFE5
  2812                           fsr1l	equ	0xFE1
  2813                           postinc2	equ	0xFDE
  2814                           postdec2	equ	0xFDD
  2815                           fsr2h	equ	0xFDA
  2816                           fsr2l	equ	0xFD9
  2817                           status	equ	0xFD8
  2818                           
  2819 ;; *************** function _ir_a_pantalla_editar_contrasenia *****************
  2820 ;; Defined at:
  2821 ;;		line 448 in file "main.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;		None
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  i               2   60[COMRAM] int 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2839 ;;Total ram usage:        2 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    7
  2842 ;; This function calls:
  2843 ;;		_ingreso_numero
  2844 ;;		_lcd_gotoxy
  2845 ;;		_lcd_putrs
  2846 ;; This function is called by:
  2847 ;;		_seleccionar_opcion
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           	psect	text13
  2852  002D4A                     __ptext13:
  2853                           	opt stack 0
  2854  002D4A                     _ir_a_pantalla_editar_contrasenia:
  2855                           	opt stack 18
  2856                           
  2857                           ;main.c: 449: numeros_ingresados = 0;
  2858                           
  2859                           ;incstack = 0
  2860  002D4A  0E00               	movlw	0
  2861  002D4C  0100               	movlb	0	; () banked
  2862  002D4E  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  2863  002D50  0E00               	movlw	0
  2864  002D52  6F92               	movwf	_numeros_ingresados& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;main.c: 450: lcd_gotoxy(1, 1);
  2868  002D54  0E01               	movlw	1
  2869  002D56  6E05               	movwf	lcd_gotoxy@y,c
  2870  002D58  0E01               	movlw	1
  2871  002D5A  EC9E  F01C         	call	_lcd_gotoxy
  2872                           
  2873                           ;main.c: 451: lcd_putrs("Insert new Password ");
  2874  002D5E  0E48               	movlw	low STR_23
  2875  002D60  6E09               	movwf	lcd_putrs@ptr,c
  2876  002D62  0E0F               	movlw	high STR_23
  2877  002D64  6E0A               	movwf	lcd_putrs@ptr+1,c
  2878  002D66  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2879                           
  2880                           ;main.c: 452: lcd_gotoxy(1, 2);
  2881  002D6A  0E02               	movlw	2
  2882  002D6C  6E05               	movwf	lcd_gotoxy@y,c
  2883  002D6E  0E01               	movlw	1
  2884  002D70  EC9E  F01C         	call	_lcd_gotoxy
  2885                           
  2886                           ;main.c: 453: lcd_putrs("                ");
  2887  002D74  0E5D               	movlw	low STR_18
  2888  002D76  6E09               	movwf	lcd_putrs@ptr,c
  2889  002D78  0E0F               	movlw	high STR_18
  2890  002D7A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2891  002D7C  EC2F  F01B         	call	_lcd_putrs	;wreg free
  2892  002D80                     
  2893                           ;main.c: 455: if (numeros_ingresados < 4) {
  2894  002D80  0100               	movlb	0	; () banked
  2895  002D82  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  2896  002D84  D008               	goto	u5130
  2897  002D86  0100               	movlb	0	; () banked
  2898  002D88  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  2899  002D8A  E108               	bnz	l4510
  2900  002D8C  0E04               	movlw	4
  2901  002D8E  0100               	movlb	0	; () banked
  2902  002D90  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  2903  002D92  B0D8               	btfsc	status,0,c
  2904  002D94  D003               	goto	l356
  2905  002D96                     u5130:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 456: ingreso_numero();
  2909  002D96  ECFE  F007         	call	_ingreso_numero	;wreg free
  2910                           
  2911                           ;main.c: 457: } else {
  2912  002D9A  D7F2               	goto	l355
  2913  002D9C                     l356:
  2914  002D9C                     l4510:
  2915                           
  2916                           ;main.c: 458: for (int i = 0; i < 4; i++) {
  2917  002D9C  0E00               	movlw	0
  2918  002D9E  6E3E               	movwf	ir_a_pantalla_editar_contrasenia@i+1,c
  2919  002DA0  0E00               	movlw	0
  2920  002DA2  6E3D               	movwf	ir_a_pantalla_editar_contrasenia@i,c
  2921  002DA4                     l4512:
  2922  002DA4  BE3E               	btfsc	ir_a_pantalla_editar_contrasenia@i+1,7,c
  2923  002DA6  D006               	goto	l358
  2924  002DA8  503E               	movf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  2925  002DAA  E11D               	bnz	l362
  2926  002DAC  0E04               	movlw	4
  2927  002DAE  5C3D               	subwf	ir_a_pantalla_editar_contrasenia@i,w,c
  2928  002DB0  B0D8               	btfsc	status,0,c
  2929  002DB2  0012               	return	
  2930  002DB4                     l358:
  2931                           
  2932                           ;main.c: 459: array_contrasenia[i] = array_contrasenia_ingresada[i];
  2933  002DB4  90D8               	bcf	status,0,c
  2934  002DB6  343D               	rlcf	ir_a_pantalla_editar_contrasenia@i,w,c
  2935  002DB8  6ED9               	movwf	fsr2l,c
  2936  002DBA  343E               	rlcf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  2937  002DBC  6EDA               	movwf	fsr2h,c
  2938  002DBE  0E60               	movlw	low _array_contrasenia_ingresada
  2939  002DC0  26D9               	addwf	fsr2l,f,c
  2940  002DC2  0E00               	movlw	high _array_contrasenia_ingresada
  2941  002DC4  22DA               	addwfc	fsr2h,f,c
  2942  002DC6  90D8               	bcf	status,0,c
  2943  002DC8  343D               	rlcf	ir_a_pantalla_editar_contrasenia@i,w,c
  2944  002DCA  6EE1               	movwf	fsr1l,c
  2945  002DCC  343E               	rlcf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  2946  002DCE  6EE2               	movwf	fsr1h,c
  2947  002DD0  0EBF               	movlw	low _array_contrasenia
  2948  002DD2  26E1               	addwf	fsr1l,f,c
  2949  002DD4  0E00               	movlw	high _array_contrasenia
  2950  002DD6  22E2               	addwfc	fsr1h,f,c
  2951  002DD8  CFDE FFE6          	movff	postinc2,postinc1
  2952  002DDC  CFDD FFE5          	movff	postdec2,postdec1
  2953  002DE0  4A3D               	infsnz	ir_a_pantalla_editar_contrasenia@i,f,c
  2954  002DE2  2A3E               	incf	ir_a_pantalla_editar_contrasenia@i+1,f,c
  2955  002DE4  D7DF               	goto	l4512
  2956  002DE6                     l362:
  2957  002DE6  0012               	return		;funcret
  2958  002DE8                     __end_of_ir_a_pantalla_editar_contrasenia:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           postinc1	equ	0xFE6
  2969                           postdec1	equ	0xFE5
  2970                           fsr1h	equ	0xFE2
  2971                           fsr1l	equ	0xFE1
  2972                           postinc2	equ	0xFDE
  2973                           postdec2	equ	0xFDD
  2974                           fsr2h	equ	0xFDA
  2975                           fsr2l	equ	0xFD9
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function _editar_hora_reloj_digital *****************
  2979 ;; Defined at:
  2980 ;;		line 566 in file "main.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  segundo_ingr    2   14[BANK0 ] int 
  2985 ;;  minuto_ingre    2   12[BANK0 ] int 
  2986 ;;  hora_ingresa    2   10[BANK0 ] int 
  2987 ;;  posicion        2   16[BANK0 ] int 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2998 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3000 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3001 ;;Total ram usage:        9 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    7
  3004 ;; This function calls:
  3005 ;;		_Write_RTC
  3006 ;;		_covertir_valores_de_array_a_escala_decimal
  3007 ;;		_ingreso_numero
  3008 ;;		_setHoraMinutoSegundo
  3009 ;; This function is called by:
  3010 ;;		_seleccionar_opcion
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text14
  3015  0016CC                     __ptext14:
  3016                           	opt stack 0
  3017  0016CC                     _editar_hora_reloj_digital:
  3018                           	opt stack 18
  3019                           
  3020                           ;main.c: 567: int posicion = 0;
  3021                           
  3022                           ;incstack = 0
  3023  0016CC  0E00               	movlw	0
  3024  0016CE  0100               	movlb	0	; () banked
  3025  0016D0  6FE4               	movwf	(editar_hora_reloj_digital@posicion+1)& (0+255),b
  3026  0016D2  0E00               	movlw	0
  3027  0016D4  6FE3               	movwf	editar_hora_reloj_digital@posicion& (0+255),b
  3028                           
  3029                           ;main.c: 568: motivo_ingreso_de_numeros = 1;
  3030  0016D6  0E00               	movlw	0
  3031  0016D8  0100               	movlb	0	; () banked
  3032  0016DA  6F91               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  3033  0016DC  0E01               	movlw	1
  3034  0016DE  6F90               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;main.c: 570: if (posicion == 0) {
  3038  0016E0  0100               	movlb	0	; () banked
  3039  0016E2  51E3               	movf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3040  0016E4  0100               	movlb	0	; () banked
  3041  0016E6  11E4               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3042  0016E8  A4D8               	btfss	status,2,c
  3043  0016EA  D04C               	goto	l401
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;main.c: 571: numeros_ingresados = 0;
  3047  0016EC  0E00               	movlw	0
  3048  0016EE  0100               	movlb	0	; () banked
  3049  0016F0  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3050  0016F2  0E00               	movlw	0
  3051  0016F4  6F92               	movwf	_numeros_ingresados& (0+255),b
  3052                           
  3053                           ;main.c: 572: int hora_ingresada = 0;
  3054  0016F6  0E00               	movlw	0
  3055  0016F8  0100               	movlb	0	; () banked
  3056  0016FA  6FDE               	movwf	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),b
  3057  0016FC  0E00               	movlw	0
  3058  0016FE  6FDD               	movwf	editar_hora_reloj_digital@hora_ingresada& (0+255),b
  3059                           
  3060                           ;main.c: 573: while (numeros_ingresados < 3) {
  3061  001700  D02A               	goto	l406
  3062  001702                     
  3063                           ; BSR set to: 0
  3064                           ;main.c: 574: ingreso_numero();
  3065                           
  3066                           ; BSR set to: 0
  3067  001702  ECFE  F007         	call	_ingreso_numero	;wreg free
  3068                           
  3069                           ;main.c: 575: if (numeros_ingresados == 2) {
  3070  001706  0E02               	movlw	2
  3071  001708  0100               	movlb	0	; () banked
  3072  00170A  1992               	xorwf	_numeros_ingresados& (0+255),w,b
  3073  00170C  0100               	movlb	0	; () banked
  3074  00170E  1193               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3075  001710  A4D8               	btfss	status,2,c
  3076  001712  D021               	goto	l406
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 576: hora_ingresada = covertir_valores_de_array_a_escala_decimal();
  3080  001714  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3081  001718  C05B  F0DD         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@hora_ingre
      +                          sada
  3082  00171C  C05C  F0DE         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@hora_ing
      +                          resada+1
  3083                           
  3084                           ;main.c: 577: if ((0 <= hora_ingresada) && (hora_ingresada <= 23)) {
  3085  001720  0100               	movlb	0	; () banked
  3086  001722  BFDE               	btfsc	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),7,b
  3087  001724  D013               	goto	l405
  3088                           
  3089                           ; BSR set to: 0
  3090  001726  0100               	movlb	0	; () banked
  3091  001728  BFDE               	btfsc	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),7,b
  3092  00172A  D008               	goto	u5340
  3093  00172C  0100               	movlb	0	; () banked
  3094  00172E  51DE               	movf	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),w,b
  3095  001730  E10D               	bnz	l4634
  3096  001732  0E18               	movlw	24
  3097  001734  0100               	movlb	0	; () banked
  3098  001736  5DDD               	subwf	editar_hora_reloj_digital@hora_ingresada& (0+255),w,b
  3099  001738  B0D8               	btfsc	status,0,c
  3100  00173A  D008               	goto	l405
  3101  00173C                     u5340:
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;main.c: 578: hora = hora_ingresada;
  3105  00173C  C0DD  F0C9         	movff	editar_hora_reloj_digital@hora_ingresada,_hora
  3106  001740  C0DE  F0CA         	movff	editar_hora_reloj_digital@hora_ingresada+1,_hora+1
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 579: numeros_ingresados++;
  3110  001744  0100               	movlb	0	; () banked
  3111  001746  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  3112  001748  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3113                           
  3114                           ;main.c: 580: } else {
  3115  00174A  D005               	goto	l406
  3116  00174C                     l405:
  3117  00174C                     l4634:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 581: numeros_ingresados = 0;
  3121  00174C  0E00               	movlw	0
  3122  00174E  0100               	movlb	0	; () banked
  3123  001750  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3124  001752  0E00               	movlw	0
  3125  001754  6F92               	movwf	_numeros_ingresados& (0+255),b
  3126  001756                     l406:
  3127                           
  3128                           ; BSR set to: 0
  3129                           
  3130                           ; BSR set to: 0
  3131                           
  3132                           ; BSR set to: 0
  3133                           
  3134                           ; BSR set to: 0
  3135  001756  0100               	movlb	0	; () banked
  3136  001758  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3137  00175A  D7D3               	goto	l403
  3138  00175C  0100               	movlb	0	; () banked
  3139  00175E  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3140  001760  E105               	bnz	l4638
  3141  001762  0E03               	movlw	3
  3142  001764  0100               	movlb	0	; () banked
  3143  001766  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  3144  001768  A0D8               	btfss	status,0,c
  3145  00176A  D7CB               	goto	l403
  3146  00176C                     l4638:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;main.c: 582: }
  3150                           ;main.c: 583: }
  3151                           ;main.c: 584: }
  3152                           ;main.c: 586: setHoraMinutoSegundo();
  3153  00176C  ECDF  F018         	call	_setHoraMinutoSegundo	;wreg free
  3154                           
  3155                           ;main.c: 587: posicion++;
  3156  001770  0100               	movlb	0	; () banked
  3157  001772  4BE3               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3158  001774  2BE4               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;main.c: 588: _delay((unsigned long)((50)*(8000000/4000.0)));
  3162  001776  0E82               	movlw	130
  3163  001778  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3164  00177A  0EDE               	movlw	222
  3165  00177C                     u6047:
  3166  00177C  2EE8               	decfsz	wreg,f,c
  3167  00177E  D7FE               	bra	u6047
  3168  001780  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3169  001782  D7FC               	bra	u6047
  3170  001784                     l401:
  3171                           
  3172                           ;main.c: 589: }
  3173                           ;main.c: 592: if (posicion == 1) {
  3174  001784  0100               	movlb	0	; () banked
  3175  001786  05E3               	decf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3176  001788  0100               	movlb	0	; () banked
  3177  00178A  11E4               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3178  00178C  A4D8               	btfss	status,2,c
  3179  00178E  D04C               	goto	l408
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 593: numeros_ingresados = 0;
  3183  001790  0E00               	movlw	0
  3184  001792  0100               	movlb	0	; () banked
  3185  001794  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3186  001796  0E00               	movlw	0
  3187  001798  6F92               	movwf	_numeros_ingresados& (0+255),b
  3188                           
  3189                           ;main.c: 594: int minuto_ingresado = 0;
  3190  00179A  0E00               	movlw	0
  3191  00179C  0100               	movlb	0	; () banked
  3192  00179E  6FE0               	movwf	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),b
  3193  0017A0  0E00               	movlw	0
  3194  0017A2  6FDF               	movwf	editar_hora_reloj_digital@minuto_ingresado& (0+255),b
  3195                           
  3196                           ;main.c: 595: while (numeros_ingresados < 3) {
  3197  0017A4  D02A               	goto	l413
  3198  0017A6                     
  3199                           ; BSR set to: 0
  3200                           ;main.c: 596: ingreso_numero();
  3201                           
  3202                           ; BSR set to: 0
  3203  0017A6  ECFE  F007         	call	_ingreso_numero	;wreg free
  3204                           
  3205                           ;main.c: 597: if (numeros_ingresados == 2) {
  3206  0017AA  0E02               	movlw	2
  3207  0017AC  0100               	movlb	0	; () banked
  3208  0017AE  1992               	xorwf	_numeros_ingresados& (0+255),w,b
  3209  0017B0  0100               	movlb	0	; () banked
  3210  0017B2  1193               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3211  0017B4  A4D8               	btfss	status,2,c
  3212  0017B6  D021               	goto	l413
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;main.c: 598: minuto_ingresado = covertir_valores_de_array_a_escala_decimal();
  3216  0017B8  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3217  0017BC  C05B  F0DF         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@minuto_ing
      +                          resado
  3218  0017C0  C05C  F0E0         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@minuto_i
      +                          ngresado+1
  3219                           
  3220                           ;main.c: 599: if ((0 <= minuto_ingresado) && (minuto_ingresado <= 59)) {
  3221  0017C4  0100               	movlb	0	; () banked
  3222  0017C6  BFE0               	btfsc	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),7,b
  3223  0017C8  D013               	goto	l412
  3224                           
  3225                           ; BSR set to: 0
  3226  0017CA  0100               	movlb	0	; () banked
  3227  0017CC  BFE0               	btfsc	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),7,b
  3228  0017CE  D008               	goto	u5390
  3229  0017D0  0100               	movlb	0	; () banked
  3230  0017D2  51E0               	movf	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),w,b
  3231  0017D4  E10D               	bnz	l4662
  3232  0017D6  0E3C               	movlw	60
  3233  0017D8  0100               	movlb	0	; () banked
  3234  0017DA  5DDF               	subwf	editar_hora_reloj_digital@minuto_ingresado& (0+255),w,b
  3235  0017DC  B0D8               	btfsc	status,0,c
  3236  0017DE  D008               	goto	l412
  3237  0017E0                     u5390:
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;main.c: 600: minuto = minuto_ingresado;
  3241  0017E0  C0DF  F0C7         	movff	editar_hora_reloj_digital@minuto_ingresado,_minuto
  3242  0017E4  C0E0  F0C8         	movff	editar_hora_reloj_digital@minuto_ingresado+1,_minuto+1
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 601: numeros_ingresados++;
  3246  0017E8  0100               	movlb	0	; () banked
  3247  0017EA  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  3248  0017EC  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3249                           
  3250                           ;main.c: 602: } else {
  3251  0017EE  D005               	goto	l413
  3252  0017F0                     l412:
  3253  0017F0                     l4662:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 603: numeros_ingresados = 0;
  3257  0017F0  0E00               	movlw	0
  3258  0017F2  0100               	movlb	0	; () banked
  3259  0017F4  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3260  0017F6  0E00               	movlw	0
  3261  0017F8  6F92               	movwf	_numeros_ingresados& (0+255),b
  3262  0017FA                     l413:
  3263                           
  3264                           ; BSR set to: 0
  3265                           
  3266                           ; BSR set to: 0
  3267                           
  3268                           ; BSR set to: 0
  3269                           
  3270                           ; BSR set to: 0
  3271  0017FA  0100               	movlb	0	; () banked
  3272  0017FC  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3273  0017FE  D7D3               	goto	l410
  3274  001800  0100               	movlb	0	; () banked
  3275  001802  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3276  001804  E105               	bnz	l4666
  3277  001806  0E03               	movlw	3
  3278  001808  0100               	movlb	0	; () banked
  3279  00180A  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  3280  00180C  A0D8               	btfss	status,0,c
  3281  00180E  D7CB               	goto	l410
  3282  001810                     l4666:
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;main.c: 604: }
  3286                           ;main.c: 605: }
  3287                           ;main.c: 606: }
  3288                           ;main.c: 608: setHoraMinutoSegundo();
  3289  001810  ECDF  F018         	call	_setHoraMinutoSegundo	;wreg free
  3290                           
  3291                           ;main.c: 609: posicion++;
  3292  001814  0100               	movlb	0	; () banked
  3293  001816  4BE3               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3294  001818  2BE4               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 610: _delay((unsigned long)((50)*(8000000/4000.0)));
  3298  00181A  0E82               	movlw	130
  3299  00181C  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3300  00181E  0EDE               	movlw	222
  3301  001820                     u6057:
  3302  001820  2EE8               	decfsz	wreg,f,c
  3303  001822  D7FE               	bra	u6057
  3304  001824  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3305  001826  D7FC               	bra	u6057
  3306  001828                     l408:
  3307                           
  3308                           ;main.c: 611: }
  3309                           ;main.c: 614: if (posicion == 2) {
  3310  001828  0E02               	movlw	2
  3311  00182A  0100               	movlb	0	; () banked
  3312  00182C  19E3               	xorwf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3313  00182E  0100               	movlb	0	; () banked
  3314  001830  11E4               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3315  001832  A4D8               	btfss	status,2,c
  3316  001834  D04C               	goto	l415
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 615: numeros_ingresados = 0;
  3320  001836  0E00               	movlw	0
  3321  001838  0100               	movlb	0	; () banked
  3322  00183A  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3323  00183C  0E00               	movlw	0
  3324  00183E  6F92               	movwf	_numeros_ingresados& (0+255),b
  3325                           
  3326                           ;main.c: 616: int segundo_ingresado = 0;
  3327  001840  0E00               	movlw	0
  3328  001842  0100               	movlb	0	; () banked
  3329  001844  6FE2               	movwf	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),b
  3330  001846  0E00               	movlw	0
  3331  001848  6FE1               	movwf	editar_hora_reloj_digital@segundo_ingresado& (0+255),b
  3332                           
  3333                           ;main.c: 617: while (numeros_ingresados < 3) {
  3334  00184A  D02A               	goto	l420
  3335  00184C                     
  3336                           ; BSR set to: 0
  3337                           ;main.c: 618: ingreso_numero();
  3338                           
  3339                           ; BSR set to: 0
  3340  00184C  ECFE  F007         	call	_ingreso_numero	;wreg free
  3341                           
  3342                           ;main.c: 619: if (numeros_ingresados == 2) {
  3343  001850  0E02               	movlw	2
  3344  001852  0100               	movlb	0	; () banked
  3345  001854  1992               	xorwf	_numeros_ingresados& (0+255),w,b
  3346  001856  0100               	movlb	0	; () banked
  3347  001858  1193               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3348  00185A  A4D8               	btfss	status,2,c
  3349  00185C  D021               	goto	l420
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 620: segundo_ingresado = covertir_valores_de_array_a_escala_decimal();
  3353  00185E  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3354  001862  C05B  F0E1         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@segundo_in
      +                          gresado
  3355  001866  C05C  F0E2         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@segundo_
      +                          ingresado+1
  3356                           
  3357                           ;main.c: 621: if ((0 <= segundo_ingresado) && (segundo_ingresado <= 59)) {
  3358  00186A  0100               	movlb	0	; () banked
  3359  00186C  BFE2               	btfsc	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),7,b
  3360  00186E  D013               	goto	l419
  3361                           
  3362                           ; BSR set to: 0
  3363  001870  0100               	movlb	0	; () banked
  3364  001872  BFE2               	btfsc	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),7,b
  3365  001874  D008               	goto	u5440
  3366  001876  0100               	movlb	0	; () banked
  3367  001878  51E2               	movf	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),w,b
  3368  00187A  E10D               	bnz	l4690
  3369  00187C  0E3C               	movlw	60
  3370  00187E  0100               	movlb	0	; () banked
  3371  001880  5DE1               	subwf	editar_hora_reloj_digital@segundo_ingresado& (0+255),w,b
  3372  001882  B0D8               	btfsc	status,0,c
  3373  001884  D008               	goto	l419
  3374  001886                     u5440:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;main.c: 622: segundo = segundo_ingresado;
  3378  001886  C0E1  F094         	movff	editar_hora_reloj_digital@segundo_ingresado,_segundo
  3379  00188A  C0E2  F095         	movff	editar_hora_reloj_digital@segundo_ingresado+1,_segundo+1
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;main.c: 623: numeros_ingresados++;
  3383  00188E  0100               	movlb	0	; () banked
  3384  001890  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  3385  001892  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3386                           
  3387                           ;main.c: 624: } else {
  3388  001894  D005               	goto	l420
  3389  001896                     l419:
  3390  001896                     l4690:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;main.c: 625: numeros_ingresados = 0;
  3394  001896  0E00               	movlw	0
  3395  001898  0100               	movlb	0	; () banked
  3396  00189A  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3397  00189C  0E00               	movlw	0
  3398  00189E  6F92               	movwf	_numeros_ingresados& (0+255),b
  3399  0018A0                     l420:
  3400                           
  3401                           ; BSR set to: 0
  3402                           
  3403                           ; BSR set to: 0
  3404                           
  3405                           ; BSR set to: 0
  3406                           
  3407                           ; BSR set to: 0
  3408  0018A0  0100               	movlb	0	; () banked
  3409  0018A2  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3410  0018A4  D7D3               	goto	l417
  3411  0018A6  0100               	movlb	0	; () banked
  3412  0018A8  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3413  0018AA  E105               	bnz	l4694
  3414  0018AC  0E03               	movlw	3
  3415  0018AE  0100               	movlb	0	; () banked
  3416  0018B0  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  3417  0018B2  A0D8               	btfss	status,0,c
  3418  0018B4  D7CB               	goto	l417
  3419  0018B6                     l4694:
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;main.c: 626: }
  3423                           ;main.c: 627: }
  3424                           ;main.c: 628: }
  3425                           ;main.c: 630: setHoraMinutoSegundo();
  3426  0018B6  ECDF  F018         	call	_setHoraMinutoSegundo	;wreg free
  3427                           
  3428                           ;main.c: 631: posicion++;
  3429  0018BA  0100               	movlb	0	; () banked
  3430  0018BC  4BE3               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3431  0018BE  2BE4               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;main.c: 632: _delay((unsigned long)((50)*(8000000/4000.0)));
  3435  0018C0  0E82               	movlw	130
  3436  0018C2  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3437  0018C4  0EDE               	movlw	222
  3438  0018C6                     u6067:
  3439  0018C6  2EE8               	decfsz	wreg,f,c
  3440  0018C8  D7FE               	bra	u6067
  3441  0018CA  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3442  0018CC  D7FC               	bra	u6067
  3443  0018CE                     l415:
  3444                           
  3445                           ;main.c: 633: }
  3446                           ;main.c: 634: Write_RTC();
  3447  0018CE  EC3E  F00E         	call	_Write_RTC	;wreg free
  3448                           
  3449                           ;main.c: 635: motivo_ingreso_de_numeros = 0;
  3450  0018D2  0E00               	movlw	0
  3451  0018D4  0100               	movlb	0	; () banked
  3452  0018D6  6F91               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  3453  0018D8  0E00               	movlw	0
  3454  0018DA  6F90               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;main.c: 636: numeros_ingresados = 0;
  3458  0018DC  0E00               	movlw	0
  3459  0018DE  0100               	movlb	0	; () banked
  3460  0018E0  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3461  0018E2  0E00               	movlw	0
  3462  0018E4  6F92               	movwf	_numeros_ingresados& (0+255),b
  3463                           
  3464                           ; BSR set to: 0
  3465  0018E6  0012               	return		;funcret
  3466  0018E8                     __end_of_editar_hora_reloj_digital:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postinc1	equ	0xFE6
  3477                           postdec1	equ	0xFE5
  3478                           fsr1h	equ	0xFE2
  3479                           fsr1l	equ	0xFE1
  3480                           postinc2	equ	0xFDE
  3481                           postdec2	equ	0xFDD
  3482                           fsr2h	equ	0xFDA
  3483                           fsr2l	equ	0xFD9
  3484                           status	equ	0xFD8
  3485                           
  3486 ;; *************** function _setHoraMinutoSegundo *****************
  3487 ;; Defined at:
  3488 ;;		line 79 in file "main.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;		None
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;		None
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3506 ;;Total ram usage:        0 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    5
  3509 ;; This function calls:
  3510 ;;		_Write_RTC
  3511 ;;		_lcd_gotoxy
  3512 ;;		_lcd_putrs
  3513 ;;		_sprintf
  3514 ;; This function is called by:
  3515 ;;		_set_reloj_digital
  3516 ;;		_editar_hora_reloj_digital
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text15
  3521  0031BE                     __ptext15:
  3522                           	opt stack 0
  3523  0031BE                     _setHoraMinutoSegundo:
  3524                           	opt stack 23
  3525                           
  3526                           ;main.c: 80: if (hora >= 24) {
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;incstack = 0
  3530  0031BE  0100               	movlb	0	; () banked
  3531  0031C0  BFCA               	btfsc	(_hora+1)& (0+255),7,b
  3532  0031C2  D019               	goto	l172
  3533  0031C4  0100               	movlb	0	; () banked
  3534  0031C6  51CA               	movf	(_hora+1)& (0+255),w,b
  3535  0031C8  E105               	bnz	u4530
  3536  0031CA  0E18               	movlw	24
  3537  0031CC  0100               	movlb	0	; () banked
  3538  0031CE  5DC9               	subwf	_hora& (0+255),w,b
  3539  0031D0  A0D8               	btfss	status,0,c
  3540  0031D2  D011               	goto	l172
  3541  0031D4                     u4530:
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;main.c: 81: hora = 0;
  3545  0031D4  0E00               	movlw	0
  3546  0031D6  0100               	movlb	0	; () banked
  3547  0031D8  6FCA               	movwf	(_hora+1)& (0+255),b
  3548  0031DA  0E00               	movlw	0
  3549  0031DC  6FC9               	movwf	_hora& (0+255),b
  3550                           
  3551                           ;main.c: 82: minuto = 0;
  3552  0031DE  0E00               	movlw	0
  3553  0031E0  0100               	movlb	0	; () banked
  3554  0031E2  6FC8               	movwf	(_minuto+1)& (0+255),b
  3555  0031E4  0E00               	movlw	0
  3556  0031E6  6FC7               	movwf	_minuto& (0+255),b
  3557                           
  3558                           ;main.c: 83: segundo = 0;
  3559  0031E8  0E00               	movlw	0
  3560  0031EA  0100               	movlb	0	; () banked
  3561  0031EC  6F95               	movwf	(_segundo+1)& (0+255),b
  3562  0031EE  0E00               	movlw	0
  3563  0031F0  6F94               	movwf	_segundo& (0+255),b
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;main.c: 84: Write_RTC();
  3567  0031F2  EC3E  F00E         	call	_Write_RTC	;wreg free
  3568  0031F6                     l172:
  3569                           
  3570                           ;main.c: 85: }
  3571                           ;main.c: 87: sprintf(buffer2, "%02u:%02u:%02u", hora, minuto, segundo);
  3572  0031F6  0EA3               	movlw	low _buffer2
  3573  0031F8  6E22               	movwf	sprintf@sp,c
  3574  0031FA  0E00               	movlw	high _buffer2
  3575  0031FC  6E23               	movwf	sprintf@sp+1,c
  3576  0031FE  0E9F               	movlw	low STR_8
  3577  003200  6E24               	movwf	sprintf@f,c
  3578  003202  0E0F               	movlw	high STR_8
  3579  003204  6E25               	movwf	sprintf@f+1,c
  3580  003206  C0C9  F026         	movff	_hora,?_sprintf+4
  3581  00320A  C0CA  F027         	movff	_hora+1,?_sprintf+5
  3582  00320E  C0C7  F028         	movff	_minuto,?_sprintf+6
  3583  003212  C0C8  F029         	movff	_minuto+1,?_sprintf+7
  3584  003216  C094  F02A         	movff	_segundo,?_sprintf+8
  3585  00321A  C095  F02B         	movff	_segundo+1,?_sprintf+9
  3586  00321E  EC4E  F00A         	call	_sprintf	;wreg free
  3587                           
  3588                           ;main.c: 88: lcd_gotoxy(9, 2);
  3589  003222  0E02               	movlw	2
  3590  003224  6E05               	movwf	lcd_gotoxy@y,c
  3591  003226  0E09               	movlw	9
  3592  003228  EC9E  F01C         	call	_lcd_gotoxy
  3593                           
  3594                           ;main.c: 89: lcd_putrs(buffer2);
  3595  00322C  0EA3               	movlw	low _buffer2
  3596  00322E  6E09               	movwf	lcd_putrs@ptr,c
  3597  003230  0E00               	movlw	high _buffer2
  3598  003232  6E0A               	movwf	lcd_putrs@ptr+1,c
  3599  003234  EC2F  F01B         	call	_lcd_putrs	;wreg free
  3600  003238  0012               	return		;funcret
  3601  00323A                     __end_of_setHoraMinutoSegundo:
  3602                           	opt stack 0
  3603                           tblptru	equ	0xFF8
  3604                           tblptrh	equ	0xFF7
  3605                           tblptrl	equ	0xFF6
  3606                           tablat	equ	0xFF5
  3607                           prodh	equ	0xFF4
  3608                           prodl	equ	0xFF3
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           postinc1	equ	0xFE6
  3612                           postdec1	equ	0xFE5
  3613                           fsr1h	equ	0xFE2
  3614                           fsr1l	equ	0xFE1
  3615                           postinc2	equ	0xFDE
  3616                           postdec2	equ	0xFDD
  3617                           fsr2h	equ	0xFDA
  3618                           fsr2l	equ	0xFD9
  3619                           status	equ	0xFD8
  3620                           
  3621 ;; *************** function _editar_fecha_reloj_digital *****************
  3622 ;; Defined at:
  3623 ;;		line 489 in file "main.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;		None
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  anio_ingresa    2   14[BANK0 ] int 
  3628 ;;  mes_ingresad    2   12[BANK0 ] int 
  3629 ;;  dia_ingresad    2   10[BANK0 ] int 
  3630 ;;  posicion        2   16[BANK0 ] int 
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3641 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3643 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3644 ;;Total ram usage:        9 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    7
  3647 ;; This function calls:
  3648 ;;		_Write_RTC
  3649 ;;		_covertir_valores_de_array_a_escala_decimal
  3650 ;;		_ingreso_numero
  3651 ;;		_setDiaMesAnio
  3652 ;; This function is called by:
  3653 ;;		_seleccionar_opcion
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text16
  3658  001264                     __ptext16:
  3659                           	opt stack 0
  3660  001264                     _editar_fecha_reloj_digital:
  3661                           	opt stack 18
  3662                           
  3663                           ;main.c: 490: int posicion = 0;
  3664                           
  3665                           ;incstack = 0
  3666  001264  0E00               	movlw	0
  3667  001266  0100               	movlb	0	; () banked
  3668  001268  6FE4               	movwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),b
  3669  00126A  0E00               	movlw	0
  3670  00126C  6FE3               	movwf	editar_fecha_reloj_digital@posicion& (0+255),b
  3671                           
  3672                           ;main.c: 492: motivo_ingreso_de_numeros = 1;
  3673  00126E  0E00               	movlw	0
  3674  001270  0100               	movlb	0	; () banked
  3675  001272  6F91               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  3676  001274  0E01               	movlw	1
  3677  001276  6F90               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;main.c: 495: if (posicion == 0) {
  3681  001278  0100               	movlb	0	; () banked
  3682  00127A  51E3               	movf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  3683  00127C  0100               	movlb	0	; () banked
  3684  00127E  11E4               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  3685  001280  A4D8               	btfss	status,2,c
  3686  001282  D053               	goto	l377
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;main.c: 496: numeros_ingresados = 0;
  3690  001284  0E00               	movlw	0
  3691  001286  0100               	movlb	0	; () banked
  3692  001288  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3693  00128A  0E00               	movlw	0
  3694  00128C  6F92               	movwf	_numeros_ingresados& (0+255),b
  3695                           
  3696                           ;main.c: 497: int dia_ingresado = 0;
  3697  00128E  0E00               	movlw	0
  3698  001290  0100               	movlb	0	; () banked
  3699  001292  6FDE               	movwf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),b
  3700  001294  0E00               	movlw	0
  3701  001296  6FDD               	movwf	editar_fecha_reloj_digital@dia_ingresado& (0+255),b
  3702                           
  3703                           ;main.c: 498: while (numeros_ingresados < 3) {
  3704  001298  D031               	goto	l382
  3705  00129A                     
  3706                           ; BSR set to: 0
  3707                           ;main.c: 500: ingreso_numero();
  3708                           
  3709                           ; BSR set to: 0
  3710  00129A  ECFE  F007         	call	_ingreso_numero	;wreg free
  3711                           
  3712                           ;main.c: 502: if (numeros_ingresados == 2) {
  3713  00129E  0E02               	movlw	2
  3714  0012A0  0100               	movlb	0	; () banked
  3715  0012A2  1992               	xorwf	_numeros_ingresados& (0+255),w,b
  3716  0012A4  0100               	movlb	0	; () banked
  3717  0012A6  1193               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3718  0012A8  A4D8               	btfss	status,2,c
  3719  0012AA  D028               	goto	l382
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;main.c: 503: dia_ingresado = covertir_valores_de_array_a_escala_decimal();
  3723  0012AC  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3724  0012B0  C05B  F0DD         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@dia_ingre
      +                          sado
  3725  0012B4  C05C  F0DE         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@dia_ing
      +                          resado+1
  3726                           
  3727                           ;main.c: 504: if ((0 < dia_ingresado) && (dia_ingresado <= 31)) {
  3728  0012B8  0100               	movlb	0	; () banked
  3729  0012BA  BFDE               	btfsc	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),7,b
  3730  0012BC  D01A               	goto	l381
  3731  0012BE  0100               	movlb	0	; () banked
  3732  0012C0  51DE               	movf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),w,b
  3733  0012C2  E104               	bnz	u5180
  3734  0012C4  0100               	movlb	0	; () banked
  3735  0012C6  05DD               	decf	editar_fecha_reloj_digital@dia_ingresado& (0+255),w,b
  3736  0012C8  A0D8               	btfss	status,0,c
  3737  0012CA  D013               	goto	l381
  3738  0012CC                     u5180:
  3739                           
  3740                           ; BSR set to: 0
  3741  0012CC  0100               	movlb	0	; () banked
  3742  0012CE  BFDE               	btfsc	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),7,b
  3743  0012D0  D008               	goto	u5190
  3744  0012D2  0100               	movlb	0	; () banked
  3745  0012D4  51DE               	movf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),w,b
  3746  0012D6  E10D               	bnz	l4542
  3747  0012D8  0E20               	movlw	32
  3748  0012DA  0100               	movlb	0	; () banked
  3749  0012DC  5DDD               	subwf	editar_fecha_reloj_digital@dia_ingresado& (0+255),w,b
  3750  0012DE  B0D8               	btfsc	status,0,c
  3751  0012E0  D008               	goto	l381
  3752  0012E2                     u5190:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 505: dia = dia_ingresado;
  3756  0012E2  C0DD  F0CB         	movff	editar_fecha_reloj_digital@dia_ingresado,_dia
  3757  0012E6  C0DE  F0CC         	movff	editar_fecha_reloj_digital@dia_ingresado+1,_dia+1
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 506: numeros_ingresados++;
  3761  0012EA  0100               	movlb	0	; () banked
  3762  0012EC  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  3763  0012EE  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3764                           
  3765                           ;main.c: 507: } else {
  3766  0012F0  D005               	goto	l382
  3767  0012F2                     l381:
  3768  0012F2                     l4542:
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;main.c: 508: numeros_ingresados = 0;
  3772  0012F2  0E00               	movlw	0
  3773  0012F4  0100               	movlb	0	; () banked
  3774  0012F6  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3775  0012F8  0E00               	movlw	0
  3776  0012FA  6F92               	movwf	_numeros_ingresados& (0+255),b
  3777  0012FC                     l382:
  3778                           
  3779                           ; BSR set to: 0
  3780                           
  3781                           ; BSR set to: 0
  3782                           
  3783                           ; BSR set to: 0
  3784                           
  3785                           ; BSR set to: 0
  3786  0012FC  0100               	movlb	0	; () banked
  3787  0012FE  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3788  001300  D7CC               	goto	l379
  3789  001302  0100               	movlb	0	; () banked
  3790  001304  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3791  001306  E105               	bnz	l4546
  3792  001308  0E03               	movlw	3
  3793  00130A  0100               	movlb	0	; () banked
  3794  00130C  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  3795  00130E  A0D8               	btfss	status,0,c
  3796  001310  D7C4               	goto	l379
  3797  001312                     l4546:
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;main.c: 509: }
  3801                           ;main.c: 510: }
  3802                           ;main.c: 511: }
  3803                           ;main.c: 513: setDiaMesAnio();
  3804  001312  EC11  F018         	call	_setDiaMesAnio	;wreg free
  3805                           
  3806                           ;main.c: 514: posicion++;
  3807  001316  0100               	movlb	0	; () banked
  3808  001318  4BE3               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  3809  00131A  2BE4               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;main.c: 515: _delay((unsigned long)((50)*(8000000/4000.0)));
  3813  00131C  0E82               	movlw	130
  3814  00131E  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  3815  001320  0EDE               	movlw	222
  3816  001322                     u6077:
  3817  001322  2EE8               	decfsz	wreg,f,c
  3818  001324  D7FE               	bra	u6077
  3819  001326  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  3820  001328  D7FC               	bra	u6077
  3821  00132A                     l377:
  3822                           
  3823                           ;main.c: 516: }
  3824                           ;main.c: 519: if (posicion == 1) {
  3825  00132A  0100               	movlb	0	; () banked
  3826  00132C  05E3               	decf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  3827  00132E  0100               	movlb	0	; () banked
  3828  001330  11E4               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  3829  001332  A4D8               	btfss	status,2,c
  3830  001334  D053               	goto	l384
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;main.c: 520: numeros_ingresados = 0;
  3834  001336  0E00               	movlw	0
  3835  001338  0100               	movlb	0	; () banked
  3836  00133A  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3837  00133C  0E00               	movlw	0
  3838  00133E  6F92               	movwf	_numeros_ingresados& (0+255),b
  3839                           
  3840                           ;main.c: 521: int mes_ingresado = 0;
  3841  001340  0E00               	movlw	0
  3842  001342  0100               	movlb	0	; () banked
  3843  001344  6FE0               	movwf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),b
  3844  001346  0E00               	movlw	0
  3845  001348  6FDF               	movwf	editar_fecha_reloj_digital@mes_ingresado& (0+255),b
  3846                           
  3847                           ;main.c: 522: while (numeros_ingresados < 3) {
  3848  00134A  D031               	goto	l389
  3849  00134C                     
  3850                           ; BSR set to: 0
  3851                           ;main.c: 523: ingreso_numero();
  3852                           
  3853                           ; BSR set to: 0
  3854  00134C  ECFE  F007         	call	_ingreso_numero	;wreg free
  3855                           
  3856                           ;main.c: 524: if (numeros_ingresados == 2) {
  3857  001350  0E02               	movlw	2
  3858  001352  0100               	movlb	0	; () banked
  3859  001354  1992               	xorwf	_numeros_ingresados& (0+255),w,b
  3860  001356  0100               	movlb	0	; () banked
  3861  001358  1193               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3862  00135A  A4D8               	btfss	status,2,c
  3863  00135C  D028               	goto	l389
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;main.c: 525: mes_ingresado = covertir_valores_de_array_a_escala_decimal();
  3867  00135E  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3868  001362  C05B  F0DF         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@mes_ingre
      +                          sado
  3869  001366  C05C  F0E0         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@mes_ing
      +                          resado+1
  3870                           
  3871                           ;main.c: 526: if ((0 < mes_ingresado) && (mes_ingresado <= 12)) {
  3872  00136A  0100               	movlb	0	; () banked
  3873  00136C  BFE0               	btfsc	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),7,b
  3874  00136E  D01A               	goto	l388
  3875  001370  0100               	movlb	0	; () banked
  3876  001372  51E0               	movf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),w,b
  3877  001374  E104               	bnz	u5230
  3878  001376  0100               	movlb	0	; () banked
  3879  001378  05DF               	decf	editar_fecha_reloj_digital@mes_ingresado& (0+255),w,b
  3880  00137A  A0D8               	btfss	status,0,c
  3881  00137C  D013               	goto	l388
  3882  00137E                     u5230:
  3883                           
  3884                           ; BSR set to: 0
  3885  00137E  0100               	movlb	0	; () banked
  3886  001380  BFE0               	btfsc	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),7,b
  3887  001382  D008               	goto	u5240
  3888  001384  0100               	movlb	0	; () banked
  3889  001386  51E0               	movf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),w,b
  3890  001388  E10D               	bnz	l4570
  3891  00138A  0E0D               	movlw	13
  3892  00138C  0100               	movlb	0	; () banked
  3893  00138E  5DDF               	subwf	editar_fecha_reloj_digital@mes_ingresado& (0+255),w,b
  3894  001390  B0D8               	btfsc	status,0,c
  3895  001392  D008               	goto	l388
  3896  001394                     u5240:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;main.c: 527: mes = mes_ingresado;
  3900  001394  C0DF  F0CF         	movff	editar_fecha_reloj_digital@mes_ingresado,_mes
  3901  001398  C0E0  F0D0         	movff	editar_fecha_reloj_digital@mes_ingresado+1,_mes+1
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 528: numeros_ingresados++;
  3905  00139C  0100               	movlb	0	; () banked
  3906  00139E  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  3907  0013A0  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3908                           
  3909                           ;main.c: 529: } else {
  3910  0013A2  D005               	goto	l389
  3911  0013A4                     l388:
  3912  0013A4                     l4570:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;main.c: 530: numeros_ingresados = 0;
  3916  0013A4  0E00               	movlw	0
  3917  0013A6  0100               	movlb	0	; () banked
  3918  0013A8  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3919  0013AA  0E00               	movlw	0
  3920  0013AC  6F92               	movwf	_numeros_ingresados& (0+255),b
  3921  0013AE                     l389:
  3922                           
  3923                           ; BSR set to: 0
  3924                           
  3925                           ; BSR set to: 0
  3926                           
  3927                           ; BSR set to: 0
  3928                           
  3929                           ; BSR set to: 0
  3930  0013AE  0100               	movlb	0	; () banked
  3931  0013B0  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3932  0013B2  D7CC               	goto	l386
  3933  0013B4  0100               	movlb	0	; () banked
  3934  0013B6  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3935  0013B8  E105               	bnz	l4574
  3936  0013BA  0E03               	movlw	3
  3937  0013BC  0100               	movlb	0	; () banked
  3938  0013BE  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  3939  0013C0  A0D8               	btfss	status,0,c
  3940  0013C2  D7C4               	goto	l386
  3941  0013C4                     l4574:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;main.c: 531: }
  3945                           ;main.c: 532: }
  3946                           ;main.c: 533: }
  3947                           ;main.c: 535: setDiaMesAnio();
  3948  0013C4  EC11  F018         	call	_setDiaMesAnio	;wreg free
  3949                           
  3950                           ;main.c: 536: posicion++;
  3951  0013C8  0100               	movlb	0	; () banked
  3952  0013CA  4BE3               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  3953  0013CC  2BE4               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;main.c: 537: _delay((unsigned long)((50)*(8000000/4000.0)));
  3957  0013CE  0E82               	movlw	130
  3958  0013D0  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  3959  0013D2  0EDE               	movlw	222
  3960  0013D4                     u6087:
  3961  0013D4  2EE8               	decfsz	wreg,f,c
  3962  0013D6  D7FE               	bra	u6087
  3963  0013D8  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  3964  0013DA  D7FC               	bra	u6087
  3965  0013DC                     l384:
  3966                           
  3967                           ;main.c: 538: }
  3968                           ;main.c: 541: if (posicion == 2) {
  3969  0013DC  0E02               	movlw	2
  3970  0013DE  0100               	movlb	0	; () banked
  3971  0013E0  19E3               	xorwf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  3972  0013E2  0100               	movlb	0	; () banked
  3973  0013E4  11E4               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  3974  0013E6  A4D8               	btfss	status,2,c
  3975  0013E8  D04C               	goto	l391
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;main.c: 542: numeros_ingresados = 0;
  3979  0013EA  0E00               	movlw	0
  3980  0013EC  0100               	movlb	0	; () banked
  3981  0013EE  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  3982  0013F0  0E00               	movlw	0
  3983  0013F2  6F92               	movwf	_numeros_ingresados& (0+255),b
  3984                           
  3985                           ;main.c: 543: int anio_ingresado = 0;
  3986  0013F4  0E00               	movlw	0
  3987  0013F6  0100               	movlb	0	; () banked
  3988  0013F8  6FE2               	movwf	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),b
  3989  0013FA  0E00               	movlw	0
  3990  0013FC  6FE1               	movwf	editar_fecha_reloj_digital@anio_ingresado& (0+255),b
  3991                           
  3992                           ;main.c: 544: while (numeros_ingresados < 3) {
  3993  0013FE  D02A               	goto	l396
  3994  001400                     
  3995                           ; BSR set to: 0
  3996                           ;main.c: 545: ingreso_numero();
  3997                           
  3998                           ; BSR set to: 0
  3999  001400  ECFE  F007         	call	_ingreso_numero	;wreg free
  4000                           
  4001                           ;main.c: 546: if (numeros_ingresados == 2) {
  4002  001404  0E02               	movlw	2
  4003  001406  0100               	movlb	0	; () banked
  4004  001408  1992               	xorwf	_numeros_ingresados& (0+255),w,b
  4005  00140A  0100               	movlb	0	; () banked
  4006  00140C  1193               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  4007  00140E  A4D8               	btfss	status,2,c
  4008  001410  D021               	goto	l396
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;main.c: 547: anio_ingresado = covertir_valores_de_array_a_escala_decimal();
  4012  001412  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  4013  001416  C05B  F0E1         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@anio_ingr
      +                          esado
  4014  00141A  C05C  F0E2         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@anio_in
      +                          gresado+1
  4015                           
  4016                           ;main.c: 548: if ((0 <= anio_ingresado) && (anio_ingresado <= 99)) {
  4017  00141E  0100               	movlb	0	; () banked
  4018  001420  BFE2               	btfsc	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),7,b
  4019  001422  D013               	goto	l395
  4020                           
  4021                           ; BSR set to: 0
  4022  001424  0100               	movlb	0	; () banked
  4023  001426  BFE2               	btfsc	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),7,b
  4024  001428  D008               	goto	u5290
  4025  00142A  0100               	movlb	0	; () banked
  4026  00142C  51E2               	movf	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),w,b
  4027  00142E  E10D               	bnz	l4598
  4028  001430  0E64               	movlw	100
  4029  001432  0100               	movlb	0	; () banked
  4030  001434  5DE1               	subwf	editar_fecha_reloj_digital@anio_ingresado& (0+255),w,b
  4031  001436  B0D8               	btfsc	status,0,c
  4032  001438  D008               	goto	l395
  4033  00143A                     u5290:
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;main.c: 549: anio = anio_ingresado;
  4037  00143A  C0E1  F0D1         	movff	editar_fecha_reloj_digital@anio_ingresado,_anio
  4038  00143E  C0E2  F0D2         	movff	editar_fecha_reloj_digital@anio_ingresado+1,_anio+1
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;main.c: 550: numeros_ingresados++;
  4042  001442  0100               	movlb	0	; () banked
  4043  001444  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  4044  001446  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  4045                           
  4046                           ;main.c: 551: } else {
  4047  001448  D005               	goto	l396
  4048  00144A                     l395:
  4049  00144A                     l4598:
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;main.c: 552: numeros_ingresados = 0;
  4053  00144A  0E00               	movlw	0
  4054  00144C  0100               	movlb	0	; () banked
  4055  00144E  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  4056  001450  0E00               	movlw	0
  4057  001452  6F92               	movwf	_numeros_ingresados& (0+255),b
  4058  001454                     l396:
  4059                           
  4060                           ; BSR set to: 0
  4061                           
  4062                           ; BSR set to: 0
  4063                           
  4064                           ; BSR set to: 0
  4065                           
  4066                           ; BSR set to: 0
  4067  001454  0100               	movlb	0	; () banked
  4068  001456  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  4069  001458  D7D3               	goto	l393
  4070  00145A  0100               	movlb	0	; () banked
  4071  00145C  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  4072  00145E  E105               	bnz	l4602
  4073  001460  0E03               	movlw	3
  4074  001462  0100               	movlb	0	; () banked
  4075  001464  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  4076  001466  A0D8               	btfss	status,0,c
  4077  001468  D7CB               	goto	l393
  4078  00146A                     l4602:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;main.c: 553: }
  4082                           ;main.c: 554: }
  4083                           ;main.c: 555: }
  4084                           ;main.c: 557: setDiaMesAnio();
  4085  00146A  EC11  F018         	call	_setDiaMesAnio	;wreg free
  4086                           
  4087                           ;main.c: 558: posicion++;
  4088  00146E  0100               	movlb	0	; () banked
  4089  001470  4BE3               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  4090  001472  2BE4               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;main.c: 559: _delay((unsigned long)((50)*(8000000/4000.0)));
  4094  001474  0E82               	movlw	130
  4095  001476  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  4096  001478  0EDE               	movlw	222
  4097  00147A                     u6097:
  4098  00147A  2EE8               	decfsz	wreg,f,c
  4099  00147C  D7FE               	bra	u6097
  4100  00147E  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  4101  001480  D7FC               	bra	u6097
  4102  001482                     l391:
  4103                           
  4104                           ;main.c: 560: }
  4105                           ;main.c: 561: Write_RTC();
  4106  001482  EC3E  F00E         	call	_Write_RTC	;wreg free
  4107                           
  4108                           ;main.c: 562: motivo_ingreso_de_numeros = 0;
  4109  001486  0E00               	movlw	0
  4110  001488  0100               	movlb	0	; () banked
  4111  00148A  6F91               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  4112  00148C  0E00               	movlw	0
  4113  00148E  6F90               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;main.c: 563: numeros_ingresados = 0;
  4117  001490  0E00               	movlw	0
  4118  001492  0100               	movlb	0	; () banked
  4119  001494  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  4120  001496  0E00               	movlw	0
  4121  001498  6F92               	movwf	_numeros_ingresados& (0+255),b
  4122                           
  4123                           ; BSR set to: 0
  4124  00149A  0012               	return		;funcret
  4125  00149C                     __end_of_editar_fecha_reloj_digital:
  4126                           	opt stack 0
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           prodh	equ	0xFF4
  4132                           prodl	equ	0xFF3
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           postinc1	equ	0xFE6
  4136                           postdec1	equ	0xFE5
  4137                           fsr1h	equ	0xFE2
  4138                           fsr1l	equ	0xFE1
  4139                           postinc2	equ	0xFDE
  4140                           postdec2	equ	0xFDD
  4141                           fsr2h	equ	0xFDA
  4142                           fsr2l	equ	0xFD9
  4143                           status	equ	0xFD8
  4144                           
  4145 ;; *************** function _setDiaMesAnio *****************
  4146 ;; Defined at:
  4147 ;;		line 63 in file "main.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      void 
  4154 ;; Registers used:
  4155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4165 ;;Total ram usage:        0 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    5
  4168 ;; This function calls:
  4169 ;;		_Write_RTC
  4170 ;;		_lcd_gotoxy
  4171 ;;		_lcd_putrs
  4172 ;;		_sprintf
  4173 ;; This function is called by:
  4174 ;;		_set_reloj_digital
  4175 ;;		_editar_fecha_reloj_digital
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text17
  4180  003022                     __ptext17:
  4181                           	opt stack 0
  4182  003022                     _setDiaMesAnio:
  4183                           	opt stack 23
  4184                           
  4185                           ;main.c: 64: if (dia > 31) {
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;incstack = 0
  4189  003022  0100               	movlb	0	; () banked
  4190  003024  BFCC               	btfsc	(_dia+1)& (0+255),7,b
  4191  003026  D00F               	goto	l167
  4192  003028  0100               	movlb	0	; () banked
  4193  00302A  51CC               	movf	(_dia+1)& (0+255),w,b
  4194  00302C  E105               	bnz	u4510
  4195  00302E  0E20               	movlw	32
  4196  003030  0100               	movlb	0	; () banked
  4197  003032  5DCB               	subwf	_dia& (0+255),w,b
  4198  003034  A0D8               	btfss	status,0,c
  4199  003036  D007               	goto	l167
  4200  003038                     u4510:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;main.c: 65: dia = 1;
  4204  003038  0E00               	movlw	0
  4205  00303A  0100               	movlb	0	; () banked
  4206  00303C  6FCC               	movwf	(_dia+1)& (0+255),b
  4207  00303E  0E01               	movlw	1
  4208  003040  6FCB               	movwf	_dia& (0+255),b
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;main.c: 66: Write_RTC();
  4212  003042  EC3E  F00E         	call	_Write_RTC	;wreg free
  4213  003046                     l167:
  4214                           
  4215                           ;main.c: 67: }
  4216                           ;main.c: 69: if (mes > 12) {
  4217  003046  0100               	movlb	0	; () banked
  4218  003048  BFD0               	btfsc	(_mes+1)& (0+255),7,b
  4219  00304A  D00F               	goto	l168
  4220  00304C  0100               	movlb	0	; () banked
  4221  00304E  51D0               	movf	(_mes+1)& (0+255),w,b
  4222  003050  E105               	bnz	u4520
  4223  003052  0E0D               	movlw	13
  4224  003054  0100               	movlb	0	; () banked
  4225  003056  5DCF               	subwf	_mes& (0+255),w,b
  4226  003058  A0D8               	btfss	status,0,c
  4227  00305A  D007               	goto	l168
  4228  00305C                     u4520:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;main.c: 70: mes = 1;
  4232  00305C  0E00               	movlw	0
  4233  00305E  0100               	movlb	0	; () banked
  4234  003060  6FD0               	movwf	(_mes+1)& (0+255),b
  4235  003062  0E01               	movlw	1
  4236  003064  6FCF               	movwf	_mes& (0+255),b
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;main.c: 71: Write_RTC();
  4240  003066  EC3E  F00E         	call	_Write_RTC	;wreg free
  4241  00306A                     l168:
  4242                           
  4243                           ;main.c: 72: }
  4244                           ;main.c: 74: sprintf(buffer2, "%02u/%02u/%02u", dia, mes, anio);
  4245  00306A  0EA3               	movlw	low _buffer2
  4246  00306C  6E22               	movwf	sprintf@sp,c
  4247  00306E  0E00               	movlw	high _buffer2
  4248  003070  6E23               	movwf	sprintf@sp+1,c
  4249  003072  0E90               	movlw	low STR_7
  4250  003074  6E24               	movwf	sprintf@f,c
  4251  003076  0E0F               	movlw	high STR_7
  4252  003078  6E25               	movwf	sprintf@f+1,c
  4253  00307A  C0CB  F026         	movff	_dia,?_sprintf+4
  4254  00307E  C0CC  F027         	movff	_dia+1,?_sprintf+5
  4255  003082  C0CF  F028         	movff	_mes,?_sprintf+6
  4256  003086  C0D0  F029         	movff	_mes+1,?_sprintf+7
  4257  00308A  C0D1  F02A         	movff	_anio,?_sprintf+8
  4258  00308E  C0D2  F02B         	movff	_anio+1,?_sprintf+9
  4259  003092  EC4E  F00A         	call	_sprintf	;wreg free
  4260                           
  4261                           ;main.c: 75: lcd_gotoxy(9, 1);
  4262  003096  0E01               	movlw	1
  4263  003098  6E05               	movwf	lcd_gotoxy@y,c
  4264  00309A  0E09               	movlw	9
  4265  00309C  EC9E  F01C         	call	_lcd_gotoxy
  4266                           
  4267                           ;main.c: 76: lcd_putrs(buffer2);
  4268  0030A0  0EA3               	movlw	low _buffer2
  4269  0030A2  6E09               	movwf	lcd_putrs@ptr,c
  4270  0030A4  0E00               	movlw	high _buffer2
  4271  0030A6  6E0A               	movwf	lcd_putrs@ptr+1,c
  4272  0030A8  EC2F  F01B         	call	_lcd_putrs	;wreg free
  4273  0030AC  0012               	return		;funcret
  4274  0030AE                     __end_of_setDiaMesAnio:
  4275                           	opt stack 0
  4276                           tblptru	equ	0xFF8
  4277                           tblptrh	equ	0xFF7
  4278                           tblptrl	equ	0xFF6
  4279                           tablat	equ	0xFF5
  4280                           prodh	equ	0xFF4
  4281                           prodl	equ	0xFF3
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           postinc1	equ	0xFE6
  4285                           postdec1	equ	0xFE5
  4286                           fsr1h	equ	0xFE2
  4287                           fsr1l	equ	0xFE1
  4288                           postinc2	equ	0xFDE
  4289                           postdec2	equ	0xFDD
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function _Write_RTC *****************
  4295 ;; Defined at:
  4296 ;;		line 74 in file "../../headers\unmc_rtcc_01.h"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;		None
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4314 ;;Total ram usage:        0 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    2
  4317 ;; This function calls:
  4318 ;;		_RtccWrOn
  4319 ;;		_RtccWriteDate
  4320 ;;		_RtccWriteTime
  4321 ;;		___awdiv
  4322 ;; This function is called by:
  4323 ;;		_setDiaMesAnio
  4324 ;;		_setHoraMinutoSegundo
  4325 ;;		_editar_fecha_reloj_digital
  4326 ;;		_editar_hora_reloj_digital
  4327 ;;		_setup
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text18
  4332  001C7C                     __ptext18:
  4333                           	opt stack 0
  4334  001C7C                     _Write_RTC:
  4335                           	opt stack 25
  4336                           
  4337                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  4338                           
  4339                           ;incstack = 0
  4340  001C7C  ECD4  F01C         	call	_RtccWrOn	;wreg free
  4341                           
  4342                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  4343  001C80  80A3               	bsf	4003,0,c	;volatile
  4344                           
  4345                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  4346  001C82  C094  F001         	movff	_segundo,___awdiv@dividend
  4347  001C86  C095  F002         	movff	_segundo+1,___awdiv@dividend+1
  4348  001C8A  0E00               	movlw	0
  4349  001C8C  6E04               	movwf	___awdiv@divisor+1,c
  4350  001C8E  0E0A               	movlw	10
  4351  001C90  6E03               	movwf	___awdiv@divisor,c
  4352  001C92  EC9D  F018         	call	___awdiv	;wreg free
  4353  001C96  5001               	movf	?___awdiv,w,c
  4354  001C98  0100               	movlb	0	; () banked
  4355  001C9A  6FF2               	movwf	_segundo_d& (0+255),b
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  4359  001C9C  0100               	movlb	0	; () banked
  4360  001C9E  51F2               	movf	_segundo_d& (0+255),w,b
  4361  001CA0  0D0A               	mullw	10
  4362  001CA2  50F3               	movf	prodl,w,c
  4363  001CA4  0800               	sublw	0
  4364  001CA6  0100               	movlb	0	; () banked
  4365  001CA8  2594               	addwf	_segundo& (0+255),w,b
  4366  001CAA  0100               	movlb	0	; () banked
  4367  001CAC  6FF3               	movwf	_segundo_u& (0+255),b
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  4371  001CAE  0100               	movlb	0	; () banked
  4372  001CB0  51F2               	movf	_segundo_d& (0+255),w,b
  4373  001CB2  0D10               	mullw	16
  4374  001CB4  50F3               	movf	prodl,w,c
  4375  001CB6  0100               	movlb	0	; () banked
  4376  001CB8  25F3               	addwf	_segundo_u& (0+255),w,b
  4377  001CBA  0100               	movlb	0	; () banked
  4378  001CBC  6FBC               	movwf	(_RtccTime+1)& (0+255),b
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  4382  001CBE  C0C7  F001         	movff	_minuto,___awdiv@dividend
  4383  001CC2  C0C8  F002         	movff	_minuto+1,___awdiv@dividend+1
  4384  001CC6  0E00               	movlw	0
  4385  001CC8  6E04               	movwf	___awdiv@divisor+1,c
  4386  001CCA  0E0A               	movlw	10
  4387  001CCC  6E03               	movwf	___awdiv@divisor,c
  4388  001CCE  EC9D  F018         	call	___awdiv	;wreg free
  4389  001CD2  5001               	movf	?___awdiv,w,c
  4390  001CD4  0100               	movlb	0	; () banked
  4391  001CD6  6FF0               	movwf	_minuto_d& (0+255),b
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  4395  001CD8  0100               	movlb	0	; () banked
  4396  001CDA  51F0               	movf	_minuto_d& (0+255),w,b
  4397  001CDC  0D0A               	mullw	10
  4398  001CDE  50F3               	movf	prodl,w,c
  4399  001CE0  0800               	sublw	0
  4400  001CE2  0100               	movlb	0	; () banked
  4401  001CE4  25C7               	addwf	_minuto& (0+255),w,b
  4402  001CE6  0100               	movlb	0	; () banked
  4403  001CE8  6FF1               	movwf	_minuto_u& (0+255),b
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  4407  001CEA  0100               	movlb	0	; () banked
  4408  001CEC  51F0               	movf	_minuto_d& (0+255),w,b
  4409  001CEE  0D10               	mullw	16
  4410  001CF0  50F3               	movf	prodl,w,c
  4411  001CF2  0100               	movlb	0	; () banked
  4412  001CF4  25F1               	addwf	_minuto_u& (0+255),w,b
  4413  001CF6  0100               	movlb	0	; () banked
  4414  001CF8  6FBD               	movwf	(_RtccTime+2)& (0+255),b
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  4418  001CFA  C0C9  F001         	movff	_hora,___awdiv@dividend
  4419  001CFE  C0CA  F002         	movff	_hora+1,___awdiv@dividend+1
  4420  001D02  0E00               	movlw	0
  4421  001D04  6E04               	movwf	___awdiv@divisor+1,c
  4422  001D06  0E0A               	movlw	10
  4423  001D08  6E03               	movwf	___awdiv@divisor,c
  4424  001D0A  EC9D  F018         	call	___awdiv	;wreg free
  4425  001D0E  5001               	movf	?___awdiv,w,c
  4426  001D10  0100               	movlb	0	; () banked
  4427  001D12  6FEE               	movwf	_hora_d& (0+255),b
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  4431  001D14  0100               	movlb	0	; () banked
  4432  001D16  51EE               	movf	_hora_d& (0+255),w,b
  4433  001D18  0D0A               	mullw	10
  4434  001D1A  50F3               	movf	prodl,w,c
  4435  001D1C  0800               	sublw	0
  4436  001D1E  0100               	movlb	0	; () banked
  4437  001D20  25C9               	addwf	_hora& (0+255),w,b
  4438  001D22  0100               	movlb	0	; () banked
  4439  001D24  6FEF               	movwf	_hora_u& (0+255),b
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  4443  001D26  0100               	movlb	0	; () banked
  4444  001D28  51EE               	movf	_hora_d& (0+255),w,b
  4445  001D2A  0D10               	mullw	16
  4446  001D2C  50F3               	movf	prodl,w,c
  4447  001D2E  0100               	movlb	0	; () banked
  4448  001D30  25EF               	addwf	_hora_u& (0+255),w,b
  4449  001D32  0100               	movlb	0	; () banked
  4450  001D34  6FBE               	movwf	(_RtccTime+3)& (0+255),b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  4454  001D36  C0D1  F001         	movff	_anio,___awdiv@dividend
  4455  001D3A  C0D2  F002         	movff	_anio+1,___awdiv@dividend+1
  4456  001D3E  0E00               	movlw	0
  4457  001D40  6E04               	movwf	___awdiv@divisor+1,c
  4458  001D42  0E0A               	movlw	10
  4459  001D44  6E03               	movwf	___awdiv@divisor,c
  4460  001D46  EC9D  F018         	call	___awdiv	;wreg free
  4461  001D4A  5001               	movf	?___awdiv,w,c
  4462  001D4C  0100               	movlb	0	; () banked
  4463  001D4E  6FE7               	movwf	_anio_d& (0+255),b
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  4467  001D50  0100               	movlb	0	; () banked
  4468  001D52  51E7               	movf	_anio_d& (0+255),w,b
  4469  001D54  0D0A               	mullw	10
  4470  001D56  50F3               	movf	prodl,w,c
  4471  001D58  0800               	sublw	0
  4472  001D5A  0100               	movlb	0	; () banked
  4473  001D5C  25D1               	addwf	_anio& (0+255),w,b
  4474  001D5E  0100               	movlb	0	; () banked
  4475  001D60  6FE8               	movwf	_anio_u& (0+255),b
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  4479  001D62  0100               	movlb	0	; () banked
  4480  001D64  51E7               	movf	_anio_d& (0+255),w,b
  4481  001D66  0D10               	mullw	16
  4482  001D68  50F3               	movf	prodl,w,c
  4483  001D6A  0100               	movlb	0	; () banked
  4484  001D6C  25E8               	addwf	_anio_u& (0+255),w,b
  4485  001D6E  0100               	movlb	0	; () banked
  4486  001D70  6FBA               	movwf	(_RtccDate+3)& (0+255),b
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  4490  001D72  C0CF  F001         	movff	_mes,___awdiv@dividend
  4491  001D76  C0D0  F002         	movff	_mes+1,___awdiv@dividend+1
  4492  001D7A  0E00               	movlw	0
  4493  001D7C  6E04               	movwf	___awdiv@divisor+1,c
  4494  001D7E  0E0A               	movlw	10
  4495  001D80  6E03               	movwf	___awdiv@divisor,c
  4496  001D82  EC9D  F018         	call	___awdiv	;wreg free
  4497  001D86  5001               	movf	?___awdiv,w,c
  4498  001D88  0100               	movlb	0	; () banked
  4499  001D8A  6FEA               	movwf	_mes_d& (0+255),b
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  4503  001D8C  0100               	movlb	0	; () banked
  4504  001D8E  51EA               	movf	_mes_d& (0+255),w,b
  4505  001D90  0D0A               	mullw	10
  4506  001D92  50F3               	movf	prodl,w,c
  4507  001D94  0800               	sublw	0
  4508  001D96  0100               	movlb	0	; () banked
  4509  001D98  25CF               	addwf	_mes& (0+255),w,b
  4510  001D9A  0100               	movlb	0	; () banked
  4511  001D9C  6FEB               	movwf	_mes_u& (0+255),b
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  4515  001D9E  0100               	movlb	0	; () banked
  4516  001DA0  51EA               	movf	_mes_d& (0+255),w,b
  4517  001DA2  0D10               	mullw	16
  4518  001DA4  50F3               	movf	prodl,w,c
  4519  001DA6  0100               	movlb	0	; () banked
  4520  001DA8  25EB               	addwf	_mes_u& (0+255),w,b
  4521  001DAA  0100               	movlb	0	; () banked
  4522  001DAC  6FB9               	movwf	(_RtccDate+2)& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  4526  001DAE  C0CB  F001         	movff	_dia,___awdiv@dividend
  4527  001DB2  C0CC  F002         	movff	_dia+1,___awdiv@dividend+1
  4528  001DB6  0E00               	movlw	0
  4529  001DB8  6E04               	movwf	___awdiv@divisor+1,c
  4530  001DBA  0E0A               	movlw	10
  4531  001DBC  6E03               	movwf	___awdiv@divisor,c
  4532  001DBE  EC9D  F018         	call	___awdiv	;wreg free
  4533  001DC2  5001               	movf	?___awdiv,w,c
  4534  001DC4  0100               	movlb	0	; () banked
  4535  001DC6  6FEC               	movwf	_fecha_d& (0+255),b
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  4539  001DC8  0100               	movlb	0	; () banked
  4540  001DCA  51EC               	movf	_fecha_d& (0+255),w,b
  4541  001DCC  0D0A               	mullw	10
  4542  001DCE  50F3               	movf	prodl,w,c
  4543  001DD0  0800               	sublw	0
  4544  001DD2  0100               	movlb	0	; () banked
  4545  001DD4  25CB               	addwf	_dia& (0+255),w,b
  4546  001DD6  0100               	movlb	0	; () banked
  4547  001DD8  6FED               	movwf	_fecha_u& (0+255),b
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  4551  001DDA  0100               	movlb	0	; () banked
  4552  001DDC  51EC               	movf	_fecha_d& (0+255),w,b
  4553  001DDE  0D10               	mullw	16
  4554  001DE0  50F3               	movf	prodl,w,c
  4555  001DE2  0100               	movlb	0	; () banked
  4556  001DE4  25ED               	addwf	_fecha_u& (0+255),w,b
  4557  001DE6  0100               	movlb	0	; () banked
  4558  001DE8  6FB8               	movwf	(_RtccDate+1)& (0+255),b
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  4562  001DEA  C0CD  F0E9         	movff	_diasem,_dia_semana
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  4566  001DEE  C0CD  F0B7         	movff	_diasem,_RtccDate
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  4570  001DF2  0EBB               	movlw	low _RtccTime
  4571  001DF4  6E01               	movwf	RtccWriteTime@pTm,c
  4572  001DF6  0E00               	movlw	high _RtccTime
  4573  001DF8  6E02               	movwf	RtccWriteTime@pTm+1,c
  4574  001DFA  0E01               	movlw	1
  4575  001DFC  6E03               	movwf	RtccWriteTime@di,c
  4576  001DFE  EC19  F012         	call	_RtccWriteTime	;wreg free
  4577                           
  4578                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  4579  001E02  0EB7               	movlw	low _RtccDate
  4580  001E04  6E01               	movwf	RtccWriteDate@pDt,c
  4581  001E06  0E00               	movlw	high _RtccDate
  4582  001E08  6E02               	movwf	RtccWriteDate@pDt+1,c
  4583  001E0A  0E01               	movlw	1
  4584  001E0C  6E03               	movwf	RtccWriteDate@di,c
  4585  001E0E  EC6A  F010         	call	_RtccWriteDate	;wreg free
  4586                           
  4587                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  4588  001E12  010F               	movlb	15	; () banked
  4589  001E14  8F3F               	bsf	63,7,b	;volatile
  4590                           
  4591                           ; BSR set to: 15
  4592  001E16  0012               	return		;funcret
  4593  001E18                     __end_of_Write_RTC:
  4594                           	opt stack 0
  4595                           tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           postinc0	equ	0xFEE
  4602                           wreg	equ	0xFE8
  4603                           postinc1	equ	0xFE6
  4604                           postdec1	equ	0xFE5
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function ___awdiv *****************
  4614 ;; Defined at:
  4615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  dividend        2    0[COMRAM] int 
  4618 ;;  divisor         2    2[COMRAM] int 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  quotient        2    6[COMRAM] int 
  4621 ;;  sign            1    5[COMRAM] unsigned char 
  4622 ;;  counter         1    4[COMRAM] unsigned char 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  2    0[COMRAM] int 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4633 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4635 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4636 ;;Total ram usage:        8 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; This function calls:
  4639 ;;		Nothing
  4640 ;; This function is called by:
  4641 ;;		_Write_RTC
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text19
  4646  00313A                     __ptext19:
  4647                           	opt stack 0
  4648  00313A                     ___awdiv:
  4649                           	opt stack 26
  4650                           
  4651                           ; BSR set to: 15
  4652                           ;incstack = 0
  4653  00313A  0E00               	movlw	0
  4654  00313C  6E06               	movwf	___awdiv@sign,c
  4655  00313E  AE04               	btfss	___awdiv@divisor+1,7,c
  4656  003140  D006               	goto	l795
  4657  003142  6C03               	negf	___awdiv@divisor,c
  4658  003144  1E04               	comf	___awdiv@divisor+1,f,c
  4659  003146  B0D8               	btfsc	status,0,c
  4660  003148  2A04               	incf	___awdiv@divisor+1,f,c
  4661  00314A  0E01               	movlw	1
  4662  00314C  6E06               	movwf	___awdiv@sign,c
  4663  00314E                     l795:
  4664  00314E  AE02               	btfss	___awdiv@dividend+1,7,c
  4665  003150  D006               	goto	l796
  4666  003152  6C01               	negf	___awdiv@dividend,c
  4667  003154  1E02               	comf	___awdiv@dividend+1,f,c
  4668  003156  B0D8               	btfsc	status,0,c
  4669  003158  2A02               	incf	___awdiv@dividend+1,f,c
  4670  00315A  0E01               	movlw	1
  4671  00315C  1A06               	xorwf	___awdiv@sign,f,c
  4672  00315E                     l796:
  4673  00315E  0E00               	movlw	0
  4674  003160  6E08               	movwf	___awdiv@quotient+1,c
  4675  003162  0E00               	movlw	0
  4676  003164  6E07               	movwf	___awdiv@quotient,c
  4677  003166  5003               	movf	___awdiv@divisor,w,c
  4678  003168  1004               	iorwf	___awdiv@divisor+1,w,c
  4679  00316A  B4D8               	btfsc	status,2,c
  4680  00316C  D01C               	goto	l803
  4681  00316E  0E01               	movlw	1
  4682  003170  6E05               	movwf	___awdiv@counter,c
  4683  003172  D004               	goto	l798
  4684  003174  90D8               	bcf	status,0,c
  4685  003176  3603               	rlcf	___awdiv@divisor,f,c
  4686  003178  3604               	rlcf	___awdiv@divisor+1,f,c
  4687  00317A  2A05               	incf	___awdiv@counter,f,c
  4688  00317C                     l798:
  4689  00317C  AE04               	btfss	___awdiv@divisor+1,7,c
  4690  00317E  D7FA               	goto	l799
  4691  003180                     u4300:
  4692  003180  90D8               	bcf	status,0,c
  4693  003182  3607               	rlcf	___awdiv@quotient,f,c
  4694  003184  3608               	rlcf	___awdiv@quotient+1,f,c
  4695  003186  5003               	movf	___awdiv@divisor,w,c
  4696  003188  5C01               	subwf	___awdiv@dividend,w,c
  4697  00318A  5004               	movf	___awdiv@divisor+1,w,c
  4698  00318C  5802               	subwfb	___awdiv@dividend+1,w,c
  4699  00318E  A0D8               	btfss	status,0,c
  4700  003190  D005               	goto	l802
  4701  003192  5003               	movf	___awdiv@divisor,w,c
  4702  003194  5E01               	subwf	___awdiv@dividend,f,c
  4703  003196  5004               	movf	___awdiv@divisor+1,w,c
  4704  003198  5A02               	subwfb	___awdiv@dividend+1,f,c
  4705  00319A  8007               	bsf	___awdiv@quotient,0,c
  4706  00319C                     l802:
  4707  00319C  90D8               	bcf	status,0,c
  4708  00319E  3204               	rrcf	___awdiv@divisor+1,f,c
  4709  0031A0  3203               	rrcf	___awdiv@divisor,f,c
  4710  0031A2  2E05               	decfsz	___awdiv@counter,f,c
  4711  0031A4  D7ED               	goto	u4300
  4712  0031A6                     l803:
  4713  0031A6  5006               	movf	___awdiv@sign,w,c
  4714  0031A8  B4D8               	btfsc	status,2,c
  4715  0031AA  D004               	goto	l804
  4716  0031AC  6C07               	negf	___awdiv@quotient,c
  4717  0031AE  1E08               	comf	___awdiv@quotient+1,f,c
  4718  0031B0  B0D8               	btfsc	status,0,c
  4719  0031B2  2A08               	incf	___awdiv@quotient+1,f,c
  4720  0031B4                     l804:
  4721  0031B4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4722  0031B8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4723  0031BC  0012               	return	
  4724  0031BE                     __end_of___awdiv:
  4725                           	opt stack 0
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           postinc0	equ	0xFEE
  4733                           wreg	equ	0xFE8
  4734                           postinc1	equ	0xFE6
  4735                           postdec1	equ	0xFE5
  4736                           fsr1h	equ	0xFE2
  4737                           fsr1l	equ	0xFE1
  4738                           postinc2	equ	0xFDE
  4739                           postdec2	equ	0xFDD
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _RtccWriteTime *****************
  4745 ;; Defined at:
  4746 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  pTm             2    0[COMRAM] PTR const struct .
  4749 ;;		 -> RtccTime(4), 
  4750 ;;  di              1    2[COMRAM] enum E7121
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  tempHourWDay    2    9[COMRAM] struct .
  4753 ;;  tempMinSec      2    7[COMRAM] struct .
  4754 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4755 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4756 ;;  wasOn           1    4[COMRAM] enum E7121
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      enum E6550
  4759 ;; Registers used:
  4760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4766 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4767 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4768 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4770 ;;Total ram usage:       11 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    1
  4773 ;; This function calls:
  4774 ;;		_RtccWrOn
  4775 ;; This function is called by:
  4776 ;;		_Write_RTC
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text20
  4781  002432                     __ptext20:
  4782                           	opt stack 0
  4783  002432                     _RtccWriteTime:
  4784                           	opt stack 25
  4785                           
  4786                           ;incstack = 0
  4787  002432  0E00               	movlw	0
  4788  002434  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4789  002436  EE20 F002          	lfsr	2,2
  4790  00243A  5001               	movf	RtccWriteTime@pTm,w,c
  4791  00243C  26D9               	addwf	fsr2l,f,c
  4792  00243E  5002               	movf	RtccWriteTime@pTm+1,w,c
  4793  002440  22DA               	addwfc	fsr2h,f,c
  4794  002442  0E5A               	movlw	90
  4795  002444  60DF               	cpfslt	indf2,c
  4796  002446  0012               	return	
  4797  002448  EE20 F001          	lfsr	2,1
  4798  00244C  5001               	movf	RtccWriteTime@pTm,w,c
  4799  00244E  26D9               	addwf	fsr2l,f,c
  4800  002450  5002               	movf	RtccWriteTime@pTm+1,w,c
  4801  002452  22DA               	addwfc	fsr2h,f,c
  4802  002454  0E5A               	movlw	90
  4803  002456  60DF               	cpfslt	indf2,c
  4804  002458  0012               	return	
  4805  00245A  EE20 F003          	lfsr	2,3
  4806  00245E  5001               	movf	RtccWriteTime@pTm,w,c
  4807  002460  26D9               	addwf	fsr2l,f,c
  4808  002462  5002               	movf	RtccWriteTime@pTm+1,w,c
  4809  002464  22DA               	addwfc	fsr2h,f,c
  4810  002466  0E24               	movlw	36
  4811  002468  64DF               	cpfsgt	indf2,c
  4812  00246A  D001               	goto	l615
  4813  00246C  0012               	return	
  4814  00246E                     l615:
  4815  00246E  EE20 F002          	lfsr	2,2
  4816  002472  5001               	movf	RtccWriteTime@pTm,w,c
  4817  002474  26D9               	addwf	fsr2l,f,c
  4818  002476  5002               	movf	RtccWriteTime@pTm+1,w,c
  4819  002478  22DA               	addwfc	fsr2h,f,c
  4820  00247A  50DF               	movf	indf2,w,c
  4821  00247C  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4822  00247E  EE20 F001          	lfsr	2,1
  4823  002482  5001               	movf	RtccWriteTime@pTm,w,c
  4824  002484  26D9               	addwf	fsr2l,f,c
  4825  002486  5002               	movf	RtccWriteTime@pTm+1,w,c
  4826  002488  22DA               	addwfc	fsr2h,f,c
  4827  00248A  50DF               	movf	indf2,w,c
  4828  00248C  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4829  00248E  5003               	movf	RtccWriteTime@di,w,c
  4830  002490  A4D8               	btfss	status,2,c
  4831  002492  9CF2               	bcf	intcon,6,c	;volatile
  4832  002494  010F               	movlb	15	; () banked
  4833  002496  0E00               	movlw	0
  4834  002498  BB3F               	btfsc	63,5,b	;volatile
  4835  00249A  0E01               	movlw	1
  4836  00249C  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4837  00249E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4838  0024A0  B4D8               	btfsc	status,2,c
  4839                           
  4840                           ; BSR set to: 15
  4841  0024A2  ECD4  F01C         	call	_RtccWrOn	;wreg free
  4842  0024A6  010F               	movlb	15	; () banked
  4843  0024A8  0E00               	movlw	0
  4844  0024AA  BF3F               	btfsc	63,7,b	;volatile
  4845  0024AC  0E01               	movlw	1
  4846  0024AE  6E05               	movwf	RtccWriteTime@wasOn,c
  4847  0024B0  5005               	movf	RtccWriteTime@wasOn,w,c
  4848  0024B2  B4D8               	btfsc	status,2,c
  4849  0024B4  D006               	goto	l621
  4850                           
  4851                           ; BSR set to: 15
  4852  0024B6  0E00               	movlw	0
  4853  0024B8  BE91               	btfsc	3985,7,c	;volatile
  4854  0024BA  0E01               	movlw	1
  4855  0024BC  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4856                           
  4857                           ; BSR set to: 15
  4858  0024BE  010F               	movlb	15	; () banked
  4859  0024C0  9F3F               	bcf	63,7,b	;volatile
  4860  0024C2                     l621:
  4861                           
  4862                           ; BSR set to: 15
  4863                           
  4864                           ; BSR set to: 15
  4865  0024C2  0EFC               	movlw	252
  4866  0024C4  010F               	movlb	15	; () banked
  4867  0024C6  173F               	andwf	63,f,b	;volatile
  4868  0024C8  010F               	movlb	15	; () banked
  4869  0024CA  813F               	bsf	63,0,b	;volatile
  4870                           
  4871                           ; BSR set to: 15
  4872  0024CC  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4873                           
  4874                           ; BSR set to: 15
  4875  0024D0  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4876                           
  4877                           ; BSR set to: 15
  4878  0024D4  EE20 F003          	lfsr	2,3
  4879  0024D8  5001               	movf	RtccWriteTime@pTm,w,c
  4880  0024DA  26D9               	addwf	fsr2l,f,c
  4881  0024DC  5002               	movf	RtccWriteTime@pTm+1,w,c
  4882  0024DE  22DA               	addwfc	fsr2h,f,c
  4883  0024E0  50DF               	movf	indf2,w,c
  4884  0024E2  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4885                           
  4886                           ; BSR set to: 15
  4887  0024E4  0EFC               	movlw	252
  4888  0024E6  010F               	movlb	15	; () banked
  4889  0024E8  173F               	andwf	63,f,b	;volatile
  4890                           
  4891                           ; BSR set to: 15
  4892  0024EA  010F               	movlb	15	; () banked
  4893  0024EC  813F               	bsf	63,0,b	;volatile
  4894                           
  4895                           ; BSR set to: 15
  4896  0024EE  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4897                           
  4898                           ; BSR set to: 15
  4899  0024F2  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4900                           
  4901                           ; BSR set to: 15
  4902  0024F6  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4903                           
  4904                           ; BSR set to: 15
  4905  0024FA  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4906                           
  4907                           ; BSR set to: 15
  4908  0024FE  5005               	movf	RtccWriteTime@wasOn,w,c
  4909  002500  B4D8               	btfsc	status,2,c
  4910  002502  D00B               	goto	l622
  4911                           
  4912                           ; BSR set to: 15
  4913  002504  010F               	movlb	15	; () banked
  4914  002506  8F3F               	bsf	63,7,b	;volatile
  4915                           
  4916                           ; BSR set to: 15
  4917  002508  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4918  00250A  A4D8               	btfss	status,2,c
  4919                           
  4920                           ; BSR set to: 15
  4921  00250C  8E91               	bsf	3985,7,c	;volatile
  4922                           
  4923                           ; BSR set to: 15
  4924                           
  4925                           ; BSR set to: 15
  4926  00250E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4927  002510  B4D8               	btfsc	status,2,c
  4928  002512  D008               	goto	l626
  4929                           
  4930                           ; BSR set to: 15
  4931  002514  ECD4  F01C         	call	_RtccWrOn	;wreg free
  4932  002518  D005               	goto	l626
  4933  00251A                     l622:
  4934  00251A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4935  00251C  A4D8               	btfss	status,2,c
  4936  00251E  D002               	goto	l626
  4937  002520  010F               	movlb	15	; () banked
  4938  002522  9B3F               	bcf	63,5,b	;volatile
  4939  002524                     l626:
  4940                           
  4941                           ; BSR set to: 15
  4942                           
  4943                           ; BSR set to: 15
  4944  002524  5003               	movf	RtccWriteTime@di,w,c
  4945  002526  B4D8               	btfsc	status,2,c
  4946  002528  0012               	return	
  4947  00252A  8CF2               	bsf	intcon,6,c	;volatile
  4948  00252C  0012               	return	
  4949  00252E                     __end_of_RtccWriteTime:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           postinc1	equ	0xFE6
  4961                           postdec1	equ	0xFE5
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _RtccWriteDate *****************
  4972 ;; Defined at:
  4973 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  pDt             2    0[COMRAM] PTR const struct .
  4976 ;;		 -> RtccDate(4), 
  4977 ;;  di              1    2[COMRAM] enum E7121
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  tempHourWDay    2   11[COMRAM] struct .
  4980 ;;  tempDayMonth    2    9[COMRAM] struct .
  4981 ;;  tempYear        2    6[COMRAM] struct .
  4982 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4983 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4984 ;;  wasOn           1    4[COMRAM] enum E7121
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      enum E6550
  4987 ;; Registers used:
  4988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4994 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4995 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4996 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4997 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4998 ;;Total ram usage:       13 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    1
  5001 ;; This function calls:
  5002 ;;		_RtccWrOn
  5003 ;; This function is called by:
  5004 ;;		_Write_RTC
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text21
  5009  0020D4                     __ptext21:
  5010                           	opt stack 0
  5011  0020D4                     _RtccWriteDate:
  5012                           	opt stack 25
  5013                           
  5014                           ;incstack = 0
  5015  0020D4  0E00               	movlw	0
  5016  0020D6  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5017  0020D8  EE20 F002          	lfsr	2,2
  5018  0020DC  5001               	movf	RtccWriteDate@pDt,w,c
  5019  0020DE  26D9               	addwf	fsr2l,f,c
  5020  0020E0  5002               	movf	RtccWriteDate@pDt+1,w,c
  5021  0020E2  22DA               	addwfc	fsr2h,f,c
  5022  0020E4  0E13               	movlw	19
  5023  0020E6  60DF               	cpfslt	indf2,c
  5024  0020E8  0012               	return	
  5025  0020EA  EE20 F002          	lfsr	2,2
  5026  0020EE  5001               	movf	RtccWriteDate@pDt,w,c
  5027  0020F0  26D9               	addwf	fsr2l,f,c
  5028  0020F2  5002               	movf	RtccWriteDate@pDt+1,w,c
  5029  0020F4  22DA               	addwfc	fsr2h,f,c
  5030  0020F6  50DF               	movf	indf2,w,c
  5031  0020F8  B4D8               	btfsc	status,2,c
  5032  0020FA  0012               	return	
  5033  0020FC  EE20 F001          	lfsr	2,1
  5034  002100  5001               	movf	RtccWriteDate@pDt,w,c
  5035  002102  26D9               	addwf	fsr2l,f,c
  5036  002104  5002               	movf	RtccWriteDate@pDt+1,w,c
  5037  002106  22DA               	addwfc	fsr2h,f,c
  5038  002108  0E32               	movlw	50
  5039  00210A  60DF               	cpfslt	indf2,c
  5040  00210C  0012               	return	
  5041  00210E  EE20 F001          	lfsr	2,1
  5042  002112  5001               	movf	RtccWriteDate@pDt,w,c
  5043  002114  26D9               	addwf	fsr2l,f,c
  5044  002116  5002               	movf	RtccWriteDate@pDt+1,w,c
  5045  002118  22DA               	addwfc	fsr2h,f,c
  5046  00211A  50DF               	movf	indf2,w,c
  5047  00211C  B4D8               	btfsc	status,2,c
  5048  00211E  0012               	return	
  5049  002120  EE20 F003          	lfsr	2,3
  5050  002124  5001               	movf	RtccWriteDate@pDt,w,c
  5051  002126  26D9               	addwf	fsr2l,f,c
  5052  002128  5002               	movf	RtccWriteDate@pDt+1,w,c
  5053  00212A  22DA               	addwfc	fsr2h,f,c
  5054  00212C  0E99               	movlw	153
  5055  00212E  64DF               	cpfsgt	indf2,c
  5056  002130  D001               	goto	l586
  5057  002132  0012               	return	
  5058  002134                     l586:
  5059  002134  EE20 F003          	lfsr	2,3
  5060  002138  5001               	movf	RtccWriteDate@pDt,w,c
  5061  00213A  26D9               	addwf	fsr2l,f,c
  5062  00213C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5063  00213E  22DA               	addwfc	fsr2h,f,c
  5064  002140  50DF               	movf	indf2,w,c
  5065  002142  6E07               	movwf	RtccWriteDate@tempYear,c
  5066  002144  EE20 F001          	lfsr	2,1
  5067  002148  5001               	movf	RtccWriteDate@pDt,w,c
  5068  00214A  26D9               	addwf	fsr2l,f,c
  5069  00214C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5070  00214E  22DA               	addwfc	fsr2h,f,c
  5071  002150  50DF               	movf	indf2,w,c
  5072  002152  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  5073  002154  EE20 F002          	lfsr	2,2
  5074  002158  5001               	movf	RtccWriteDate@pDt,w,c
  5075  00215A  26D9               	addwf	fsr2l,f,c
  5076  00215C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5077  00215E  22DA               	addwfc	fsr2h,f,c
  5078  002160  50DF               	movf	indf2,w,c
  5079  002162  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  5080  002164  5003               	movf	RtccWriteDate@di,w,c
  5081  002166  A4D8               	btfss	status,2,c
  5082  002168  9CF2               	bcf	intcon,6,c	;volatile
  5083  00216A  010F               	movlb	15	; () banked
  5084  00216C  0E00               	movlw	0
  5085  00216E  BB3F               	btfsc	63,5,b	;volatile
  5086  002170  0E01               	movlw	1
  5087  002172  6E09               	movwf	RtccWriteDate@wasWrEn,c
  5088  002174  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5089  002176  B4D8               	btfsc	status,2,c
  5090                           
  5091                           ; BSR set to: 15
  5092  002178  ECD4  F01C         	call	_RtccWrOn	;wreg free
  5093  00217C  010F               	movlb	15	; () banked
  5094  00217E  0E00               	movlw	0
  5095  002180  BF3F               	btfsc	63,7,b	;volatile
  5096  002182  0E01               	movlw	1
  5097  002184  6E05               	movwf	RtccWriteDate@wasOn,c
  5098  002186  5005               	movf	RtccWriteDate@wasOn,w,c
  5099  002188  B4D8               	btfsc	status,2,c
  5100  00218A  D006               	goto	l592
  5101                           
  5102                           ; BSR set to: 15
  5103  00218C  0E00               	movlw	0
  5104  00218E  BE91               	btfsc	3985,7,c	;volatile
  5105  002190  0E01               	movlw	1
  5106  002192  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5107                           
  5108                           ; BSR set to: 15
  5109  002194  010F               	movlb	15	; () banked
  5110  002196  9F3F               	bcf	63,7,b	;volatile
  5111  002198                     l592:
  5112                           
  5113                           ; BSR set to: 15
  5114                           
  5115                           ; BSR set to: 15
  5116  002198  0EFC               	movlw	252
  5117  00219A  010F               	movlb	15	; () banked
  5118  00219C  173F               	andwf	63,f,b	;volatile
  5119  00219E  010F               	movlb	15	; () banked
  5120  0021A0  813F               	bsf	63,0,b	;volatile
  5121                           
  5122                           ; BSR set to: 15
  5123  0021A2  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  5124                           
  5125                           ; BSR set to: 15
  5126  0021A6  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  5127                           
  5128                           ; BSR set to: 15
  5129  0021AA  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  5130  0021AE  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  5131  0021B2  50DF               	movf	indf2,w,c
  5132  0021B4  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  5133                           
  5134                           ; BSR set to: 15
  5135  0021B6  0EFC               	movlw	252
  5136  0021B8  010F               	movlb	15	; () banked
  5137  0021BA  173F               	andwf	63,f,b	;volatile
  5138                           
  5139                           ; BSR set to: 15
  5140  0021BC  0E03               	movlw	3
  5141  0021BE  010F               	movlb	15	; () banked
  5142  0021C0  133F               	iorwf	63,f,b	;volatile
  5143                           
  5144                           ; BSR set to: 15
  5145  0021C2  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  5146                           
  5147                           ; BSR set to: 15
  5148  0021C6  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  5149                           
  5150                           ; BSR set to: 15
  5151  0021CA  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  5152                           
  5153                           ; BSR set to: 15
  5154  0021CE  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  5155                           
  5156                           ; BSR set to: 15
  5157  0021D2  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  5158                           
  5159                           ; BSR set to: 15
  5160  0021D6  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  5161                           
  5162                           ; BSR set to: 15
  5163  0021DA  5005               	movf	RtccWriteDate@wasOn,w,c
  5164  0021DC  B4D8               	btfsc	status,2,c
  5165  0021DE  D00B               	goto	l593
  5166                           
  5167                           ; BSR set to: 15
  5168  0021E0  010F               	movlb	15	; () banked
  5169  0021E2  8F3F               	bsf	63,7,b	;volatile
  5170                           
  5171                           ; BSR set to: 15
  5172  0021E4  5006               	movf	RtccWriteDate@wasAlrm,w,c
  5173  0021E6  A4D8               	btfss	status,2,c
  5174                           
  5175                           ; BSR set to: 15
  5176  0021E8  8E91               	bsf	3985,7,c	;volatile
  5177                           
  5178                           ; BSR set to: 15
  5179                           
  5180                           ; BSR set to: 15
  5181  0021EA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5182  0021EC  B4D8               	btfsc	status,2,c
  5183  0021EE  D008               	goto	l597
  5184                           
  5185                           ; BSR set to: 15
  5186  0021F0  ECD4  F01C         	call	_RtccWrOn	;wreg free
  5187  0021F4  D005               	goto	l597
  5188  0021F6                     l593:
  5189  0021F6  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5190  0021F8  A4D8               	btfss	status,2,c
  5191  0021FA  D002               	goto	l597
  5192  0021FC  010F               	movlb	15	; () banked
  5193  0021FE  9B3F               	bcf	63,5,b	;volatile
  5194  002200                     l597:
  5195                           
  5196                           ; BSR set to: 15
  5197                           
  5198                           ; BSR set to: 15
  5199  002200  5003               	movf	RtccWriteDate@di,w,c
  5200  002202  B4D8               	btfsc	status,2,c
  5201  002204  0012               	return	
  5202  002206  9CF2               	bcf	intcon,6,c	;volatile
  5203  002208  0012               	return	
  5204  00220A                     __end_of_RtccWriteDate:
  5205                           	opt stack 0
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodh	equ	0xFF4
  5211                           prodl	equ	0xFF3
  5212                           intcon	equ	0xFF2
  5213                           postinc0	equ	0xFEE
  5214                           wreg	equ	0xFE8
  5215                           postinc1	equ	0xFE6
  5216                           postdec1	equ	0xFE5
  5217                           fsr1h	equ	0xFE2
  5218                           fsr1l	equ	0xFE1
  5219                           indf2	equ	0xFDF
  5220                           postinc2	equ	0xFDE
  5221                           postdec2	equ	0xFDD
  5222                           fsr2h	equ	0xFDA
  5223                           fsr2l	equ	0xFD9
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function _RtccWrOn *****************
  5227 ;; Defined at:
  5228 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWrOn.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;		None
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  data            2    0        unsigned int 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  1    wreg      void 
  5235 ;; Registers used:
  5236 ;;		wreg, status,2
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5246 ;;Total ram usage:        0 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_Write_RTC
  5252 ;;		_RtccWriteDate
  5253 ;;		_RtccWriteTime
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text22
  5258  0039A8                     __ptext22:
  5259                           	opt stack 0
  5260  0039A8                     _RtccWrOn:
  5261                           	opt stack 25
  5262                           
  5263                           ;incstack = 0
  5264  0039A8  9CF2               	bcf	intcon,6,c	;volatile
  5265  0039AA  0E55               	movlw	85
  5266  0039AC  6EA7               	movwf	4007,c	;volatile
  5267  0039AE  0EAA               	movlw	170
  5268  0039B0  6EA7               	movwf	4007,c	;volatile
  5269  0039B2  010F               	movlb	15	; () banked
  5270  0039B4  8B3F               	bsf	63,5,b	;volatile
  5271                           
  5272                           ; BSR set to: 15
  5273  0039B6  8CF2               	bsf	intcon,6,c	;volatile
  5274                           
  5275                           ; BSR set to: 15
  5276  0039B8  0012               	return		;funcret
  5277  0039BA                     __end_of_RtccWrOn:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon	equ	0xFF2
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postinc1	equ	0xFE6
  5289                           postdec1	equ	0xFE5
  5290                           fsr1h	equ	0xFE2
  5291                           fsr1l	equ	0xFE1
  5292                           indf2	equ	0xFDF
  5293                           postinc2	equ	0xFDE
  5294                           postdec2	equ	0xFDD
  5295                           fsr2h	equ	0xFDA
  5296                           fsr2l	equ	0xFD9
  5297                           status	equ	0xFD8
  5298                           
  5299 ;; *************** function _covertir_valores_de_array_a_escala_decimal *****************
  5300 ;; Defined at:
  5301 ;;		line 478 in file "main.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;		None
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  i               2    8[BANK0 ] int 
  5306 ;;  numero          2    6[BANK0 ] int 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  2   90[COMRAM] int 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5317 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5319 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5320 ;;Total ram usage:       14 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    5
  5323 ;; This function calls:
  5324 ;;		___awtoft
  5325 ;;		___fttol
  5326 ;;		___wmul
  5327 ;;		_lcd_gotoxy
  5328 ;;		_lcd_putrs
  5329 ;;		_pow
  5330 ;;		_sprintf
  5331 ;; This function is called by:
  5332 ;;		_editar_fecha_reloj_digital
  5333 ;;		_editar_hora_reloj_digital
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text23
  5338  002328                     __ptext23:
  5339                           	opt stack 0
  5340  002328                     _covertir_valores_de_array_a_escala_decimal:
  5341                           	opt stack 19
  5342                           
  5343                           ;main.c: 479: int numero = 0;
  5344                           
  5345                           ; BSR set to: 15
  5346                           ;incstack = 0
  5347  002328  0E00               	movlw	0
  5348  00232A  0100               	movlb	0	; () banked
  5349  00232C  6FDA               	movwf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),b
  5350  00232E  0E00               	movlw	0
  5351  002330  6FD9               	movwf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),b
  5352                           
  5353                           ;main.c: 480: for (int i = 2 - 1; i >= 0; i--) {
  5354  002332  0E00               	movlw	0
  5355  002334  0100               	movlb	0	; () banked
  5356  002336  6FDC               	movwf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),b
  5357  002338  0E01               	movlw	1
  5358  00233A  6FDB               	movwf	covertir_valores_de_array_a_escala_decimal@i& (0+255),b
  5359  00233C                     l4374:
  5360                           
  5361                           ; BSR set to: 0
  5362  00233C  0100               	movlb	0	; () banked
  5363  00233E  BFDC               	btfsc	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),7,b
  5364  002340  D05A               	goto	u4980
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;main.c: 481: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  5368                           
  5369                           ; BSR set to: 0
  5370                           
  5371                           ; BSR set to: 0
  5372  002342  0E01               	movlw	1
  5373  002344  0100               	movlb	0	; () banked
  5374  002346  25DB               	addwf	covertir_valores_de_array_a_escala_decimal@i& (0+255),w,b
  5375  002348  6E5D               	movwf	??_covertir_valores_de_array_a_escala_decimal& (0+255),c
  5376  00234A  0E00               	movlw	0
  5377  00234C  0100               	movlb	0	; () banked
  5378  00234E  21DC               	addwfc	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),w,b
  5379  002350  6E5E               	movwf	(??_covertir_valores_de_array_a_escala_decimal+1)& (0+255),c
  5380  002352  1E5D               	comf	??_covertir_valores_de_array_a_escala_decimal,f,c
  5381  002354  1E5E               	comf	??_covertir_valores_de_array_a_escala_decimal+1,f,c
  5382  002356  4A5D               	infsnz	??_covertir_valores_de_array_a_escala_decimal,f,c
  5383  002358  2A5E               	incf	??_covertir_valores_de_array_a_escala_decimal+1,f,c
  5384  00235A  0E02               	movlw	2
  5385  00235C  245D               	addwf	??_covertir_valores_de_array_a_escala_decimal,w,c
  5386  00235E  6E09               	movwf	___awtoft@c,c
  5387  002360  0E00               	movlw	0
  5388  002362  205E               	addwfc	??_covertir_valores_de_array_a_escala_decimal+1,w,c
  5389  002364  6E0A               	movwf	___awtoft@c+1,c
  5390  002366  EC32  F01C         	call	___awtoft	;wreg free
  5391  00236A  C009  F0D3         	movff	?___awtoft,_covertir_valores_de_array_a_escala_decimal$2441
  5392  00236E  C00A  F0D4         	movff	?___awtoft+1,_covertir_valores_de_array_a_escala_decimal$2441+1
  5393  002372  C00B  F0D5         	movff	?___awtoft+2,_covertir_valores_de_array_a_escala_decimal$2441+2
  5394                           
  5395                           ;main.c: 481: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  5396  002376  C0D3  F04D         	movff	_covertir_valores_de_array_a_escala_decimal$2441,pow@y
  5397  00237A  C0D4  F04E         	movff	_covertir_valores_de_array_a_escala_decimal$2441+1,pow@y+1
  5398  00237E  C0D5  F04F         	movff	_covertir_valores_de_array_a_escala_decimal$2441+2,pow@y+2
  5399  002382  0E00               	movlw	0
  5400  002384  6E4A               	movwf	pow@x,c
  5401  002386  0E20               	movlw	32
  5402  002388  6E4B               	movwf	pow@x+1,c
  5403  00238A  0E41               	movlw	65
  5404  00238C  6E4C               	movwf	pow@x+2,c
  5405  00238E  EC0C  F00F         	call	_pow	;wreg free
  5406  002392  C04A  F0D6         	movff	?_pow,_covertir_valores_de_array_a_escala_decimal$2442
  5407  002396  C04B  F0D7         	movff	?_pow+1,_covertir_valores_de_array_a_escala_decimal$2442+1
  5408  00239A  C04C  F0D8         	movff	?_pow+2,_covertir_valores_de_array_a_escala_decimal$2442+2
  5409                           
  5410                           ;main.c: 481: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  5411  00239E  C0D6  F00D         	movff	_covertir_valores_de_array_a_escala_decimal$2442,___fttol@f1
  5412  0023A2  C0D7  F00E         	movff	_covertir_valores_de_array_a_escala_decimal$2442+1,___fttol@f1+1
  5413  0023A6  C0D8  F00F         	movff	_covertir_valores_de_array_a_escala_decimal$2442+2,___fttol@f1+2
  5414  0023AA  EC97  F012         	call	___fttol	;wreg free
  5415  0023AE  C00D  F01C         	movff	?___fttol,___wmul@multiplier
  5416  0023B2  C00E  F01D         	movff	?___fttol+1,___wmul@multiplier+1
  5417  0023B6  90D8               	bcf	status,0,c
  5418  0023B8  0100               	movlb	0	; () banked
  5419  0023BA  35DB               	rlcf	covertir_valores_de_array_a_escala_decimal@i& (0+255),w,b
  5420  0023BC  6ED9               	movwf	fsr2l,c
  5421  0023BE  0100               	movlb	0	; () banked
  5422  0023C0  35DC               	rlcf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),w,b
  5423  0023C2  6EDA               	movwf	fsr2h,c
  5424  0023C4  0E80               	movlw	low _numeros_para_fecha
  5425  0023C6  26D9               	addwf	fsr2l,f,c
  5426  0023C8  0E00               	movlw	high _numeros_para_fecha
  5427  0023CA  22DA               	addwfc	fsr2h,f,c
  5428  0023CC  CFDE F01E          	movff	postinc2,___wmul@multiplicand
  5429  0023D0  CFDD F01F          	movff	postdec2,___wmul@multiplicand+1
  5430  0023D4  EC67  F01C         	call	___wmul	;wreg free
  5431  0023D8  0100               	movlb	0	; () banked
  5432  0023DA  51D9               	movf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),w,b
  5433  0023DC  241C               	addwf	?___wmul,w,c
  5434  0023DE  0100               	movlb	0	; () banked
  5435  0023E0  6FD9               	movwf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),b
  5436  0023E2  0100               	movlb	0	; () banked
  5437  0023E4  51DA               	movf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),w,b
  5438  0023E6  201D               	addwfc	?___wmul+1,w,c
  5439  0023E8  0100               	movlb	0	; () banked
  5440  0023EA  6FDA               	movwf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),b
  5441                           
  5442                           ; BSR set to: 0
  5443  0023EC  0100               	movlb	0	; () banked
  5444  0023EE  07DB               	decf	covertir_valores_de_array_a_escala_decimal@i& (0+255),f,b
  5445  0023F0  A0D8               	btfss	status,0,c
  5446  0023F2  07DC               	decf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),f,b
  5447  0023F4  D7A3               	goto	l4374
  5448  0023F6                     u4980:
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;main.c: 482: };
  5452                           ;main.c: 483: sprintf(buffer2, "%02u", numero);
  5453                           
  5454                           ; BSR set to: 0
  5455  0023F6  0EA3               	movlw	low _buffer2
  5456  0023F8  6E22               	movwf	sprintf@sp,c
  5457  0023FA  0E00               	movlw	high _buffer2
  5458  0023FC  6E23               	movwf	sprintf@sp+1,c
  5459  0023FE  0E9A               	movlw	low (STR_7+10)
  5460  002400  6E24               	movwf	sprintf@f,c
  5461  002402  0E0F               	movlw	high (STR_7+10)
  5462  002404  6E25               	movwf	sprintf@f+1,c
  5463  002406  C0D9  F026         	movff	covertir_valores_de_array_a_escala_decimal@numero,?_sprintf+4
  5464  00240A  C0DA  F027         	movff	covertir_valores_de_array_a_escala_decimal@numero+1,?_sprintf+5
  5465  00240E  EC4E  F00A         	call	_sprintf	;wreg free
  5466                           
  5467                           ;main.c: 484: lcd_gotoxy(8, 2);
  5468  002412  0E02               	movlw	2
  5469  002414  6E05               	movwf	lcd_gotoxy@y,c
  5470  002416  0E08               	movlw	8
  5471  002418  EC9E  F01C         	call	_lcd_gotoxy
  5472                           
  5473                           ;main.c: 485: lcd_putrs(buffer2);
  5474  00241C  0EA3               	movlw	low _buffer2
  5475  00241E  6E09               	movwf	lcd_putrs@ptr,c
  5476  002420  0E00               	movlw	high _buffer2
  5477  002422  6E0A               	movwf	lcd_putrs@ptr+1,c
  5478  002424  EC2F  F01B         	call	_lcd_putrs	;wreg free
  5479                           
  5480                           ;main.c: 486: return numero;
  5481  002428  C0D9  F05B         	movff	covertir_valores_de_array_a_escala_decimal@numero,?_covertir_valores_de_array_a_e
      +                          scala_decimal
  5482  00242C  C0DA  F05C         	movff	covertir_valores_de_array_a_escala_decimal@numero+1,?_covertir_valores_de_array_a
      +                          _escala_decimal+1
  5483  002430  0012               	return	
  5484  002432                     __end_of_covertir_valores_de_array_a_escala_decimal:
  5485                           	opt stack 0
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           intcon	equ	0xFF2
  5493                           postinc0	equ	0xFEE
  5494                           wreg	equ	0xFE8
  5495                           postinc1	equ	0xFE6
  5496                           postdec1	equ	0xFE5
  5497                           fsr1h	equ	0xFE2
  5498                           fsr1l	equ	0xFE1
  5499                           indf2	equ	0xFDF
  5500                           postinc2	equ	0xFDE
  5501                           postdec2	equ	0xFDD
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function _pow *****************
  5507 ;; Defined at:
  5508 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  x               3   73[COMRAM] int 
  5511 ;;  y               3   76[COMRAM] int 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  yi              4   86[COMRAM] unsigned long 
  5514 ;;  sign            1   85[COMRAM] unsigned char 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  3   73[COMRAM] unsigned char 
  5517 ;; Registers used:
  5518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5524 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5525 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5527 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5528 ;;Total ram usage:       17 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    4
  5531 ;; This function calls:
  5532 ;;		___ftge
  5533 ;;		___ftmul
  5534 ;;		___ftneg
  5535 ;;		___fttol
  5536 ;;		___lltoft
  5537 ;;		_exp
  5538 ;;		_log
  5539 ;; This function is called by:
  5540 ;;		_covertir_valores_de_array_a_escala_decimal
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           	psect	text24
  5545  001E18                     __ptext24:
  5546                           	opt stack 0
  5547  001E18                     _pow:
  5548                           	opt stack 19
  5549                           
  5550                           ;incstack = 0
  5551  001E18  0E00               	movlw	0
  5552  001E1A  6E56               	movwf	pow@sign,c
  5553  001E1C  504A               	movf	pow@x,w,c
  5554  001E1E  104B               	iorwf	pow@x+1,w,c
  5555  001E20  104C               	iorwf	pow@x+2,w,c
  5556  001E22  A4D8               	btfss	status,2,c
  5557  001E24  D01C               	goto	l1087
  5558  001E26  0E00               	movlw	0
  5559  001E28  6E01               	movwf	___ftge@ff1,c
  5560  001E2A  0E00               	movlw	0
  5561  001E2C  6E02               	movwf	___ftge@ff1+1,c
  5562  001E2E  0E00               	movlw	0
  5563  001E30  6E03               	movwf	___ftge@ff1+2,c
  5564  001E32  C04D  F004         	movff	pow@y,___ftge@ff2
  5565  001E36  C04E  F005         	movff	pow@y+1,___ftge@ff2+1
  5566  001E3A  C04F  F006         	movff	pow@y+2,___ftge@ff2+2
  5567  001E3E  EC3C  F017         	call	___ftge	;wreg free
  5568  001E42  A0D8               	btfss	status,0,c
  5569  001E44  D005               	goto	l1088
  5570  001E46  0E00               	movlw	0
  5571  001E48  0100               	movlb	0	; () banked
  5572  001E4A  6F89               	movwf	(_errno+1)& (0+255),b
  5573  001E4C  0E21               	movlw	33
  5574  001E4E  6F88               	movwf	_errno& (0+255),b
  5575  001E50                     l1088:
  5576  001E50  0E00               	movlw	0
  5577  001E52  6E4A               	movwf	?_pow,c
  5578  001E54  0E00               	movlw	0
  5579  001E56  6E4B               	movwf	?_pow+1,c
  5580  001E58  0E00               	movlw	0
  5581  001E5A  6E4C               	movwf	?_pow+2,c
  5582  001E5C  0012               	return	
  5583  001E5E                     l1087:
  5584  001E5E  504D               	movf	pow@y,w,c
  5585  001E60  104E               	iorwf	pow@y+1,w,c
  5586  001E62  104F               	iorwf	pow@y+2,w,c
  5587  001E64  A4D8               	btfss	status,2,c
  5588  001E66  D007               	goto	l1090
  5589  001E68  0E00               	movlw	0
  5590  001E6A  6E4A               	movwf	?_pow,c
  5591  001E6C  0E80               	movlw	128
  5592  001E6E  6E4B               	movwf	?_pow+1,c
  5593  001E70  0E3F               	movlw	63
  5594  001E72  6E4C               	movwf	?_pow+2,c
  5595  001E74  0012               	return	
  5596  001E76                     l1090:
  5597  001E76  AE4C               	btfss	pow@x+2,7,c
  5598  001E78  D041               	goto	l1091
  5599  001E7A  C04D  F00D         	movff	pow@y,___fttol@f1
  5600  001E7E  C04E  F00E         	movff	pow@y+1,___fttol@f1+1
  5601  001E82  C04F  F00F         	movff	pow@y+2,___fttol@f1+2
  5602  001E86  EC97  F012         	call	___fttol	;wreg free
  5603  001E8A  C00D  F057         	movff	?___fttol,pow@yi
  5604  001E8E  C00E  F058         	movff	?___fttol+1,pow@yi+1
  5605  001E92  C00F  F059         	movff	?___fttol+2,pow@yi+2
  5606  001E96  C010  F05A         	movff	?___fttol+3,pow@yi+3
  5607  001E9A  C057  F009         	movff	pow@yi,___lltoft@c
  5608  001E9E  C058  F00A         	movff	pow@yi+1,___lltoft@c+1
  5609  001EA2  C059  F00B         	movff	pow@yi+2,___lltoft@c+2
  5610  001EA6  C05A  F00C         	movff	pow@yi+3,___lltoft@c+3
  5611  001EAA  ECAB  F01A         	call	___lltoft	;wreg free
  5612  001EAE  504D               	movf	pow@y,w,c
  5613  001EB0  1809               	xorwf	?___lltoft,w,c
  5614  001EB2  E107               	bnz	u4490
  5615  001EB4  504E               	movf	pow@y+1,w,c
  5616  001EB6  180A               	xorwf	?___lltoft+1,w,c
  5617  001EB8  E104               	bnz	u4490
  5618  001EBA  504F               	movf	pow@y+2,w,c
  5619  001EBC  180B               	xorwf	?___lltoft+2,w,c
  5620  001EBE  B4D8               	btfsc	status,2,c
  5621  001EC0  D00C               	goto	l1092
  5622  001EC2                     u4490:
  5623  001EC2  0E00               	movlw	0
  5624  001EC4  0100               	movlb	0	; () banked
  5625  001EC6  6F89               	movwf	(_errno+1)& (0+255),b
  5626  001EC8  0E21               	movlw	33
  5627  001ECA  6F88               	movwf	_errno& (0+255),b
  5628  001ECC  0E00               	movlw	0
  5629  001ECE  6E4A               	movwf	?_pow,c
  5630  001ED0  0E00               	movlw	0
  5631  001ED2  6E4B               	movwf	?_pow+1,c
  5632  001ED4  0E00               	movlw	0
  5633  001ED6  6E4C               	movwf	?_pow+2,c
  5634                           
  5635                           ; BSR set to: 0
  5636  001ED8  0012               	return	
  5637  001EDA                     l1092:
  5638                           
  5639                           ; BSR set to: 0
  5640  001EDA  5057               	movf	pow@yi,w,c
  5641  001EDC  0B01               	andlw	1
  5642  001EDE  6E56               	movwf	pow@sign,c
  5643  001EE0  C04A  F001         	movff	pow@x,___ftneg@f1
  5644  001EE4  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  5645  001EE8  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  5646  001EEC  EC8C  F01C         	call	___ftneg	;wreg free
  5647  001EF0  C001  F04A         	movff	?___ftneg,pow@x
  5648  001EF4  C002  F04B         	movff	?___ftneg+1,pow@x+1
  5649  001EF8  C003  F04C         	movff	?___ftneg+2,pow@x+2
  5650  001EFC                     l1091:
  5651  001EFC  C04A  F03A         	movff	pow@x,log@x
  5652  001F00  C04B  F03B         	movff	pow@x+1,log@x+1
  5653  001F04  C04C  F03C         	movff	pow@x+2,log@x+2
  5654  001F08  EC05  F011         	call	_log	;wreg free
  5655  001F0C  C03A  F050         	movff	?_log,_pow$2443
  5656  001F10  C03B  F051         	movff	?_log+1,_pow$2443+1
  5657  001F14  C03C  F052         	movff	?_log+2,_pow$2443+2
  5658  001F18  C050  F00D         	movff	_pow$2443,___ftmul@f1
  5659  001F1C  C051  F00E         	movff	_pow$2443+1,___ftmul@f1+1
  5660  001F20  C052  F00F         	movff	_pow$2443+2,___ftmul@f1+2
  5661  001F24  C04D  F010         	movff	pow@y,___ftmul@f2
  5662  001F28  C04E  F011         	movff	pow@y+1,___ftmul@f2+1
  5663  001F2C  C04F  F012         	movff	pow@y+2,___ftmul@f2+2
  5664  001F30  EC11  F013         	call	___ftmul	;wreg free
  5665  001F34  C00D  F053         	movff	?___ftmul,_pow$2444
  5666  001F38  C00E  F054         	movff	?___ftmul+1,_pow$2444+1
  5667  001F3C  C00F  F055         	movff	?___ftmul+2,_pow$2444+2
  5668  001F40  C053  F041         	movff	_pow$2444,exp@x
  5669  001F44  C054  F042         	movff	_pow$2444+1,exp@x+1
  5670  001F48  C055  F043         	movff	_pow$2444+2,exp@x+2
  5671  001F4C  EC74  F00C         	call	_exp	;wreg free
  5672  001F50  C041  F04A         	movff	?_exp,pow@x
  5673  001F54  C042  F04B         	movff	?_exp+1,pow@x+1
  5674  001F58  C043  F04C         	movff	?_exp+2,pow@x+2
  5675  001F5C  5056               	movf	pow@sign,w,c
  5676  001F5E  B4D8               	btfsc	status,2,c
  5677  001F60  D00F               	goto	l1093
  5678  001F62  C04A  F001         	movff	pow@x,___ftneg@f1
  5679  001F66  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  5680  001F6A  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  5681  001F6E  EC8C  F01C         	call	___ftneg	;wreg free
  5682  001F72  C001  F04A         	movff	?___ftneg,?_pow
  5683  001F76  C002  F04B         	movff	?___ftneg+1,?_pow+1
  5684  001F7A  C003  F04C         	movff	?___ftneg+2,?_pow+2
  5685  001F7E  0012               	return	
  5686  001F80                     l1093:
  5687  001F80  C04A  F04A         	movff	pow@x,?_pow
  5688  001F84  C04B  F04B         	movff	pow@x+1,?_pow+1
  5689  001F88  C04C  F04C         	movff	pow@x+2,?_pow+2
  5690  001F8C  0012               	return		;funcret
  5691  001F8E                     __end_of_pow:
  5692                           	opt stack 0
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           intcon	equ	0xFF2
  5700                           postinc0	equ	0xFEE
  5701                           wreg	equ	0xFE8
  5702                           postinc1	equ	0xFE6
  5703                           postdec1	equ	0xFE5
  5704                           fsr1h	equ	0xFE2
  5705                           fsr1l	equ	0xFE1
  5706                           indf2	equ	0xFDF
  5707                           postinc2	equ	0xFDE
  5708                           postdec2	equ	0xFDD
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _log *****************
  5714 ;; Defined at:
  5715 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  x               3   57[COMRAM] unsigned char 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;  exponent        2   60[COMRAM] int 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  3   57[COMRAM] int 
  5722 ;; Registers used:
  5723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5729 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5732 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5733 ;;Total ram usage:        5 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    3
  5736 ;; This function calls:
  5737 ;;		___awtoft
  5738 ;;		___ftadd
  5739 ;;		___ftmul
  5740 ;;		_eval_poly
  5741 ;;		_frexp
  5742 ;; This function is called by:
  5743 ;;		_pow
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text25
  5748  00220A                     __ptext25:
  5749                           	opt stack 0
  5750  00220A                     _log:
  5751                           	opt stack 19
  5752                           
  5753                           ;incstack = 0
  5754  00220A  AE3C               	btfss	log@x+2,7,c
  5755  00220C  D00C               	goto	l1289
  5756  00220E  0E00               	movlw	0
  5757  002210  0100               	movlb	0	; () banked
  5758  002212  6F89               	movwf	(_errno+1)& (0+255),b
  5759  002214  0E21               	movlw	33
  5760  002216  6F88               	movwf	_errno& (0+255),b
  5761  002218  0E00               	movlw	0
  5762  00221A  6E3A               	movwf	?_log,c
  5763  00221C  0E00               	movlw	0
  5764  00221E  6E3B               	movwf	?_log+1,c
  5765  002220  0E00               	movlw	0
  5766  002222  6E3C               	movwf	?_log+2,c
  5767                           
  5768                           ; BSR set to: 0
  5769  002224  0012               	return	
  5770  002226                     l1289:
  5771                           
  5772                           ; BSR set to: 0
  5773  002226  503A               	movf	log@x,w,c
  5774  002228  103B               	iorwf	log@x+1,w,c
  5775  00222A  103C               	iorwf	log@x+2,w,c
  5776  00222C  A4D8               	btfss	status,2,c
  5777  00222E  D00C               	goto	l1291
  5778  002230  0E00               	movlw	0
  5779  002232  0100               	movlb	0	; () banked
  5780  002234  6F89               	movwf	(_errno+1)& (0+255),b
  5781  002236  0E22               	movlw	34
  5782  002238  6F88               	movwf	_errno& (0+255),b
  5783  00223A  0E00               	movlw	0
  5784  00223C  6E3A               	movwf	?_log,c
  5785  00223E  0E00               	movlw	0
  5786  002240  6E3B               	movwf	?_log+1,c
  5787  002242  0E00               	movlw	0
  5788  002244  6E3C               	movwf	?_log+2,c
  5789                           
  5790                           ; BSR set to: 0
  5791  002246  0012               	return	
  5792  002248                     l1291:
  5793                           
  5794                           ; BSR set to: 0
  5795  002248  0E00               	movlw	0
  5796  00224A  6E10               	movwf	___ftmul@f2,c
  5797  00224C  0E00               	movlw	0
  5798  00224E  6E11               	movwf	___ftmul@f2+1,c
  5799  002250  0E40               	movlw	64
  5800  002252  6E12               	movwf	___ftmul@f2+2,c
  5801  002254  0E3D               	movlw	low log@exponent
  5802  002256  6E04               	movwf	frexp@eptr,c
  5803  002258  0E00               	movlw	high log@exponent
  5804  00225A  6E05               	movwf	frexp@eptr+1,c
  5805  00225C  C03A  F001         	movff	log@x,frexp@value
  5806  002260  C03B  F002         	movff	log@x+1,frexp@value+1
  5807  002264  C03C  F003         	movff	log@x+2,frexp@value+2
  5808  002268  ECF4  F016         	call	_frexp	;wreg free
  5809  00226C  C001  F00D         	movff	?_frexp,___ftmul@f1
  5810  002270  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  5811  002274  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  5812  002278  EC11  F013         	call	___ftmul	;wreg free
  5813  00227C  C00D  F022         	movff	?___ftmul,___ftadd@f1
  5814  002280  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  5815  002284  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  5816  002288  0E00               	movlw	0
  5817  00228A  6E25               	movwf	___ftadd@f2,c
  5818  00228C  0E80               	movlw	128
  5819  00228E  6E26               	movwf	___ftadd@f2+1,c
  5820  002290  0EBF               	movlw	191
  5821  002292  6E27               	movwf	___ftadd@f2+2,c
  5822  002294  EC68  F00D         	call	___ftadd	;wreg free
  5823  002298  C022  F03A         	movff	?___ftadd,log@x
  5824  00229C  C023  F03B         	movff	?___ftadd+1,log@x+1
  5825  0022A0  C024  F03C         	movff	?___ftadd+2,log@x+2
  5826  0022A4  063D               	decf	log@exponent,f,c
  5827  0022A6  A0D8               	btfss	status,0,c
  5828  0022A8  063E               	decf	log@exponent+1,f,c
  5829  0022AA  C03A  F02E         	movff	log@x,eval_poly@x
  5830  0022AE  C03B  F02F         	movff	log@x+1,eval_poly@x+1
  5831  0022B2  C03C  F030         	movff	log@x+2,eval_poly@x+2
  5832  0022B6  0E2D               	movlw	low log@coeff
  5833  0022B8  6E31               	movwf	eval_poly@d,c
  5834  0022BA  0E0F               	movlw	high log@coeff
  5835  0022BC  6E32               	movwf	eval_poly@d+1,c
  5836  0022BE  0E00               	movlw	0
  5837  0022C0  6E34               	movwf	eval_poly@n+1,c
  5838  0022C2  0E08               	movlw	8
  5839  0022C4  6E33               	movwf	eval_poly@n,c
  5840  0022C6  EC6D  F014         	call	_eval_poly	;wreg free
  5841  0022CA  C02E  F03A         	movff	?_eval_poly,log@x
  5842  0022CE  C02F  F03B         	movff	?_eval_poly+1,log@x+1
  5843  0022D2  C030  F03C         	movff	?_eval_poly+2,log@x+2
  5844  0022D6  0E72               	movlw	114
  5845  0022D8  6E10               	movwf	___ftmul@f2,c
  5846  0022DA  0E31               	movlw	49
  5847  0022DC  6E11               	movwf	___ftmul@f2+1,c
  5848  0022DE  0E3F               	movlw	63
  5849  0022E0  6E12               	movwf	___ftmul@f2+2,c
  5850  0022E2  C03D  F009         	movff	log@exponent,___awtoft@c
  5851  0022E6  C03E  F00A         	movff	log@exponent+1,___awtoft@c+1
  5852  0022EA  EC32  F01C         	call	___awtoft	;wreg free
  5853  0022EE  C009  F00D         	movff	?___awtoft,___ftmul@f1
  5854  0022F2  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  5855  0022F6  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  5856  0022FA  EC11  F013         	call	___ftmul	;wreg free
  5857  0022FE  C00D  F022         	movff	?___ftmul,___ftadd@f1
  5858  002302  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  5859  002306  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  5860  00230A  C03A  F025         	movff	log@x,___ftadd@f2
  5861  00230E  C03B  F026         	movff	log@x+1,___ftadd@f2+1
  5862  002312  C03C  F027         	movff	log@x+2,___ftadd@f2+2
  5863  002316  EC68  F00D         	call	___ftadd	;wreg free
  5864  00231A  C022  F03A         	movff	?___ftadd,?_log
  5865  00231E  C023  F03B         	movff	?___ftadd+1,?_log+1
  5866  002322  C024  F03C         	movff	?___ftadd+2,?_log+2
  5867  002326  0012               	return	
  5868  002328                     __end_of_log:
  5869                           	opt stack 0
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon	equ	0xFF2
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postinc1	equ	0xFE6
  5880                           postdec1	equ	0xFE5
  5881                           fsr1h	equ	0xFE2
  5882                           fsr1l	equ	0xFE1
  5883                           indf2	equ	0xFDF
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function _exp *****************
  5891 ;; Defined at:
  5892 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  x               3   64[COMRAM] int 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  exponent        2   70[COMRAM] int 
  5897 ;;  sign            1   72[COMRAM] unsigned char 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  3   64[COMRAM] unsigned char 
  5900 ;; Registers used:
  5901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5907 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5908 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5911 ;;Total ram usage:        9 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    3
  5914 ;; This function calls:
  5915 ;;		___awtoft
  5916 ;;		___ftdiv
  5917 ;;		___ftge
  5918 ;;		___ftmul
  5919 ;;		___ftneg
  5920 ;;		___ftsub
  5921 ;;		___fttol
  5922 ;;		_eval_poly
  5923 ;;		_floor
  5924 ;;		_ldexp
  5925 ;; This function is called by:
  5926 ;;		_pow
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text26
  5931  0018E8                     __ptext26:
  5932                           	opt stack 0
  5933  0018E8                     _exp:
  5934                           	opt stack 19
  5935                           
  5936                           ;incstack = 0
  5937  0018E8  5041               	movf	exp@x,w,c
  5938  0018EA  1042               	iorwf	exp@x+1,w,c
  5939  0018EC  1043               	iorwf	exp@x+2,w,c
  5940  0018EE  A4D8               	btfss	status,2,c
  5941  0018F0  D007               	goto	l1247
  5942  0018F2  0E00               	movlw	0
  5943  0018F4  6E41               	movwf	?_exp,c
  5944  0018F6  0E80               	movlw	128
  5945  0018F8  6E42               	movwf	?_exp+1,c
  5946  0018FA  0E3F               	movlw	63
  5947  0018FC  6E43               	movwf	?_exp+2,c
  5948  0018FE  0012               	return	
  5949  001900                     l1247:
  5950  001900  0E72               	movlw	114
  5951  001902  6E01               	movwf	___ftge@ff1,c
  5952  001904  0E31               	movlw	49
  5953  001906  6E02               	movwf	___ftge@ff1+1,c
  5954  001908  0E44               	movlw	68
  5955  00190A  6E03               	movwf	___ftge@ff1+2,c
  5956  00190C  C041  F004         	movff	exp@x,___ftge@ff2
  5957  001910  C042  F005         	movff	exp@x+1,___ftge@ff2+1
  5958  001914  C043  F006         	movff	exp@x+2,___ftge@ff2+2
  5959  001918  EC3C  F017         	call	___ftge	;wreg free
  5960  00191C  B0D8               	btfsc	status,0,c
  5961  00191E  D00C               	goto	l1249
  5962  001920  0E00               	movlw	0
  5963  001922  0100               	movlb	0	; () banked
  5964  001924  6F89               	movwf	(_errno+1)& (0+255),b
  5965  001926  0E22               	movlw	34
  5966  001928  6F88               	movwf	_errno& (0+255),b
  5967  00192A  0EFF               	movlw	255
  5968  00192C  6E41               	movwf	?_exp,c
  5969  00192E  0E7F               	movlw	127
  5970  001930  6E42               	movwf	?_exp+1,c
  5971  001932  0E7F               	movlw	127
  5972  001934  6E43               	movwf	?_exp+2,c
  5973                           
  5974                           ; BSR set to: 0
  5975  001936  0012               	return	
  5976  001938                     l1249:
  5977                           
  5978                           ; BSR set to: 0
  5979  001938  C041  F001         	movff	exp@x,___ftge@ff1
  5980  00193C  C042  F002         	movff	exp@x+1,___ftge@ff1+1
  5981  001940  C043  F003         	movff	exp@x+2,___ftge@ff1+2
  5982  001944  0E49               	movlw	73
  5983  001946  6E04               	movwf	___ftge@ff2,c
  5984  001948  0E3A               	movlw	58
  5985  00194A  6E05               	movwf	___ftge@ff2+1,c
  5986  00194C  0EC4               	movlw	196
  5987  00194E  6E06               	movwf	___ftge@ff2+2,c
  5988  001950  EC3C  F017         	call	___ftge	;wreg free
  5989  001954  B0D8               	btfsc	status,0,c
  5990  001956  D00C               	goto	l1250
  5991  001958  0E00               	movlw	0
  5992  00195A  0100               	movlb	0	; () banked
  5993  00195C  6F89               	movwf	(_errno+1)& (0+255),b
  5994  00195E  0E22               	movlw	34
  5995  001960  6F88               	movwf	_errno& (0+255),b
  5996  001962  0E00               	movlw	0
  5997  001964  6E41               	movwf	?_exp,c
  5998  001966  0E00               	movlw	0
  5999  001968  6E42               	movwf	?_exp+1,c
  6000  00196A  0E00               	movlw	0
  6001  00196C  6E43               	movwf	?_exp+2,c
  6002                           
  6003                           ; BSR set to: 0
  6004  00196E  0012               	return	
  6005  001970                     l1250:
  6006                           
  6007                           ; BSR set to: 0
  6008  001970  AE43               	btfss	exp@x+2,7,c
  6009  001972  D002               	goto	u4390
  6010  001974  0E01               	movlw	1
  6011  001976  D001               	goto	u4400
  6012  001978                     u4390:
  6013  001978  0E00               	movlw	0
  6014  00197A                     u4400:
  6015  00197A  6E49               	movwf	exp@sign,c
  6016  00197C  5049               	movf	exp@sign,w,c
  6017  00197E  B4D8               	btfsc	status,2,c
  6018  001980  D00E               	goto	l1251
  6019  001982  C041  F001         	movff	exp@x,___ftneg@f1
  6020  001986  C042  F002         	movff	exp@x+1,___ftneg@f1+1
  6021  00198A  C043  F003         	movff	exp@x+2,___ftneg@f1+2
  6022  00198E  EC8C  F01C         	call	___ftneg	;wreg free
  6023  001992  C001  F041         	movff	?___ftneg,exp@x
  6024  001996  C002  F042         	movff	?___ftneg+1,exp@x+1
  6025  00199A  C003  F043         	movff	?___ftneg+2,exp@x+2
  6026  00199E                     l1251:
  6027  00199E  C041  F00D         	movff	exp@x,___ftmul@f1
  6028  0019A2  C042  F00E         	movff	exp@x+1,___ftmul@f1+1
  6029  0019A6  C043  F00F         	movff	exp@x+2,___ftmul@f1+2
  6030  0019AA  0EAA               	movlw	170
  6031  0019AC  6E10               	movwf	___ftmul@f2,c
  6032  0019AE  0EB8               	movlw	184
  6033  0019B0  6E11               	movwf	___ftmul@f2+1,c
  6034  0019B2  0E3F               	movlw	63
  6035  0019B4  6E12               	movwf	___ftmul@f2+2,c
  6036  0019B6  EC11  F013         	call	___ftmul	;wreg free
  6037  0019BA  C00D  F041         	movff	?___ftmul,exp@x
  6038  0019BE  C00E  F042         	movff	?___ftmul+1,exp@x+1
  6039  0019C2  C00F  F043         	movff	?___ftmul+2,exp@x+2
  6040  0019C6  C041  F02E         	movff	exp@x,floor@x
  6041  0019CA  C042  F02F         	movff	exp@x+1,floor@x+1
  6042  0019CE  C043  F030         	movff	exp@x+2,floor@x+2
  6043  0019D2  ECFE  F013         	call	_floor	;wreg free
  6044  0019D6  C02E  F044         	movff	?_floor,_exp$2445
  6045  0019DA  C02F  F045         	movff	?_floor+1,_exp$2445+1
  6046  0019DE  C030  F046         	movff	?_floor+2,_exp$2445+2
  6047  0019E2  C044  F00D         	movff	_exp$2445,___fttol@f1
  6048  0019E6  C045  F00E         	movff	_exp$2445+1,___fttol@f1+1
  6049  0019EA  C046  F00F         	movff	_exp$2445+2,___fttol@f1+2
  6050  0019EE  EC97  F012         	call	___fttol	;wreg free
  6051  0019F2  C00D  F047         	movff	?___fttol,exp@exponent
  6052  0019F6  C00E  F048         	movff	?___fttol+1,exp@exponent+1
  6053  0019FA  C041  F02E         	movff	exp@x,___ftsub@f1
  6054  0019FE  C042  F02F         	movff	exp@x+1,___ftsub@f1+1
  6055  001A02  C043  F030         	movff	exp@x+2,___ftsub@f1+2
  6056  001A06  C047  F009         	movff	exp@exponent,___awtoft@c
  6057  001A0A  C048  F00A         	movff	exp@exponent+1,___awtoft@c+1
  6058  001A0E  EC32  F01C         	call	___awtoft	;wreg free
  6059  001A12  C009  F031         	movff	?___awtoft,___ftsub@f2
  6060  001A16  C00A  F032         	movff	?___awtoft+1,___ftsub@f2+1
  6061  001A1A  C00B  F033         	movff	?___awtoft+2,___ftsub@f2+2
  6062  001A1E  EC12  F01C         	call	___ftsub	;wreg free
  6063  001A22  C02E  F041         	movff	?___ftsub,exp@x
  6064  001A26  C02F  F042         	movff	?___ftsub+1,exp@x+1
  6065  001A2A  C030  F043         	movff	?___ftsub+2,exp@x+2
  6066  001A2E  C041  F02E         	movff	exp@x,eval_poly@x
  6067  001A32  C042  F02F         	movff	exp@x+1,eval_poly@x+1
  6068  001A36  C043  F030         	movff	exp@x+2,eval_poly@x+2
  6069  001A3A  0E0F               	movlw	low exp@coeff
  6070  001A3C  6E31               	movwf	eval_poly@d,c
  6071  001A3E  0E0F               	movlw	high exp@coeff
  6072  001A40  6E32               	movwf	eval_poly@d+1,c
  6073  001A42  0E00               	movlw	0
  6074  001A44  6E34               	movwf	eval_poly@n+1,c
  6075  001A46  0E09               	movlw	9
  6076  001A48  6E33               	movwf	eval_poly@n,c
  6077  001A4A  EC6D  F014         	call	_eval_poly	;wreg free
  6078  001A4E  C02E  F03A         	movff	?_eval_poly,ldexp@value
  6079  001A52  C02F  F03B         	movff	?_eval_poly+1,ldexp@value+1
  6080  001A56  C030  F03C         	movff	?_eval_poly+2,ldexp@value+2
  6081  001A5A  C047  F03D         	movff	exp@exponent,ldexp@newexp
  6082  001A5E  C048  F03E         	movff	exp@exponent+1,ldexp@newexp+1
  6083  001A62  ECD6  F014         	call	_ldexp	;wreg free
  6084  001A66  C03A  F041         	movff	?_ldexp,exp@x
  6085  001A6A  C03B  F042         	movff	?_ldexp+1,exp@x+1
  6086  001A6E  C03C  F043         	movff	?_ldexp+2,exp@x+2
  6087  001A72  5049               	movf	exp@sign,w,c
  6088  001A74  B4D8               	btfsc	status,2,c
  6089  001A76  D025               	goto	l1252
  6090  001A78  2841               	incf	exp@x,w,c
  6091  001A7A  E10E               	bnz	l4092
  6092  001A7C  0E7F               	movlw	127
  6093  001A7E  1842               	xorwf	exp@x+1,w,c
  6094  001A80  E10B               	bnz	l4092
  6095  001A82  0E7F               	movlw	127
  6096  001A84  1843               	xorwf	exp@x+2,w,c
  6097  001A86  A4D8               	btfss	status,2,c
  6098  001A88  D007               	goto	l1253
  6099  001A8A  0E00               	movlw	0
  6100  001A8C  6E41               	movwf	?_exp,c
  6101  001A8E  0E00               	movlw	0
  6102  001A90  6E42               	movwf	?_exp+1,c
  6103  001A92  0E00               	movlw	0
  6104  001A94  6E43               	movwf	?_exp+2,c
  6105  001A96  0012               	return	
  6106  001A98                     l1253:
  6107  001A98                     l4092:
  6108  001A98  0E00               	movlw	0
  6109  001A9A  6E09               	movwf	___ftdiv@f1,c
  6110  001A9C  0E80               	movlw	128
  6111  001A9E  6E0A               	movwf	___ftdiv@f1+1,c
  6112  001AA0  0E3F               	movlw	63
  6113  001AA2  6E0B               	movwf	___ftdiv@f1+2,c
  6114  001AA4  C041  F00C         	movff	exp@x,___ftdiv@f2
  6115  001AA8  C042  F00D         	movff	exp@x+1,___ftdiv@f2+1
  6116  001AAC  C043  F00E         	movff	exp@x+2,___ftdiv@f2+2
  6117  001AB0  EC8B  F013         	call	___ftdiv	;wreg free
  6118  001AB4  C009  F041         	movff	?___ftdiv,?_exp
  6119  001AB8  C00A  F042         	movff	?___ftdiv+1,?_exp+1
  6120  001ABC  C00B  F043         	movff	?___ftdiv+2,?_exp+2
  6121  001AC0  0012               	return	
  6122  001AC2                     l1252:
  6123  001AC2  C041  F041         	movff	exp@x,?_exp
  6124  001AC6  C042  F042         	movff	exp@x+1,?_exp+1
  6125  001ACA  C043  F043         	movff	exp@x+2,?_exp+2
  6126  001ACE  0012               	return		;funcret
  6127  001AD0                     __end_of_exp:
  6128                           	opt stack 0
  6129                           tblptru	equ	0xFF8
  6130                           tblptrh	equ	0xFF7
  6131                           tblptrl	equ	0xFF6
  6132                           tablat	equ	0xFF5
  6133                           prodh	equ	0xFF4
  6134                           prodl	equ	0xFF3
  6135                           intcon	equ	0xFF2
  6136                           postinc0	equ	0xFEE
  6137                           wreg	equ	0xFE8
  6138                           postinc1	equ	0xFE6
  6139                           postdec1	equ	0xFE5
  6140                           fsr1h	equ	0xFE2
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _ldexp *****************
  6150 ;; Defined at:
  6151 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  value           3   57[COMRAM] unsigned char 
  6154 ;;  newexp          2   60[COMRAM] int 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  3   57[COMRAM] int 
  6159 ;; Registers used:
  6160 ;;		wreg, status,2, status,0
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6166 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6169 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6170 ;;Total ram usage:        7 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; This function calls:
  6173 ;;		Nothing
  6174 ;; This function is called by:
  6175 ;;		_exp
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           	psect	text27
  6180  0029AC                     __ptext27:
  6181                           	opt stack 0
  6182  0029AC                     _ldexp:
  6183                           	opt stack 21
  6184                           
  6185                           ;incstack = 0
  6186  0029AC  503A               	movf	ldexp@value,w,c
  6187  0029AE  103B               	iorwf	ldexp@value+1,w,c
  6188  0029B0  103C               	iorwf	ldexp@value+2,w,c
  6189  0029B2  A4D8               	btfss	status,2,c
  6190  0029B4  D007               	goto	l1271
  6191  0029B6  0E00               	movlw	0
  6192  0029B8  6E3A               	movwf	?_ldexp,c
  6193  0029BA  0E00               	movlw	0
  6194  0029BC  6E3B               	movwf	?_ldexp+1,c
  6195  0029BE  0E00               	movlw	0
  6196  0029C0  6E3C               	movwf	?_ldexp+2,c
  6197  0029C2  0012               	return	
  6198  0029C4                     l1271:
  6199  0029C4  503C               	movf	ldexp@value+2,w,c
  6200  0029C6  0B7F               	andlw	127
  6201  0029C8  6E3F               	movwf	??_ldexp& (0+255),c
  6202  0029CA  6A40               	clrf	(??_ldexp+1)& (0+255),c
  6203  0029CC  90D8               	bcf	status,0,c
  6204  0029CE  363F               	rlcf	??_ldexp,f,c
  6205  0029D0  3640               	rlcf	??_ldexp+1,f,c
  6206  0029D2  503F               	movf	??_ldexp,w,c
  6207  0029D4  263D               	addwf	ldexp@newexp,f,c
  6208  0029D6  5040               	movf	??_ldexp+1,w,c
  6209  0029D8  223E               	addwfc	ldexp@newexp+1,f,c
  6210  0029DA  AE3B               	btfss	ldexp@value+1,7,c
  6211  0029DC  D003               	goto	u3820
  6212  0029DE  6A3F               	clrf	??_ldexp& (0+255),c
  6213  0029E0  2A3F               	incf	??_ldexp& (0+255),f,c
  6214  0029E2  D001               	goto	u3828
  6215  0029E4                     u3820:
  6216  0029E4  6A3F               	clrf	??_ldexp& (0+255),c
  6217  0029E6                     u3828:
  6218  0029E6  503F               	movf	??_ldexp,w,c
  6219  0029E8  263D               	addwf	ldexp@newexp,f,c
  6220  0029EA  0E00               	movlw	0
  6221  0029EC  223E               	addwfc	ldexp@newexp+1,f,c
  6222  0029EE  AE3E               	btfss	ldexp@newexp+1,7,c
  6223  0029F0  D00C               	goto	l1273
  6224  0029F2  0E00               	movlw	0
  6225  0029F4  0100               	movlb	0	; () banked
  6226  0029F6  6F89               	movwf	(_errno+1)& (0+255),b
  6227  0029F8  0E22               	movlw	34
  6228  0029FA  6F88               	movwf	_errno& (0+255),b
  6229  0029FC  0E00               	movlw	0
  6230  0029FE  6E3A               	movwf	?_ldexp,c
  6231  002A00  0E00               	movlw	0
  6232  002A02  6E3B               	movwf	?_ldexp+1,c
  6233  002A04  0E00               	movlw	0
  6234  002A06                     L1:
  6235  002A06  6E3C               	movwf	?_ldexp+2,c
  6236                           
  6237                           ; BSR set to: 0
  6238  002A08  0012               	return	
  6239  002A0A                     l1273:
  6240                           
  6241                           ; BSR set to: 0
  6242  002A0A  BE3E               	btfsc	ldexp@newexp+1,7,c
  6243  002A0C  D016               	goto	l1275
  6244  002A0E  043E               	decf	ldexp@newexp+1,w,c
  6245  002A10  A0D8               	btfss	status,0,c
  6246  002A12  D013               	goto	l1275
  6247  002A14  0E00               	movlw	0
  6248  002A16  0100               	movlb	0	; () banked
  6249  002A18  6F89               	movwf	(_errno+1)& (0+255),b
  6250  002A1A  0E22               	movlw	34
  6251  002A1C  6F88               	movwf	_errno& (0+255),b
  6252                           
  6253                           ; BSR set to: 0
  6254  002A1E  AE3C               	btfss	ldexp@value+2,7,c
  6255  002A20  D006               	goto	l1276
  6256                           
  6257                           ; BSR set to: 0
  6258  002A22  0EFF               	movlw	255
  6259  002A24  6E3A               	movwf	?_ldexp,c
  6260  002A26  0E7F               	movlw	127
  6261  002A28  6E3B               	movwf	?_ldexp+1,c
  6262  002A2A  0EFF               	movlw	255
  6263  002A2C  D7EC               	goto	L1
  6264  002A2E                     l1276:
  6265                           
  6266                           ; BSR set to: 0
  6267                           
  6268                           ; BSR set to: 0
  6269  002A2E  0EFF               	movlw	255
  6270  002A30  6E3A               	movwf	?_ldexp,c
  6271  002A32  0E7F               	movlw	127
  6272  002A34  6E3B               	movwf	?_ldexp+1,c
  6273  002A36  0E7F               	movlw	127
  6274  002A38  D7E6               	goto	L1
  6275  002A3A                     l1275:
  6276                           
  6277                           ; BSR set to: 0
  6278  002A3A  343E               	rlcf	ldexp@newexp+1,w,c
  6279  002A3C  303E               	rrcf	ldexp@newexp+1,w,c
  6280  002A3E  6E40               	movwf	(??_ldexp+1)& (0+255),c
  6281  002A40  303D               	rrcf	ldexp@newexp,w,c
  6282  002A42  6E3F               	movwf	??_ldexp& (0+255),c
  6283  002A44  503C               	movf	ldexp@value+2,w,c
  6284  002A46  183F               	xorwf	??_ldexp,w,c
  6285  002A48  0B80               	andlw	-128
  6286  002A4A  183F               	xorwf	??_ldexp,w,c
  6287  002A4C  6E3C               	movwf	ldexp@value+2,c
  6288  002A4E  C03D  F03F         	movff	ldexp@newexp,??_ldexp
  6289  002A52  0E01               	movlw	1
  6290  002A54  163F               	andwf	??_ldexp,f,c
  6291  002A56  323F               	rrcf	??_ldexp,f,c
  6292  002A58  323F               	rrcf	??_ldexp,f,c
  6293  002A5A  503B               	movf	ldexp@value+1,w,c
  6294  002A5C  183F               	xorwf	??_ldexp,w,c
  6295  002A5E  0B7F               	andlw	-129
  6296  002A60  183F               	xorwf	??_ldexp,w,c
  6297  002A62  6E3B               	movwf	ldexp@value+1,c
  6298  002A64  C03A  F03A         	movff	ldexp@value,?_ldexp
  6299  002A68  C03B  F03B         	movff	ldexp@value+1,?_ldexp+1
  6300  002A6C  C03C  F03C         	movff	ldexp@value+2,?_ldexp+2
  6301  002A70  0012               	return	
  6302  002A72                     __end_of_ldexp:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           intcon	equ	0xFF2
  6311                           postinc0	equ	0xFEE
  6312                           wreg	equ	0xFE8
  6313                           postinc1	equ	0xFE6
  6314                           postdec1	equ	0xFE5
  6315                           fsr1h	equ	0xFE2
  6316                           fsr1l	equ	0xFE1
  6317                           indf2	equ	0xFDF
  6318                           postinc2	equ	0xFDE
  6319                           postdec2	equ	0xFDD
  6320                           fsr2h	equ	0xFDA
  6321                           fsr2l	equ	0xFD9
  6322                           status	equ	0xFD8
  6323                           
  6324 ;; *************** function _floor *****************
  6325 ;; Defined at:
  6326 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  x               3   45[COMRAM] int 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  i               3   48[COMRAM] int 
  6331 ;;  expon           2   51[COMRAM] int 
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  3   45[COMRAM] int 
  6334 ;; Registers used:
  6335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6341 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6342 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6344 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6345 ;;Total ram usage:        8 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:    2
  6348 ;; This function calls:
  6349 ;;		___altoft
  6350 ;;		___ftadd
  6351 ;;		___ftge
  6352 ;;		___fttol
  6353 ;;		_frexp
  6354 ;; This function is called by:
  6355 ;;		_exp
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text28
  6360  0027FC                     __ptext28:
  6361                           	opt stack 0
  6362  0027FC                     _floor:
  6363                           	opt stack 19
  6364                           
  6365                           ;incstack = 0
  6366  0027FC  C02E  F001         	movff	floor@x,frexp@value
  6367  002800  C02F  F002         	movff	floor@x+1,frexp@value+1
  6368  002804  C030  F003         	movff	floor@x+2,frexp@value+2
  6369  002808  0E34               	movlw	low floor@expon
  6370  00280A  6E04               	movwf	frexp@eptr,c
  6371  00280C  0E00               	movlw	high floor@expon
  6372  00280E  6E05               	movwf	frexp@eptr+1,c
  6373  002810  ECF4  F016         	call	_frexp	;wreg free
  6374  002814  AE35               	btfss	floor@expon+1,7,c
  6375  002816  D010               	goto	l1258
  6376  002818  AE30               	btfss	floor@x+2,7,c
  6377  00281A  D007               	goto	l1259
  6378  00281C  0E00               	movlw	0
  6379  00281E  6E2E               	movwf	?_floor,c
  6380  002820  0E80               	movlw	128
  6381  002822  6E2F               	movwf	?_floor+1,c
  6382  002824  0EBF               	movlw	191
  6383  002826  6E30               	movwf	?_floor+2,c
  6384  002828  0012               	return	
  6385  00282A                     l1259:
  6386  00282A  0E00               	movlw	0
  6387  00282C  6E2E               	movwf	?_floor,c
  6388  00282E  0E00               	movlw	0
  6389  002830  6E2F               	movwf	?_floor+1,c
  6390  002832  0E00               	movlw	0
  6391  002834  6E30               	movwf	?_floor+2,c
  6392  002836  0012               	return	
  6393  002838                     l1258:
  6394  002838  5035               	movf	floor@expon+1,w,c
  6395  00283A  E104               	bnz	u3780
  6396  00283C  0E15               	movlw	21
  6397  00283E  5C34               	subwf	floor@expon,w,c
  6398  002840  A0D8               	btfss	status,0,c
  6399  002842  D007               	goto	l1261
  6400  002844                     u3780:
  6401  002844  C02E  F02E         	movff	floor@x,?_floor
  6402  002848  C02F  F02F         	movff	floor@x+1,?_floor+1
  6403  00284C  C030  F030         	movff	floor@x+2,?_floor+2
  6404  002850  0012               	return	
  6405  002852                     l1261:
  6406  002852  C02E  F00D         	movff	floor@x,___fttol@f1
  6407  002856  C02F  F00E         	movff	floor@x+1,___fttol@f1+1
  6408  00285A  C030  F00F         	movff	floor@x+2,___fttol@f1+2
  6409  00285E  EC97  F012         	call	___fttol	;wreg free
  6410  002862  C00D  F01C         	movff	?___fttol,___altoft@c
  6411  002866  C00E  F01D         	movff	?___fttol+1,___altoft@c+1
  6412  00286A  C00F  F01E         	movff	?___fttol+2,___altoft@c+2
  6413  00286E  C010  F01F         	movff	?___fttol+3,___altoft@c+3
  6414  002872  EC5A  F019         	call	___altoft	;wreg free
  6415  002876  C01C  F031         	movff	?___altoft,floor@i
  6416  00287A  C01D  F032         	movff	?___altoft+1,floor@i+1
  6417  00287E  C01E  F033         	movff	?___altoft+2,floor@i+2
  6418  002882  C02E  F001         	movff	floor@x,___ftge@ff1
  6419  002886  C02F  F002         	movff	floor@x+1,___ftge@ff1+1
  6420  00288A  C030  F003         	movff	floor@x+2,___ftge@ff1+2
  6421  00288E  C031  F004         	movff	floor@i,___ftge@ff2
  6422  002892  C032  F005         	movff	floor@i+1,___ftge@ff2+1
  6423  002896  C033  F006         	movff	floor@i+2,___ftge@ff2+2
  6424  00289A  EC3C  F017         	call	___ftge	;wreg free
  6425  00289E  B0D8               	btfsc	status,0,c
  6426  0028A0  D015               	goto	l1262
  6427  0028A2  C031  F022         	movff	floor@i,___ftadd@f1
  6428  0028A6  C032  F023         	movff	floor@i+1,___ftadd@f1+1
  6429  0028AA  C033  F024         	movff	floor@i+2,___ftadd@f1+2
  6430  0028AE  0E00               	movlw	0
  6431  0028B0  6E25               	movwf	___ftadd@f2,c
  6432  0028B2  0E80               	movlw	128
  6433  0028B4  6E26               	movwf	___ftadd@f2+1,c
  6434  0028B6  0EBF               	movlw	191
  6435  0028B8  6E27               	movwf	___ftadd@f2+2,c
  6436  0028BA  EC68  F00D         	call	___ftadd	;wreg free
  6437  0028BE  C022  F02E         	movff	?___ftadd,?_floor
  6438  0028C2  C023  F02F         	movff	?___ftadd+1,?_floor+1
  6439  0028C6  C024  F030         	movff	?___ftadd+2,?_floor+2
  6440  0028CA  0012               	return	
  6441  0028CC                     l1262:
  6442  0028CC  C031  F02E         	movff	floor@i,?_floor
  6443  0028D0  C032  F02F         	movff	floor@i+1,?_floor+1
  6444  0028D4  C033  F030         	movff	floor@i+2,?_floor+2
  6445  0028D8  0012               	return		;funcret
  6446  0028DA                     __end_of_floor:
  6447                           	opt stack 0
  6448                           tblptru	equ	0xFF8
  6449                           tblptrh	equ	0xFF7
  6450                           tblptrl	equ	0xFF6
  6451                           tablat	equ	0xFF5
  6452                           prodh	equ	0xFF4
  6453                           prodl	equ	0xFF3
  6454                           intcon	equ	0xFF2
  6455                           postinc0	equ	0xFEE
  6456                           wreg	equ	0xFE8
  6457                           postinc1	equ	0xFE6
  6458                           postdec1	equ	0xFE5
  6459                           fsr1h	equ	0xFE2
  6460                           fsr1l	equ	0xFE1
  6461                           indf2	equ	0xFDF
  6462                           postinc2	equ	0xFDE
  6463                           postdec2	equ	0xFDD
  6464                           fsr2h	equ	0xFDA
  6465                           fsr2l	equ	0xFD9
  6466                           status	equ	0xFD8
  6467                           
  6468 ;; *************** function _frexp *****************
  6469 ;; Defined at:
  6470 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  value           3    0[COMRAM] int 
  6473 ;;  eptr            2    3[COMRAM] PTR int 
  6474 ;;		 -> log@exponent(2), floor@expon(2), 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;		None
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  3    0[COMRAM] PTR int 
  6479 ;; Registers used:
  6480 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6486 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6489 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6490 ;;Total ram usage:        7 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; This function calls:
  6493 ;;		Nothing
  6494 ;; This function is called by:
  6495 ;;		_floor
  6496 ;;		_log
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text29
  6501  002DE8                     __ptext29:
  6502                           	opt stack 0
  6503  002DE8                     _frexp:
  6504                           	opt stack 21
  6505                           
  6506                           ;incstack = 0
  6507  002DE8  5001               	movf	frexp@value,w,c
  6508  002DEA  1002               	iorwf	frexp@value+1,w,c
  6509  002DEC  1003               	iorwf	frexp@value+2,w,c
  6510  002DEE  A4D8               	btfss	status,2,c
  6511  002DF0  D00F               	goto	l1267
  6512  002DF2  C004  FFD9         	movff	frexp@eptr,fsr2l
  6513  002DF6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6514  002DFA  0E00               	movlw	0
  6515  002DFC  6EDE               	movwf	postinc2,c
  6516  002DFE  0E00               	movlw	0
  6517  002E00  6EDD               	movwf	postdec2,c
  6518  002E02  0E00               	movlw	0
  6519  002E04  6E01               	movwf	?_frexp,c
  6520  002E06  0E00               	movlw	0
  6521  002E08  6E02               	movwf	?_frexp+1,c
  6522  002E0A  0E00               	movlw	0
  6523  002E0C  6E03               	movwf	?_frexp+2,c
  6524  002E0E  0012               	return	
  6525  002E10                     l1267:
  6526  002E10  5003               	movf	frexp@value+2,w,c
  6527  002E12  0B7F               	andlw	127
  6528  002E14  6E06               	movwf	??_frexp& (0+255),c
  6529  002E16  6A07               	clrf	(??_frexp+1)& (0+255),c
  6530  002E18  90D8               	bcf	status,0,c
  6531  002E1A  3606               	rlcf	??_frexp,f,c
  6532  002E1C  3607               	rlcf	??_frexp+1,f,c
  6533  002E1E  C004  FFD9         	movff	frexp@eptr,fsr2l
  6534  002E22  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6535  002E26  C006  FFDE         	movff	??_frexp,postinc2
  6536  002E2A  C007  FFDD         	movff	??_frexp+1,postdec2
  6537  002E2E  AE02               	btfss	frexp@value+1,7,c
  6538  002E30  D003               	goto	u3590
  6539  002E32  6A06               	clrf	??_frexp& (0+255),c
  6540  002E34  2A06               	incf	??_frexp& (0+255),f,c
  6541  002E36  D001               	goto	u3598
  6542  002E38                     u3590:
  6543  002E38  6A06               	clrf	??_frexp& (0+255),c
  6544  002E3A                     u3598:
  6545  002E3A  5006               	movf	??_frexp,w,c
  6546  002E3C  C004  FFD9         	movff	frexp@eptr,fsr2l
  6547  002E40  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6548  002E44  12DE               	iorwf	postinc2,f,c
  6549  002E46  0E00               	movlw	0
  6550  002E48  12DD               	iorwf	postdec2,f,c
  6551  002E4A  C004  FFD9         	movff	frexp@eptr,fsr2l
  6552  002E4E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6553  002E52  0E82               	movlw	130
  6554  002E54  26DE               	addwf	postinc2,f,c
  6555  002E56  0EFF               	movlw	255
  6556  002E58  22DD               	addwfc	postdec2,f,c
  6557  002E5A  8003               	bsf	frexp@value+2,0,c
  6558  002E5C  8203               	bsf	frexp@value+2,1,c
  6559  002E5E  8403               	bsf	frexp@value+2,2,c
  6560  002E60  8603               	bsf	frexp@value+2,3,c
  6561  002E62  8803               	bsf	frexp@value+2,4,c
  6562  002E64  8A03               	bsf	frexp@value+2,5,c
  6563  002E66  9C03               	bcf	frexp@value+2,6,c
  6564  002E68  9E02               	bcf	frexp@value+1,7,c
  6565  002E6A  C001  F001         	movff	frexp@value,?_frexp
  6566  002E6E  C002  F002         	movff	frexp@value+1,?_frexp+1
  6567  002E72  C003  F003         	movff	frexp@value+2,?_frexp+2
  6568  002E76  0012               	return	
  6569  002E78                     __end_of_frexp:
  6570                           	opt stack 0
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           intcon	equ	0xFF2
  6578                           postinc0	equ	0xFEE
  6579                           wreg	equ	0xFE8
  6580                           postinc1	equ	0xFE6
  6581                           postdec1	equ	0xFE5
  6582                           fsr1h	equ	0xFE2
  6583                           fsr1l	equ	0xFE1
  6584                           indf2	equ	0xFDF
  6585                           postinc2	equ	0xFDE
  6586                           postdec2	equ	0xFDD
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function ___fttol *****************
  6592 ;; Defined at:
  6593 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;  f1              3   12[COMRAM] float 
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  lval            4   22[COMRAM] unsigned long 
  6598 ;;  exp1            1   26[COMRAM] unsigned char 
  6599 ;;  sign1           1   21[COMRAM] unsigned char 
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  4   12[COMRAM] long 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6610 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6611 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6612 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6613 ;;Total ram usage:       15 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_covertir_valores_de_array_a_escala_decimal
  6619 ;;		_pow
  6620 ;;		_exp
  6621 ;;		_floor
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           	psect	text30
  6626  00252E                     __ptext30:
  6627                           	opt stack 0
  6628  00252E                     ___fttol:
  6629                           	opt stack 20
  6630                           
  6631                           ;incstack = 0
  6632  00252E  C00F  F011         	movff	___fttol@f1+2,??___fttol
  6633  002532  6A12               	clrf	(??___fttol+1)& (0+255),c
  6634  002534  6A13               	clrf	(??___fttol+2)& (0+255),c
  6635  002536  340E               	rlcf	___fttol@f1+1,w,c
  6636  002538  3611               	rlcf	??___fttol& (0+255),f,c
  6637  00253A  E301               	bnc	u3501
  6638  00253C  8012               	bsf	(??___fttol+1)& (0+255),0,c
  6639  00253E                     u3501:
  6640  00253E  5011               	movf	??___fttol,w,c
  6641  002540  6E1B               	movwf	___fttol@exp1,c
  6642  002542  501B               	movf	___fttol@exp1,w,c
  6643  002544  A4D8               	btfss	status,2,c
  6644  002546  D009               	goto	l963
  6645  002548  0E00               	movlw	0
  6646  00254A  6E0D               	movwf	?___fttol,c
  6647  00254C  0E00               	movlw	0
  6648  00254E  6E0E               	movwf	?___fttol+1,c
  6649  002550  0E00               	movlw	0
  6650  002552  6E0F               	movwf	?___fttol+2,c
  6651  002554  0E00               	movlw	0
  6652  002556  6E10               	movwf	?___fttol+3,c
  6653  002558  0012               	return	
  6654  00255A                     l963:
  6655  00255A  0E17               	movlw	23
  6656  00255C  6E11               	movwf	??___fttol& (0+255),c
  6657  00255E  C00D  F012         	movff	___fttol@f1,??___fttol+1
  6658  002562  C00E  F013         	movff	___fttol@f1+1,??___fttol+2
  6659  002566  C00F  F014         	movff	___fttol@f1+2,??___fttol+3
  6660  00256A  2811               	incf	??___fttol,w,c
  6661  00256C  6E15               	movwf	(??___fttol+4)& (0+255),c
  6662  00256E  D004               	goto	u3520
  6663  002570                     u3525:
  6664  002570  90D8               	bcf	status,0,c
  6665  002572  3214               	rrcf	??___fttol+3,f,c
  6666  002574  3213               	rrcf	??___fttol+2,f,c
  6667  002576  3212               	rrcf	??___fttol+1,f,c
  6668  002578                     u3520:
  6669  002578  2E15               	decfsz	(??___fttol+4)& (0+255),f,c
  6670  00257A  D7FA               	goto	u3525
  6671  00257C  5012               	movf	??___fttol+1,w,c
  6672  00257E  6E16               	movwf	___fttol@sign1,c
  6673  002580  8E0E               	bsf	___fttol@f1+1,7,c
  6674  002582  0EFF               	movlw	255
  6675  002584  160D               	andwf	___fttol@f1,f,c
  6676  002586  0EFF               	movlw	255
  6677  002588  160E               	andwf	___fttol@f1+1,f,c
  6678  00258A  0E00               	movlw	0
  6679  00258C  160F               	andwf	___fttol@f1+2,f,c
  6680  00258E  500D               	movf	___fttol@f1,w,c
  6681  002590  6E17               	movwf	___fttol@lval,c
  6682  002592  500E               	movf	___fttol@f1+1,w,c
  6683  002594  6E18               	movwf	___fttol@lval+1,c
  6684  002596  500F               	movf	___fttol@f1+2,w,c
  6685  002598  6E19               	movwf	___fttol@lval+2,c
  6686  00259A  6A1A               	clrf	___fttol@lval+3,c
  6687  00259C  0E8E               	movlw	142
  6688  00259E  5E1B               	subwf	___fttol@exp1,f,c
  6689  0025A0  AE1B               	btfss	___fttol@exp1,7,c
  6690  0025A2  D016               	goto	l965
  6691  0025A4  501B               	movf	___fttol@exp1,w,c
  6692  0025A6  0A80               	xorlw	128
  6693  0025A8  0F8F               	addlw	143
  6694  0025AA  B0D8               	btfsc	status,0,c
  6695  0025AC  D009               	goto	l966
  6696  0025AE  0E00               	movlw	0
  6697  0025B0  6E0D               	movwf	?___fttol,c
  6698  0025B2  0E00               	movlw	0
  6699  0025B4  6E0E               	movwf	?___fttol+1,c
  6700  0025B6  0E00               	movlw	0
  6701  0025B8  6E0F               	movwf	?___fttol+2,c
  6702  0025BA  0E00               	movlw	0
  6703  0025BC  6E10               	movwf	?___fttol+3,c
  6704  0025BE  0012               	return	
  6705  0025C0                     l966:
  6706  0025C0  90D8               	bcf	status,0,c
  6707  0025C2  321A               	rrcf	___fttol@lval+3,f,c
  6708  0025C4  3219               	rrcf	___fttol@lval+2,f,c
  6709  0025C6  3218               	rrcf	___fttol@lval+1,f,c
  6710  0025C8  3217               	rrcf	___fttol@lval,f,c
  6711  0025CA  3E1B               	incfsz	___fttol@exp1,f,c
  6712  0025CC  D7F9               	goto	l966
  6713  0025CE  D015               	goto	u3560
  6714  0025D0                     l965:
  6715  0025D0  0E17               	movlw	23
  6716  0025D2  641B               	cpfsgt	___fttol@exp1,c
  6717  0025D4  D00F               	goto	l971
  6718  0025D6  0E00               	movlw	0
  6719  0025D8  6E0D               	movwf	?___fttol,c
  6720  0025DA  0E00               	movlw	0
  6721  0025DC  6E0E               	movwf	?___fttol+1,c
  6722  0025DE  0E00               	movlw	0
  6723  0025E0  6E0F               	movwf	?___fttol+2,c
  6724  0025E2  0E00               	movlw	0
  6725  0025E4  6E10               	movwf	?___fttol+3,c
  6726  0025E6  0012               	return	
  6727  0025E8  90D8               	bcf	status,0,c
  6728  0025EA  3617               	rlcf	___fttol@lval,f,c
  6729  0025EC  3618               	rlcf	___fttol@lval+1,f,c
  6730  0025EE  3619               	rlcf	___fttol@lval+2,f,c
  6731  0025F0  361A               	rlcf	___fttol@lval+3,f,c
  6732  0025F2  061B               	decf	___fttol@exp1,f,c
  6733  0025F4                     l971:
  6734  0025F4  501B               	movf	___fttol@exp1,w,c
  6735  0025F6  A4D8               	btfss	status,2,c
  6736  0025F8  D7F7               	goto	l972
  6737  0025FA                     u3560:
  6738  0025FA  5016               	movf	___fttol@sign1,w,c
  6739  0025FC  B4D8               	btfsc	status,2,c
  6740  0025FE  D008               	goto	l974
  6741  002600  1E1A               	comf	___fttol@lval+3,f,c
  6742  002602  1E19               	comf	___fttol@lval+2,f,c
  6743  002604  1E18               	comf	___fttol@lval+1,f,c
  6744  002606  6C17               	negf	___fttol@lval,c
  6745  002608  0E00               	movlw	0
  6746  00260A  2218               	addwfc	___fttol@lval+1,f,c
  6747  00260C  2219               	addwfc	___fttol@lval+2,f,c
  6748  00260E  221A               	addwfc	___fttol@lval+3,f,c
  6749  002610                     l974:
  6750  002610  C017  F00D         	movff	___fttol@lval,?___fttol
  6751  002614  C018  F00E         	movff	___fttol@lval+1,?___fttol+1
  6752  002618  C019  F00F         	movff	___fttol@lval+2,?___fttol+2
  6753  00261C  C01A  F010         	movff	___fttol@lval+3,?___fttol+3
  6754  002620  0012               	return	
  6755  002622                     __end_of___fttol:
  6756                           	opt stack 0
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon	equ	0xFF2
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           postinc1	equ	0xFE6
  6767                           postdec1	equ	0xFE5
  6768                           fsr1h	equ	0xFE2
  6769                           fsr1l	equ	0xFE1
  6770                           indf2	equ	0xFDF
  6771                           postinc2	equ	0xFDE
  6772                           postdec2	equ	0xFDD
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function ___ftge *****************
  6778 ;; Defined at:
  6779 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  ff1             3    0[COMRAM] float 
  6782 ;;  ff2             3    3[COMRAM] float 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;		None
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, status,2, status,0
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6794 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6796 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6797 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6798 ;;Total ram usage:        9 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; This function calls:
  6801 ;;		Nothing
  6802 ;; This function is called by:
  6803 ;;		_pow
  6804 ;;		_exp
  6805 ;;		_floor
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text31
  6810  002E78                     __ptext31:
  6811                           	opt stack 0
  6812  002E78                     ___ftge:
  6813                           	opt stack 20
  6814                           
  6815                           ;incstack = 0
  6816  002E78  AE03               	btfss	___ftge@ff1+2,7,c
  6817  002E7A  D016               	goto	l935
  6818  002E7C  C001  F007         	movff	___ftge@ff1,??___ftge
  6819  002E80  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6820  002E84  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6821  002E88  1E07               	comf	??___ftge,f,c
  6822  002E8A  1E08               	comf	??___ftge+1,f,c
  6823  002E8C  1E09               	comf	??___ftge+2,f,c
  6824  002E8E  2A07               	incf	??___ftge,f,c
  6825  002E90  0E00               	movlw	0
  6826  002E92  2208               	addwfc	??___ftge+1,f,c
  6827  002E94  2209               	addwfc	??___ftge+2,f,c
  6828  002E96  0E00               	movlw	0
  6829  002E98  2407               	addwf	??___ftge,w,c
  6830  002E9A  6E01               	movwf	___ftge@ff1,c
  6831  002E9C  0E00               	movlw	0
  6832  002E9E  2008               	addwfc	??___ftge+1,w,c
  6833  002EA0  6E02               	movwf	___ftge@ff1+1,c
  6834  002EA2  0E80               	movlw	128
  6835  002EA4  2009               	addwfc	??___ftge+2,w,c
  6836  002EA6  6E03               	movwf	___ftge@ff1+2,c
  6837  002EA8                     l935:
  6838  002EA8  AE06               	btfss	___ftge@ff2+2,7,c
  6839  002EAA  D016               	goto	l936
  6840  002EAC  C004  F007         	movff	___ftge@ff2,??___ftge
  6841  002EB0  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6842  002EB4  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6843  002EB8  1E07               	comf	??___ftge,f,c
  6844  002EBA  1E08               	comf	??___ftge+1,f,c
  6845  002EBC  1E09               	comf	??___ftge+2,f,c
  6846  002EBE  2A07               	incf	??___ftge,f,c
  6847  002EC0  0E00               	movlw	0
  6848  002EC2  2208               	addwfc	??___ftge+1,f,c
  6849  002EC4  2209               	addwfc	??___ftge+2,f,c
  6850  002EC6  0E00               	movlw	0
  6851  002EC8  2407               	addwf	??___ftge,w,c
  6852  002ECA  6E04               	movwf	___ftge@ff2,c
  6853  002ECC  0E00               	movlw	0
  6854  002ECE  2008               	addwfc	??___ftge+1,w,c
  6855  002ED0  6E05               	movwf	___ftge@ff2+1,c
  6856  002ED2  0E80               	movlw	128
  6857  002ED4  2009               	addwfc	??___ftge+2,w,c
  6858  002ED6  6E06               	movwf	___ftge@ff2+2,c
  6859  002ED8                     l936:
  6860  002ED8  0E00               	movlw	0
  6861  002EDA  1A01               	xorwf	___ftge@ff1,f,c
  6862  002EDC  0E00               	movlw	0
  6863  002EDE  1A02               	xorwf	___ftge@ff1+1,f,c
  6864  002EE0  0E80               	movlw	128
  6865  002EE2  1A03               	xorwf	___ftge@ff1+2,f,c
  6866  002EE4  0E00               	movlw	0
  6867  002EE6  1A04               	xorwf	___ftge@ff2,f,c
  6868  002EE8  0E00               	movlw	0
  6869  002EEA  1A05               	xorwf	___ftge@ff2+1,f,c
  6870  002EEC  0E80               	movlw	128
  6871  002EEE  1A06               	xorwf	___ftge@ff2+2,f,c
  6872  002EF0  5004               	movf	___ftge@ff2,w,c
  6873  002EF2  5C01               	subwf	___ftge@ff1,w,c
  6874  002EF4  5005               	movf	___ftge@ff2+1,w,c
  6875  002EF6  5802               	subwfb	___ftge@ff1+1,w,c
  6876  002EF8  5006               	movf	___ftge@ff2+2,w,c
  6877  002EFA  5803               	subwfb	___ftge@ff1+2,w,c
  6878  002EFC  B0D8               	btfsc	status,0,c
  6879  002EFE  D002               	goto	l3226
  6880  002F00  90D8               	bcf	status,0,c
  6881  002F02  0012               	return	
  6882  002F04                     l3226:
  6883  002F04  80D8               	bsf	status,0,c
  6884  002F06  0012               	return	
  6885  002F08                     __end_of___ftge:
  6886                           	opt stack 0
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           intcon	equ	0xFF2
  6894                           postinc0	equ	0xFEE
  6895                           wreg	equ	0xFE8
  6896                           postinc1	equ	0xFE6
  6897                           postdec1	equ	0xFE5
  6898                           fsr1h	equ	0xFE2
  6899                           fsr1l	equ	0xFE1
  6900                           indf2	equ	0xFDF
  6901                           postinc2	equ	0xFDE
  6902                           postdec2	equ	0xFDD
  6903                           fsr2h	equ	0xFDA
  6904                           fsr2l	equ	0xFD9
  6905                           status	equ	0xFD8
  6906                           
  6907 ;; *************** function ___altoft *****************
  6908 ;; Defined at:
  6909 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\altoft.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  c               4   27[COMRAM] long 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  sign            1   36[COMRAM] unsigned char 
  6914 ;;  exp             1   35[COMRAM] unsigned char 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  3   27[COMRAM] float 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6924 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6925 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6926 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6927 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6928 ;;Total ram usage:       10 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    1
  6931 ;; This function calls:
  6932 ;;		___ftpack
  6933 ;; This function is called by:
  6934 ;;		_floor
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text32
  6939  0032B4                     __ptext32:
  6940                           	opt stack 0
  6941  0032B4                     ___altoft:
  6942                           	opt stack 19
  6943                           
  6944                           ;incstack = 0
  6945  0032B4  0E00               	movlw	0
  6946  0032B6  6E25               	movwf	___altoft@sign,c
  6947  0032B8  0E8E               	movlw	142
  6948  0032BA  6E24               	movwf	___altoft@exp,c
  6949  0032BC  AE1F               	btfss	___altoft@c+3,7,c
  6950  0032BE  D011               	goto	l712
  6951  0032C0  1E1F               	comf	___altoft@c+3,f,c
  6952  0032C2  1E1E               	comf	___altoft@c+2,f,c
  6953  0032C4  1E1D               	comf	___altoft@c+1,f,c
  6954  0032C6  6C1C               	negf	___altoft@c,c
  6955  0032C8  0E00               	movlw	0
  6956  0032CA  221D               	addwfc	___altoft@c+1,f,c
  6957  0032CC  221E               	addwfc	___altoft@c+2,f,c
  6958  0032CE  221F               	addwfc	___altoft@c+3,f,c
  6959  0032D0  0E01               	movlw	1
  6960  0032D2  6E25               	movwf	___altoft@sign,c
  6961  0032D4  D006               	goto	l712
  6962  0032D6  90D8               	bcf	status,0,c
  6963  0032D8  321F               	rrcf	___altoft@c+3,f,c
  6964  0032DA  321E               	rrcf	___altoft@c+2,f,c
  6965  0032DC  321D               	rrcf	___altoft@c+1,f,c
  6966  0032DE  321C               	rrcf	___altoft@c,f,c
  6967  0032E0  2A24               	incf	___altoft@exp,f,c
  6968  0032E2                     l712:
  6969  0032E2  0E00               	movlw	0
  6970  0032E4  141C               	andwf	___altoft@c,w,c
  6971  0032E6  6E20               	movwf	??___altoft& (0+255),c
  6972  0032E8  0E00               	movlw	0
  6973  0032EA  141D               	andwf	___altoft@c+1,w,c
  6974  0032EC  6E21               	movwf	(??___altoft+1)& (0+255),c
  6975  0032EE  0E00               	movlw	0
  6976  0032F0  141E               	andwf	___altoft@c+2,w,c
  6977  0032F2  6E22               	movwf	(??___altoft+2)& (0+255),c
  6978  0032F4  0EFF               	movlw	255
  6979  0032F6  141F               	andwf	___altoft@c+3,w,c
  6980  0032F8  6E23               	movwf	(??___altoft+3)& (0+255),c
  6981  0032FA  5020               	movf	??___altoft,w,c
  6982  0032FC  1021               	iorwf	??___altoft+1,w,c
  6983  0032FE  1022               	iorwf	??___altoft+2,w,c
  6984  003300  1023               	iorwf	??___altoft+3,w,c
  6985  003302  A4D8               	btfss	status,2,c
  6986  003304  D7E8               	goto	l713
  6987  003306  C01C  F001         	movff	___altoft@c,___ftpack@arg
  6988  00330A  C01D  F002         	movff	___altoft@c+1,___ftpack@arg+1
  6989  00330E  C01E  F003         	movff	___altoft@c+2,___ftpack@arg+2
  6990  003312  C024  F004         	movff	___altoft@exp,___ftpack@exp
  6991  003316  C025  F005         	movff	___altoft@sign,___ftpack@sign
  6992  00331A  ECFC  F015         	call	___ftpack	;wreg free
  6993  00331E  C001  F01C         	movff	?___ftpack,?___altoft
  6994  003322  C002  F01D         	movff	?___ftpack+1,?___altoft+1
  6995  003326  C003  F01E         	movff	?___ftpack+2,?___altoft+2
  6996  00332A  0012               	return	
  6997  00332C                     __end_of___altoft:
  6998                           	opt stack 0
  6999                           tblptru	equ	0xFF8
  7000                           tblptrh	equ	0xFF7
  7001                           tblptrl	equ	0xFF6
  7002                           tablat	equ	0xFF5
  7003                           prodh	equ	0xFF4
  7004                           prodl	equ	0xFF3
  7005                           intcon	equ	0xFF2
  7006                           postinc0	equ	0xFEE
  7007                           wreg	equ	0xFE8
  7008                           postinc1	equ	0xFE6
  7009                           postdec1	equ	0xFE5
  7010                           fsr1h	equ	0xFE2
  7011                           fsr1l	equ	0xFE1
  7012                           indf2	equ	0xFDF
  7013                           postinc2	equ	0xFDE
  7014                           postdec2	equ	0xFDD
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _eval_poly *****************
  7020 ;; Defined at:
  7021 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  x               3   45[COMRAM] float 
  7024 ;;  d               2   48[COMRAM] PTR const 
  7025 ;;		 -> log@coeff(27), exp@coeff(30), 
  7026 ;;  n               2   50[COMRAM] int 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  res             3   54[COMRAM] int 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  3   45[COMRAM] int 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7038 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7042 ;;Total ram usage:       12 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    2
  7045 ;; This function calls:
  7046 ;;		___ftadd
  7047 ;;		___ftmul
  7048 ;;		___wmul
  7049 ;; This function is called by:
  7050 ;;		_exp
  7051 ;;		_log
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text33
  7056  0028DA                     __ptext33:
  7057                           	opt stack 0
  7058  0028DA                     _eval_poly:
  7059                           	opt stack 19
  7060                           
  7061                           ;incstack = 0
  7062  0028DA  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  7063  0028DE  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  7064  0028E2  0E00               	movlw	0
  7065  0028E4  6E1F               	movwf	___wmul@multiplicand+1,c
  7066  0028E6  0E03               	movlw	3
  7067  0028E8  6E1E               	movwf	___wmul@multiplicand,c
  7068  0028EA  EC67  F01C         	call	___wmul	;wreg free
  7069  0028EE  C031  F035         	movff	eval_poly@d,??_eval_poly
  7070  0028F2  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  7071  0028F6  501C               	movf	?___wmul,w,c
  7072  0028F8  2635               	addwf	??_eval_poly,f,c
  7073  0028FA  501D               	movf	?___wmul+1,w,c
  7074  0028FC  2236               	addwfc	??_eval_poly+1,f,c
  7075  0028FE  C035  FFF6         	movff	??_eval_poly,tblptrl
  7076  002902  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  7077  002906                     	if	0	;tblptru may be non-zero
  7078  002906                     	endif
  7079  002906                     	if	0	;tblptru may be non-zero
  7080  002906                     	endif
  7081  002906  0009               	tblrd		*+
  7082  002908  CFF5 F037          	movff	tablat,eval_poly@res
  7083  00290C  0009               	tblrd		*+
  7084  00290E  CFF5 F038          	movff	tablat,eval_poly@res+1
  7085  002912  000A               	tblrd		*-
  7086  002914  CFF5 F039          	movff	tablat,eval_poly@res+2
  7087  002918  D03E               	goto	l1297
  7088  00291A  C037  F010         	movff	eval_poly@res,___ftmul@f2
  7089  00291E  C038  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  7090  002922  C039  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  7091  002926  C02E  F00D         	movff	eval_poly@x,___ftmul@f1
  7092  00292A  C02F  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  7093  00292E  C030  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  7094  002932  EC11  F013         	call	___ftmul	;wreg free
  7095  002936  C00D  F022         	movff	?___ftmul,___ftadd@f1
  7096  00293A  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  7097  00293E  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  7098  002942  0E00               	movlw	0
  7099  002944  6E1F               	movwf	___wmul@multiplicand+1,c
  7100  002946  0E03               	movlw	3
  7101  002948  6E1E               	movwf	___wmul@multiplicand,c
  7102  00294A  0633               	decf	eval_poly@n,f,c
  7103  00294C  A0D8               	btfss	status,0,c
  7104  00294E  0634               	decf	eval_poly@n+1,f,c
  7105  002950  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  7106  002954  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  7107  002958  EC67  F01C         	call	___wmul	;wreg free
  7108  00295C  C031  F035         	movff	eval_poly@d,??_eval_poly
  7109  002960  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  7110  002964  501C               	movf	?___wmul,w,c
  7111  002966  2635               	addwf	??_eval_poly,f,c
  7112  002968  501D               	movf	?___wmul+1,w,c
  7113  00296A  2236               	addwfc	??_eval_poly+1,f,c
  7114  00296C  C035  FFF6         	movff	??_eval_poly,tblptrl
  7115  002970  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  7116  002974                     	if	0	;tblptru may be non-zero
  7117  002974                     	endif
  7118  002974                     	if	0	;tblptru may be non-zero
  7119  002974                     	endif
  7120  002974  0009               	tblrd		*+
  7121  002976  CFF5 F025          	movff	tablat,___ftadd@f2
  7122  00297A  0009               	tblrd		*+
  7123  00297C  CFF5 F026          	movff	tablat,___ftadd@f2+1
  7124  002980  000A               	tblrd		*-
  7125  002982  CFF5 F027          	movff	tablat,___ftadd@f2+2
  7126  002986  EC68  F00D         	call	___ftadd	;wreg free
  7127  00298A  C022  F037         	movff	?___ftadd,eval_poly@res
  7128  00298E  C023  F038         	movff	?___ftadd+1,eval_poly@res+1
  7129  002992  C024  F039         	movff	?___ftadd+2,eval_poly@res+2
  7130  002996                     l1297:
  7131  002996  5033               	movf	eval_poly@n,w,c
  7132  002998  1034               	iorwf	eval_poly@n+1,w,c
  7133  00299A  A4D8               	btfss	status,2,c
  7134  00299C  D7BE               	goto	l1298
  7135  00299E  C037  F02E         	movff	eval_poly@res,?_eval_poly
  7136  0029A2  C038  F02F         	movff	eval_poly@res+1,?_eval_poly+1
  7137  0029A6  C039  F030         	movff	eval_poly@res+2,?_eval_poly+2
  7138  0029AA  0012               	return		;funcret
  7139  0029AC                     __end_of_eval_poly:
  7140                           	opt stack 0
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           intcon	equ	0xFF2
  7148                           postinc0	equ	0xFEE
  7149                           wreg	equ	0xFE8
  7150                           postinc1	equ	0xFE6
  7151                           postdec1	equ	0xFE5
  7152                           fsr1h	equ	0xFE2
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function ___ftmul *****************
  7162 ;; Defined at:
  7163 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  f1              3   12[COMRAM] float 
  7166 ;;  f2              3   15[COMRAM] float 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  7169 ;;  sign            1   26[COMRAM] unsigned char 
  7170 ;;  cntr            1   25[COMRAM] unsigned char 
  7171 ;;  exp             1   21[COMRAM] unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  3   12[COMRAM] float 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7181 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7182 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7183 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7184 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7185 ;;Total ram usage:       15 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    1
  7188 ;; This function calls:
  7189 ;;		___ftpack
  7190 ;; This function is called by:
  7191 ;;		_pow
  7192 ;;		_exp
  7193 ;;		_log
  7194 ;;		_eval_poly
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           	psect	text34
  7199  002622                     __ptext34:
  7200                           	opt stack 0
  7201  002622                     ___ftmul:
  7202                           	opt stack 19
  7203                           
  7204                           ;incstack = 0
  7205  002622  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  7206  002626  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7207  002628  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7208  00262A  340E               	rlcf	___ftmul@f1+1,w,c
  7209  00262C  3613               	rlcf	??___ftmul& (0+255),f,c
  7210  00262E  E301               	bnc	u3411
  7211  002630  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7212  002632                     u3411:
  7213  002632  5013               	movf	??___ftmul,w,c
  7214  002634  6E16               	movwf	___ftmul@exp,c
  7215  002636  5016               	movf	___ftmul@exp,w,c
  7216  002638  A4D8               	btfss	status,2,c
  7217  00263A  D007               	goto	l942
  7218  00263C  0E00               	movlw	0
  7219  00263E  6E0D               	movwf	?___ftmul,c
  7220  002640  0E00               	movlw	0
  7221  002642  6E0E               	movwf	?___ftmul+1,c
  7222  002644  0E00               	movlw	0
  7223  002646  6E0F               	movwf	?___ftmul+2,c
  7224  002648  0012               	return	
  7225  00264A                     l942:
  7226  00264A  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  7227  00264E  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7228  002650  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7229  002652  3411               	rlcf	___ftmul@f2+1,w,c
  7230  002654  3613               	rlcf	??___ftmul& (0+255),f,c
  7231  002656  E301               	bnc	u3431
  7232  002658  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7233  00265A                     u3431:
  7234  00265A  5013               	movf	??___ftmul,w,c
  7235  00265C  6E1B               	movwf	___ftmul@sign,c
  7236  00265E  501B               	movf	___ftmul@sign,w,c
  7237  002660  A4D8               	btfss	status,2,c
  7238  002662  D007               	goto	l944
  7239  002664  0E00               	movlw	0
  7240  002666  6E0D               	movwf	?___ftmul,c
  7241  002668  0E00               	movlw	0
  7242  00266A  6E0E               	movwf	?___ftmul+1,c
  7243  00266C  0E00               	movlw	0
  7244  00266E  6E0F               	movwf	?___ftmul+2,c
  7245  002670  0012               	return	
  7246  002672                     l944:
  7247  002672  501B               	movf	___ftmul@sign,w,c
  7248  002674  0F7B               	addlw	123
  7249  002676  2616               	addwf	___ftmul@exp,f,c
  7250  002678  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  7251  00267C  5012               	movf	___ftmul@f2+2,w,c
  7252  00267E  1A1B               	xorwf	___ftmul@sign,f,c
  7253  002680  0E80               	movlw	128
  7254  002682  161B               	andwf	___ftmul@sign,f,c
  7255  002684  8E0E               	bsf	___ftmul@f1+1,7,c
  7256  002686  8E11               	bsf	___ftmul@f2+1,7,c
  7257  002688  0EFF               	movlw	255
  7258  00268A  1610               	andwf	___ftmul@f2,f,c
  7259  00268C  0EFF               	movlw	255
  7260  00268E  1611               	andwf	___ftmul@f2+1,f,c
  7261  002690  0E00               	movlw	0
  7262  002692  1612               	andwf	___ftmul@f2+2,f,c
  7263  002694  0E00               	movlw	0
  7264  002696  6E17               	movwf	___ftmul@f3_as_product,c
  7265  002698  0E00               	movlw	0
  7266  00269A  6E18               	movwf	___ftmul@f3_as_product+1,c
  7267  00269C  0E00               	movlw	0
  7268  00269E  6E19               	movwf	___ftmul@f3_as_product+2,c
  7269  0026A0  0E07               	movlw	7
  7270  0026A2  6E1A               	movwf	___ftmul@cntr,c
  7271  0026A4  A00D               	btfss	___ftmul@f1,0,c
  7272  0026A6  D006               	goto	l946
  7273  0026A8  5010               	movf	___ftmul@f2,w,c
  7274  0026AA  2617               	addwf	___ftmul@f3_as_product,f,c
  7275  0026AC  5011               	movf	___ftmul@f2+1,w,c
  7276  0026AE  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7277  0026B0  5012               	movf	___ftmul@f2+2,w,c
  7278  0026B2  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7279  0026B4                     l946:
  7280  0026B4  90D8               	bcf	status,0,c
  7281  0026B6  320F               	rrcf	___ftmul@f1+2,f,c
  7282  0026B8  320E               	rrcf	___ftmul@f1+1,f,c
  7283  0026BA  320D               	rrcf	___ftmul@f1,f,c
  7284  0026BC  90D8               	bcf	status,0,c
  7285  0026BE  3610               	rlcf	___ftmul@f2,f,c
  7286  0026C0  3611               	rlcf	___ftmul@f2+1,f,c
  7287  0026C2  3612               	rlcf	___ftmul@f2+2,f,c
  7288  0026C4  2E1A               	decfsz	___ftmul@cntr,f,c
  7289  0026C6  D7EE               	goto	l945
  7290  0026C8  0E09               	movlw	9
  7291  0026CA  6E1A               	movwf	___ftmul@cntr,c
  7292  0026CC  A00D               	btfss	___ftmul@f1,0,c
  7293  0026CE  D006               	goto	l949
  7294  0026D0  5010               	movf	___ftmul@f2,w,c
  7295  0026D2  2617               	addwf	___ftmul@f3_as_product,f,c
  7296  0026D4  5011               	movf	___ftmul@f2+1,w,c
  7297  0026D6  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7298  0026D8  5012               	movf	___ftmul@f2+2,w,c
  7299  0026DA  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7300  0026DC                     l949:
  7301  0026DC  90D8               	bcf	status,0,c
  7302  0026DE  320F               	rrcf	___ftmul@f1+2,f,c
  7303  0026E0  320E               	rrcf	___ftmul@f1+1,f,c
  7304  0026E2  320D               	rrcf	___ftmul@f1,f,c
  7305  0026E4  90D8               	bcf	status,0,c
  7306  0026E6  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  7307  0026E8  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  7308  0026EA  3217               	rrcf	___ftmul@f3_as_product,f,c
  7309  0026EC  2E1A               	decfsz	___ftmul@cntr,f,c
  7310  0026EE  D7EE               	goto	l948
  7311  0026F0  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7312  0026F4  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7313  0026F8  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7314  0026FC  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  7315  002700  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  7316  002704  ECFC  F015         	call	___ftpack	;wreg free
  7317  002708  C001  F00D         	movff	?___ftpack,?___ftmul
  7318  00270C  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  7319  002710  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  7320  002714  0012               	return	
  7321  002716                     __end_of___ftmul:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           intcon	equ	0xFF2
  7330                           postinc0	equ	0xFEE
  7331                           wreg	equ	0xFE8
  7332                           postinc1	equ	0xFE6
  7333                           postdec1	equ	0xFE5
  7334                           fsr1h	equ	0xFE2
  7335                           fsr1l	equ	0xFE1
  7336                           indf2	equ	0xFDF
  7337                           postinc2	equ	0xFDE
  7338                           postdec2	equ	0xFDD
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function ___ftsub *****************
  7344 ;; Defined at:
  7345 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  f1              3   45[COMRAM] float 
  7348 ;;  f2              3   48[COMRAM] float 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;		None
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  3   45[COMRAM] float 
  7353 ;; Registers used:
  7354 ;;		wreg, status,2, status,0, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7360 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7363 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7364 ;;Total ram usage:        6 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    2
  7367 ;; This function calls:
  7368 ;;		___ftadd
  7369 ;; This function is called by:
  7370 ;;		_exp
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text35
  7375  003824                     __ptext35:
  7376                           	opt stack 0
  7377  003824                     ___ftsub:
  7378                           	opt stack 19
  7379                           
  7380                           ;incstack = 0
  7381  003824  5031               	movf	___ftsub@f2,w,c
  7382  003826  1032               	iorwf	___ftsub@f2+1,w,c
  7383  003828  1033               	iorwf	___ftsub@f2+2,w,c
  7384  00382A  B4D8               	btfsc	status,2,c
  7385  00382C  D006               	goto	l959
  7386  00382E  0E00               	movlw	0
  7387  003830  1A31               	xorwf	___ftsub@f2,f,c
  7388  003832  0E00               	movlw	0
  7389  003834  1A32               	xorwf	___ftsub@f2+1,f,c
  7390  003836  0E80               	movlw	128
  7391  003838  1A33               	xorwf	___ftsub@f2+2,f,c
  7392  00383A                     l959:
  7393  00383A  C02E  F022         	movff	___ftsub@f1,___ftadd@f1
  7394  00383E  C02F  F023         	movff	___ftsub@f1+1,___ftadd@f1+1
  7395  003842  C030  F024         	movff	___ftsub@f1+2,___ftadd@f1+2
  7396  003846  C031  F025         	movff	___ftsub@f2,___ftadd@f2
  7397  00384A  C032  F026         	movff	___ftsub@f2+1,___ftadd@f2+1
  7398  00384E  C033  F027         	movff	___ftsub@f2+2,___ftadd@f2+2
  7399  003852  EC68  F00D         	call	___ftadd	;wreg free
  7400  003856  C022  F02E         	movff	?___ftadd,?___ftsub
  7401  00385A  C023  F02F         	movff	?___ftadd+1,?___ftsub+1
  7402  00385E  C024  F030         	movff	?___ftadd+2,?___ftsub+2
  7403  003862  0012               	return	
  7404  003864                     __end_of___ftsub:
  7405                           	opt stack 0
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           intcon	equ	0xFF2
  7413                           postinc0	equ	0xFEE
  7414                           wreg	equ	0xFE8
  7415                           postinc1	equ	0xFE6
  7416                           postdec1	equ	0xFE5
  7417                           fsr1h	equ	0xFE2
  7418                           fsr1l	equ	0xFE1
  7419                           indf2	equ	0xFDF
  7420                           postinc2	equ	0xFDE
  7421                           postdec2	equ	0xFDD
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function ___ftadd *****************
  7427 ;; Defined at:
  7428 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  f1              3   33[COMRAM] float 
  7431 ;;  f2              3   36[COMRAM] float 
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;  exp1            1   44[COMRAM] unsigned char 
  7434 ;;  exp2            1   43[COMRAM] unsigned char 
  7435 ;;  sign            1   42[COMRAM] unsigned char 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  3   33[COMRAM] float 
  7438 ;; Registers used:
  7439 ;;		wreg, status,2, status,0, cstack
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7445 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7447 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7448 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7449 ;;Total ram usage:       12 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    1
  7452 ;; This function calls:
  7453 ;;		___ftpack
  7454 ;; This function is called by:
  7455 ;;		___ftsub
  7456 ;;		_floor
  7457 ;;		_log
  7458 ;;		_eval_poly
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           	psect	text36
  7463  001AD0                     __ptext36:
  7464                           	opt stack 0
  7465  001AD0                     ___ftadd:
  7466                           	opt stack 19
  7467                           
  7468                           ;incstack = 0
  7469  001AD0  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  7470  001AD4  6A29               	clrf	(??___ftadd+1)& (0+255),c
  7471  001AD6  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  7472  001AD8  3423               	rlcf	___ftadd@f1+1,w,c
  7473  001ADA  3628               	rlcf	??___ftadd& (0+255),f,c
  7474  001ADC  E301               	bnc	u3201
  7475  001ADE  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  7476  001AE0                     u3201:
  7477  001AE0  5028               	movf	??___ftadd,w,c
  7478  001AE2  6E2D               	movwf	___ftadd@exp1,c
  7479  001AE4  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  7480  001AE8  6A29               	clrf	(??___ftadd+1)& (0+255),c
  7481  001AEA  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  7482  001AEC  3426               	rlcf	___ftadd@f2+1,w,c
  7483  001AEE  3628               	rlcf	??___ftadd& (0+255),f,c
  7484  001AF0  E301               	bnc	u3211
  7485  001AF2  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  7486  001AF4                     u3211:
  7487  001AF4  5028               	movf	??___ftadd,w,c
  7488  001AF6  6E2C               	movwf	___ftadd@exp2,c
  7489  001AF8  502D               	movf	___ftadd@exp1,w,c
  7490  001AFA  B4D8               	btfsc	status,2,c
  7491  001AFC  D00B               	goto	u3240
  7492  001AFE  502C               	movf	___ftadd@exp2,w,c
  7493  001B00  5C2D               	subwf	___ftadd@exp1,w,c
  7494  001B02  B0D8               	btfsc	status,0,c
  7495  001B04  D00E               	goto	l894
  7496  001B06  502D               	movf	___ftadd@exp1,w,c
  7497  001B08  0800               	sublw	0
  7498  001B0A  242C               	addwf	___ftadd@exp2,w,c
  7499  001B0C  6E28               	movwf	??___ftadd& (0+255),c
  7500  001B0E  0E18               	movlw	24
  7501  001B10  6428               	cpfsgt	??___ftadd,c
  7502  001B12  D007               	goto	l894
  7503  001B14                     u3240:
  7504  001B14  C025  F022         	movff	___ftadd@f2,?___ftadd
  7505  001B18  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  7506  001B1C  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  7507  001B20  0012               	return	
  7508  001B22                     l894:
  7509  001B22  502C               	movf	___ftadd@exp2,w,c
  7510  001B24  B4D8               	btfsc	status,2,c
  7511  001B26  D00B               	goto	u3270
  7512  001B28  502D               	movf	___ftadd@exp1,w,c
  7513  001B2A  5C2C               	subwf	___ftadd@exp2,w,c
  7514  001B2C  B0D8               	btfsc	status,0,c
  7515  001B2E  D00E               	goto	l898
  7516  001B30  502C               	movf	___ftadd@exp2,w,c
  7517  001B32  0800               	sublw	0
  7518  001B34  242D               	addwf	___ftadd@exp1,w,c
  7519  001B36  6E28               	movwf	??___ftadd& (0+255),c
  7520  001B38  0E18               	movlw	24
  7521  001B3A  6428               	cpfsgt	??___ftadd,c
  7522  001B3C  D007               	goto	l898
  7523  001B3E                     u3270:
  7524  001B3E  C022  F022         	movff	___ftadd@f1,?___ftadd
  7525  001B42  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  7526  001B46  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  7527  001B4A  0012               	return	
  7528  001B4C                     l898:
  7529  001B4C  0E06               	movlw	6
  7530  001B4E  6E2B               	movwf	___ftadd@sign,c
  7531  001B50  BE24               	btfsc	___ftadd@f1+2,7,c
  7532  001B52  8E2B               	bsf	___ftadd@sign,7,c
  7533  001B54  BE27               	btfsc	___ftadd@f2+2,7,c
  7534  001B56  8C2B               	bsf	___ftadd@sign,6,c
  7535  001B58  8E23               	bsf	___ftadd@f1+1,7,c
  7536  001B5A  0EFF               	movlw	255
  7537  001B5C  1622               	andwf	___ftadd@f1,f,c
  7538  001B5E  0EFF               	movlw	255
  7539  001B60  1623               	andwf	___ftadd@f1+1,f,c
  7540  001B62  0E00               	movlw	0
  7541  001B64  1624               	andwf	___ftadd@f1+2,f,c
  7542  001B66  8E26               	bsf	___ftadd@f2+1,7,c
  7543  001B68  0EFF               	movlw	255
  7544  001B6A  1625               	andwf	___ftadd@f2,f,c
  7545  001B6C  0EFF               	movlw	255
  7546  001B6E  1626               	andwf	___ftadd@f2+1,f,c
  7547  001B70  0E00               	movlw	0
  7548  001B72  1627               	andwf	___ftadd@f2+2,f,c
  7549  001B74  502C               	movf	___ftadd@exp2,w,c
  7550  001B76  5C2D               	subwf	___ftadd@exp1,w,c
  7551  001B78  B0D8               	btfsc	status,0,c
  7552  001B7A  D01B               	goto	l903
  7553  001B7C                     u3300:
  7554  001B7C  90D8               	bcf	status,0,c
  7555  001B7E  3625               	rlcf	___ftadd@f2,f,c
  7556  001B80  3626               	rlcf	___ftadd@f2+1,f,c
  7557  001B82  3627               	rlcf	___ftadd@f2+2,f,c
  7558  001B84  062C               	decf	___ftadd@exp2,f,c
  7559  001B86  502D               	movf	___ftadd@exp1,w,c
  7560  001B88  182C               	xorwf	___ftadd@exp2,w,c
  7561  001B8A  B4D8               	btfsc	status,2,c
  7562  001B8C  D00D               	goto	l908
  7563  001B8E  062B               	decf	___ftadd@sign,f,c
  7564  001B90  C02B  F028         	movff	___ftadd@sign,??___ftadd
  7565  001B94  0E07               	movlw	7
  7566  001B96  1628               	andwf	??___ftadd,f,c
  7567  001B98  B4D8               	btfsc	status,2,c
  7568  001B9A  D006               	goto	l908
  7569  001B9C  D7EF               	goto	u3300
  7570  001B9E  90D8               	bcf	status,0,c
  7571  001BA0  3224               	rrcf	___ftadd@f1+2,f,c
  7572  001BA2  3223               	rrcf	___ftadd@f1+1,f,c
  7573  001BA4  3222               	rrcf	___ftadd@f1,f,c
  7574  001BA6  2A2D               	incf	___ftadd@exp1,f,c
  7575  001BA8                     l908:
  7576  001BA8  502C               	movf	___ftadd@exp2,w,c
  7577  001BAA  182D               	xorwf	___ftadd@exp1,w,c
  7578  001BAC  B4D8               	btfsc	status,2,c
  7579  001BAE  D01F               	goto	u3370
  7580  001BB0  D7F6               	goto	l909
  7581  001BB2                     l903:
  7582  001BB2  502D               	movf	___ftadd@exp1,w,c
  7583  001BB4  5C2C               	subwf	___ftadd@exp2,w,c
  7584  001BB6  B0D8               	btfsc	status,0,c
  7585  001BB8  D01A               	goto	u3370
  7586  001BBA                     u3340:
  7587  001BBA  90D8               	bcf	status,0,c
  7588  001BBC  3622               	rlcf	___ftadd@f1,f,c
  7589  001BBE  3623               	rlcf	___ftadd@f1+1,f,c
  7590  001BC0  3624               	rlcf	___ftadd@f1+2,f,c
  7591  001BC2  062D               	decf	___ftadd@exp1,f,c
  7592  001BC4  502D               	movf	___ftadd@exp1,w,c
  7593  001BC6  182C               	xorwf	___ftadd@exp2,w,c
  7594  001BC8  B4D8               	btfsc	status,2,c
  7595  001BCA  D00D               	goto	l917
  7596  001BCC  062B               	decf	___ftadd@sign,f,c
  7597  001BCE  C02B  F028         	movff	___ftadd@sign,??___ftadd
  7598  001BD2  0E07               	movlw	7
  7599  001BD4  1628               	andwf	??___ftadd,f,c
  7600  001BD6  B4D8               	btfsc	status,2,c
  7601  001BD8  D006               	goto	l917
  7602  001BDA  D7EF               	goto	u3340
  7603  001BDC  90D8               	bcf	status,0,c
  7604  001BDE  3227               	rrcf	___ftadd@f2+2,f,c
  7605  001BE0  3226               	rrcf	___ftadd@f2+1,f,c
  7606  001BE2  3225               	rrcf	___ftadd@f2,f,c
  7607  001BE4  2A2C               	incf	___ftadd@exp2,f,c
  7608  001BE6                     l917:
  7609  001BE6  502C               	movf	___ftadd@exp2,w,c
  7610  001BE8  182D               	xorwf	___ftadd@exp1,w,c
  7611  001BEA  A4D8               	btfss	status,2,c
  7612  001BEC  D7F7               	goto	l918
  7613  001BEE                     u3370:
  7614  001BEE  AE2B               	btfss	___ftadd@sign,7,c
  7615  001BF0  D00C               	goto	l920
  7616  001BF2  0EFF               	movlw	255
  7617  001BF4  1A22               	xorwf	___ftadd@f1,f,c
  7618  001BF6  0EFF               	movlw	255
  7619  001BF8  1A23               	xorwf	___ftadd@f1+1,f,c
  7620  001BFA  0EFF               	movlw	255
  7621  001BFC  1A24               	xorwf	___ftadd@f1+2,f,c
  7622  001BFE  0E01               	movlw	1
  7623  001C00  2622               	addwf	___ftadd@f1,f,c
  7624  001C02  0E00               	movlw	0
  7625  001C04  2223               	addwfc	___ftadd@f1+1,f,c
  7626  001C06  0E00               	movlw	0
  7627  001C08  2224               	addwfc	___ftadd@f1+2,f,c
  7628  001C0A                     l920:
  7629  001C0A  AC2B               	btfss	___ftadd@sign,6,c
  7630  001C0C  D00C               	goto	l921
  7631  001C0E  0EFF               	movlw	255
  7632  001C10  1A25               	xorwf	___ftadd@f2,f,c
  7633  001C12  0EFF               	movlw	255
  7634  001C14  1A26               	xorwf	___ftadd@f2+1,f,c
  7635  001C16  0EFF               	movlw	255
  7636  001C18  1A27               	xorwf	___ftadd@f2+2,f,c
  7637  001C1A  0E01               	movlw	1
  7638  001C1C  2625               	addwf	___ftadd@f2,f,c
  7639  001C1E  0E00               	movlw	0
  7640  001C20  2226               	addwfc	___ftadd@f2+1,f,c
  7641  001C22  0E00               	movlw	0
  7642  001C24  2227               	addwfc	___ftadd@f2+2,f,c
  7643  001C26                     l921:
  7644  001C26  0E00               	movlw	0
  7645  001C28  6E2B               	movwf	___ftadd@sign,c
  7646  001C2A  5022               	movf	___ftadd@f1,w,c
  7647  001C2C  2625               	addwf	___ftadd@f2,f,c
  7648  001C2E  5023               	movf	___ftadd@f1+1,w,c
  7649  001C30  2226               	addwfc	___ftadd@f2+1,f,c
  7650  001C32  5024               	movf	___ftadd@f1+2,w,c
  7651  001C34  2227               	addwfc	___ftadd@f2+2,f,c
  7652  001C36  AE27               	btfss	___ftadd@f2+2,7,c
  7653  001C38  D00E               	goto	l922
  7654  001C3A  0EFF               	movlw	255
  7655  001C3C  1A25               	xorwf	___ftadd@f2,f,c
  7656  001C3E  0EFF               	movlw	255
  7657  001C40  1A26               	xorwf	___ftadd@f2+1,f,c
  7658  001C42  0EFF               	movlw	255
  7659  001C44  1A27               	xorwf	___ftadd@f2+2,f,c
  7660  001C46  0E01               	movlw	1
  7661  001C48  2625               	addwf	___ftadd@f2,f,c
  7662  001C4A  0E00               	movlw	0
  7663  001C4C  2226               	addwfc	___ftadd@f2+1,f,c
  7664  001C4E  0E00               	movlw	0
  7665  001C50  2227               	addwfc	___ftadd@f2+2,f,c
  7666  001C52  0E01               	movlw	1
  7667  001C54  6E2B               	movwf	___ftadd@sign,c
  7668  001C56                     l922:
  7669  001C56  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  7670  001C5A  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7671  001C5E  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7672  001C62  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  7673  001C66  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  7674  001C6A  ECFC  F015         	call	___ftpack	;wreg free
  7675  001C6E  C001  F022         	movff	?___ftpack,?___ftadd
  7676  001C72  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  7677  001C76  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  7678  001C7A  0012               	return	
  7679  001C7C                     __end_of___ftadd:
  7680                           	opt stack 0
  7681                           tblptru	equ	0xFF8
  7682                           tblptrh	equ	0xFF7
  7683                           tblptrl	equ	0xFF6
  7684                           tablat	equ	0xFF5
  7685                           prodh	equ	0xFF4
  7686                           prodl	equ	0xFF3
  7687                           intcon	equ	0xFF2
  7688                           postinc0	equ	0xFEE
  7689                           wreg	equ	0xFE8
  7690                           postinc1	equ	0xFE6
  7691                           postdec1	equ	0xFE5
  7692                           fsr1h	equ	0xFE2
  7693                           fsr1l	equ	0xFE1
  7694                           indf2	equ	0xFDF
  7695                           postinc2	equ	0xFDE
  7696                           postdec2	equ	0xFDD
  7697                           fsr2h	equ	0xFDA
  7698                           fsr2l	equ	0xFD9
  7699                           status	equ	0xFD8
  7700                           
  7701 ;; *************** function ___ftneg *****************
  7702 ;; Defined at:
  7703 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;  f1              3    0[COMRAM] float 
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;		None
  7708 ;; Return value:  Size  Location     Type
  7709 ;;                  3    0[COMRAM] float 
  7710 ;; Registers used:
  7711 ;;		wreg, status,2, status,0
  7712 ;; Tracked objects:
  7713 ;;		On entry : 0/0
  7714 ;;		On exit  : 0/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7717 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7720 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7721 ;;Total ram usage:        3 bytes
  7722 ;; Hardware stack levels used:    1
  7723 ;; This function calls:
  7724 ;;		Nothing
  7725 ;; This function is called by:
  7726 ;;		_pow
  7727 ;;		_exp
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           	psect	text37
  7732  003918                     __ptext37:
  7733                           	opt stack 0
  7734  003918                     ___ftneg:
  7735                           	opt stack 21
  7736                           
  7737                           ;incstack = 0
  7738  003918  5001               	movf	___ftneg@f1,w,c
  7739  00391A  1002               	iorwf	___ftneg@f1+1,w,c
  7740  00391C  1003               	iorwf	___ftneg@f1+2,w,c
  7741  00391E  B4D8               	btfsc	status,2,c
  7742  003920  D006               	goto	l953
  7743  003922  0E00               	movlw	0
  7744  003924  1A01               	xorwf	___ftneg@f1,f,c
  7745  003926  0E00               	movlw	0
  7746  003928  1A02               	xorwf	___ftneg@f1+1,f,c
  7747  00392A  0E80               	movlw	128
  7748  00392C  1A03               	xorwf	___ftneg@f1+2,f,c
  7749  00392E                     l953:
  7750  00392E  C001  F001         	movff	___ftneg@f1,?___ftneg
  7751  003932  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7752  003936  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7753  00393A  0012               	return		;funcret
  7754  00393C                     __end_of___ftneg:
  7755                           	opt stack 0
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           intcon	equ	0xFF2
  7763                           postinc0	equ	0xFEE
  7764                           wreg	equ	0xFE8
  7765                           postinc1	equ	0xFE6
  7766                           postdec1	equ	0xFE5
  7767                           fsr1h	equ	0xFE2
  7768                           fsr1l	equ	0xFE1
  7769                           indf2	equ	0xFDF
  7770                           postinc2	equ	0xFDE
  7771                           postdec2	equ	0xFDD
  7772                           fsr2h	equ	0xFDA
  7773                           fsr2l	equ	0xFD9
  7774                           status	equ	0xFD8
  7775                           
  7776 ;; *************** function ___ftdiv *****************
  7777 ;; Defined at:
  7778 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;  f1              3    8[COMRAM] float 
  7781 ;;  f2              3   11[COMRAM] float 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;  f3              3   18[COMRAM] float 
  7784 ;;  sign            1   22[COMRAM] unsigned char 
  7785 ;;  exp             1   21[COMRAM] unsigned char 
  7786 ;;  cntr            1   17[COMRAM] unsigned char 
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  3    8[COMRAM] float 
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0, cstack
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7796 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7797 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7798 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7799 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7800 ;;Total ram usage:       15 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; Hardware stack levels required when called:    1
  7803 ;; This function calls:
  7804 ;;		___ftpack
  7805 ;; This function is called by:
  7806 ;;		_exp
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text38
  7811  002716                     __ptext38:
  7812                           	opt stack 0
  7813  002716                     ___ftdiv:
  7814                           	opt stack 20
  7815                           
  7816                           ;incstack = 0
  7817  002716  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  7818  00271A  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7819  00271C  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7820  00271E  340A               	rlcf	___ftdiv@f1+1,w,c
  7821  002720  360F               	rlcf	??___ftdiv& (0+255),f,c
  7822  002722  E301               	bnc	u3621
  7823  002724  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7824  002726                     u3621:
  7825  002726  500F               	movf	??___ftdiv,w,c
  7826  002728  6E16               	movwf	___ftdiv@exp,c
  7827  00272A  5016               	movf	___ftdiv@exp,w,c
  7828  00272C  A4D8               	btfss	status,2,c
  7829  00272E  D007               	goto	l927
  7830  002730  0E00               	movlw	0
  7831  002732  6E09               	movwf	?___ftdiv,c
  7832  002734  0E00               	movlw	0
  7833  002736  6E0A               	movwf	?___ftdiv+1,c
  7834  002738  0E00               	movlw	0
  7835  00273A  6E0B               	movwf	?___ftdiv+2,c
  7836  00273C  0012               	return	
  7837  00273E                     l927:
  7838  00273E  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  7839  002742  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7840  002744  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7841  002746  340D               	rlcf	___ftdiv@f2+1,w,c
  7842  002748  360F               	rlcf	??___ftdiv& (0+255),f,c
  7843  00274A  E301               	bnc	u3641
  7844  00274C  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7845  00274E                     u3641:
  7846  00274E  500F               	movf	??___ftdiv,w,c
  7847  002750  6E17               	movwf	___ftdiv@sign,c
  7848  002752  5017               	movf	___ftdiv@sign,w,c
  7849  002754  A4D8               	btfss	status,2,c
  7850  002756  D007               	goto	l929
  7851  002758  0E00               	movlw	0
  7852  00275A  6E09               	movwf	?___ftdiv,c
  7853  00275C  0E00               	movlw	0
  7854  00275E  6E0A               	movwf	?___ftdiv+1,c
  7855  002760  0E00               	movlw	0
  7856  002762  6E0B               	movwf	?___ftdiv+2,c
  7857  002764  0012               	return	
  7858  002766                     l929:
  7859  002766  0E00               	movlw	0
  7860  002768  6E13               	movwf	___ftdiv@f3,c
  7861  00276A  0E00               	movlw	0
  7862  00276C  6E14               	movwf	___ftdiv@f3+1,c
  7863  00276E  0E00               	movlw	0
  7864  002770  6E15               	movwf	___ftdiv@f3+2,c
  7865  002772  5017               	movf	___ftdiv@sign,w,c
  7866  002774  0F89               	addlw	137
  7867  002776  5E16               	subwf	___ftdiv@exp,f,c
  7868  002778  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  7869  00277C  500E               	movf	___ftdiv@f2+2,w,c
  7870  00277E  1A17               	xorwf	___ftdiv@sign,f,c
  7871  002780  0E80               	movlw	128
  7872  002782  1617               	andwf	___ftdiv@sign,f,c
  7873  002784  8E0A               	bsf	___ftdiv@f1+1,7,c
  7874  002786  0EFF               	movlw	255
  7875  002788  1609               	andwf	___ftdiv@f1,f,c
  7876  00278A  0EFF               	movlw	255
  7877  00278C  160A               	andwf	___ftdiv@f1+1,f,c
  7878  00278E  0E00               	movlw	0
  7879  002790  160B               	andwf	___ftdiv@f1+2,f,c
  7880  002792  8E0D               	bsf	___ftdiv@f2+1,7,c
  7881  002794  0EFF               	movlw	255
  7882  002796  160C               	andwf	___ftdiv@f2,f,c
  7883  002798  0EFF               	movlw	255
  7884  00279A  160D               	andwf	___ftdiv@f2+1,f,c
  7885  00279C  0E00               	movlw	0
  7886  00279E  160E               	andwf	___ftdiv@f2+2,f,c
  7887  0027A0  0E18               	movlw	24
  7888  0027A2  6E12               	movwf	___ftdiv@cntr,c
  7889  0027A4  90D8               	bcf	status,0,c
  7890  0027A6  3613               	rlcf	___ftdiv@f3,f,c
  7891  0027A8  3614               	rlcf	___ftdiv@f3+1,f,c
  7892  0027AA  3615               	rlcf	___ftdiv@f3+2,f,c
  7893  0027AC  500C               	movf	___ftdiv@f2,w,c
  7894  0027AE  5C09               	subwf	___ftdiv@f1,w,c
  7895  0027B0  500D               	movf	___ftdiv@f2+1,w,c
  7896  0027B2  580A               	subwfb	___ftdiv@f1+1,w,c
  7897  0027B4  500E               	movf	___ftdiv@f2+2,w,c
  7898  0027B6  580B               	subwfb	___ftdiv@f1+2,w,c
  7899  0027B8  A0D8               	btfss	status,0,c
  7900  0027BA  D007               	goto	l931
  7901  0027BC  500C               	movf	___ftdiv@f2,w,c
  7902  0027BE  5E09               	subwf	___ftdiv@f1,f,c
  7903  0027C0  500D               	movf	___ftdiv@f2+1,w,c
  7904  0027C2  5A0A               	subwfb	___ftdiv@f1+1,f,c
  7905  0027C4  500E               	movf	___ftdiv@f2+2,w,c
  7906  0027C6  5A0B               	subwfb	___ftdiv@f1+2,f,c
  7907  0027C8  8013               	bsf	___ftdiv@f3,0,c
  7908  0027CA                     l931:
  7909  0027CA  90D8               	bcf	status,0,c
  7910  0027CC  3609               	rlcf	___ftdiv@f1,f,c
  7911  0027CE  360A               	rlcf	___ftdiv@f1+1,f,c
  7912  0027D0  360B               	rlcf	___ftdiv@f1+2,f,c
  7913  0027D2  2E12               	decfsz	___ftdiv@cntr,f,c
  7914  0027D4  D7E7               	goto	l930
  7915  0027D6  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  7916  0027DA  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7917  0027DE  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7918  0027E2  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  7919  0027E6  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  7920  0027EA  ECFC  F015         	call	___ftpack	;wreg free
  7921  0027EE  C001  F009         	movff	?___ftpack,?___ftdiv
  7922  0027F2  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  7923  0027F6  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  7924  0027FA  0012               	return	
  7925  0027FC                     __end_of___ftdiv:
  7926                           	opt stack 0
  7927                           tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           intcon	equ	0xFF2
  7934                           postinc0	equ	0xFEE
  7935                           wreg	equ	0xFE8
  7936                           postinc1	equ	0xFE6
  7937                           postdec1	equ	0xFE5
  7938                           fsr1h	equ	0xFE2
  7939                           fsr1l	equ	0xFE1
  7940                           indf2	equ	0xFDF
  7941                           postinc2	equ	0xFDE
  7942                           postdec2	equ	0xFDD
  7943                           fsr2h	equ	0xFDA
  7944                           fsr2l	equ	0xFD9
  7945                           status	equ	0xFD8
  7946                           
  7947 ;; *************** function ___awtoft *****************
  7948 ;; Defined at:
  7949 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awtoft.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;  c               2    8[COMRAM] int 
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;  sign            1   11[COMRAM] unsigned char 
  7954 ;; Return value:  Size  Location     Type
  7955 ;;                  3    8[COMRAM] float 
  7956 ;; Registers used:
  7957 ;;		wreg, status,2, status,0, cstack
  7958 ;; Tracked objects:
  7959 ;;		On entry : 0/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7963 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7966 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7967 ;;Total ram usage:        4 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; Hardware stack levels required when called:    1
  7970 ;; This function calls:
  7971 ;;		___ftpack
  7972 ;; This function is called by:
  7973 ;;		_covertir_valores_de_array_a_escala_decimal
  7974 ;;		_exp
  7975 ;;		_log
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           	psect	text39
  7980  003864                     __ptext39:
  7981                           	opt stack 0
  7982  003864                     ___awtoft:
  7983                           	opt stack 20
  7984                           
  7985                           ;incstack = 0
  7986  003864  0E00               	movlw	0
  7987  003866  6E0C               	movwf	___awtoft@sign,c
  7988  003868  AE0A               	btfss	___awtoft@c+1,7,c
  7989  00386A  D006               	goto	l823
  7990  00386C  6C09               	negf	___awtoft@c,c
  7991  00386E  1E0A               	comf	___awtoft@c+1,f,c
  7992  003870  B0D8               	btfsc	status,0,c
  7993  003872  2A0A               	incf	___awtoft@c+1,f,c
  7994  003874  0E01               	movlw	1
  7995  003876  6E0C               	movwf	___awtoft@sign,c
  7996  003878                     l823:
  7997  003878  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7998  00387C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7999  003880  6A03               	clrf	___ftpack@arg+2,c
  8000  003882  0E8E               	movlw	142
  8001  003884  6E04               	movwf	___ftpack@exp,c
  8002  003886  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8003  00388A  ECFC  F015         	call	___ftpack	;wreg free
  8004  00388E  C001  F009         	movff	?___ftpack,?___awtoft
  8005  003892  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8006  003896  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8007  00389A  0012               	return	
  8008  00389C                     __end_of___awtoft:
  8009                           	opt stack 0
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           postinc0	equ	0xFEE
  8018                           wreg	equ	0xFE8
  8019                           postinc1	equ	0xFE6
  8020                           postdec1	equ	0xFE5
  8021                           fsr1h	equ	0xFE2
  8022                           fsr1l	equ	0xFE1
  8023                           indf2	equ	0xFDF
  8024                           postinc2	equ	0xFDE
  8025                           postdec2	equ	0xFDD
  8026                           fsr2h	equ	0xFDA
  8027                           fsr2l	equ	0xFD9
  8028                           status	equ	0xFD8
  8029                           
  8030 ;; *************** function ___lltoft *****************
  8031 ;; Defined at:
  8032 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;  c               4    8[COMRAM] unsigned long 
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;  exp             1   16[COMRAM] unsigned char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  3    8[COMRAM] float 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, status,0, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8046 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8048 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8049 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8050 ;;Total ram usage:        9 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    1
  8053 ;; This function calls:
  8054 ;;		___ftpack
  8055 ;; This function is called by:
  8056 ;;		_pow
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text40
  8061  003556                     __ptext40:
  8062                           	opt stack 0
  8063  003556                     ___lltoft:
  8064                           	opt stack 21
  8065                           
  8066                           ;incstack = 0
  8067  003556  0E8E               	movlw	142
  8068  003558  6E11               	movwf	___lltoft@exp,c
  8069  00355A  D006               	goto	l1025
  8070  00355C  90D8               	bcf	status,0,c
  8071  00355E  320C               	rrcf	___lltoft@c+3,f,c
  8072  003560  320B               	rrcf	___lltoft@c+2,f,c
  8073  003562  320A               	rrcf	___lltoft@c+1,f,c
  8074  003564  3209               	rrcf	___lltoft@c,f,c
  8075  003566  2A11               	incf	___lltoft@exp,f,c
  8076  003568                     l1025:
  8077  003568  0E00               	movlw	0
  8078  00356A  1409               	andwf	___lltoft@c,w,c
  8079  00356C  6E0D               	movwf	??___lltoft& (0+255),c
  8080  00356E  0E00               	movlw	0
  8081  003570  140A               	andwf	___lltoft@c+1,w,c
  8082  003572  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  8083  003574  0E00               	movlw	0
  8084  003576  140B               	andwf	___lltoft@c+2,w,c
  8085  003578  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  8086  00357A  0EFF               	movlw	255
  8087  00357C  140C               	andwf	___lltoft@c+3,w,c
  8088  00357E  6E10               	movwf	(??___lltoft+3)& (0+255),c
  8089  003580  500D               	movf	??___lltoft,w,c
  8090  003582  100E               	iorwf	??___lltoft+1,w,c
  8091  003584  100F               	iorwf	??___lltoft+2,w,c
  8092  003586  1010               	iorwf	??___lltoft+3,w,c
  8093  003588  A4D8               	btfss	status,2,c
  8094  00358A  D7E8               	goto	l1026
  8095  00358C  C009  F001         	movff	___lltoft@c,___ftpack@arg
  8096  003590  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  8097  003594  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  8098  003598  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  8099  00359C  0E00               	movlw	0
  8100  00359E  6E05               	movwf	___ftpack@sign,c
  8101  0035A0  ECFC  F015         	call	___ftpack	;wreg free
  8102  0035A4  C001  F009         	movff	?___ftpack,?___lltoft
  8103  0035A8  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  8104  0035AC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  8105  0035B0  0012               	return	
  8106  0035B2                     __end_of___lltoft:
  8107                           	opt stack 0
  8108                           tblptru	equ	0xFF8
  8109                           tblptrh	equ	0xFF7
  8110                           tblptrl	equ	0xFF6
  8111                           tablat	equ	0xFF5
  8112                           prodh	equ	0xFF4
  8113                           prodl	equ	0xFF3
  8114                           intcon	equ	0xFF2
  8115                           postinc0	equ	0xFEE
  8116                           wreg	equ	0xFE8
  8117                           postinc1	equ	0xFE6
  8118                           postdec1	equ	0xFE5
  8119                           fsr1h	equ	0xFE2
  8120                           fsr1l	equ	0xFE1
  8121                           indf2	equ	0xFDF
  8122                           postinc2	equ	0xFDE
  8123                           postdec2	equ	0xFDD
  8124                           fsr2h	equ	0xFDA
  8125                           fsr2l	equ	0xFD9
  8126                           status	equ	0xFD8
  8127                           
  8128 ;; *************** function ___ftpack *****************
  8129 ;; Defined at:
  8130 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  arg             3    0[COMRAM] unsigned um
  8133 ;;  exp             1    3[COMRAM] unsigned char 
  8134 ;;  sign            1    4[COMRAM] unsigned char 
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;		None
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  3    0[COMRAM] float 
  8139 ;; Registers used:
  8140 ;;		wreg, status,2, status,0
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8146 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8148 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8149 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8150 ;;Total ram usage:        8 bytes
  8151 ;; Hardware stack levels used:    1
  8152 ;; This function calls:
  8153 ;;		Nothing
  8154 ;; This function is called by:
  8155 ;;		___altoft
  8156 ;;		___awtoft
  8157 ;;		___ftadd
  8158 ;;		___ftdiv
  8159 ;;		___ftmul
  8160 ;;		___lltoft
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           	psect	text41
  8165  002BF8                     __ptext41:
  8166                           	opt stack 0
  8167  002BF8                     ___ftpack:
  8168                           	opt stack 19
  8169                           
  8170                           ;incstack = 0
  8171  002BF8  5004               	movf	___ftpack@exp,w,c
  8172  002BFA  B4D8               	btfsc	status,2,c
  8173  002BFC  D005               	goto	u3100
  8174  002BFE  5001               	movf	___ftpack@arg,w,c
  8175  002C00  1002               	iorwf	___ftpack@arg+1,w,c
  8176  002C02  1003               	iorwf	___ftpack@arg+2,w,c
  8177  002C04  A4D8               	btfss	status,2,c
  8178  002C06  D00C               	goto	l863
  8179  002C08                     u3100:
  8180  002C08  0E00               	movlw	0
  8181  002C0A  6E01               	movwf	?___ftpack,c
  8182  002C0C  0E00               	movlw	0
  8183  002C0E  6E02               	movwf	?___ftpack+1,c
  8184  002C10  0E00               	movlw	0
  8185  002C12  6E03               	movwf	?___ftpack+2,c
  8186  002C14  0012               	return	
  8187  002C16  2A04               	incf	___ftpack@exp,f,c
  8188  002C18  90D8               	bcf	status,0,c
  8189  002C1A  3203               	rrcf	___ftpack@arg+2,f,c
  8190  002C1C  3202               	rrcf	___ftpack@arg+1,f,c
  8191  002C1E  3201               	rrcf	___ftpack@arg,f,c
  8192  002C20                     l863:
  8193  002C20  0E00               	movlw	0
  8194  002C22  1401               	andwf	___ftpack@arg,w,c
  8195  002C24  6E06               	movwf	??___ftpack& (0+255),c
  8196  002C26  0E00               	movlw	0
  8197  002C28  1402               	andwf	___ftpack@arg+1,w,c
  8198  002C2A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8199  002C2C  0EFE               	movlw	254
  8200  002C2E  1403               	andwf	___ftpack@arg+2,w,c
  8201  002C30  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8202  002C32  5006               	movf	??___ftpack,w,c
  8203  002C34  1007               	iorwf	??___ftpack+1,w,c
  8204  002C36  1008               	iorwf	??___ftpack+2,w,c
  8205  002C38  B4D8               	btfsc	status,2,c
  8206  002C3A  D00C               	goto	l866
  8207  002C3C  D7EC               	goto	l864
  8208  002C3E  2A04               	incf	___ftpack@exp,f,c
  8209  002C40  0E01               	movlw	1
  8210  002C42  2601               	addwf	___ftpack@arg,f,c
  8211  002C44  0E00               	movlw	0
  8212  002C46  2202               	addwfc	___ftpack@arg+1,f,c
  8213  002C48  0E00               	movlw	0
  8214  002C4A  2203               	addwfc	___ftpack@arg+2,f,c
  8215  002C4C  90D8               	bcf	status,0,c
  8216  002C4E  3203               	rrcf	___ftpack@arg+2,f,c
  8217  002C50  3202               	rrcf	___ftpack@arg+1,f,c
  8218  002C52  3201               	rrcf	___ftpack@arg,f,c
  8219  002C54                     l866:
  8220  002C54  0E00               	movlw	0
  8221  002C56  1401               	andwf	___ftpack@arg,w,c
  8222  002C58  6E06               	movwf	??___ftpack& (0+255),c
  8223  002C5A  0E00               	movlw	0
  8224  002C5C  1402               	andwf	___ftpack@arg+1,w,c
  8225  002C5E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8226  002C60  0EFF               	movlw	255
  8227  002C62  1403               	andwf	___ftpack@arg+2,w,c
  8228  002C64  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8229  002C66  5006               	movf	??___ftpack,w,c
  8230  002C68  1007               	iorwf	??___ftpack+1,w,c
  8231  002C6A  1008               	iorwf	??___ftpack+2,w,c
  8232  002C6C  B4D8               	btfsc	status,2,c
  8233  002C6E  D006               	goto	l869
  8234  002C70  D7E6               	goto	l867
  8235  002C72  0604               	decf	___ftpack@exp,f,c
  8236  002C74  90D8               	bcf	status,0,c
  8237  002C76  3601               	rlcf	___ftpack@arg,f,c
  8238  002C78  3602               	rlcf	___ftpack@arg+1,f,c
  8239  002C7A  3603               	rlcf	___ftpack@arg+2,f,c
  8240  002C7C                     l869:
  8241  002C7C  BE02               	btfsc	___ftpack@arg+1,7,c
  8242  002C7E  D003               	goto	u3140
  8243  002C80  0E02               	movlw	2
  8244  002C82  6004               	cpfslt	___ftpack@exp,c
  8245  002C84  D7F6               	goto	l870
  8246  002C86                     u3140:
  8247  002C86  A004               	btfss	___ftpack@exp,0,c
  8248  002C88  9E02               	bcf	___ftpack@arg+1,7,c
  8249  002C8A  90D8               	bcf	status,0,c
  8250  002C8C  3204               	rrcf	___ftpack@exp,f,c
  8251  002C8E  5004               	movf	___ftpack@exp,w,c
  8252  002C90  1203               	iorwf	___ftpack@arg+2,f,c
  8253  002C92  5005               	movf	___ftpack@sign,w,c
  8254  002C94  A4D8               	btfss	status,2,c
  8255  002C96  8E03               	bsf	___ftpack@arg+2,7,c
  8256  002C98  C001  F001         	movff	___ftpack@arg,?___ftpack
  8257  002C9C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8258  002CA0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8259  002CA4  0012               	return	
  8260  002CA6                     __end_of___ftpack:
  8261                           	opt stack 0
  8262                           tblptru	equ	0xFF8
  8263                           tblptrh	equ	0xFF7
  8264                           tblptrl	equ	0xFF6
  8265                           tablat	equ	0xFF5
  8266                           prodh	equ	0xFF4
  8267                           prodl	equ	0xFF3
  8268                           intcon	equ	0xFF2
  8269                           postinc0	equ	0xFEE
  8270                           wreg	equ	0xFE8
  8271                           postinc1	equ	0xFE6
  8272                           postdec1	equ	0xFE5
  8273                           fsr1h	equ	0xFE2
  8274                           fsr1l	equ	0xFE1
  8275                           indf2	equ	0xFDF
  8276                           postinc2	equ	0xFDE
  8277                           postdec2	equ	0xFDD
  8278                           fsr2h	equ	0xFDA
  8279                           fsr2l	equ	0xFD9
  8280                           status	equ	0xFD8
  8281                           
  8282 ;; *************** function _activar_alarma *****************
  8283 ;; Defined at:
  8284 ;;		line 278 in file "main.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;		None
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;		None
  8289 ;; Return value:  Size  Location     Type
  8290 ;;                  1    wreg      void 
  8291 ;; Registers used:
  8292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8302 ;;Total ram usage:        1 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:    7
  8305 ;; This function calls:
  8306 ;;		_ingreso_numero
  8307 ;;		_lcd_comand
  8308 ;;		_lcd_gotoxy
  8309 ;;		_lcd_putrs
  8310 ;;		_verificar_contrasenia
  8311 ;; This function is called by:
  8312 ;;		_seleccionar_opcion
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text42
  8317  002B36                     __ptext42:
  8318                           	opt stack 0
  8319  002B36                     _activar_alarma:
  8320                           	opt stack 18
  8321                           
  8322                           ;main.c: 279: numeros_ingresados = 0;
  8323                           
  8324                           ;incstack = 0
  8325  002B36  0E00               	movlw	0
  8326  002B38  0100               	movlb	0	; () banked
  8327  002B3A  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  8328  002B3C  0E00               	movlw	0
  8329  002B3E  6F92               	movwf	_numeros_ingresados& (0+255),b
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;main.c: 280: lcd_gotoxy(1, 1);
  8333  002B40  0E01               	movlw	1
  8334  002B42  6E05               	movwf	lcd_gotoxy@y,c
  8335  002B44  0E01               	movlw	1
  8336  002B46  EC9E  F01C         	call	_lcd_gotoxy
  8337                           
  8338                           ;main.c: 281: lcd_putrs("Alarm activated ");
  8339  002B4A  0E6E               	movlw	low STR_17
  8340  002B4C  6E09               	movwf	lcd_putrs@ptr,c
  8341  002B4E  0E0F               	movlw	high STR_17
  8342  002B50  6E0A               	movwf	lcd_putrs@ptr+1,c
  8343  002B52  EC2F  F01B         	call	_lcd_putrs	;wreg free
  8344                           
  8345                           ;main.c: 282: lcd_gotoxy(1, 2);
  8346  002B56  0E02               	movlw	2
  8347  002B58  6E05               	movwf	lcd_gotoxy@y,c
  8348  002B5A  0E01               	movlw	1
  8349  002B5C  EC9E  F01C         	call	_lcd_gotoxy
  8350                           
  8351                           ;main.c: 283: lcd_putrs("                ");
  8352  002B60  0E5D               	movlw	low STR_18
  8353  002B62  6E09               	movwf	lcd_putrs@ptr,c
  8354  002B64  0E0F               	movlw	high STR_18
  8355  002B66  6E0A               	movwf	lcd_putrs@ptr+1,c
  8356  002B68  EC2F  F01B         	call	_lcd_putrs	;wreg free
  8357                           
  8358                           ;main.c: 285: alarma_activada = 1;
  8359  002B6C  0E00               	movlw	0
  8360  002B6E  0100               	movlb	0	; () banked
  8361  002B70  6F8F               	movwf	(_alarma_activada+1)& (0+255),b
  8362  002B72  0E01               	movlw	1
  8363  002B74  6F8E               	movwf	_alarma_activada& (0+255),b
  8364                           
  8365                           ;main.c: 286: while (alarma_activada) {
  8366  002B76  D030               	goto	l286
  8367  002B78                     
  8368                           ; BSR set to: 0
  8369                           ;main.c: 288: if (numeros_ingresados < 4) {
  8370                           
  8371                           ; BSR set to: 0
  8372  002B78  0100               	movlb	0	; () banked
  8373  002B7A  BF93               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  8374  002B7C  D008               	goto	u5010
  8375  002B7E  0100               	movlb	0	; () banked
  8376  002B80  5193               	movf	(_numeros_ingresados+1)& (0+255),w,b
  8377  002B82  E108               	bnz	l4470
  8378  002B84  0E04               	movlw	4
  8379  002B86  0100               	movlb	0	; () banked
  8380  002B88  5D92               	subwf	_numeros_ingresados& (0+255),w,b
  8381  002B8A  B0D8               	btfsc	status,0,c
  8382  002B8C  D003               	goto	l281
  8383  002B8E                     u5010:
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;main.c: 289: ingreso_numero();
  8387  002B8E  ECFE  F007         	call	_ingreso_numero	;wreg free
  8388                           
  8389                           ;main.c: 290: } else {
  8390  002B92  D012               	goto	l285
  8391  002B94                     l281:
  8392  002B94                     l4470:
  8393                           
  8394                           ;main.c: 291: if (verificar_contrasenia()) {
  8395  002B94  EC1D  F019         	call	_verificar_contrasenia	;wreg free
  8396  002B98  5001               	movf	?_verificar_contrasenia,w,c
  8397  002B9A  1002               	iorwf	?_verificar_contrasenia+1,w,c
  8398  002B9C  B4D8               	btfsc	status,2,c
  8399  002B9E  D007               	goto	l283
  8400                           
  8401                           ;main.c: 292: alarma_activada = 0;
  8402  002BA0  0E00               	movlw	0
  8403  002BA2  0100               	movlb	0	; () banked
  8404  002BA4  6F8F               	movwf	(_alarma_activada+1)& (0+255),b
  8405  002BA6  0E00               	movlw	0
  8406  002BA8  6F8E               	movwf	_alarma_activada& (0+255),b
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;main.c: 293: LATBbits.LATB0 = 0;;
  8410  002BAA  908A               	bcf	3978,0,c	;volatile
  8411                           
  8412                           ;main.c: 294: break;
  8413  002BAC  0012               	return	
  8414  002BAE                     l283:
  8415                           
  8416                           ;main.c: 296: numeros_ingresados = 0;
  8417                           
  8418                           ; BSR set to: 0
  8419  002BAE  0E00               	movlw	0
  8420  002BB0  0100               	movlb	0	; () banked
  8421  002BB2  6F93               	movwf	(_numeros_ingresados+1)& (0+255),b
  8422  002BB4  0E00               	movlw	0
  8423  002BB6  6F92               	movwf	_numeros_ingresados& (0+255),b
  8424  002BB8                     l285:
  8425                           
  8426                           ;main.c: 297: }
  8427                           ;main.c: 298: }
  8428                           ;main.c: 300: if (PORTCbits.RC5 || PORTCbits.RC6 || PORTCbits.RC7) {
  8429                           
  8430                           ; BSR set to: 0
  8431                           
  8432                           ; BSR set to: 0
  8433  002BB8  AA82               	btfss	3970,5,c	;volatile
  8434  002BBA  BC82               	btfsc	3970,6,c	;volatile
  8435  002BBC  D002               	goto	u5050
  8436  002BBE  AE82               	btfss	3970,7,c	;volatile
  8437  002BC0  D00B               	goto	l286
  8438  002BC2                     u5050:
  8439                           
  8440                           ;main.c: 301: LATBbits.LATB0 = !LATBbits.LATB0;;
  8441  002BC2  B08A               	btfsc	3978,0,c	;volatile
  8442  002BC4  D003               	goto	u5060
  8443  002BC6  6A3D               	clrf	??_activar_alarma& (0+255),c
  8444  002BC8  2A3D               	incf	??_activar_alarma& (0+255),f,c
  8445  002BCA  D001               	goto	u5078
  8446  002BCC                     u5060:
  8447  002BCC  6A3D               	clrf	??_activar_alarma& (0+255),c
  8448  002BCE                     u5078:
  8449  002BCE  508A               	movf	3978,w,c	;volatile
  8450  002BD0  183D               	xorwf	??_activar_alarma,w,c
  8451  002BD2  0BFE               	andlw	-2
  8452  002BD4  183D               	xorwf	??_activar_alarma,w,c
  8453  002BD6  6E8A               	movwf	3978,c	;volatile
  8454  002BD8                     l286:
  8455  002BD8  0100               	movlb	0	; () banked
  8456  002BDA  518E               	movf	_alarma_activada& (0+255),w,b
  8457  002BDC  0100               	movlb	0	; () banked
  8458  002BDE  118F               	iorwf	(_alarma_activada+1)& (0+255),w,b
  8459  002BE0  B4D8               	btfsc	status,2,c
  8460  002BE2  0012               	return	
  8461  002BE4  D7C9               	goto	l280
  8462                           
  8463                           ;main.c: 313: _delay((unsigned long)((98)*(8000000/4000.0)));
  8464                           
  8465                           ;main.c: 312: LATBbits.LATB0 = !LATBbits.LATB0;
  8466                           
  8467                           ;main.c: 311: LATBbits.LATB1 = !LATBbits.LATB1;;
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;main.c: 310: lcd_comand(0b00000010);
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;main.c: 302: }
  8474                           ;main.c: 304: }
  8475                           ;main.c: 308: if (1 != 1) {
  8476  002BE6  0EFF               	movlw	255
  8477  002BE8  6E3D               	movwf	??_activar_alarma& (0+255),c
  8478  002BEA  0E8A               	movlw	138
  8479  002BEC                     u6107:
  8480  002BEC  2EE8               	decfsz	wreg,f,c
  8481  002BEE  D7FE               	bra	u6107
  8482  002BF0  2E3D               	decfsz	??_activar_alarma& (0+255),f,c
  8483  002BF2  D7FC               	bra	u6107
  8484  002BF4  D000               	nop2	
  8485  002BF6  0012               	return	
  8486  002BF8                     __end_of_activar_alarma:
  8487                           	opt stack 0
  8488                           tblptru	equ	0xFF8
  8489                           tblptrh	equ	0xFF7
  8490                           tblptrl	equ	0xFF6
  8491                           tablat	equ	0xFF5
  8492                           prodh	equ	0xFF4
  8493                           prodl	equ	0xFF3
  8494                           intcon	equ	0xFF2
  8495                           postinc0	equ	0xFEE
  8496                           wreg	equ	0xFE8
  8497                           postinc1	equ	0xFE6
  8498                           postdec1	equ	0xFE5
  8499                           fsr1h	equ	0xFE2
  8500                           fsr1l	equ	0xFE1
  8501                           indf2	equ	0xFDF
  8502                           postinc2	equ	0xFDE
  8503                           postdec2	equ	0xFDD
  8504                           fsr2h	equ	0xFDA
  8505                           fsr2l	equ	0xFD9
  8506                           status	equ	0xFD8
  8507                           
  8508 ;; *************** function _verificar_contrasenia *****************
  8509 ;; Defined at:
  8510 ;;		line 466 in file "main.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;		None
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  i               2    8[COMRAM] int 
  8515 ;;  equals          2    6[COMRAM] int 
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  2    0[COMRAM] int 
  8518 ;; Registers used:
  8519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8525 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8526 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8527 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8528 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8529 ;;Total ram usage:       10 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; This function calls:
  8532 ;;		Nothing
  8533 ;; This function is called by:
  8534 ;;		_activar_alarma
  8535 ;;		_ir_a_pantalla_ingresar_contrasenia
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text43
  8540  00323A                     __ptext43:
  8541                           	opt stack 0
  8542  00323A                     _verificar_contrasenia:
  8543                           	opt stack 27
  8544                           
  8545                           ;main.c: 467: int equals = 0;
  8546                           
  8547                           ;incstack = 0
  8548  00323A  0E00               	movlw	0
  8549  00323C  6E08               	movwf	verificar_contrasenia@equals+1,c
  8550  00323E  0E00               	movlw	0
  8551  003240  6E07               	movwf	verificar_contrasenia@equals,c
  8552                           
  8553                           ;main.c: 468: for (int i = 0; i < 4; i++) {
  8554  003242  0E00               	movlw	0
  8555  003244  6E0A               	movwf	verificar_contrasenia@i+1,c
  8556  003246  0E00               	movlw	0
  8557  003248  6E09               	movwf	verificar_contrasenia@i,c
  8558  00324A  BE0A               	btfsc	verificar_contrasenia@i+1,7,c
  8559  00324C  D003               	goto	l365
  8560  00324E  500A               	movf	verificar_contrasenia@i+1,w,c
  8561  003250  E12C               	bnz	l366
  8562  003252  D027               	goto	L2
  8563  003254                     l365:
  8564                           
  8565                           ;main.c: 469: if (array_contrasenia[i] == array_contrasenia_ingresada[i]) {
  8566  003254  90D8               	bcf	status,0,c
  8567  003256  3409               	rlcf	verificar_contrasenia@i,w,c
  8568  003258  6ED9               	movwf	fsr2l,c
  8569  00325A  340A               	rlcf	verificar_contrasenia@i+1,w,c
  8570  00325C  6EDA               	movwf	fsr2h,c
  8571  00325E  0E60               	movlw	low _array_contrasenia_ingresada
  8572  003260  26D9               	addwf	fsr2l,f,c
  8573  003262  0E00               	movlw	high _array_contrasenia_ingresada
  8574  003264  22DA               	addwfc	fsr2h,f,c
  8575  003266  90D8               	bcf	status,0,c
  8576  003268  3409               	rlcf	verificar_contrasenia@i,w,c
  8577  00326A  6EE1               	movwf	fsr1l,c
  8578  00326C  340A               	rlcf	verificar_contrasenia@i+1,w,c
  8579  00326E  6EE2               	movwf	fsr1h,c
  8580  003270  0EBF               	movlw	low _array_contrasenia
  8581  003272  26E1               	addwf	fsr1l,f,c
  8582  003274  0E00               	movlw	high _array_contrasenia
  8583  003276  22E2               	addwfc	fsr1h,f,c
  8584  003278  50DE               	movf	postinc2,w,c
  8585  00327A  18E6               	xorwf	postinc1,w,c
  8586  00327C  E108               	bnz	l4364
  8587  00327E  50DE               	movf	postinc2,w,c
  8588  003280  18E6               	xorwf	postinc1,w,c
  8589  003282  A4D8               	btfss	status,2,c
  8590  003284  D004               	goto	l367
  8591                           
  8592                           ;main.c: 470: equals = 1;
  8593  003286  0E00               	movlw	0
  8594  003288  6E08               	movwf	verificar_contrasenia@equals+1,c
  8595  00328A  0E01               	movlw	1
  8596  00328C  D003               	goto	L3
  8597  00328E                     l367:
  8598  00328E                     l4364:
  8599                           
  8600                           ;main.c: 472: equals = 0;
  8601  00328E  0E00               	movlw	0
  8602  003290  6E08               	movwf	verificar_contrasenia@equals+1,c
  8603  003292  0E00               	movlw	0
  8604  003294                     L3:
  8605  003294  6E07               	movwf	verificar_contrasenia@equals,c
  8606  003296  4A09               	infsnz	verificar_contrasenia@i,f,c
  8607  003298  2A0A               	incf	verificar_contrasenia@i+1,f,c
  8608  00329A  BE0A               	btfsc	verificar_contrasenia@i+1,7,c
  8609  00329C  D7DB               	goto	l365
  8610  00329E  500A               	movf	verificar_contrasenia@i+1,w,c
  8611  0032A0  E104               	bnz	u4960
  8612  0032A2                     L2:
  8613  0032A2  0E04               	movlw	4
  8614  0032A4  5C09               	subwf	verificar_contrasenia@i,w,c
  8615  0032A6  A0D8               	btfss	status,0,c
  8616  0032A8  D7D5               	goto	l365
  8617  0032AA                     u4960:
  8618  0032AA                     l366:
  8619                           
  8620                           ;main.c: 473: }
  8621                           ;main.c: 474: }
  8622                           ;main.c: 475: return equals;
  8623  0032AA  C007  F001         	movff	verificar_contrasenia@equals,?_verificar_contrasenia
  8624  0032AE  C008  F002         	movff	verificar_contrasenia@equals+1,?_verificar_contrasenia+1
  8625  0032B2  0012               	return		;funcret
  8626  0032B4                     __end_of_verificar_contrasenia:
  8627                           	opt stack 0
  8628                           tblptru	equ	0xFF8
  8629                           tblptrh	equ	0xFF7
  8630                           tblptrl	equ	0xFF6
  8631                           tablat	equ	0xFF5
  8632                           prodh	equ	0xFF4
  8633                           prodl	equ	0xFF3
  8634                           intcon	equ	0xFF2
  8635                           postinc0	equ	0xFEE
  8636                           wreg	equ	0xFE8
  8637                           postinc1	equ	0xFE6
  8638                           postdec1	equ	0xFE5
  8639                           fsr1h	equ	0xFE2
  8640                           fsr1l	equ	0xFE1
  8641                           indf2	equ	0xFDF
  8642                           postinc2	equ	0xFDE
  8643                           postdec2	equ	0xFDD
  8644                           fsr2h	equ	0xFDA
  8645                           fsr2l	equ	0xFD9
  8646                           status	equ	0xFD8
  8647                           
  8648 ;; *************** function _lcd_comand *****************
  8649 ;; Defined at:
  8650 ;;		line 189 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;  d               1    wreg     unsigned char 
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;  d               1    4[COMRAM] unsigned char 
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      void 
  8657 ;; Registers used:
  8658 ;;		wreg, status,2, status,0, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8668 ;;Total ram usage:        1 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    2
  8671 ;; This function calls:
  8672 ;;		_lcd_send_byte
  8673 ;; This function is called by:
  8674 ;;		_activar_alarma
  8675 ;;		_setup
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text44
  8680  0039E8                     __ptext44:
  8681                           	opt stack 0
  8682  0039E8                     _lcd_comand:
  8683                           	opt stack 27
  8684                           
  8685                           ;incstack = 0
  8686                           ;lcd_comand@d stored from wreg
  8687  0039E8  6E05               	movwf	lcd_comand@d,c
  8688                           
  8689                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  8690  0039EA  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  8691  0039EE  0E00               	movlw	0
  8692  0039F0  EC4E  F01C         	call	_lcd_send_byte
  8693  0039F4  0012               	return		;funcret
  8694  0039F6                     __end_of_lcd_comand:
  8695                           	opt stack 0
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           postinc0	equ	0xFEE
  8704                           wreg	equ	0xFE8
  8705                           postinc1	equ	0xFE6
  8706                           postdec1	equ	0xFE5
  8707                           fsr1h	equ	0xFE2
  8708                           fsr1l	equ	0xFE1
  8709                           indf2	equ	0xFDF
  8710                           postinc2	equ	0xFDE
  8711                           postdec2	equ	0xFDD
  8712                           fsr2h	equ	0xFDA
  8713                           fsr2l	equ	0xFD9
  8714                           status	equ	0xFD8
  8715                           
  8716 ;; *************** function _ingreso_numero *****************
  8717 ;; Defined at:
  8718 ;;		line 130 in file "main.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;		None
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;		None
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      void 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8734 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8736 ;;Total ram usage:        2 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    6
  8739 ;; This function calls:
  8740 ;;		_guarda_numero_ingresado
  8741 ;; This function is called by:
  8742 ;;		_activar_alarma
  8743 ;;		_ir_a_pantalla_ingresar_contrasenia
  8744 ;;		_ir_a_pantalla_editar_contrasenia
  8745 ;;		_editar_fecha_reloj_digital
  8746 ;;		_editar_hora_reloj_digital
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text45
  8751  000FFC                     __ptext45:
  8752                           	opt stack 0
  8753  000FFC                     _ingreso_numero:
  8754                           	opt stack 18
  8755                           
  8756                           ;main.c: 131: LATAbits.LATA0 = 1;
  8757                           
  8758                           ;incstack = 0
  8759  000FFC  8089               	bsf	3977,0,c	;volatile
  8760                           
  8761                           ;main.c: 132: LATAbits.LATA1 = 0;
  8762  000FFE  9289               	bcf	3977,1,c	;volatile
  8763                           
  8764                           ;main.c: 133: LATAbits.LATA2 = 0;
  8765  001000  9489               	bcf	3977,2,c	;volatile
  8766                           
  8767                           ;main.c: 134: LATAbits.LATA3 = 0;
  8768  001002  9689               	bcf	3977,3,c	;volatile
  8769                           
  8770                           ;main.c: 135: {
  8771                           ;main.c: 136: if (PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) {
  8772  001004  BA80               	btfsc	3968,5,c	;volatile
  8773  001006  A089               	btfss	3977,0,c	;volatile
  8774  001008  D01A               	goto	u4570
  8775                           
  8776                           ;main.c: 137: key = 1;
  8777  00100A  0E01               	movlw	1
  8778  00100C  0100               	movlb	0	; () banked
  8779  00100E  6FA2               	movwf	_key& (0+255),b
  8780                           
  8781                           ; BSR set to: 0
  8782                           ;main.c: 138: guarda_numero_ingresado(key);
  8783  001010  0100               	movlb	0	; () banked
  8784  001012  51A2               	movf	_key& (0+255),w,b
  8785  001014  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8786  001016  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  8787  001018  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  8788  00101C  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  8789  001020  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  8790                           
  8791                           ;main.c: 139: while (PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) {
  8792  001024  D008               	goto	l190
  8793  001026                     
  8794                           ;main.c: 140: _delay((unsigned long)((40)*(8000000/4000.0)));
  8795  001026  0E68               	movlw	104
  8796  001028  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8797  00102A  0EE4               	movlw	228
  8798  00102C                     u6117:
  8799  00102C  2EE8               	decfsz	wreg,f,c
  8800  00102E  D7FE               	bra	u6117
  8801  001030  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  8802  001032  D7FC               	bra	u6117
  8803  001034  D000               	nop2	
  8804  001036                     l190:
  8805  001036  AA80               	btfss	3968,5,c	;volatile
  8806  001038  D002               	goto	u4570
  8807  00103A  B089               	btfsc	3977,0,c	;volatile
  8808  00103C  D7F4               	goto	l191
  8809  00103E                     u4570:
  8810                           
  8811                           ;main.c: 141: }
  8812                           ;main.c: 142: }
  8813                           ;main.c: 143: if (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) {
  8814  00103E  BE80               	btfsc	3968,7,c	;volatile
  8815  001040  A089               	btfss	3977,0,c	;volatile
  8816  001042  D01A               	goto	u4610
  8817                           
  8818                           ;main.c: 144: key = 2;
  8819  001044  0E02               	movlw	2
  8820  001046  0100               	movlb	0	; () banked
  8821  001048  6FA2               	movwf	_key& (0+255),b
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;main.c: 145: guarda_numero_ingresado(key);
  8825  00104A  0100               	movlb	0	; () banked
  8826  00104C  51A2               	movf	_key& (0+255),w,b
  8827  00104E  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8828  001050  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  8829  001052  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  8830  001056  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  8831  00105A  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  8832                           
  8833                           ;main.c: 146: while (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) {
  8834  00105E  D008               	goto	l196
  8835  001060                     
  8836                           ;main.c: 147: _delay((unsigned long)((40)*(8000000/4000.0)));
  8837  001060  0E68               	movlw	104
  8838  001062  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8839  001064  0EE4               	movlw	228
  8840  001066                     u6127:
  8841  001066  2EE8               	decfsz	wreg,f,c
  8842  001068  D7FE               	bra	u6127
  8843  00106A  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  8844  00106C  D7FC               	bra	u6127
  8845  00106E  D000               	nop2	
  8846  001070                     l196:
  8847  001070  AE80               	btfss	3968,7,c	;volatile
  8848  001072  D002               	goto	u4610
  8849  001074  B089               	btfsc	3977,0,c	;volatile
  8850  001076  D7F4               	goto	l197
  8851  001078                     u4610:
  8852                           
  8853                           ;main.c: 148: }
  8854                           ;main.c: 149: }
  8855                           ;main.c: 150: if (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1) {
  8856  001078  BC80               	btfsc	3968,6,c	;volatile
  8857  00107A  A089               	btfss	3977,0,c	;volatile
  8858  00107C  D01A               	goto	u4650
  8859                           
  8860                           ;main.c: 151: key = 3;
  8861  00107E  0E03               	movlw	3
  8862  001080  0100               	movlb	0	; () banked
  8863  001082  6FA2               	movwf	_key& (0+255),b
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;main.c: 152: guarda_numero_ingresado(key);
  8867  001084  0100               	movlb	0	; () banked
  8868  001086  51A2               	movf	_key& (0+255),w,b
  8869  001088  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8870  00108A  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  8871  00108C  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  8872  001090  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  8873  001094  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  8874                           
  8875                           ;main.c: 153: while (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1) {
  8876  001098  D008               	goto	l202
  8877  00109A                     
  8878                           ;main.c: 154: _delay((unsigned long)((40)*(8000000/4000.0)));
  8879  00109A  0E68               	movlw	104
  8880  00109C  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8881  00109E  0EE4               	movlw	228
  8882  0010A0                     u6137:
  8883  0010A0  2EE8               	decfsz	wreg,f,c
  8884  0010A2  D7FE               	bra	u6137
  8885  0010A4  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  8886  0010A6  D7FC               	bra	u6137
  8887  0010A8  D000               	nop2	
  8888  0010AA                     l202:
  8889  0010AA  AC80               	btfss	3968,6,c	;volatile
  8890  0010AC  D002               	goto	u4650
  8891  0010AE  B089               	btfsc	3977,0,c	;volatile
  8892  0010B0  D7F4               	goto	l203
  8893  0010B2                     u4650:
  8894                           
  8895                           ;main.c: 155: }
  8896                           ;main.c: 156: }
  8897                           ;main.c: 157: }
  8898                           ;main.c: 158: LATAbits.LATA0 = 0;
  8899  0010B2  9089               	bcf	3977,0,c	;volatile
  8900                           
  8901                           ;main.c: 159: LATAbits.LATA1 = 1;
  8902  0010B4  8289               	bsf	3977,1,c	;volatile
  8903                           
  8904                           ;main.c: 160: LATAbits.LATA2 = 0;
  8905  0010B6  9489               	bcf	3977,2,c	;volatile
  8906                           
  8907                           ;main.c: 161: LATAbits.LATA3 = 0;
  8908  0010B8  9689               	bcf	3977,3,c	;volatile
  8909                           
  8910                           ;main.c: 162: {
  8911                           ;main.c: 163: if (PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) {
  8912  0010BA  BA80               	btfsc	3968,5,c	;volatile
  8913  0010BC  A289               	btfss	3977,1,c	;volatile
  8914  0010BE  D01A               	goto	u4690
  8915                           
  8916                           ;main.c: 164: key = 4;
  8917  0010C0  0E04               	movlw	4
  8918  0010C2  0100               	movlb	0	; () banked
  8919  0010C4  6FA2               	movwf	_key& (0+255),b
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;main.c: 165: guarda_numero_ingresado(key);
  8923  0010C6  0100               	movlb	0	; () banked
  8924  0010C8  51A2               	movf	_key& (0+255),w,b
  8925  0010CA  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8926  0010CC  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  8927  0010CE  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  8928  0010D2  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  8929  0010D6  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  8930                           
  8931                           ;main.c: 166: while (PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) {
  8932  0010DA  D008               	goto	l208
  8933  0010DC                     
  8934                           ;main.c: 167: _delay((unsigned long)((40)*(8000000/4000.0)));
  8935  0010DC  0E68               	movlw	104
  8936  0010DE  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8937  0010E0  0EE4               	movlw	228
  8938  0010E2                     u6147:
  8939  0010E2  2EE8               	decfsz	wreg,f,c
  8940  0010E4  D7FE               	bra	u6147
  8941  0010E6  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  8942  0010E8  D7FC               	bra	u6147
  8943  0010EA  D000               	nop2	
  8944  0010EC                     l208:
  8945  0010EC  AA80               	btfss	3968,5,c	;volatile
  8946  0010EE  D002               	goto	u4690
  8947  0010F0  B289               	btfsc	3977,1,c	;volatile
  8948  0010F2  D7F4               	goto	l209
  8949  0010F4                     u4690:
  8950                           
  8951                           ;main.c: 168: }
  8952                           ;main.c: 169: }
  8953                           ;main.c: 170: if (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) {
  8954  0010F4  BE80               	btfsc	3968,7,c	;volatile
  8955  0010F6  A289               	btfss	3977,1,c	;volatile
  8956  0010F8  D01A               	goto	u4730
  8957                           
  8958                           ;main.c: 171: key = 5;
  8959  0010FA  0E05               	movlw	5
  8960  0010FC  0100               	movlb	0	; () banked
  8961  0010FE  6FA2               	movwf	_key& (0+255),b
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;main.c: 172: guarda_numero_ingresado(key);
  8965  001100  0100               	movlb	0	; () banked
  8966  001102  51A2               	movf	_key& (0+255),w,b
  8967  001104  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8968  001106  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  8969  001108  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  8970  00110C  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  8971  001110  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  8972                           
  8973                           ;main.c: 173: while (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) {
  8974  001114  D008               	goto	l214
  8975  001116                     
  8976                           ;main.c: 174: _delay((unsigned long)((40)*(8000000/4000.0)));
  8977  001116  0E68               	movlw	104
  8978  001118  6E3B               	movwf	??_ingreso_numero& (0+255),c
  8979  00111A  0EE4               	movlw	228
  8980  00111C                     u6157:
  8981  00111C  2EE8               	decfsz	wreg,f,c
  8982  00111E  D7FE               	bra	u6157
  8983  001120  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  8984  001122  D7FC               	bra	u6157
  8985  001124  D000               	nop2	
  8986  001126                     l214:
  8987  001126  AE80               	btfss	3968,7,c	;volatile
  8988  001128  D002               	goto	u4730
  8989  00112A  B289               	btfsc	3977,1,c	;volatile
  8990  00112C  D7F4               	goto	l215
  8991  00112E                     u4730:
  8992                           
  8993                           ;main.c: 175: }
  8994                           ;main.c: 176: }
  8995                           ;main.c: 177: if (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1) {
  8996  00112E  BC80               	btfsc	3968,6,c	;volatile
  8997  001130  A289               	btfss	3977,1,c	;volatile
  8998  001132  D01A               	goto	u4770
  8999                           
  9000                           ;main.c: 178: key = 6;
  9001  001134  0E06               	movlw	6
  9002  001136  0100               	movlb	0	; () banked
  9003  001138  6FA2               	movwf	_key& (0+255),b
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;main.c: 179: guarda_numero_ingresado(key);
  9007  00113A  0100               	movlb	0	; () banked
  9008  00113C  51A2               	movf	_key& (0+255),w,b
  9009  00113E  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9010  001140  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  9011  001142  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9012  001146  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9013  00114A  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  9014                           
  9015                           ;main.c: 180: while (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1) {
  9016  00114E  D008               	goto	l220
  9017  001150                     
  9018                           ;main.c: 181: _delay((unsigned long)((40)*(8000000/4000.0)));
  9019  001150  0E68               	movlw	104
  9020  001152  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9021  001154  0EE4               	movlw	228
  9022  001156                     u6167:
  9023  001156  2EE8               	decfsz	wreg,f,c
  9024  001158  D7FE               	bra	u6167
  9025  00115A  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  9026  00115C  D7FC               	bra	u6167
  9027  00115E  D000               	nop2	
  9028  001160                     l220:
  9029  001160  AC80               	btfss	3968,6,c	;volatile
  9030  001162  D002               	goto	u4770
  9031  001164  B289               	btfsc	3977,1,c	;volatile
  9032  001166  D7F4               	goto	l221
  9033  001168                     u4770:
  9034                           
  9035                           ;main.c: 182: }
  9036                           ;main.c: 183: }
  9037                           ;main.c: 184: }
  9038                           ;main.c: 185: LATAbits.LATA0 = 0;
  9039  001168  9089               	bcf	3977,0,c	;volatile
  9040                           
  9041                           ;main.c: 186: LATAbits.LATA1 = 0;
  9042  00116A  9289               	bcf	3977,1,c	;volatile
  9043                           
  9044                           ;main.c: 187: LATAbits.LATA2 = 1;
  9045  00116C  8489               	bsf	3977,2,c	;volatile
  9046                           
  9047                           ;main.c: 188: LATAbits.LATA3 = 0;
  9048  00116E  9689               	bcf	3977,3,c	;volatile
  9049                           
  9050                           ;main.c: 189: {
  9051                           ;main.c: 190: if (PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) {
  9052  001170  BA80               	btfsc	3968,5,c	;volatile
  9053  001172  A489               	btfss	3977,2,c	;volatile
  9054  001174  D01A               	goto	u4810
  9055                           
  9056                           ;main.c: 191: key = 7;
  9057  001176  0E07               	movlw	7
  9058  001178  0100               	movlb	0	; () banked
  9059  00117A  6FA2               	movwf	_key& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;main.c: 192: guarda_numero_ingresado(key);
  9063  00117C  0100               	movlb	0	; () banked
  9064  00117E  51A2               	movf	_key& (0+255),w,b
  9065  001180  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9066  001182  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  9067  001184  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9068  001188  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9069  00118C  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  9070                           
  9071                           ;main.c: 193: while (PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) {
  9072  001190  D008               	goto	l226
  9073  001192                     
  9074                           ;main.c: 194: _delay((unsigned long)((40)*(8000000/4000.0)));
  9075  001192  0E68               	movlw	104
  9076  001194  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9077  001196  0EE4               	movlw	228
  9078  001198                     u6177:
  9079  001198  2EE8               	decfsz	wreg,f,c
  9080  00119A  D7FE               	bra	u6177
  9081  00119C  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  9082  00119E  D7FC               	bra	u6177
  9083  0011A0  D000               	nop2	
  9084  0011A2                     l226:
  9085  0011A2  AA80               	btfss	3968,5,c	;volatile
  9086  0011A4  D002               	goto	u4810
  9087  0011A6  B489               	btfsc	3977,2,c	;volatile
  9088  0011A8  D7F4               	goto	l227
  9089  0011AA                     u4810:
  9090                           
  9091                           ;main.c: 195: }
  9092                           ;main.c: 196: }
  9093                           ;main.c: 197: if (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) {
  9094  0011AA  BE80               	btfsc	3968,7,c	;volatile
  9095  0011AC  A489               	btfss	3977,2,c	;volatile
  9096  0011AE  D01A               	goto	u4850
  9097                           
  9098                           ;main.c: 198: key = 8;
  9099  0011B0  0E08               	movlw	8
  9100  0011B2  0100               	movlb	0	; () banked
  9101  0011B4  6FA2               	movwf	_key& (0+255),b
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;main.c: 199: guarda_numero_ingresado(key);
  9105  0011B6  0100               	movlb	0	; () banked
  9106  0011B8  51A2               	movf	_key& (0+255),w,b
  9107  0011BA  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9108  0011BC  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  9109  0011BE  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9110  0011C2  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9111  0011C6  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  9112                           
  9113                           ;main.c: 200: while (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) {
  9114  0011CA  D008               	goto	l232
  9115  0011CC                     
  9116                           ;main.c: 201: _delay((unsigned long)((40)*(8000000/4000.0)));
  9117  0011CC  0E68               	movlw	104
  9118  0011CE  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9119  0011D0  0EE4               	movlw	228
  9120  0011D2                     u6187:
  9121  0011D2  2EE8               	decfsz	wreg,f,c
  9122  0011D4  D7FE               	bra	u6187
  9123  0011D6  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  9124  0011D8  D7FC               	bra	u6187
  9125  0011DA  D000               	nop2	
  9126  0011DC                     l232:
  9127  0011DC  AE80               	btfss	3968,7,c	;volatile
  9128  0011DE  D002               	goto	u4850
  9129  0011E0  B489               	btfsc	3977,2,c	;volatile
  9130  0011E2  D7F4               	goto	l233
  9131  0011E4                     u4850:
  9132                           
  9133                           ;main.c: 202: }
  9134                           ;main.c: 203: }
  9135                           ;main.c: 204: if (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1) {
  9136  0011E4  BC80               	btfsc	3968,6,c	;volatile
  9137  0011E6  A489               	btfss	3977,2,c	;volatile
  9138  0011E8  D01A               	goto	u4890
  9139                           
  9140                           ;main.c: 205: key = 9;
  9141  0011EA  0E09               	movlw	9
  9142  0011EC  0100               	movlb	0	; () banked
  9143  0011EE  6FA2               	movwf	_key& (0+255),b
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;main.c: 206: guarda_numero_ingresado(key);
  9147  0011F0  0100               	movlb	0	; () banked
  9148  0011F2  51A2               	movf	_key& (0+255),w,b
  9149  0011F4  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9150  0011F6  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  9151  0011F8  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9152  0011FC  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9153  001200  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  9154                           
  9155                           ;main.c: 207: while (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1) {
  9156  001204  D008               	goto	l238
  9157  001206                     
  9158                           ;main.c: 208: _delay((unsigned long)((40)*(8000000/4000.0)));
  9159  001206  0E68               	movlw	104
  9160  001208  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9161  00120A  0EE4               	movlw	228
  9162  00120C                     u6197:
  9163  00120C  2EE8               	decfsz	wreg,f,c
  9164  00120E  D7FE               	bra	u6197
  9165  001210  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  9166  001212  D7FC               	bra	u6197
  9167  001214  D000               	nop2	
  9168  001216                     l238:
  9169  001216  AC80               	btfss	3968,6,c	;volatile
  9170  001218  D002               	goto	u4890
  9171  00121A  B489               	btfsc	3977,2,c	;volatile
  9172  00121C  D7F4               	goto	l239
  9173  00121E                     u4890:
  9174                           
  9175                           ;main.c: 209: }
  9176                           ;main.c: 210: }
  9177                           ;main.c: 211: }
  9178                           ;main.c: 212: LATAbits.LATA0 = 0;
  9179  00121E  9089               	bcf	3977,0,c	;volatile
  9180                           
  9181                           ;main.c: 213: LATAbits.LATA1 = 0;
  9182  001220  9289               	bcf	3977,1,c	;volatile
  9183                           
  9184                           ;main.c: 214: LATAbits.LATA2 = 0;
  9185  001222  9489               	bcf	3977,2,c	;volatile
  9186                           
  9187                           ;main.c: 215: LATAbits.LATA3 = 1;
  9188  001224  8689               	bsf	3977,3,c	;volatile
  9189                           
  9190                           ;main.c: 217: if (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) {
  9191  001226  AE80               	btfss	3968,7,c	;volatile
  9192  001228  0012               	return	
  9193  00122A  A689               	btfss	3977,3,c	;volatile
  9194  00122C  0012               	return	
  9195                           
  9196                           ;main.c: 218: key = 0;
  9197  00122E  0E00               	movlw	0
  9198  001230  0100               	movlb	0	; () banked
  9199  001232  6FA2               	movwf	_key& (0+255),b
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;main.c: 219: guarda_numero_ingresado(key);
  9203  001234  0100               	movlb	0	; () banked
  9204  001236  51A2               	movf	_key& (0+255),w,b
  9205  001238  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9206  00123A  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  9207  00123C  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9208  001240  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9209  001244  EC57  F018         	call	_guarda_numero_ingresado	;wreg free
  9210                           
  9211                           ;main.c: 220: while (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) {
  9212  001248  D008               	goto	l244
  9213  00124A                     
  9214                           ;main.c: 221: _delay((unsigned long)((40)*(8000000/4000.0)));
  9215  00124A  0E68               	movlw	104
  9216  00124C  6E3B               	movwf	??_ingreso_numero& (0+255),c
  9217  00124E  0EE4               	movlw	228
  9218  001250                     u6207:
  9219  001250  2EE8               	decfsz	wreg,f,c
  9220  001252  D7FE               	bra	u6207
  9221  001254  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  9222  001256  D7FC               	bra	u6207
  9223  001258  D000               	nop2	
  9224  00125A                     l244:
  9225  00125A  AE80               	btfss	3968,7,c	;volatile
  9226  00125C  0012               	return	
  9227  00125E  A689               	btfss	3977,3,c	;volatile
  9228  001260  0012               	return	
  9229  001262  D7F3               	goto	l245
  9230  001264                     __end_of_ingreso_numero:
  9231                           	opt stack 0
  9232                           tblptru	equ	0xFF8
  9233                           tblptrh	equ	0xFF7
  9234                           tblptrl	equ	0xFF6
  9235                           tablat	equ	0xFF5
  9236                           prodh	equ	0xFF4
  9237                           prodl	equ	0xFF3
  9238                           intcon	equ	0xFF2
  9239                           postinc0	equ	0xFEE
  9240                           wreg	equ	0xFE8
  9241                           postinc1	equ	0xFE6
  9242                           postdec1	equ	0xFE5
  9243                           fsr1h	equ	0xFE2
  9244                           fsr1l	equ	0xFE1
  9245                           indf2	equ	0xFDF
  9246                           postinc2	equ	0xFDE
  9247                           postdec2	equ	0xFDD
  9248                           fsr2h	equ	0xFDA
  9249                           fsr2l	equ	0xFD9
  9250                           status	equ	0xFD8
  9251                           
  9252 ;; *************** function _guarda_numero_ingresado *****************
  9253 ;; Defined at:
  9254 ;;		line 117 in file "main.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  num             2   56[COMRAM] PTR int 
  9257 ;;		 -> RAM(3775), 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;		None
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  1    wreg      void 
  9262 ;; Registers used:
  9263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9272 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9273 ;;Total ram usage:        2 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    5
  9276 ;; This function calls:
  9277 ;;		_lcd_gotoxy
  9278 ;;		_lcd_putrs
  9279 ;;		_sprintf
  9280 ;; This function is called by:
  9281 ;;		_ingreso_numero
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           	psect	text46
  9286  0030AE                     __ptext46:
  9287                           	opt stack 0
  9288  0030AE                     _guarda_numero_ingresado:
  9289                           	opt stack 18
  9290                           
  9291                           ;main.c: 118: if (motivo_ingreso_de_numeros == 0) {
  9292                           
  9293                           ;incstack = 0
  9294  0030AE  0100               	movlb	0	; () banked
  9295  0030B0  5190               	movf	_motivo_ingreso_de_numeros& (0+255),w,b
  9296  0030B2  0100               	movlb	0	; () banked
  9297  0030B4  1191               	iorwf	(_motivo_ingreso_de_numeros+1)& (0+255),w,b
  9298  0030B6  A4D8               	btfss	status,2,c
  9299  0030B8  D02D               	goto	l184
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;main.c: 119: array_contrasenia_ingresada[numeros_ingresados] = num;
  9303  0030BA  90D8               	bcf	status,0,c
  9304  0030BC  0100               	movlb	0	; () banked
  9305  0030BE  3592               	rlcf	_numeros_ingresados& (0+255),w,b
  9306  0030C0  6ED9               	movwf	fsr2l,c
  9307  0030C2  0100               	movlb	0	; () banked
  9308  0030C4  3593               	rlcf	(_numeros_ingresados+1)& (0+255),w,b
  9309  0030C6  6EDA               	movwf	fsr2h,c
  9310  0030C8  0E60               	movlw	low _array_contrasenia_ingresada
  9311  0030CA  26D9               	addwf	fsr2l,f,c
  9312  0030CC  0E00               	movlw	high _array_contrasenia_ingresada
  9313  0030CE  22DA               	addwfc	fsr2h,f,c
  9314  0030D0  C039  FFDE         	movff	guarda_numero_ingresado@num,postinc2
  9315  0030D4  C03A  FFDD         	movff	guarda_numero_ingresado@num+1,postdec2
  9316                           
  9317                           ; BSR set to: 0
  9318                           ;main.c: 120: lcd_gotoxy(numeros_ingresados + 1, 2);
  9319  0030D8  0E02               	movlw	2
  9320  0030DA  6E05               	movwf	lcd_gotoxy@y,c
  9321  0030DC  0100               	movlb	0	; () banked
  9322  0030DE  2992               	incf	_numeros_ingresados& (0+255),w,b
  9323  0030E0  EC9E  F01C         	call	_lcd_gotoxy
  9324                           
  9325                           ;main.c: 121: sprintf(buffer2, "%01u", num);
  9326  0030E4  0EA3               	movlw	low _buffer2
  9327  0030E6  6E22               	movwf	sprintf@sp,c
  9328  0030E8  0E00               	movlw	high _buffer2
  9329  0030EA  6E23               	movwf	sprintf@sp+1,c
  9330  0030EC  0EF5               	movlw	low STR_13
  9331  0030EE  6E24               	movwf	sprintf@f,c
  9332  0030F0  0E0F               	movlw	high STR_13
  9333  0030F2  6E25               	movwf	sprintf@f+1,c
  9334  0030F4  C039  F026         	movff	guarda_numero_ingresado@num,?_sprintf+4
  9335  0030F8  C03A  F027         	movff	guarda_numero_ingresado@num+1,?_sprintf+5
  9336  0030FC  EC4E  F00A         	call	_sprintf	;wreg free
  9337                           
  9338                           ;main.c: 122: lcd_putrs(buffer2);
  9339  003100  0EA3               	movlw	low _buffer2
  9340  003102  6E09               	movwf	lcd_putrs@ptr,c
  9341  003104  0E00               	movlw	high _buffer2
  9342  003106  6E0A               	movwf	lcd_putrs@ptr+1,c
  9343  003108  EC2F  F01B         	call	_lcd_putrs	;wreg free
  9344                           
  9345                           ;main.c: 123: numeros_ingresados++;
  9346  00310C  0100               	movlb	0	; () banked
  9347  00310E  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  9348  003110  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  9349                           
  9350                           ;main.c: 124: } else {
  9351  003112  0012               	return	
  9352  003114                     l184:
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;main.c: 125: numeros_para_fecha[numeros_ingresados] = num;
  9356                           
  9357                           ; BSR set to: 0
  9358  003114  90D8               	bcf	status,0,c
  9359  003116  0100               	movlb	0	; () banked
  9360  003118  3592               	rlcf	_numeros_ingresados& (0+255),w,b
  9361  00311A  6ED9               	movwf	fsr2l,c
  9362  00311C  0100               	movlb	0	; () banked
  9363  00311E  3593               	rlcf	(_numeros_ingresados+1)& (0+255),w,b
  9364  003120  6EDA               	movwf	fsr2h,c
  9365  003122  0E80               	movlw	low _numeros_para_fecha
  9366  003124  26D9               	addwf	fsr2l,f,c
  9367  003126  0E00               	movlw	high _numeros_para_fecha
  9368  003128  22DA               	addwfc	fsr2h,f,c
  9369  00312A  C039  FFDE         	movff	guarda_numero_ingresado@num,postinc2
  9370  00312E  C03A  FFDD         	movff	guarda_numero_ingresado@num+1,postdec2
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;main.c: 126: numeros_ingresados++;
  9374  003132  0100               	movlb	0	; () banked
  9375  003134  4B92               	infsnz	_numeros_ingresados& (0+255),f,b
  9376  003136  2B93               	incf	(_numeros_ingresados+1)& (0+255),f,b
  9377  003138  0012               	return	
  9378  00313A                     __end_of_guarda_numero_ingresado:
  9379                           	opt stack 0
  9380                           tblptru	equ	0xFF8
  9381                           tblptrh	equ	0xFF7
  9382                           tblptrl	equ	0xFF6
  9383                           tablat	equ	0xFF5
  9384                           prodh	equ	0xFF4
  9385                           prodl	equ	0xFF3
  9386                           intcon	equ	0xFF2
  9387                           postinc0	equ	0xFEE
  9388                           wreg	equ	0xFE8
  9389                           postinc1	equ	0xFE6
  9390                           postdec1	equ	0xFE5
  9391                           fsr1h	equ	0xFE2
  9392                           fsr1l	equ	0xFE1
  9393                           indf2	equ	0xFDF
  9394                           postinc2	equ	0xFDE
  9395                           postdec2	equ	0xFDD
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function _cambiar_opcion *****************
  9401 ;; Defined at:
  9402 ;;		line 242 in file "main.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;		None
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;		None
  9407 ;; Return value:  Size  Location     Type
  9408 ;;                  1    wreg      void 
  9409 ;; Registers used:
  9410 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9420 ;;Total ram usage:        1 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    5
  9423 ;; This function calls:
  9424 ;;		_lcd_gotoxy
  9425 ;;		_lcd_putrs
  9426 ;;		_sprintf
  9427 ;; This function is called by:
  9428 ;;		_ir_a_pantalla_edicion
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           	psect	text47
  9433  002A72                     __ptext47:
  9434                           	opt stack 0
  9435  002A72                     _cambiar_opcion:
  9436                           	opt stack 21
  9437                           
  9438                           ;main.c: 243: LATAbits.LATA0 = 0;
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;incstack = 0
  9442  002A72  9089               	bcf	3977,0,c	;volatile
  9443                           
  9444                           ;main.c: 244: LATAbits.LATA1 = 0;
  9445  002A74  9289               	bcf	3977,1,c	;volatile
  9446                           
  9447                           ;main.c: 245: LATAbits.LATA2 = 1;
  9448  002A76  8489               	bsf	3977,2,c	;volatile
  9449                           
  9450                           ;main.c: 246: LATAbits.LATA3 = 0;
  9451  002A78  9689               	bcf	3977,3,c	;volatile
  9452                           
  9453                           ;main.c: 247: if (PORTCbits.RC2 == 1 && LATAbits.LATA2 == 1) {
  9454  002A7A  B482               	btfsc	3970,2,c	;volatile
  9455  002A7C  A489               	btfss	3977,2,c	;volatile
  9456  002A7E  D01D               	goto	u5500
  9457                           
  9458                           ;main.c: 248: if (boton_seleccionar == 3) {
  9459  002A80  0E03               	movlw	3
  9460  002A82  0100               	movlb	0	; () banked
  9461  002A84  198C               	xorwf	_boton_seleccionar& (0+255),w,b
  9462  002A86  0100               	movlb	0	; () banked
  9463  002A88  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  9464  002A8A  A4D8               	btfss	status,2,c
  9465  002A8C  D006               	goto	l261
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;main.c: 249: boton_seleccionar = 0;
  9469  002A8E  0E00               	movlw	0
  9470  002A90  0100               	movlb	0	; () banked
  9471  002A92  6F8D               	movwf	(_boton_seleccionar+1)& (0+255),b
  9472  002A94  0E00               	movlw	0
  9473  002A96  6F8C               	movwf	_boton_seleccionar& (0+255),b
  9474                           
  9475                           ;main.c: 250: } else {
  9476  002A98  D00C               	goto	l263
  9477  002A9A                     l261:
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;main.c: 251: boton_seleccionar++;
  9481                           
  9482                           ; BSR set to: 0
  9483  002A9A  0100               	movlb	0	; () banked
  9484  002A9C  4B8C               	infsnz	_boton_seleccionar& (0+255),f,b
  9485  002A9E  2B8D               	incf	(_boton_seleccionar+1)& (0+255),f,b
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;main.c: 252: }
  9489                           ;main.c: 253: while (PORTCbits.RC2 == 1 && LATAbits.LATA2 == 1) {
  9490  002AA0  D008               	goto	l263
  9491  002AA2                     
  9492                           ;main.c: 254: _delay((unsigned long)((40)*(8000000/4000.0)));
  9493                           
  9494                           ; BSR set to: 0
  9495  002AA2  0E68               	movlw	104
  9496  002AA4  6E39               	movwf	??_cambiar_opcion& (0+255),c
  9497  002AA6  0EE4               	movlw	228
  9498  002AA8                     u6217:
  9499  002AA8  2EE8               	decfsz	wreg,f,c
  9500  002AAA  D7FE               	bra	u6217
  9501  002AAC  2E39               	decfsz	??_cambiar_opcion& (0+255),f,c
  9502  002AAE  D7FC               	bra	u6217
  9503  002AB0  D000               	nop2	
  9504  002AB2                     l263:
  9505  002AB2  A482               	btfss	3970,2,c	;volatile
  9506  002AB4  D002               	goto	u5500
  9507  002AB6  B489               	btfsc	3977,2,c	;volatile
  9508  002AB8  D7F4               	goto	l264
  9509  002ABA                     u5500:
  9510                           
  9511                           ;main.c: 255: }
  9512                           ;main.c: 256: }
  9513                           ;main.c: 258: LATAbits.LATA0 = 0;
  9514  002ABA  9089               	bcf	3977,0,c	;volatile
  9515                           
  9516                           ;main.c: 259: LATAbits.LATA1 = 0;
  9517  002ABC  9289               	bcf	3977,1,c	;volatile
  9518                           
  9519                           ;main.c: 260: LATAbits.LATA2 = 0;
  9520  002ABE  9489               	bcf	3977,2,c	;volatile
  9521                           
  9522                           ;main.c: 261: LATAbits.LATA3 = 1;
  9523  002AC0  8689               	bsf	3977,3,c	;volatile
  9524                           
  9525                           ;main.c: 262: if (PORTCbits.RC2 == 1 && LATAbits.LATA3 == 1) {
  9526  002AC2  B482               	btfsc	3970,2,c	;volatile
  9527  002AC4  A689               	btfss	3977,3,c	;volatile
  9528  002AC6  D01D               	goto	u5550
  9529                           
  9530                           ;main.c: 263: if (boton_seleccionar == 0) {
  9531  002AC8  0100               	movlb	0	; () banked
  9532  002ACA  518C               	movf	_boton_seleccionar& (0+255),w,b
  9533  002ACC  0100               	movlb	0	; () banked
  9534  002ACE  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  9535  002AD0  A4D8               	btfss	status,2,c
  9536  002AD2  D006               	goto	l269
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;main.c: 264: boton_seleccionar = 3;
  9540  002AD4  0E00               	movlw	0
  9541  002AD6  0100               	movlb	0	; () banked
  9542  002AD8  6F8D               	movwf	(_boton_seleccionar+1)& (0+255),b
  9543  002ADA  0E03               	movlw	3
  9544  002ADC  6F8C               	movwf	_boton_seleccionar& (0+255),b
  9545                           
  9546                           ;main.c: 265: } else {
  9547  002ADE  D00D               	goto	l271
  9548  002AE0                     l269:
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;main.c: 266: boton_seleccionar--;
  9552                           
  9553                           ; BSR set to: 0
  9554  002AE0  0100               	movlb	0	; () banked
  9555  002AE2  078C               	decf	_boton_seleccionar& (0+255),f,b
  9556  002AE4  A0D8               	btfss	status,0,c
  9557  002AE6  078D               	decf	(_boton_seleccionar+1)& (0+255),f,b
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;main.c: 267: }
  9561                           ;main.c: 268: while (PORTCbits.RC2 == 1 && LATAbits.LATA3 == 1) {
  9562  002AE8  D008               	goto	l271
  9563  002AEA                     
  9564                           ;main.c: 269: _delay((unsigned long)((40)*(8000000/4000.0)));
  9565                           
  9566                           ; BSR set to: 0
  9567  002AEA  0E68               	movlw	104
  9568  002AEC  6E39               	movwf	??_cambiar_opcion& (0+255),c
  9569  002AEE  0EE4               	movlw	228
  9570  002AF0                     u6227:
  9571  002AF0  2EE8               	decfsz	wreg,f,c
  9572  002AF2  D7FE               	bra	u6227
  9573  002AF4  2E39               	decfsz	??_cambiar_opcion& (0+255),f,c
  9574  002AF6  D7FC               	bra	u6227
  9575  002AF8  D000               	nop2	
  9576  002AFA                     l271:
  9577  002AFA  A482               	btfss	3970,2,c	;volatile
  9578  002AFC  D002               	goto	u5550
  9579  002AFE  B689               	btfsc	3977,3,c	;volatile
  9580  002B00  D7F4               	goto	l272
  9581  002B02                     u5550:
  9582                           
  9583                           ;main.c: 270: }
  9584                           ;main.c: 271: }
  9585                           ;main.c: 273: sprintf(buffer2, "%01u", boton_seleccionar);
  9586  002B02  0EA3               	movlw	low _buffer2
  9587  002B04  6E22               	movwf	sprintf@sp,c
  9588  002B06  0E00               	movlw	high _buffer2
  9589  002B08  6E23               	movwf	sprintf@sp+1,c
  9590  002B0A  0EF5               	movlw	low STR_13
  9591  002B0C  6E24               	movwf	sprintf@f,c
  9592  002B0E  0E0F               	movlw	high STR_13
  9593  002B10  6E25               	movwf	sprintf@f+1,c
  9594  002B12  C08C  F026         	movff	_boton_seleccionar,?_sprintf+4
  9595  002B16  C08D  F027         	movff	_boton_seleccionar+1,?_sprintf+5
  9596  002B1A  EC4E  F00A         	call	_sprintf	;wreg free
  9597                           
  9598                           ;main.c: 274: lcd_gotoxy(8, 1);
  9599  002B1E  0E01               	movlw	1
  9600  002B20  6E05               	movwf	lcd_gotoxy@y,c
  9601  002B22  0E08               	movlw	8
  9602  002B24  EC9E  F01C         	call	_lcd_gotoxy
  9603                           
  9604                           ;main.c: 275: lcd_putrs(buffer2);
  9605  002B28  0EA3               	movlw	low _buffer2
  9606  002B2A  6E09               	movwf	lcd_putrs@ptr,c
  9607  002B2C  0E00               	movlw	high _buffer2
  9608  002B2E  6E0A               	movwf	lcd_putrs@ptr+1,c
  9609  002B30  EC2F  F01B         	call	_lcd_putrs	;wreg free
  9610  002B34  0012               	return		;funcret
  9611  002B36                     __end_of_cambiar_opcion:
  9612                           	opt stack 0
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           prodh	equ	0xFF4
  9618                           prodl	equ	0xFF3
  9619                           intcon	equ	0xFF2
  9620                           postinc0	equ	0xFEE
  9621                           wreg	equ	0xFE8
  9622                           postinc1	equ	0xFE6
  9623                           postdec1	equ	0xFE5
  9624                           fsr1h	equ	0xFE2
  9625                           fsr1l	equ	0xFE1
  9626                           indf2	equ	0xFDF
  9627                           postinc2	equ	0xFDE
  9628                           postdec2	equ	0xFDD
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function _sprintf *****************
  9634 ;; Defined at:
  9635 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;  sp              2   33[COMRAM] PTR unsigned char 
  9638 ;;		 -> buffer2(20), 
  9639 ;;  f               2   35[COMRAM] PTR const unsigned char 
  9640 ;;		 -> STR_25(5), STR_16(5), STR_13(5), STR_8(15), 
  9641 ;;		 -> STR_7(15), 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  tmpval          4    0        struct .
  9644 ;;  cp              3    0        PTR const unsigned char 
  9645 ;;  width           2   53[COMRAM] int 
  9646 ;;  val             2   50[COMRAM] unsigned int 
  9647 ;;  ap              2   47[COMRAM] PTR void [1]
  9648 ;;		 -> ?_sprintf(2), 
  9649 ;;  len             2    0        unsigned int 
  9650 ;;  c               1   55[COMRAM] char 
  9651 ;;  prec            1   52[COMRAM] char 
  9652 ;;  flag            1   49[COMRAM] unsigned char 
  9653 ;; Return value:  Size  Location     Type
  9654 ;;                  2   33[COMRAM] int 
  9655 ;; Registers used:
  9656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9657 ;; Tracked objects:
  9658 ;;		On entry : 0/0
  9659 ;;		On exit  : 0/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9662 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9663 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9664 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9665 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9666 ;;Total ram usage:       23 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    1
  9669 ;; This function calls:
  9670 ;;		___lwdiv
  9671 ;;		___lwmod
  9672 ;;		___wmul
  9673 ;;		_isdigit
  9674 ;; This function is called by:
  9675 ;;		_setDiaMesAnio
  9676 ;;		_setHoraMinutoSegundo
  9677 ;;		_guarda_numero_ingresado
  9678 ;;		_cambiar_opcion
  9679 ;;		_covertir_valores_de_array_a_escala_decimal
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           	psect	text48
  9684  00149C                     __ptext48:
  9685                           	opt stack 0
  9686  00149C                     _sprintf:
  9687                           	opt stack 26
  9688                           
  9689                           ;doprnt.c: 494: va_list ap;
  9690                           ;doprnt.c: 499: signed char c;
  9691                           ;doprnt.c: 501: int width;
  9692                           ;doprnt.c: 506: signed char prec;
  9693                           ;doprnt.c: 508: unsigned char flag;
  9694                           ;doprnt.c: 523: union {
  9695                           ;doprnt.c: 524: unsigned long vd;
  9696                           ;doprnt.c: 525: double integ;
  9697                           ;doprnt.c: 526: } tmpval;
  9698                           ;doprnt.c: 528: unsigned int val;
  9699                           ;doprnt.c: 529: unsigned len;
  9700                           ;doprnt.c: 530: const char * cp;
  9701                           ;doprnt.c: 533: *ap = __va_start();
  9702                           
  9703                           ;incstack = 0
  9704  00149C  0E26               	movlw	low (?_sprintf+4)
  9705  00149E  6E30               	movwf	sprintf@ap,c
  9706  0014A0  0E00               	movlw	high (?_sprintf+4)
  9707  0014A2  6E31               	movwf	sprintf@ap+1,c
  9708                           
  9709                           ;doprnt.c: 536: while(c = *f++) {
  9710  0014A4  D100               	goto	u4220
  9711  0014A6                     
  9712                           ;doprnt.c: 538: if(c != '%')
  9713  0014A6  0E25               	movlw	37
  9714  0014A8  1838               	xorwf	sprintf@c,w,c
  9715  0014AA  B4D8               	btfsc	status,2,c
  9716  0014AC  D009               	goto	l505
  9717                           
  9718                           ;doprnt.c: 540: {
  9719                           ;doprnt.c: 541: ((*sp++ = (c)));
  9720  0014AE  C022  FFD9         	movff	sprintf@sp,fsr2l
  9721  0014B2  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  9722  0014B6  C038  FFDF         	movff	sprintf@c,indf2
  9723  0014BA  4A22               	infsnz	sprintf@sp,f,c
  9724  0014BC  2A23               	incf	sprintf@sp+1,f,c
  9725                           
  9726                           ;doprnt.c: 542: continue;
  9727  0014BE  D0F3               	goto	u4220
  9728  0014C0                     l505:
  9729                           
  9730                           ;doprnt.c: 543: }
  9731                           ;doprnt.c: 546: width = 0;
  9732  0014C0  0E00               	movlw	0
  9733  0014C2  6E37               	movwf	sprintf@width+1,c
  9734  0014C4  0E00               	movlw	0
  9735  0014C6  6E36               	movwf	sprintf@width,c
  9736                           
  9737                           ;doprnt.c: 548: flag = 0;
  9738  0014C8  0E00               	movlw	0
  9739  0014CA  6E32               	movwf	sprintf@flag,c
  9740                           
  9741                           ;doprnt.c: 551: switch(*f) {
  9742                           
  9743                           ;doprnt.c: 550: for(;;) {
  9744  0014CC  D003               	goto	l507
  9745  0014CE                     
  9746                           ;doprnt.c: 580: flag |= 0x04;
  9747  0014CE  8432               	bsf	sprintf@flag,2,c
  9748                           
  9749                           ;doprnt.c: 581: f++;
  9750  0014D0  4A24               	infsnz	sprintf@f,f,c
  9751  0014D2  2A25               	incf	sprintf@f+1,f,c
  9752  0014D4                     l507:
  9753  0014D4  C024  FFF6         	movff	sprintf@f,tblptrl
  9754  0014D8  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9755  0014DC                     	if	0	;tblptru may be non-zero
  9756  0014DC                     	endif
  9757  0014DC                     	if	0	;tblptru may be non-zero
  9758  0014DC                     	endif
  9759  0014DC  0008               	tblrd		*
  9760  0014DE  50F5               	movf	tablat,w,c
  9761                           
  9762                           ; Switch size 1, requested type "space"
  9763                           ; Number of cases is 1, Range of values is 48 to 48
  9764                           ; switch strategies available:
  9765                           ; Name         Instructions Cycles
  9766                           ; simple_byte            4     3 (average)
  9767                           ;	Chosen strategy is simple_byte
  9768  0014E0  0A30               	xorlw	48	; case 48
  9769  0014E2  B4D8               	btfsc	status,2,c
  9770  0014E4  D7F4               	goto	l508
  9771                           
  9772                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9773                           
  9774                           ;doprnt.c: 586: }
  9775                           
  9776                           ;doprnt.c: 585: break;
  9777  0014E6  C024  FFF6         	movff	sprintf@f,tblptrl
  9778  0014EA  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9779  0014EE                     	if	0	;tblptru may be non-zero
  9780  0014EE                     	endif
  9781  0014EE                     	if	0	;tblptru may be non-zero
  9782  0014EE                     	endif
  9783  0014EE  0008               	tblrd		*
  9784  0014F0  50F5               	movf	tablat,w,c
  9785  0014F2  ECAF  F01C         	call	_isdigit
  9786  0014F6  A0D8               	btfss	status,0,c
  9787  0014F8  D036               	goto	l515
  9788                           
  9789                           ;doprnt.c: 598: width = 0;
  9790  0014FA  0E00               	movlw	0
  9791  0014FC  6E37               	movwf	sprintf@width+1,c
  9792  0014FE  0E00               	movlw	0
  9793  001500  6E36               	movwf	sprintf@width,c
  9794  001502                     
  9795                           ;doprnt.c: 600: width *= 10;
  9796  001502  C036  F01C         	movff	sprintf@width,___wmul@multiplier
  9797  001506  C037  F01D         	movff	sprintf@width+1,___wmul@multiplier+1
  9798  00150A  0E00               	movlw	0
  9799  00150C  6E1F               	movwf	___wmul@multiplicand+1,c
  9800  00150E  0E0A               	movlw	10
  9801  001510  6E1E               	movwf	___wmul@multiplicand,c
  9802  001512  EC67  F01C         	call	___wmul	;wreg free
  9803  001516  C01C  F036         	movff	?___wmul,sprintf@width
  9804  00151A  C01D  F037         	movff	?___wmul+1,sprintf@width+1
  9805                           
  9806                           ;doprnt.c: 601: width += *f++ - '0';
  9807  00151E  0ED0               	movlw	208
  9808  001520  6E2C               	movwf	??_sprintf& (0+255),c
  9809  001522  0EFF               	movlw	255
  9810  001524  6E2D               	movwf	(??_sprintf+1)& (0+255),c
  9811  001526  C024  FFF6         	movff	sprintf@f,tblptrl
  9812  00152A  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9813  00152E                     	if	0	;tblptru may be non-zero
  9814  00152E                     	endif
  9815  00152E                     	if	0	;tblptru may be non-zero
  9816  00152E                     	endif
  9817  00152E  0008               	tblrd		*
  9818  001530  50F5               	movf	tablat,w,c
  9819  001532  6E2E               	movwf	(??_sprintf+2)& (0+255),c
  9820  001534  6A2F               	clrf	(??_sprintf+3)& (0+255),c
  9821  001536  502C               	movf	??_sprintf,w,c
  9822  001538  262E               	addwf	??_sprintf+2,f,c
  9823  00153A  502D               	movf	??_sprintf+1,w,c
  9824  00153C  222F               	addwfc	??_sprintf+3,f,c
  9825  00153E  502E               	movf	??_sprintf+2,w,c
  9826  001540  2636               	addwf	sprintf@width,f,c
  9827  001542  502F               	movf	??_sprintf+3,w,c
  9828  001544  2237               	addwfc	sprintf@width+1,f,c
  9829  001546  4A24               	infsnz	sprintf@f,f,c
  9830  001548  2A25               	incf	sprintf@f+1,f,c
  9831                           
  9832                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9833  00154A  C024  FFF6         	movff	sprintf@f,tblptrl
  9834  00154E  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9835  001552                     	if	0	;tblptru may be non-zero
  9836  001552                     	endif
  9837  001552                     	if	0	;tblptru may be non-zero
  9838  001552                     	endif
  9839  001552  0008               	tblrd		*
  9840  001554  50F5               	movf	tablat,w,c
  9841  001556  ECAF  F01C         	call	_isdigit
  9842  00155A  A0D8               	btfss	status,0,c
  9843  00155C  D004               	goto	l515
  9844  00155E  D7D1               	goto	l513
  9845  001560                     
  9846                           ;doprnt.c: 818: flag |= 0xC0;
  9847  001560  0EC0               	movlw	192
  9848  001562  1232               	iorwf	sprintf@flag,f,c
  9849                           
  9850                           ;doprnt.c: 822: }
  9851                           
  9852                           ;doprnt.c: 819: break;
  9853  001564  D011               	goto	l520
  9854  001566                     l515:
  9855  001566  C024  FFF6         	movff	sprintf@f,tblptrl
  9856  00156A  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9857  00156E  4A24               	infsnz	sprintf@f,f,c
  9858  001570  2A25               	incf	sprintf@f+1,f,c
  9859  001572                     	if	0	;tblptru may be non-zero
  9860  001572                     	endif
  9861  001572                     	if	0	;tblptru may be non-zero
  9862  001572                     	endif
  9863  001572  0008               	tblrd		*
  9864  001574  CFF5 F038          	movff	tablat,sprintf@c
  9865  001578  5038               	movf	sprintf@c,w,c
  9866                           
  9867                           ; Switch size 1, requested type "space"
  9868                           ; Number of cases is 2, Range of values is 0 to 117
  9869                           ; switch strategies available:
  9870                           ; Name         Instructions Cycles
  9871                           ; simple_byte            7     4 (average)
  9872                           ;	Chosen strategy is simple_byte
  9873  00157A  0A00               	xorlw	0	; case 0
  9874  00157C  B4D8               	btfsc	status,2,c
  9875  00157E  D09F               	goto	u4230
  9876  001580  0A75               	xorlw	117	; case 117
  9877  001582  B4D8               	btfsc	status,2,c
  9878  001584  D7ED               	goto	l519
  9879  001586  D08F               	goto	u4220
  9880  001588                     l520:
  9881                           
  9882                           ;doprnt.c: 1273: {
  9883                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9884  001588  C030  FFD9         	movff	sprintf@ap,fsr2l
  9885  00158C  C031  FFDA         	movff	sprintf@ap+1,fsr2h
  9886  001590  CFDE F033          	movff	postinc2,sprintf@val
  9887  001594  CFDD F034          	movff	postdec2,sprintf@val+1
  9888  001598  0E02               	movlw	2
  9889  00159A  2630               	addwf	sprintf@ap,f,c
  9890  00159C  0E00               	movlw	0
  9891  00159E  2231               	addwfc	sprintf@ap+1,f,c
  9892                           
  9893                           ;doprnt.c: 1287: }
  9894                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9895  0015A0  0E01               	movlw	1
  9896  0015A2  6E38               	movwf	sprintf@c,c
  9897  0015A4                     l3918:
  9898  0015A4  0E05               	movlw	5
  9899  0015A6  1838               	xorwf	sprintf@c,w,c
  9900  0015A8  B4D8               	btfsc	status,2,c
  9901  0015AA  D012               	goto	u4150
  9902                           
  9903                           ;doprnt.c: 1306: if(val < dpowers[c])
  9904  0015AC  5038               	movf	sprintf@c,w,c
  9905  0015AE  0D02               	mullw	2
  9906  0015B0  0E01               	movlw	low _dpowers
  9907  0015B2  24F3               	addwf	prodl,w,c
  9908  0015B4  6EF6               	movwf	tblptrl,c
  9909  0015B6  0E0F               	movlw	high _dpowers
  9910  0015B8  20F4               	addwfc	prodh,w,c
  9911  0015BA  6EF7               	movwf	tblptrh,c
  9912  0015BC                     	if	0	;There are less than 3 active tblptr bytes
  9913  0015BC                     	endif
  9914  0015BC  0009               	tblrd		*+
  9915  0015BE  50F5               	movf	tablat,w,c
  9916  0015C0  5C33               	subwf	sprintf@val,w,c
  9917  0015C2  0009               	tblrd		*+
  9918  0015C4  50F5               	movf	tablat,w,c
  9919  0015C6  5834               	subwfb	sprintf@val+1,w,c
  9920  0015C8  A0D8               	btfss	status,0,c
  9921  0015CA  D002               	goto	u4150
  9922                           
  9923                           ;doprnt.c: 1307: break;
  9924  0015CC  2A38               	incf	sprintf@c,f,c
  9925  0015CE  D7EA               	goto	l3918
  9926  0015D0                     u4150:
  9927                           
  9928                           ;doprnt.c: 1381: if(width > c)
  9929  0015D0  0E80               	movlw	128
  9930  0015D2  BE38               	btfsc	sprintf@c,7,c
  9931  0015D4  0E7F               	movlw	127
  9932  0015D6  6E2C               	movwf	??_sprintf& (0+255),c
  9933  0015D8  5036               	movf	sprintf@width,w,c
  9934  0015DA  5C38               	subwf	sprintf@c,w,c
  9935  0015DC  5037               	movf	sprintf@width+1,w,c
  9936  0015DE  0A80               	xorlw	128
  9937  0015E0  582C               	subwfb	??_sprintf& (0+255),w,c
  9938  0015E2  B0D8               	btfsc	status,0,c
  9939  0015E4  D007               	goto	l524
  9940                           
  9941                           ;doprnt.c: 1382: width -= c;
  9942  0015E6  5038               	movf	sprintf@c,w,c
  9943  0015E8  5E36               	subwf	sprintf@width,f,c
  9944  0015EA  0E00               	movlw	0
  9945  0015EC  BE38               	btfsc	sprintf@c,7,c
  9946  0015EE  0EFF               	movlw	255
  9947  0015F0  5A37               	subwfb	sprintf@width+1,f,c
  9948  0015F2  D004               	goto	l525
  9949  0015F4                     l524:
  9950                           
  9951                           ;doprnt.c: 1383: else
  9952                           ;doprnt.c: 1384: width = 0;
  9953  0015F4  0E00               	movlw	0
  9954  0015F6  6E37               	movwf	sprintf@width+1,c
  9955  0015F8  0E00               	movlw	0
  9956  0015FA  6E36               	movwf	sprintf@width,c
  9957  0015FC                     l525:
  9958                           
  9959                           ;doprnt.c: 1387: if(flag & 0x04) {
  9960  0015FC  A432               	btfss	sprintf@flag,2,c
  9961  0015FE  D010               	goto	l526
  9962  001600                     
  9963                           ;doprnt.c: 1415: if(width)
  9964  001600  5036               	movf	sprintf@width,w,c
  9965  001602  1037               	iorwf	sprintf@width+1,w,c
  9966  001604  B4D8               	btfsc	status,2,c
  9967  001606  D01F               	goto	u4210
  9968                           
  9969                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9970                           
  9971                           ;doprnt.c: 1416: do
  9972  001608  C022  FFD9         	movff	sprintf@sp,fsr2l
  9973  00160C  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  9974  001610  0E30               	movlw	48
  9975  001612  6EDF               	movwf	indf2,c
  9976  001614  4A22               	infsnz	sprintf@sp,f,c
  9977  001616  2A23               	incf	sprintf@sp+1,f,c
  9978                           
  9979                           ;doprnt.c: 1418: while(--width);
  9980  001618  0636               	decf	sprintf@width,f,c
  9981  00161A  A0D8               	btfss	status,0,c
  9982  00161C  0637               	decf	sprintf@width+1,f,c
  9983  00161E  D7F0               	goto	L5
  9984  001620                     l526:
  9985                           
  9986                           ;doprnt.c: 1422: {
  9987                           ;doprnt.c: 1424: if(width
  9988                           ;doprnt.c: 1428: )
  9989  001620  5036               	movf	sprintf@width,w,c
  9990  001622  1037               	iorwf	sprintf@width+1,w,c
  9991  001624  B4D8               	btfsc	status,2,c
  9992  001626  D00F               	goto	u4210
  9993  001628                     u4200:
  9994                           
  9995                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9996                           
  9997                           ;doprnt.c: 1429: do
  9998  001628  C022  FFD9         	movff	sprintf@sp,fsr2l
  9999  00162C  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 10000  001630  0E20               	movlw	32
 10001  001632  6EDF               	movwf	indf2,c
 10002  001634  4A22               	infsnz	sprintf@sp,f,c
 10003  001636  2A23               	incf	sprintf@sp+1,f,c
 10004                           
 10005                           ;doprnt.c: 1431: while(--width);
 10006  001638  0636               	decf	sprintf@width,f,c
 10007  00163A  A0D8               	btfss	status,0,c
 10008  00163C  0637               	decf	sprintf@width+1,f,c
 10009  00163E  5036               	movf	sprintf@width,w,c
 10010  001640  1037               	iorwf	sprintf@width+1,w,c
 10011  001642  A4D8               	btfss	status,2,c
 10012  001644  D7F1               	goto	u4200
 10013  001646                     u4210:
 10014                           
 10015                           ;doprnt.c: 1469: }
 10016                           ;doprnt.c: 1472: prec = c;
 10017  001646  C038  F035         	movff	sprintf@c,sprintf@prec
 10018                           
 10019                           ;doprnt.c: 1474: while(prec--) {
 10020  00164A  D029               	goto	l534
 10021  00164C                     
 10022                           ;doprnt.c: 1478: {
 10023                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10024  00164C  5035               	movf	sprintf@prec,w,c
 10025  00164E  0D02               	mullw	2
 10026  001650  0E01               	movlw	low _dpowers
 10027  001652  24F3               	addwf	prodl,w,c
 10028  001654  6EF6               	movwf	tblptrl,c
 10029  001656  0E0F               	movlw	high _dpowers
 10030  001658  20F4               	addwfc	prodh,w,c
 10031  00165A  6EF7               	movwf	tblptrh,c
 10032  00165C                     	if	0	;There are less than 3 active tblptr bytes
 10033  00165C                     	endif
 10034  00165C  0009               	tblrd		*+
 10035  00165E  CFF5 F003          	movff	tablat,___lwdiv@divisor
 10036  001662  000A               	tblrd		*-
 10037  001664  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 10038  001668  C033  F001         	movff	sprintf@val,___lwdiv@dividend
 10039  00166C  C034  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
 10040  001670  EC06  F01B         	call	___lwdiv	;wreg free
 10041  001674  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 10042  001678  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 10043  00167C  0E00               	movlw	0
 10044  00167E  6E0B               	movwf	___lwmod@divisor+1,c
 10045  001680  0E0A               	movlw	10
 10046  001682  6E0A               	movwf	___lwmod@divisor,c
 10047  001684  ECF1  F01B         	call	___lwmod	;wreg free
 10048  001688  5008               	movf	?___lwmod,w,c
 10049  00168A  0F30               	addlw	48
 10050  00168C  6E38               	movwf	sprintf@c,c
 10051                           
 10052                           ;doprnt.c: 1523: }
 10053                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10054  00168E  C022  FFD9         	movff	sprintf@sp,fsr2l
 10055  001692  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 10056  001696  C038  FFDF         	movff	sprintf@c,indf2
 10057  00169A  4A22               	infsnz	sprintf@sp,f,c
 10058  00169C  2A23               	incf	sprintf@sp+1,f,c
 10059  00169E                     l534:
 10060  00169E  0635               	decf	sprintf@prec,f,c
 10061  0016A0  2835               	incf	sprintf@prec,w,c
 10062  0016A2  A4D8               	btfss	status,2,c
 10063  0016A4  D7D3               	goto	l535
 10064  0016A6                     u4220:
 10065  0016A6  C024  FFF6         	movff	sprintf@f,tblptrl
 10066  0016AA  C025  FFF7         	movff	sprintf@f+1,tblptrh
 10067  0016AE  4A24               	infsnz	sprintf@f,f,c
 10068  0016B0  2A25               	incf	sprintf@f+1,f,c
 10069  0016B2                     	if	0	;tblptru may be non-zero
 10070  0016B2                     	endif
 10071  0016B2                     	if	0	;tblptru may be non-zero
 10072  0016B2                     	endif
 10073  0016B2  0008               	tblrd		*
 10074  0016B4  CFF5 F038          	movff	tablat,sprintf@c
 10075  0016B8  5038               	movf	sprintf@c,w,c
 10076  0016BA  A4D8               	btfss	status,2,c
 10077  0016BC  D6F4               	goto	l504
 10078  0016BE                     u4230:
 10079                           
 10080                           ;doprnt.c: 1538: *sp = 0;
 10081                           
 10082                           ;doprnt.c: 1525: }
 10083                           ;doprnt.c: 1533: }
 10084                           ;doprnt.c: 1535: alldone:
 10085  0016BE  C022  FFD9         	movff	sprintf@sp,fsr2l
 10086  0016C2  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 10087  0016C6  0E00               	movlw	0
 10088  0016C8  6EDF               	movwf	indf2,c
 10089  0016CA  0012               	return	
 10090  0016CC                     __end_of_sprintf:
 10091                           	opt stack 0
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           intcon	equ	0xFF2
 10099                           postinc0	equ	0xFEE
 10100                           wreg	equ	0xFE8
 10101                           postinc1	equ	0xFE6
 10102                           postdec1	equ	0xFE5
 10103                           fsr1h	equ	0xFE2
 10104                           fsr1l	equ	0xFE1
 10105                           indf2	equ	0xFDF
 10106                           postinc2	equ	0xFDE
 10107                           postdec2	equ	0xFDD
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function _isdigit *****************
 10113 ;; Defined at:
 10114 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  c               1    wreg     unsigned char 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  c               1    2[COMRAM] unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;		None               void
 10121 ;; Registers used:
 10122 ;;		wreg, status,2, status,0
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10131 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10132 ;;Total ram usage:        3 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; This function calls:
 10135 ;;		Nothing
 10136 ;; This function is called by:
 10137 ;;		_sprintf
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           	psect	text49
 10142  00395E                     __ptext49:
 10143                           	opt stack 0
 10144  00395E                     _isdigit:
 10145                           	opt stack 26
 10146                           
 10147                           ;incstack = 0
 10148                           ;isdigit@c stored from wreg
 10149  00395E  6E03               	movwf	isdigit@c,c
 10150  003960  0E00               	movlw	0
 10151  003962  6E02               	movwf	_isdigit$1970,c
 10152  003964  0E3A               	movlw	58
 10153  003966  6003               	cpfslt	isdigit@c,c
 10154  003968  D005               	goto	l978
 10155  00396A  0E2F               	movlw	47
 10156  00396C  6403               	cpfsgt	isdigit@c,c
 10157  00396E  D002               	goto	l978
 10158  003970  0E01               	movlw	1
 10159  003972  6E02               	movwf	_isdigit$1970,c
 10160  003974                     l978:
 10161  003974  C002  F001         	movff	_isdigit$1970,??_isdigit
 10162  003978  3001               	rrcf	??_isdigit,w,c
 10163  00397A  0012               	return	
 10164  00397C                     __end_of_isdigit:
 10165                           	opt stack 0
 10166                           tblptru	equ	0xFF8
 10167                           tblptrh	equ	0xFF7
 10168                           tblptrl	equ	0xFF6
 10169                           tablat	equ	0xFF5
 10170                           prodh	equ	0xFF4
 10171                           prodl	equ	0xFF3
 10172                           intcon	equ	0xFF2
 10173                           postinc0	equ	0xFEE
 10174                           wreg	equ	0xFE8
 10175                           postinc1	equ	0xFE6
 10176                           postdec1	equ	0xFE5
 10177                           fsr1h	equ	0xFE2
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function ___wmul *****************
 10187 ;; Defined at:
 10188 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  multiplier      2   27[COMRAM] unsigned int 
 10191 ;;  multiplicand    2   29[COMRAM] unsigned int 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  product         2   31[COMRAM] unsigned int 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;                  2   27[COMRAM] unsigned int 
 10196 ;; Registers used:
 10197 ;;		wreg, status,2, status,0, prodl, prodh
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10206 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10207 ;;Total ram usage:        6 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; This function calls:
 10210 ;;		Nothing
 10211 ;; This function is called by:
 10212 ;;		_covertir_valores_de_array_a_escala_decimal
 10213 ;;		_sprintf
 10214 ;;		_eval_poly
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text50
 10219  0038CE                     __ptext50:
 10220                           	opt stack 0
 10221  0038CE                     ___wmul:
 10222                           	opt stack 26
 10223                           
 10224                           ;incstack = 0
 10225  0038CE  501C               	movf	___wmul@multiplier,w,c
 10226  0038D0  021E               	mulwf	___wmul@multiplicand,c
 10227  0038D2  CFF3 F020          	movff	prodl,___wmul@product
 10228  0038D6  CFF4 F021          	movff	prodh,___wmul@product+1
 10229  0038DA  501C               	movf	___wmul@multiplier,w,c
 10230  0038DC  021F               	mulwf	___wmul@multiplicand+1,c
 10231  0038DE  50F3               	movf	prodl,w,c
 10232  0038E0  2621               	addwf	___wmul@product+1,f,c
 10233  0038E2  501D               	movf	___wmul@multiplier+1,w,c
 10234  0038E4  021E               	mulwf	___wmul@multiplicand,c
 10235  0038E6  50F3               	movf	prodl,w,c
 10236  0038E8  2621               	addwf	___wmul@product+1,f,c
 10237  0038EA  C020  F01C         	movff	___wmul@product,?___wmul
 10238  0038EE  C021  F01D         	movff	___wmul@product+1,?___wmul+1
 10239  0038F2  0012               	return	
 10240  0038F4                     __end_of___wmul:
 10241                           	opt stack 0
 10242                           tblptru	equ	0xFF8
 10243                           tblptrh	equ	0xFF7
 10244                           tblptrl	equ	0xFF6
 10245                           tablat	equ	0xFF5
 10246                           prodh	equ	0xFF4
 10247                           prodl	equ	0xFF3
 10248                           intcon	equ	0xFF2
 10249                           postinc0	equ	0xFEE
 10250                           wreg	equ	0xFE8
 10251                           postinc1	equ	0xFE6
 10252                           postdec1	equ	0xFE5
 10253                           fsr1h	equ	0xFE2
 10254                           fsr1l	equ	0xFE1
 10255                           indf2	equ	0xFDF
 10256                           postinc2	equ	0xFDE
 10257                           postdec2	equ	0xFDD
 10258                           fsr2h	equ	0xFDA
 10259                           fsr2l	equ	0xFD9
 10260                           status	equ	0xFD8
 10261                           
 10262 ;; *************** function ___lwmod *****************
 10263 ;; Defined at:
 10264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;  dividend        2    7[COMRAM] unsigned int 
 10267 ;;  divisor         2    9[COMRAM] unsigned int 
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;  counter         1   11[COMRAM] unsigned char 
 10270 ;; Return value:  Size  Location     Type
 10271 ;;                  2    7[COMRAM] unsigned int 
 10272 ;; Registers used:
 10273 ;;		wreg, status,2, status,0
 10274 ;; Tracked objects:
 10275 ;;		On entry : 0/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10279 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10282 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10283 ;;Total ram usage:        5 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; This function calls:
 10286 ;;		Nothing
 10287 ;; This function is called by:
 10288 ;;		_sprintf
 10289 ;; This function uses a non-reentrant model
 10290 ;;
 10291                           
 10292                           	psect	text51
 10293  0037E2                     __ptext51:
 10294                           	opt stack 0
 10295  0037E2                     ___lwmod:
 10296                           	opt stack 26
 10297                           
 10298                           ;incstack = 0
 10299  0037E2  500A               	movf	___lwmod@divisor,w,c
 10300  0037E4  100B               	iorwf	___lwmod@divisor+1,w,c
 10301  0037E6  B4D8               	btfsc	status,2,c
 10302  0037E8  D018               	goto	l1072
 10303  0037EA  0E01               	movlw	1
 10304  0037EC  6E0C               	movwf	___lwmod@counter,c
 10305  0037EE  D004               	goto	l1067
 10306  0037F0  90D8               	bcf	status,0,c
 10307  0037F2  360A               	rlcf	___lwmod@divisor,f,c
 10308  0037F4  360B               	rlcf	___lwmod@divisor+1,f,c
 10309  0037F6  2A0C               	incf	___lwmod@counter,f,c
 10310  0037F8                     l1067:
 10311  0037F8  AE0B               	btfss	___lwmod@divisor+1,7,c
 10312  0037FA  D7FA               	goto	l1068
 10313  0037FC                     u3740:
 10314  0037FC  500A               	movf	___lwmod@divisor,w,c
 10315  0037FE  5C08               	subwf	___lwmod@dividend,w,c
 10316  003800  500B               	movf	___lwmod@divisor+1,w,c
 10317  003802  5809               	subwfb	___lwmod@dividend+1,w,c
 10318  003804  A0D8               	btfss	status,0,c
 10319  003806  D004               	goto	l1071
 10320  003808  500A               	movf	___lwmod@divisor,w,c
 10321  00380A  5E08               	subwf	___lwmod@dividend,f,c
 10322  00380C  500B               	movf	___lwmod@divisor+1,w,c
 10323  00380E  5A09               	subwfb	___lwmod@dividend+1,f,c
 10324  003810                     l1071:
 10325  003810  90D8               	bcf	status,0,c
 10326  003812  320B               	rrcf	___lwmod@divisor+1,f,c
 10327  003814  320A               	rrcf	___lwmod@divisor,f,c
 10328  003816  2E0C               	decfsz	___lwmod@counter,f,c
 10329  003818  D7F1               	goto	u3740
 10330  00381A                     l1072:
 10331  00381A  C008  F008         	movff	___lwmod@dividend,?___lwmod
 10332  00381E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 10333  003822  0012               	return		;funcret
 10334  003824                     __end_of___lwmod:
 10335                           	opt stack 0
 10336                           tblptru	equ	0xFF8
 10337                           tblptrh	equ	0xFF7
 10338                           tblptrl	equ	0xFF6
 10339                           tablat	equ	0xFF5
 10340                           prodh	equ	0xFF4
 10341                           prodl	equ	0xFF3
 10342                           intcon	equ	0xFF2
 10343                           postinc0	equ	0xFEE
 10344                           wreg	equ	0xFE8
 10345                           postinc1	equ	0xFE6
 10346                           postdec1	equ	0xFE5
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           indf2	equ	0xFDF
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           fsr2h	equ	0xFDA
 10353                           fsr2l	equ	0xFD9
 10354                           status	equ	0xFD8
 10355                           
 10356 ;; *************** function ___lwdiv *****************
 10357 ;; Defined at:
 10358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;  dividend        2    0[COMRAM] unsigned int 
 10361 ;;  divisor         2    2[COMRAM] unsigned int 
 10362 ;; Auto vars:     Size  Location     Type
 10363 ;;  quotient        2    4[COMRAM] unsigned int 
 10364 ;;  counter         1    6[COMRAM] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  2    0[COMRAM] unsigned int 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2, status,0
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10374 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10375 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10377 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10378 ;;Total ram usage:        7 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; This function calls:
 10381 ;;		Nothing
 10382 ;; This function is called by:
 10383 ;;		_sprintf
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           	psect	text52
 10388  00360C                     __ptext52:
 10389                           	opt stack 0
 10390  00360C                     ___lwdiv:
 10391                           	opt stack 26
 10392                           
 10393                           ;incstack = 0
 10394  00360C  0E00               	movlw	0
 10395  00360E  6E06               	movwf	___lwdiv@quotient+1,c
 10396  003610  0E00               	movlw	0
 10397  003612  6E05               	movwf	___lwdiv@quotient,c
 10398  003614  5003               	movf	___lwdiv@divisor,w,c
 10399  003616  1004               	iorwf	___lwdiv@divisor+1,w,c
 10400  003618  B4D8               	btfsc	status,2,c
 10401  00361A  D01C               	goto	l1062
 10402  00361C  0E01               	movlw	1
 10403  00361E  6E07               	movwf	___lwdiv@counter,c
 10404  003620  D004               	goto	l1057
 10405  003622  90D8               	bcf	status,0,c
 10406  003624  3603               	rlcf	___lwdiv@divisor,f,c
 10407  003626  3604               	rlcf	___lwdiv@divisor+1,f,c
 10408  003628  2A07               	incf	___lwdiv@counter,f,c
 10409  00362A                     l1057:
 10410  00362A  AE04               	btfss	___lwdiv@divisor+1,7,c
 10411  00362C  D7FA               	goto	l1058
 10412  00362E                     u3710:
 10413  00362E  90D8               	bcf	status,0,c
 10414  003630  3605               	rlcf	___lwdiv@quotient,f,c
 10415  003632  3606               	rlcf	___lwdiv@quotient+1,f,c
 10416  003634  5003               	movf	___lwdiv@divisor,w,c
 10417  003636  5C01               	subwf	___lwdiv@dividend,w,c
 10418  003638  5004               	movf	___lwdiv@divisor+1,w,c
 10419  00363A  5802               	subwfb	___lwdiv@dividend+1,w,c
 10420  00363C  A0D8               	btfss	status,0,c
 10421  00363E  D005               	goto	l1061
 10422  003640  5003               	movf	___lwdiv@divisor,w,c
 10423  003642  5E01               	subwf	___lwdiv@dividend,f,c
 10424  003644  5004               	movf	___lwdiv@divisor+1,w,c
 10425  003646  5A02               	subwfb	___lwdiv@dividend+1,f,c
 10426  003648  8005               	bsf	___lwdiv@quotient,0,c
 10427  00364A                     l1061:
 10428  00364A  90D8               	bcf	status,0,c
 10429  00364C  3204               	rrcf	___lwdiv@divisor+1,f,c
 10430  00364E  3203               	rrcf	___lwdiv@divisor,f,c
 10431  003650  2E07               	decfsz	___lwdiv@counter,f,c
 10432  003652  D7ED               	goto	u3710
 10433  003654                     l1062:
 10434  003654  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 10435  003658  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10436  00365C  0012               	return		;funcret
 10437  00365E                     __end_of___lwdiv:
 10438                           	opt stack 0
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           prodh	equ	0xFF4
 10444                           prodl	equ	0xFF3
 10445                           intcon	equ	0xFF2
 10446                           postinc0	equ	0xFEE
 10447                           wreg	equ	0xFE8
 10448                           postinc1	equ	0xFE6
 10449                           postdec1	equ	0xFE5
 10450                           fsr1h	equ	0xFE2
 10451                           fsr1l	equ	0xFE1
 10452                           indf2	equ	0xFDF
 10453                           postinc2	equ	0xFDE
 10454                           postdec2	equ	0xFDD
 10455                           fsr2h	equ	0xFDA
 10456                           fsr2l	equ	0xFD9
 10457                           status	equ	0xFD8
 10458                           
 10459 ;; *************** function _lcd_putrs *****************
 10460 ;; Defined at:
 10461 ;;		line 221 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
 10464 ;;		 -> STR_24(17), STR_23(21), STR_22(17), STR_21(17), 
 10465 ;;		 -> STR_20(9), STR_19(8), STR_18(17), STR_17(17), 
 10466 ;;		 -> STR_15(15), STR_14(8), STR_12(9), STR_11(9), 
 10467 ;;		 -> STR_10(9), STR_9(7), buffer2(20), 
 10468 ;; Auto vars:     Size  Location     Type
 10469 ;;		None
 10470 ;; Return value:  Size  Location     Type
 10471 ;;                  1    wreg      void 
 10472 ;; Registers used:
 10473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10479 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10483 ;;Total ram usage:        2 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; Hardware stack levels required when called:    4
 10486 ;; This function calls:
 10487 ;;		_lcd_putc
 10488 ;; This function is called by:
 10489 ;;		_setDiaMesAnio
 10490 ;;		_setHoraMinutoSegundo
 10491 ;;		_titila_texto_insert_password
 10492 ;;		_guarda_numero_ingresado
 10493 ;;		_mostrar_presionar_a
 10494 ;;		_resetear_pantalla_ingresar_contrasenia
 10495 ;;		_cambiar_opcion
 10496 ;;		_activar_alarma
 10497 ;;		_ir_a_pantalla_edicion
 10498 ;;		_ir_a_pantalla_ingresar_contrasenia
 10499 ;;		_ir_a_pantalla_editar_contrasenia
 10500 ;;		_covertir_valores_de_array_a_escala_decimal
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text53
 10505  00365E                     __ptext53:
 10506                           	opt stack 0
 10507  00365E                     _lcd_putrs:
 10508                           	opt stack 23
 10509                           
 10510                           ;unmc_lcd_216.c: 223: while(*ptr){
 10511                           
 10512                           ;incstack = 0
 10513  00365E  D014               	goto	l489
 10514  003660                     
 10515                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
 10516  003660  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
 10517  003664  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
 10518  003668  6AF8               	clrf	tblptru,c
 10519  00366A  0E0E               	movlw	(high __ramtop+-1)
 10520  00366C  64F7               	cpfsgt	tblptrh,c
 10521  00366E  D003               	bra	u4247
 10522  003670  0008               	tblrd		*
 10523  003672  50F5               	movf	tablat,w,c
 10524  003674  D005               	bra	u4240
 10525  003676                     u4247:
 10526  003676  CFF6 FFE9          	movff	tblptrl,fsr0l
 10527  00367A  CFF7 FFEA          	movff	tblptrh,fsr0h
 10528  00367E  50EF               	movf	indf0,w,c
 10529  003680                     u4240:
 10530  003680  ECCC  F01B         	call	_lcd_putc
 10531  003684  4A09               	infsnz	lcd_putrs@ptr,f,c
 10532  003686  2A0A               	incf	lcd_putrs@ptr+1,f,c
 10533  003688                     l489:
 10534  003688  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
 10535  00368C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
 10536  003690  6AF8               	clrf	tblptru,c
 10537  003692  0E0E               	movlw	(high __ramtop+-1)
 10538  003694  64F7               	cpfsgt	tblptrh,c
 10539  003696  D003               	bra	u4257
 10540  003698  0008               	tblrd		*
 10541  00369A  50F5               	movf	tablat,w,c
 10542  00369C  D005               	bra	u4250
 10543  00369E                     u4257:
 10544  00369E  CFF6 FFE9          	movff	tblptrl,fsr0l
 10545  0036A2  CFF7 FFEA          	movff	tblptrh,fsr0h
 10546  0036A6  50EF               	movf	indf0,w,c
 10547  0036A8                     u4250:
 10548  0036A8  0900               	iorlw	0
 10549  0036AA  B4D8               	btfsc	status,2,c
 10550  0036AC  0012               	return	
 10551  0036AE  D7D8               	goto	l490
 10552  0036B0                     __end_of_lcd_putrs:
 10553                           	opt stack 0
 10554                           tblptru	equ	0xFF8
 10555                           tblptrh	equ	0xFF7
 10556                           tblptrl	equ	0xFF6
 10557                           tablat	equ	0xFF5
 10558                           prodh	equ	0xFF4
 10559                           prodl	equ	0xFF3
 10560                           intcon	equ	0xFF2
 10561                           indf0	equ	0xFEF
 10562                           postinc0	equ	0xFEE
 10563                           fsr0h	equ	0xFEA
 10564                           fsr0l	equ	0xFE9
 10565                           wreg	equ	0xFE8
 10566                           postinc1	equ	0xFE6
 10567                           postdec1	equ	0xFE5
 10568                           fsr1h	equ	0xFE2
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function _lcd_putc *****************
 10578 ;; Defined at:
 10579 ;;		line 172 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  c               1    wreg     unsigned char 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;  c               1    7[COMRAM] unsigned char 
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      void 
 10586 ;; Registers used:
 10587 ;;		wreg, status,2, status,0, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10596 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10597 ;;Total ram usage:        1 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    3
 10600 ;; This function calls:
 10601 ;;		_lcd_gotoxy
 10602 ;;		_lcd_send_byte
 10603 ;; This function is called by:
 10604 ;;		_lcd_putrs
 10605 ;;		_lcd_puts
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text54
 10610  003798                     __ptext54:
 10611                           	opt stack 0
 10612  003798                     _lcd_putc:
 10613                           	opt stack 23
 10614                           
 10615                           ;incstack = 0
 10616                           ;lcd_putc@c stored from wreg
 10617  003798  6E08               	movwf	lcd_putc@c,c
 10618                           
 10619                           ;unmc_lcd_216.c: 173: switch(c){
 10620  00379A  D018               	goto	l468
 10621  00379C                     
 10622                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
 10623  00379C  0E01               	movlw	1
 10624  00379E  6E03               	movwf	lcd_send_byte@n,c
 10625  0037A0  0E00               	movlw	0
 10626  0037A2  EC4E  F01C         	call	_lcd_send_byte
 10627                           
 10628                           ;unmc_lcd_216.c: 176: break;
 10629  0037A6  0012               	return	
 10630  0037A8                     
 10631                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
 10632  0037A8  0E02               	movlw	2
 10633  0037AA  6E05               	movwf	lcd_gotoxy@y,c
 10634  0037AC  0E01               	movlw	1
 10635  0037AE  EC9E  F01C         	call	_lcd_gotoxy
 10636                           
 10637                           ;unmc_lcd_216.c: 179: break;
 10638  0037B2  0012               	return	
 10639  0037B4                     
 10640                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
 10641  0037B4  0E10               	movlw	16
 10642  0037B6  6E03               	movwf	lcd_send_byte@n,c
 10643  0037B8  0E00               	movlw	0
 10644  0037BA  EC4E  F01C         	call	_lcd_send_byte
 10645                           
 10646                           ;unmc_lcd_216.c: 182: break;
 10647  0037BE  0012               	return	
 10648  0037C0                     
 10649                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
 10650  0037C0  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
 10651  0037C4  0E01               	movlw	1
 10652  0037C6  EC4E  F01C         	call	_lcd_send_byte
 10653                           
 10654                           ;unmc_lcd_216.c: 186: }
 10655                           
 10656                           ;unmc_lcd_216.c: 185: break;
 10657  0037CA  0012               	return	
 10658  0037CC                     l468:
 10659  0037CC  5008               	movf	lcd_putc@c,w,c
 10660                           
 10661                           ; Switch size 1, requested type "space"
 10662                           ; Number of cases is 3, Range of values is 8 to 12
 10663                           ; switch strategies available:
 10664                           ; Name         Instructions Cycles
 10665                           ; simple_byte           10     6 (average)
 10666                           ;	Chosen strategy is simple_byte
 10667  0037CE  0A08               	xorlw	8	; case 8
 10668  0037D0  B4D8               	btfsc	status,2,c
 10669  0037D2  D7F0               	goto	l472
 10670  0037D4  0A02               	xorlw	2	; case 10
 10671  0037D6  B4D8               	btfsc	status,2,c
 10672  0037D8  D7E7               	goto	l471
 10673  0037DA  0A06               	xorlw	6	; case 12
 10674  0037DC  B4D8               	btfsc	status,2,c
 10675  0037DE  D7DE               	goto	l469
 10676  0037E0  D7EF               	goto	l473
 10677  0037E2                     __end_of_lcd_putc:
 10678                           	opt stack 0
 10679                           tblptru	equ	0xFF8
 10680                           tblptrh	equ	0xFF7
 10681                           tblptrl	equ	0xFF6
 10682                           tablat	equ	0xFF5
 10683                           prodh	equ	0xFF4
 10684                           prodl	equ	0xFF3
 10685                           intcon	equ	0xFF2
 10686                           indf0	equ	0xFEF
 10687                           postinc0	equ	0xFEE
 10688                           fsr0h	equ	0xFEA
 10689                           fsr0l	equ	0xFE9
 10690                           wreg	equ	0xFE8
 10691                           postinc1	equ	0xFE6
 10692                           postdec1	equ	0xFE5
 10693                           fsr1h	equ	0xFE2
 10694                           fsr1l	equ	0xFE1
 10695                           indf2	equ	0xFDF
 10696                           postinc2	equ	0xFDE
 10697                           postdec2	equ	0xFDD
 10698                           fsr2h	equ	0xFDA
 10699                           fsr2l	equ	0xFD9
 10700                           status	equ	0xFD8
 10701                           
 10702 ;; *************** function _lcd_gotoxy *****************
 10703 ;; Defined at:
 10704 ;;		line 158 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  x               1    wreg     unsigned char 
 10707 ;;  y               1    4[COMRAM] unsigned char 
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;  x               1    5[COMRAM] unsigned char 
 10710 ;;  address         1    6[COMRAM] unsigned char 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      void 
 10713 ;; Registers used:
 10714 ;;		wreg, status,2, status,0, cstack
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10720 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10723 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10724 ;;Total ram usage:        3 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; Hardware stack levels required when called:    2
 10727 ;; This function calls:
 10728 ;;		_lcd_send_byte
 10729 ;; This function is called by:
 10730 ;;		_setDiaMesAnio
 10731 ;;		_setHoraMinutoSegundo
 10732 ;;		_titila_texto_insert_password
 10733 ;;		_guarda_numero_ingresado
 10734 ;;		_mostrar_presionar_a
 10735 ;;		_resetear_pantalla_ingresar_contrasenia
 10736 ;;		_cambiar_opcion
 10737 ;;		_activar_alarma
 10738 ;;		_ir_a_pantalla_edicion
 10739 ;;		_ir_a_pantalla_ingresar_contrasenia
 10740 ;;		_ir_a_pantalla_editar_contrasenia
 10741 ;;		_covertir_valores_de_array_a_escala_decimal
 10742 ;;		_lcd_putc
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           	psect	text55
 10747  00393C                     __ptext55:
 10748                           	opt stack 0
 10749  00393C                     _lcd_gotoxy:
 10750                           	opt stack 23
 10751                           
 10752                           ;incstack = 0
 10753                           ;lcd_gotoxy@x stored from wreg
 10754  00393C  6E06               	movwf	lcd_gotoxy@x,c
 10755                           
 10756                           ;unmc_lcd_216.c: 159: int8 address;
 10757                           ;unmc_lcd_216.c: 161: if(y != 1)
 10758  00393E  0405               	decf	lcd_gotoxy@y,w,c
 10759  003940  B4D8               	btfsc	status,2,c
 10760  003942  D002               	goto	l463
 10761                           
 10762                           ;unmc_lcd_216.c: 162: address = 0x40;
 10763  003944  0E40               	movlw	64
 10764  003946  D001               	goto	L4
 10765  003948                     l463:
 10766                           
 10767                           ;unmc_lcd_216.c: 163: else
 10768                           ;unmc_lcd_216.c: 164: address=0;
 10769  003948  0E00               	movlw	0
 10770  00394A                     L4:
 10771  00394A  6E07               	movwf	lcd_gotoxy@address,c
 10772                           
 10773                           ;unmc_lcd_216.c: 166: address += x-1;
 10774  00394C  0406               	decf	lcd_gotoxy@x,w,c
 10775  00394E  2607               	addwf	lcd_gotoxy@address,f,c
 10776                           
 10777                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
 10778  003950  5007               	movf	lcd_gotoxy@address,w,c
 10779  003952  0980               	iorlw	128
 10780  003954  6E03               	movwf	lcd_send_byte@n,c
 10781  003956  0E00               	movlw	0
 10782  003958  EC4E  F01C         	call	_lcd_send_byte
 10783  00395C  0012               	return		;funcret
 10784  00395E                     __end_of_lcd_gotoxy:
 10785                           	opt stack 0
 10786                           tblptru	equ	0xFF8
 10787                           tblptrh	equ	0xFF7
 10788                           tblptrl	equ	0xFF6
 10789                           tablat	equ	0xFF5
 10790                           prodh	equ	0xFF4
 10791                           prodl	equ	0xFF3
 10792                           intcon	equ	0xFF2
 10793                           indf0	equ	0xFEF
 10794                           postinc0	equ	0xFEE
 10795                           fsr0h	equ	0xFEA
 10796                           fsr0l	equ	0xFE9
 10797                           wreg	equ	0xFE8
 10798                           postinc1	equ	0xFE6
 10799                           postdec1	equ	0xFE5
 10800                           fsr1h	equ	0xFE2
 10801                           fsr1l	equ	0xFE1
 10802                           indf2	equ	0xFDF
 10803                           postinc2	equ	0xFDE
 10804                           postdec2	equ	0xFDD
 10805                           fsr2h	equ	0xFDA
 10806                           fsr2l	equ	0xFD9
 10807                           status	equ	0xFD8
 10808                           
 10809 ;; *************** function _lcd_send_byte *****************
 10810 ;; Defined at:
 10811 ;;		line 86 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;  address         1    wreg     unsigned char 
 10814 ;;  n               1    2[COMRAM] unsigned char 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  address         1    3[COMRAM] unsigned char 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0, cstack
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10826 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10829 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10830 ;;Total ram usage:        2 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    1
 10833 ;; This function calls:
 10834 ;;		_Delay100TCYx
 10835 ;;		_lcd_send_nibble
 10836 ;; This function is called by:
 10837 ;;		_lcd_init
 10838 ;;		_lcd_gotoxy
 10839 ;;		_lcd_putc
 10840 ;;		_lcd_comand
 10841 ;;		_lcd_setcursor_vb
 10842 ;; This function uses a non-reentrant model
 10843 ;;
 10844                           
 10845                           	psect	text56
 10846  00389C                     __ptext56:
 10847                           	opt stack 0
 10848  00389C                     _lcd_send_byte:
 10849                           	opt stack 24
 10850                           
 10851                           ;incstack = 0
 10852                           ;lcd_send_byte@address stored from wreg
 10853  00389C  6E04               	movwf	lcd_send_byte@address,c
 10854                           
 10855                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 10856  00389E  968A               	bcf	3978,3,c	;volatile
 10857                           
 10858                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 10859  0038A0  0E02               	movlw	2
 10860  0038A2  ECE5  F01C         	call	_Delay100TCYx
 10861                           
 10862                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 10863  0038A6  9893               	bcf	3987,4,c	;volatile
 10864                           
 10865                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 10866  0038A8  9A93               	bcf	3987,5,c	;volatile
 10867                           
 10868                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 10869  0038AA  9C93               	bcf	3987,6,c	;volatile
 10870                           
 10871                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 10872  0038AC  9E93               	bcf	3987,7,c	;volatile
 10873                           
 10874                           ;unmc_lcd_216.c: 101: if(address)
 10875  0038AE  5004               	movf	lcd_send_byte@address,w,c
 10876  0038B0  B4D8               	btfsc	status,2,c
 10877  0038B2  D002               	goto	l451
 10878                           
 10879                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 10880  0038B4  868A               	bsf	3978,3,c	;volatile
 10881  0038B6  D001               	goto	l452
 10882  0038B8                     l451:
 10883                           
 10884                           ;unmc_lcd_216.c: 103: else
 10885                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 10886  0038B8  968A               	bcf	3978,3,c	;volatile
 10887  0038BA                     l452:
 10888                           
 10889                           ;unmc_lcd_216.c: 106: __nop();
 10890  0038BA  F000               	nop	
 10891                           
 10892                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10893  0038BC  3803               	swapf	lcd_send_byte@n,w,c
 10894  0038BE  0B0F               	andlw	15
 10895  0038C0  ECD1  F019         	call	_lcd_send_nibble
 10896                           
 10897                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10898  0038C4  5003               	movf	lcd_send_byte@n,w,c
 10899  0038C6  0B0F               	andlw	15
 10900  0038C8  ECD1  F019         	call	_lcd_send_nibble
 10901  0038CC  0012               	return		;funcret
 10902  0038CE                     __end_of_lcd_send_byte:
 10903                           	opt stack 0
 10904                           tblptru	equ	0xFF8
 10905                           tblptrh	equ	0xFF7
 10906                           tblptrl	equ	0xFF6
 10907                           tablat	equ	0xFF5
 10908                           prodh	equ	0xFF4
 10909                           prodl	equ	0xFF3
 10910                           intcon	equ	0xFF2
 10911                           indf0	equ	0xFEF
 10912                           postinc0	equ	0xFEE
 10913                           fsr0h	equ	0xFEA
 10914                           fsr0l	equ	0xFE9
 10915                           wreg	equ	0xFE8
 10916                           postinc1	equ	0xFE6
 10917                           postdec1	equ	0xFE5
 10918                           fsr1h	equ	0xFE2
 10919                           fsr1l	equ	0xFE1
 10920                           indf2	equ	0xFDF
 10921                           postinc2	equ	0xFDE
 10922                           postdec2	equ	0xFDD
 10923                           fsr2h	equ	0xFDA
 10924                           fsr2l	equ	0xFD9
 10925                           status	equ	0xFD8
 10926                           
 10927 ;; *************** function _lcd_send_nibble *****************
 10928 ;; Defined at:
 10929 ;;		line 25 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;  nibble          1    wreg     unsigned char 
 10932 ;; Auto vars:     Size  Location     Type
 10933 ;;  nibble          1    1[COMRAM] unsigned char 
 10934 ;; Return value:  Size  Location     Type
 10935 ;;                  1    wreg      void 
 10936 ;; Registers used:
 10937 ;;		wreg, status,2, status,0
 10938 ;; Tracked objects:
 10939 ;;		On entry : 0/0
 10940 ;;		On exit  : 0/0
 10941 ;;		Unchanged: 0/0
 10942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10945 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10946 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10947 ;;Total ram usage:        2 bytes
 10948 ;; Hardware stack levels used:    1
 10949 ;; This function calls:
 10950 ;;		Nothing
 10951 ;; This function is called by:
 10952 ;;		_lcd_send_byte
 10953 ;;		_lcd_init
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           	psect	text57
 10958  0033A2                     __ptext57:
 10959                           	opt stack 0
 10960  0033A2                     _lcd_send_nibble:
 10961                           	opt stack 24
 10962                           
 10963                           ;incstack = 0
 10964                           ;lcd_send_nibble@nibble stored from wreg
 10965  0033A2  6E02               	movwf	lcd_send_nibble@nibble,c
 10966                           
 10967                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10968  0033A4  A002               	btfss	lcd_send_nibble@nibble,0,c
 10969  0033A6  D003               	goto	u3000
 10970  0033A8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10971  0033AA  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10972  0033AC  D001               	goto	u3018
 10973  0033AE                     u3000:
 10974  0033AE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10975  0033B0                     u3018:
 10976  0033B0  3A01               	swapf	??_lcd_send_nibble,f,c
 10977  0033B2  508A               	movf	3978,w,c	;volatile
 10978  0033B4  1801               	xorwf	??_lcd_send_nibble,w,c
 10979  0033B6  0BEF               	andlw	-17
 10980  0033B8  1801               	xorwf	??_lcd_send_nibble,w,c
 10981  0033BA  6E8A               	movwf	3978,c	;volatile
 10982                           
 10983                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10984  0033BC  A202               	btfss	lcd_send_nibble@nibble,1,c
 10985  0033BE  D003               	goto	u3020
 10986  0033C0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10987  0033C2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10988  0033C4  D001               	goto	u3038
 10989  0033C6                     u3020:
 10990  0033C6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10991  0033C8                     u3038:
 10992  0033C8  3A01               	swapf	??_lcd_send_nibble,f,c
 10993  0033CA  4601               	rlncf	??_lcd_send_nibble,f,c
 10994  0033CC  508A               	movf	3978,w,c	;volatile
 10995  0033CE  1801               	xorwf	??_lcd_send_nibble,w,c
 10996  0033D0  0BDF               	andlw	-33
 10997  0033D2  1801               	xorwf	??_lcd_send_nibble,w,c
 10998  0033D4  6E8A               	movwf	3978,c	;volatile
 10999                           
 11000                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 11001  0033D6  A402               	btfss	lcd_send_nibble@nibble,2,c
 11002  0033D8  D003               	goto	u3040
 11003  0033DA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 11004  0033DC  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 11005  0033DE  D001               	goto	u3058
 11006  0033E0                     u3040:
 11007  0033E0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 11008  0033E2                     u3058:
 11009  0033E2  3A01               	swapf	??_lcd_send_nibble,f,c
 11010  0033E4  4601               	rlncf	??_lcd_send_nibble,f,c
 11011  0033E6  4601               	rlncf	??_lcd_send_nibble,f,c
 11012  0033E8  508A               	movf	3978,w,c	;volatile
 11013  0033EA  1801               	xorwf	??_lcd_send_nibble,w,c
 11014  0033EC  0BBF               	andlw	-65
 11015  0033EE  1801               	xorwf	??_lcd_send_nibble,w,c
 11016  0033F0  6E8A               	movwf	3978,c	;volatile
 11017                           
 11018                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 11019  0033F2  A602               	btfss	lcd_send_nibble@nibble,3,c
 11020  0033F4  D003               	goto	u3060
 11021  0033F6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 11022  0033F8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 11023  0033FA  D001               	goto	u3078
 11024  0033FC                     u3060:
 11025  0033FC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 11026  0033FE                     u3078:
 11027  0033FE  3201               	rrcf	??_lcd_send_nibble,f,c
 11028  003400  3201               	rrcf	??_lcd_send_nibble,f,c
 11029  003402  508A               	movf	3978,w,c	;volatile
 11030  003404  1801               	xorwf	??_lcd_send_nibble,w,c
 11031  003406  0B7F               	andlw	-129
 11032  003408  1801               	xorwf	??_lcd_send_nibble,w,c
 11033  00340A  6E8A               	movwf	3978,c	;volatile
 11034                           
 11035                           ;unmc_lcd_216.c: 32: __nop();
 11036  00340C  F000               	nop	
 11037                           
 11038                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 11039  00340E  848A               	bsf	3978,2,c	;volatile
 11040                           
 11041                           ;unmc_lcd_216.c: 34: __nop();__nop();
 11042  003410  F000               	nop	
 11043  003412  F000               	nop	
 11044                           
 11045                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 11046  003414  948A               	bcf	3978,2,c	;volatile
 11047  003416  0012               	return		;funcret
 11048  003418                     __end_of_lcd_send_nibble:
 11049                           	opt stack 0
 11050                           tblptru	equ	0xFF8
 11051                           tblptrh	equ	0xFF7
 11052                           tblptrl	equ	0xFF6
 11053                           tablat	equ	0xFF5
 11054                           prodh	equ	0xFF4
 11055                           prodl	equ	0xFF3
 11056                           intcon	equ	0xFF2
 11057                           indf0	equ	0xFEF
 11058                           postinc0	equ	0xFEE
 11059                           fsr0h	equ	0xFEA
 11060                           fsr0l	equ	0xFE9
 11061                           wreg	equ	0xFE8
 11062                           postinc1	equ	0xFE6
 11063                           postdec1	equ	0xFE5
 11064                           fsr1h	equ	0xFE2
 11065                           fsr1l	equ	0xFE1
 11066                           indf2	equ	0xFDF
 11067                           postinc2	equ	0xFDE
 11068                           postdec2	equ	0xFDD
 11069                           fsr2h	equ	0xFDA
 11070                           fsr2l	equ	0xFD9
 11071                           status	equ	0xFD8
 11072                           
 11073 ;; *************** function _Delay100TCYx *****************
 11074 ;; Defined at:
 11075 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d100tcyx.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  unit            1    wreg     unsigned char 
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;  unit            1    0[COMRAM] unsigned char 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      void 
 11082 ;; Registers used:
 11083 ;;		wreg
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11093 ;;Total ram usage:        1 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_lcd_send_byte
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text58
 11103  0039CA                     __ptext58:
 11104                           	opt stack 0
 11105  0039CA                     _Delay100TCYx:
 11106                           	opt stack 24
 11107                           
 11108                           ;incstack = 0
 11109                           ;Delay100TCYx@unit stored from wreg
 11110  0039CA  6E01               	movwf	Delay100TCYx@unit,c
 11111  0039CC                     l829:
 11112  0039CC  0E21               	movlw	33
 11113  0039CE                     u6237:
 11114  0039CE  2EE8               	decfsz	wreg,f,c
 11115  0039D0  D7FE               	bra	u6237
 11116  0039D2  F000               	nop	
 11117  0039D4  2E01               	decfsz	Delay100TCYx@unit,f,c
 11118  0039D6  D7FA               	goto	l829
 11119  0039D8  0012               	return	
 11120  0039DA                     __end_of_Delay100TCYx:
 11121                           	opt stack 0
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           indf0	equ	0xFEF
 11130                           postinc0	equ	0xFEE
 11131                           fsr0h	equ	0xFEA
 11132                           fsr0l	equ	0xFE9
 11133                           wreg	equ	0xFE8
 11134                           postinc1	equ	0xFE6
 11135                           postdec1	equ	0xFE5
 11136                           fsr1h	equ	0xFE2
 11137                           fsr1l	equ	0xFE1
 11138                           indf2	equ	0xFDF
 11139                           postinc2	equ	0xFDE
 11140                           postdec2	equ	0xFDD
 11141                           fsr2h	equ	0xFDA
 11142                           fsr2l	equ	0xFD9
 11143                           status	equ	0xFD8
 11144                           
 11145 ;; *************** function _Read_RTC *****************
 11146 ;; Defined at:
 11147 ;;		line 111 in file "../../headers\unmc_rtcc_01.h"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11165 ;;Total ram usage:        0 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    1
 11168 ;; This function calls:
 11169 ;;		_RtccReadDate
 11170 ;;		_RtccReadTime
 11171 ;; This function is called by:
 11172 ;;		_ir_a_pantalla_edicion
 11173 ;;		_main
 11174 ;; This function uses a non-reentrant model
 11175 ;;
 11176                           
 11177                           	psect	text59
 11178  001F8E                     __ptext59:
 11179                           	opt stack 0
 11180  001F8E                     _Read_RTC:
 11181                           	opt stack 25
 11182                           
 11183                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
 11184                           
 11185                           ;incstack = 0
 11186  001F8E  0EBB               	movlw	low _RtccTime
 11187  001F90  6E01               	movwf	RtccReadTime@pTm,c
 11188  001F92  0E00               	movlw	high _RtccTime
 11189  001F94  6E02               	movwf	RtccReadTime@pTm+1,c
 11190  001F96  EC43  F01A         	call	_RtccReadTime	;wreg free
 11191                           
 11192                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
 11193  001F9A  0100               	movlb	0	; () banked
 11194  001F9C  51BC               	movf	(_RtccTime+1)& (0+255),w,b
 11195  001F9E  0B0F               	andlw	15
 11196  001FA0  0100               	movlb	0	; () banked
 11197  001FA2  6FF3               	movwf	_segundo_u& (0+255),b
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
 11201  001FA4  0100               	movlb	0	; () banked
 11202  001FA6  39BC               	swapf	(_RtccTime+1)& (0+255),w,b
 11203  001FA8  0B0F               	andlw	15
 11204  001FAA  0B0F               	andlw	15
 11205  001FAC  0100               	movlb	0	; () banked
 11206  001FAE  6FF2               	movwf	_segundo_d& (0+255),b
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
 11210  001FB0  0100               	movlb	0	; () banked
 11211  001FB2  51BD               	movf	(_RtccTime+2)& (0+255),w,b
 11212  001FB4  0B0F               	andlw	15
 11213  001FB6  0100               	movlb	0	; () banked
 11214  001FB8  6FF1               	movwf	_minuto_u& (0+255),b
 11215                           
 11216                           ; BSR set to: 0
 11217                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
 11218  001FBA  0100               	movlb	0	; () banked
 11219  001FBC  39BD               	swapf	(_RtccTime+2)& (0+255),w,b
 11220  001FBE  0B0F               	andlw	15
 11221  001FC0  0B0F               	andlw	15
 11222  001FC2  0100               	movlb	0	; () banked
 11223  001FC4  6FF0               	movwf	_minuto_d& (0+255),b
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
 11227  001FC6  0100               	movlb	0	; () banked
 11228  001FC8  51BE               	movf	(_RtccTime+3)& (0+255),w,b
 11229  001FCA  0B0F               	andlw	15
 11230  001FCC  0100               	movlb	0	; () banked
 11231  001FCE  6FEF               	movwf	_hora_u& (0+255),b
 11232                           
 11233                           ; BSR set to: 0
 11234                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
 11235  001FD0  0100               	movlb	0	; () banked
 11236  001FD2  39BE               	swapf	(_RtccTime+3)& (0+255),w,b
 11237  001FD4  0B0F               	andlw	15
 11238  001FD6  0B0F               	andlw	15
 11239  001FD8  0100               	movlb	0	; () banked
 11240  001FDA  6FEE               	movwf	_hora_d& (0+255),b
 11241                           
 11242                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
 11243  001FDC  0EB7               	movlw	low _RtccDate
 11244  001FDE  6E01               	movwf	RtccReadDate@pDt,c
 11245  001FE0  0E00               	movlw	high _RtccDate
 11246  001FE2  6E02               	movwf	RtccReadDate@pDt+1,c
 11247  001FE4  EC84  F017         	call	_RtccReadDate	;wreg free
 11248                           
 11249                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
 11250  001FE8  0100               	movlb	0	; () banked
 11251  001FEA  51B8               	movf	(_RtccDate+1)& (0+255),w,b
 11252  001FEC  0B0F               	andlw	15
 11253  001FEE  0100               	movlb	0	; () banked
 11254  001FF0  6FED               	movwf	_fecha_u& (0+255),b
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
 11258  001FF2  0100               	movlb	0	; () banked
 11259  001FF4  39B8               	swapf	(_RtccDate+1)& (0+255),w,b
 11260  001FF6  0B0F               	andlw	15
 11261  001FF8  0B0F               	andlw	15
 11262  001FFA  0100               	movlb	0	; () banked
 11263  001FFC  6FEC               	movwf	_fecha_d& (0+255),b
 11264                           
 11265                           ; BSR set to: 0
 11266                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
 11267  001FFE  0100               	movlb	0	; () banked
 11268  002000  51B9               	movf	(_RtccDate+2)& (0+255),w,b
 11269  002002  0B0F               	andlw	15
 11270  002004  0100               	movlb	0	; () banked
 11271  002006  6FEB               	movwf	_mes_u& (0+255),b
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
 11275  002008  0100               	movlb	0	; () banked
 11276  00200A  39B9               	swapf	(_RtccDate+2)& (0+255),w,b
 11277  00200C  0B0F               	andlw	15
 11278  00200E  0B0F               	andlw	15
 11279  002010  0100               	movlb	0	; () banked
 11280  002012  6FEA               	movwf	_mes_d& (0+255),b
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
 11284  002014  C0B7  F0E9         	movff	_RtccDate,_dia_semana
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
 11288  002018  0100               	movlb	0	; () banked
 11289  00201A  51BA               	movf	(_RtccDate+3)& (0+255),w,b
 11290  00201C  0B0F               	andlw	15
 11291  00201E  0100               	movlb	0	; () banked
 11292  002020  6FE8               	movwf	_anio_u& (0+255),b
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
 11296  002022  0100               	movlb	0	; () banked
 11297  002024  39BA               	swapf	(_RtccDate+3)& (0+255),w,b
 11298  002026  0B0F               	andlw	15
 11299  002028  0B0F               	andlw	15
 11300  00202A  0100               	movlb	0	; () banked
 11301  00202C  6FE7               	movwf	_anio_d& (0+255),b
 11302                           
 11303                           ; BSR set to: 0
 11304                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
 11305  00202E  0100               	movlb	0	; () banked
 11306  002030  51F2               	movf	_segundo_d& (0+255),w,b
 11307  002032  0D0A               	mullw	10
 11308  002034  0100               	movlb	0	; () banked
 11309  002036  51F3               	movf	_segundo_u& (0+255),w,b
 11310  002038  24F3               	addwf	prodl,w,c
 11311  00203A  0100               	movlb	0	; () banked
 11312  00203C  6F94               	movwf	_segundo& (0+255),b
 11313  00203E  0100               	movlb	0	; () banked
 11314  002040  0E00               	movlw	0
 11315  002042  20F4               	addwfc	prodh,w,c
 11316  002044  0100               	movlb	0	; () banked
 11317  002046  6F95               	movwf	(_segundo+1)& (0+255),b
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
 11321  002048  0100               	movlb	0	; () banked
 11322  00204A  51F0               	movf	_minuto_d& (0+255),w,b
 11323  00204C  0D0A               	mullw	10
 11324  00204E  0100               	movlb	0	; () banked
 11325  002050  51F1               	movf	_minuto_u& (0+255),w,b
 11326  002052  24F3               	addwf	prodl,w,c
 11327  002054  0100               	movlb	0	; () banked
 11328  002056  6FC7               	movwf	_minuto& (0+255),b
 11329  002058  0100               	movlb	0	; () banked
 11330  00205A  0E00               	movlw	0
 11331  00205C  20F4               	addwfc	prodh,w,c
 11332  00205E  0100               	movlb	0	; () banked
 11333  002060  6FC8               	movwf	(_minuto+1)& (0+255),b
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
 11337  002062  0100               	movlb	0	; () banked
 11338  002064  51EE               	movf	_hora_d& (0+255),w,b
 11339  002066  0D0A               	mullw	10
 11340  002068  0100               	movlb	0	; () banked
 11341  00206A  51EF               	movf	_hora_u& (0+255),w,b
 11342  00206C  24F3               	addwf	prodl,w,c
 11343  00206E  0100               	movlb	0	; () banked
 11344  002070  6FC9               	movwf	_hora& (0+255),b
 11345  002072  0100               	movlb	0	; () banked
 11346  002074  0E00               	movlw	0
 11347  002076  20F4               	addwfc	prodh,w,c
 11348  002078  0100               	movlb	0	; () banked
 11349  00207A  6FCA               	movwf	(_hora+1)& (0+255),b
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
 11353  00207C  0100               	movlb	0	; () banked
 11354  00207E  51EC               	movf	_fecha_d& (0+255),w,b
 11355  002080  0D0A               	mullw	10
 11356  002082  0100               	movlb	0	; () banked
 11357  002084  51ED               	movf	_fecha_u& (0+255),w,b
 11358  002086  24F3               	addwf	prodl,w,c
 11359  002088  0100               	movlb	0	; () banked
 11360  00208A  6FCB               	movwf	_dia& (0+255),b
 11361  00208C  0100               	movlb	0	; () banked
 11362  00208E  0E00               	movlw	0
 11363  002090  20F4               	addwfc	prodh,w,c
 11364  002092  0100               	movlb	0	; () banked
 11365  002094  6FCC               	movwf	(_dia+1)& (0+255),b
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
 11369  002096  C0E9  F0CD         	movff	_dia_semana,_diasem
 11370  00209A  0100               	movlb	0	; () banked
 11371  00209C  6BCE               	clrf	(_diasem+1)& (0+255),b
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
 11375  00209E  0100               	movlb	0	; () banked
 11376  0020A0  51EA               	movf	_mes_d& (0+255),w,b
 11377  0020A2  0D0A               	mullw	10
 11378  0020A4  0100               	movlb	0	; () banked
 11379  0020A6  51EB               	movf	_mes_u& (0+255),w,b
 11380  0020A8  24F3               	addwf	prodl,w,c
 11381  0020AA  0100               	movlb	0	; () banked
 11382  0020AC  6FCF               	movwf	_mes& (0+255),b
 11383  0020AE  0100               	movlb	0	; () banked
 11384  0020B0  0E00               	movlw	0
 11385  0020B2  20F4               	addwfc	prodh,w,c
 11386  0020B4  0100               	movlb	0	; () banked
 11387  0020B6  6FD0               	movwf	(_mes+1)& (0+255),b
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
 11391  0020B8  0100               	movlb	0	; () banked
 11392  0020BA  51E7               	movf	_anio_d& (0+255),w,b
 11393  0020BC  0D0A               	mullw	10
 11394  0020BE  0100               	movlb	0	; () banked
 11395  0020C0  51E8               	movf	_anio_u& (0+255),w,b
 11396  0020C2  24F3               	addwf	prodl,w,c
 11397  0020C4  0100               	movlb	0	; () banked
 11398  0020C6  6FD1               	movwf	_anio& (0+255),b
 11399  0020C8  0100               	movlb	0	; () banked
 11400  0020CA  0E00               	movlw	0
 11401  0020CC  20F4               	addwfc	prodh,w,c
 11402  0020CE  0100               	movlb	0	; () banked
 11403  0020D0  6FD2               	movwf	(_anio+1)& (0+255),b
 11404                           
 11405                           ; BSR set to: 0
 11406  0020D2  0012               	return		;funcret
 11407  0020D4                     __end_of_Read_RTC:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           intcon	equ	0xFF2
 11416                           indf0	equ	0xFEF
 11417                           postinc0	equ	0xFEE
 11418                           fsr0h	equ	0xFEA
 11419                           fsr0l	equ	0xFE9
 11420                           wreg	equ	0xFE8
 11421                           postinc1	equ	0xFE6
 11422                           postdec1	equ	0xFE5
 11423                           fsr1h	equ	0xFE2
 11424                           fsr1l	equ	0xFE1
 11425                           indf2	equ	0xFDF
 11426                           postinc2	equ	0xFDE
 11427                           postdec2	equ	0xFDD
 11428                           fsr2h	equ	0xFDA
 11429                           fsr2l	equ	0xFD9
 11430                           status	equ	0xFD8
 11431                           
 11432 ;; *************** function _RtccReadTime *****************
 11433 ;; Defined at:
 11434 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadTime.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;  pTm             2    0[COMRAM] PTR struct .
 11437 ;;		 -> RtccTime(4), 
 11438 ;; Auto vars:     Size  Location     Type
 11439 ;;  rTD0            8   10[COMRAM] struct .
 11440 ;;  rTD1            8    2[COMRAM] struct .
 11441 ;; Return value:  Size  Location     Type
 11442 ;;                  1    wreg      void 
 11443 ;; Registers used:
 11444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11445 ;; Tracked objects:
 11446 ;;		On entry : 0/0
 11447 ;;		On exit  : 0/0
 11448 ;;		Unchanged: 0/0
 11449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11451 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11453 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11454 ;;Total ram usage:       18 bytes
 11455 ;; Hardware stack levels used:    1
 11456 ;; This function calls:
 11457 ;;		Nothing
 11458 ;; This function is called by:
 11459 ;;		_Read_RTC
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           	psect	text60
 11464  003486                     __ptext60:
 11465                           	opt stack 0
 11466  003486                     _RtccReadTime:
 11467                           	opt stack 25
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;incstack = 0
 11471  003486  0EFC               	movlw	252
 11472  003488  010F               	movlb	15	; () banked
 11473  00348A  173F               	andwf	63,f,b	;volatile
 11474                           
 11475                           ; BSR set to: 15
 11476  00348C  010F               	movlb	15	; () banked
 11477  00348E  813F               	bsf	63,0,b	;volatile
 11478                           
 11479                           ; BSR set to: 15
 11480  003490  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
 11481                           
 11482                           ; BSR set to: 15
 11483  003494  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
 11484                           
 11485                           ; BSR set to: 15
 11486  003498  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
 11487                           
 11488                           ; BSR set to: 15
 11489  00349C  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
 11490                           
 11491                           ; BSR set to: 15
 11492  0034A0  0EFC               	movlw	252
 11493  0034A2  010F               	movlb	15	; () banked
 11494  0034A4  173F               	andwf	63,f,b	;volatile
 11495  0034A6  010F               	movlb	15	; () banked
 11496  0034A8  813F               	bsf	63,0,b	;volatile
 11497                           
 11498                           ; BSR set to: 15
 11499  0034AA  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
 11500                           
 11501                           ; BSR set to: 15
 11502  0034AE  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
 11503                           
 11504                           ; BSR set to: 15
 11505  0034B2  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
 11506                           
 11507                           ; BSR set to: 15
 11508  0034B6  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
 11509                           
 11510                           ; BSR set to: 15
 11511  0034BA  5009               	movf	RtccReadTime@rTD1+6,w,c
 11512  0034BC  1811               	xorwf	RtccReadTime@rTD0+6,w,c
 11513  0034BE  A4D8               	btfss	status,2,c
 11514  0034C0  D7E2               	goto	_RtccReadTime
 11515                           
 11516                           ; BSR set to: 15
 11517                           
 11518                           ; BSR set to: 15
 11519  0034C2  EE20 F003          	lfsr	2,3
 11520  0034C6  5001               	movf	RtccReadTime@pTm,w,c
 11521  0034C8  26D9               	addwf	fsr2l,f,c
 11522  0034CA  5002               	movf	RtccReadTime@pTm+1,w,c
 11523  0034CC  22DA               	addwfc	fsr2h,f,c
 11524  0034CE  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
 11525  0034D2  EE20 F002          	lfsr	2,2
 11526  0034D6  5001               	movf	RtccReadTime@pTm,w,c
 11527  0034D8  26D9               	addwf	fsr2l,f,c
 11528  0034DA  5002               	movf	RtccReadTime@pTm+1,w,c
 11529  0034DC  22DA               	addwfc	fsr2h,f,c
 11530  0034DE  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
 11531  0034E2  EE20 F001          	lfsr	2,1
 11532  0034E6  5001               	movf	RtccReadTime@pTm,w,c
 11533  0034E8  26D9               	addwf	fsr2l,f,c
 11534  0034EA  5002               	movf	RtccReadTime@pTm+1,w,c
 11535  0034EC  22DA               	addwfc	fsr2h,f,c
 11536  0034EE  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
 11537                           
 11538                           ; BSR set to: 15
 11539  0034F2  0012               	return		;funcret
 11540  0034F4                     __end_of_RtccReadTime:
 11541                           	opt stack 0
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           intcon	equ	0xFF2
 11549                           indf0	equ	0xFEF
 11550                           postinc0	equ	0xFEE
 11551                           fsr0h	equ	0xFEA
 11552                           fsr0l	equ	0xFE9
 11553                           wreg	equ	0xFE8
 11554                           postinc1	equ	0xFE6
 11555                           postdec1	equ	0xFE5
 11556                           fsr1h	equ	0xFE2
 11557                           fsr1l	equ	0xFE1
 11558                           indf2	equ	0xFDF
 11559                           postinc2	equ	0xFDE
 11560                           postdec2	equ	0xFDD
 11561                           fsr2h	equ	0xFDA
 11562                           fsr2l	equ	0xFD9
 11563                           status	equ	0xFD8
 11564                           
 11565 ;; *************** function _RtccReadDate *****************
 11566 ;; Defined at:
 11567 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadDate.c"
 11568 ;; Parameters:    Size  Location     Type
 11569 ;;  pDt             2    0[COMRAM] PTR struct .
 11570 ;;		 -> RtccDate(4), 
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;  rTD0            8   10[COMRAM] struct .
 11573 ;;  rTD1            8    2[COMRAM] struct .
 11574 ;; Return value:  Size  Location     Type
 11575 ;;                  1    wreg      void 
 11576 ;; Registers used:
 11577 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11578 ;; Tracked objects:
 11579 ;;		On entry : 0/0
 11580 ;;		On exit  : 0/0
 11581 ;;		Unchanged: 0/0
 11582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11584 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11586 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11587 ;;Total ram usage:       18 bytes
 11588 ;; Hardware stack levels used:    1
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		_Read_RTC
 11593 ;; This function uses a non-reentrant model
 11594 ;;
 11595                           
 11596                           	psect	text61
 11597  002F08                     __ptext61:
 11598                           	opt stack 0
 11599  002F08                     _RtccReadDate:
 11600                           	opt stack 25
 11601                           
 11602                           ; BSR set to: 15
 11603                           ;incstack = 0
 11604  002F08  0EFC               	movlw	252
 11605  002F0A  010F               	movlb	15	; () banked
 11606  002F0C  173F               	andwf	63,f,b	;volatile
 11607  002F0E  0E03               	movlw	3
 11608  002F10  010F               	movlb	15	; () banked
 11609  002F12  133F               	iorwf	63,f,b	;volatile
 11610                           
 11611                           ; BSR set to: 15
 11612  002F14  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 11613                           
 11614                           ; BSR set to: 15
 11615  002F18  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 11616                           
 11617                           ; BSR set to: 15
 11618  002F1C  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 11619                           
 11620                           ; BSR set to: 15
 11621  002F20  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 11622                           
 11623                           ; BSR set to: 15
 11624  002F24  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 11625                           
 11626                           ; BSR set to: 15
 11627  002F28  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 11628  002F2C  0EFC               	movlw	252
 11629  002F2E  010F               	movlb	15	; () banked
 11630  002F30  173F               	andwf	63,f,b	;volatile
 11631  002F32  0E03               	movlw	3
 11632  002F34  010F               	movlb	15	; () banked
 11633  002F36  133F               	iorwf	63,f,b	;volatile
 11634                           
 11635                           ; BSR set to: 15
 11636  002F38  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 11637                           
 11638                           ; BSR set to: 15
 11639  002F3C  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 11640                           
 11641                           ; BSR set to: 15
 11642  002F40  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 11643                           
 11644                           ; BSR set to: 15
 11645  002F44  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 11646                           
 11647                           ; BSR set to: 15
 11648  002F48  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 11649                           
 11650                           ; BSR set to: 15
 11651  002F4C  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 11652  002F50  5005               	movf	RtccReadDate@rTD1+2,w,c
 11653  002F52  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 11654  002F54  A4D8               	btfss	status,2,c
 11655  002F56  D7D8               	goto	_RtccReadDate
 11656                           
 11657                           ; BSR set to: 15
 11658                           
 11659                           ; BSR set to: 15
 11660  002F58  EE20 F001          	lfsr	2,1
 11661  002F5C  5001               	movf	RtccReadDate@pDt,w,c
 11662  002F5E  26D9               	addwf	fsr2l,f,c
 11663  002F60  5002               	movf	RtccReadDate@pDt+1,w,c
 11664  002F62  22DA               	addwfc	fsr2h,f,c
 11665  002F64  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 11666  002F68  EE20 F002          	lfsr	2,2
 11667  002F6C  5001               	movf	RtccReadDate@pDt,w,c
 11668  002F6E  26D9               	addwf	fsr2l,f,c
 11669  002F70  5002               	movf	RtccReadDate@pDt+1,w,c
 11670  002F72  22DA               	addwfc	fsr2h,f,c
 11671  002F74  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 11672                           
 11673                           ; BSR set to: 15
 11674  002F78  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 11675  002F7C  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 11676  002F80  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 11677                           
 11678                           ; BSR set to: 15
 11679  002F84  EE20 F003          	lfsr	2,3
 11680  002F88  5001               	movf	RtccReadDate@pDt,w,c
 11681  002F8A  26D9               	addwf	fsr2l,f,c
 11682  002F8C  5002               	movf	RtccReadDate@pDt+1,w,c
 11683  002F8E  22DA               	addwfc	fsr2h,f,c
 11684  002F90  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 11685                           
 11686                           ; BSR set to: 15
 11687  002F94  0012               	return		;funcret
 11688  002F96                     __end_of_RtccReadDate:
 11689                           	opt stack 0
 11690                           tblptru	equ	0xFF8
 11691                           tblptrh	equ	0xFF7
 11692                           tblptrl	equ	0xFF6
 11693                           tablat	equ	0xFF5
 11694                           prodh	equ	0xFF4
 11695                           prodl	equ	0xFF3
 11696                           intcon	equ	0xFF2
 11697                           indf0	equ	0xFEF
 11698                           postinc0	equ	0xFEE
 11699                           fsr0h	equ	0xFEA
 11700                           fsr0l	equ	0xFE9
 11701                           wreg	equ	0xFE8
 11702                           postinc1	equ	0xFE6
 11703                           postdec1	equ	0xFE5
 11704                           fsr1h	equ	0xFE2
 11705                           fsr1l	equ	0xFE1
 11706                           indf2	equ	0xFDF
 11707                           postinc2	equ	0xFDE
 11708                           postdec2	equ	0xFDD
 11709                           fsr2h	equ	0xFDA
 11710                           fsr2l	equ	0xFD9
 11711                           status	equ	0xFD8
 11712                           tblptru	equ	0xFF8
 11713                           tblptrh	equ	0xFF7
 11714                           tblptrl	equ	0xFF6
 11715                           tablat	equ	0xFF5
 11716                           prodh	equ	0xFF4
 11717                           prodl	equ	0xFF3
 11718                           intcon	equ	0xFF2
 11719                           indf0	equ	0xFEF
 11720                           postinc0	equ	0xFEE
 11721                           fsr0h	equ	0xFEA
 11722                           fsr0l	equ	0xFE9
 11723                           wreg	equ	0xFE8
 11724                           postinc1	equ	0xFE6
 11725                           postdec1	equ	0xFE5
 11726                           fsr1h	equ	0xFE2
 11727                           fsr1l	equ	0xFE1
 11728                           indf2	equ	0xFDF
 11729                           postinc2	equ	0xFDE
 11730                           postdec2	equ	0xFDD
 11731                           fsr2h	equ	0xFDA
 11732                           fsr2l	equ	0xFD9
 11733                           status	equ	0xFD8
 11734                           
 11735                           	psect	rparam
 11736  0000                     tblptru	equ	0xFF8
 11737                           tblptrh	equ	0xFF7
 11738                           tblptrl	equ	0xFF6
 11739                           tablat	equ	0xFF5
 11740                           prodh	equ	0xFF4
 11741                           prodl	equ	0xFF3
 11742                           intcon	equ	0xFF2
 11743                           indf0	equ	0xFEF
 11744                           postinc0	equ	0xFEE
 11745                           fsr0h	equ	0xFEA
 11746                           fsr0l	equ	0xFE9
 11747                           wreg	equ	0xFE8
 11748                           postinc1	equ	0xFE6
 11749                           postdec1	equ	0xFE5
 11750                           fsr1h	equ	0xFE2
 11751                           fsr1l	equ	0xFE1
 11752                           indf2	equ	0xFDF
 11753                           postinc2	equ	0xFDE
 11754                           postdec2	equ	0xFDD
 11755                           fsr2h	equ	0xFDA
 11756                           fsr2l	equ	0xFD9
 11757                           status	equ	0xFD8


Data Sizes:
    Strings     178
    Constant    71
    Data        32
    BSS         95
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     20     149
    BANK1           256      0      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_25(CODE[5]), STR_16(CODE[5]), STR_13(CODE[5]), STR_8(CODE[15]), 
		 -> STR_7(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_24(CODE[17]), STR_23(CODE[21]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[9]), STR_19(CODE[8]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_15(CODE[15]), STR_14(CODE[8]), STR_12(CODE[9]), STR_11(CODE[9]), 
		 -> STR_10(CODE[9]), STR_9(CODE[7]), buffer2(BANK0[20]), 

    guarda_numero_ingresado@num	PTR int  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    array_seleccionar	PTR unsigned char [6] size(2) Largest target is 5
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _lcd_init->_lcd_send_byte
    _titila_texto_insert_password->_lcd_putrs
    _resetear_pantalla_ingresar_contrasenia->_lcd_putrs
    _mostrar_presionar_a->_lcd_putrs
    _seleccionar_opcion->_editar_fecha_reloj_digital
    _seleccionar_opcion->_editar_hora_reloj_digital
    _ir_a_pantalla_editar_contrasenia->_ingreso_numero
    _editar_hora_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _setHoraMinutoSegundo->_sprintf
    _editar_fecha_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _setDiaMesAnio->_sprintf
    _Write_RTC->_RtccWriteDate
    _covertir_valores_de_array_a_escala_decimal->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___awtoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___wmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _activar_alarma->_ingreso_numero
    _lcd_comand->_lcd_send_byte
    _ingreso_numero->_guarda_numero_ingresado
    _guarda_numero_ingresado->_sprintf
    _cambiar_opcion->_sprintf
    _sprintf->___wmul
    ___wmul->___fttol
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    _ir_a_pantalla_ingresar_contrasenia->_ir_a_pantalla_edicion
    _seleccionar_opcion->_editar_fecha_reloj_digital
    _seleccionar_opcion->_editar_hora_reloj_digital
    _editar_hora_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _editar_fecha_reloj_digital->_covertir_valores_de_array_a_escala_decimal

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  381113
                                             19 BANK0      1     1      0
                           _Read_RTC
              _ir_a_pantalla_inicial
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   28628
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
                  _set_reloj_digital
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     925
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ir_a_pantalla_inicial                                0     0      0  351493
                  _set_reloj_digital
_si_apreta_numero_va_a_pantalla_cont
       _titila_texto_insert_password
 ---------------------------------------------------------------------------------
 (2) _titila_texto_insert_password                         1     1      0    6835
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _si_apreta_numero_va_a_pantalla_contrasenia           0     0      0  320154
 _ir_a_pantalla_ingresar_contrasenia
 ---------------------------------------------------------------------------------
 (3) _ir_a_pantalla_ingresar_contrasenia                   0     0      0  320154
                     _ingreso_numero
              _ir_a_pantalla_edicion
                         _lcd_gotoxy
                          _lcd_putrs
                _mostrar_presionar_a
_resetear_pantalla_ingresar_contrase
              _verificar_contrasenia
 ---------------------------------------------------------------------------------
 (4) _resetear_pantalla_ingresar_contrasenia               2     2      0    6903
                                             10 COMRAM     2     2      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _mostrar_presionar_a                                  0     0      0    6835
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _ir_a_pantalla_edicion                                1     1      0  288857
                                             18 BANK0      1     1      0
                           _Read_RTC
                     _cambiar_opcion
                         _lcd_gotoxy
                          _lcd_putrs
                 _seleccionar_opcion
                  _set_reloj_digital
 ---------------------------------------------------------------------------------
 (2) _set_reloj_digital                                    0     0      0   24504
                      _setDiaMesAnio
               _setHoraMinutoSegundo
 ---------------------------------------------------------------------------------
 (5) _seleccionar_opcion                                   0     0      0  246743
                     _activar_alarma
         _editar_fecha_reloj_digital
          _editar_hora_reloj_digital
   _ir_a_pantalla_editar_contrasenia
 ---------------------------------------------------------------------------------
 (6) _ir_a_pantalla_editar_contrasenia                     2     2      0   17534
                                             60 COMRAM     2     2      0
                     _ingreso_numero
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (6) _editar_hora_reloj_digital                            9     9      0  105460
                                             94 COMRAM     1     1      0
                                             10 BANK0      8     8      0
                          _Write_RTC
_covertir_valores_de_array_a_escala_
                     _ingreso_numero
               _setHoraMinutoSegundo
 ---------------------------------------------------------------------------------
 (3) _setHoraMinutoSegundo                                 0     0      0   12252
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _editar_fecha_reloj_digital                           9     9      0  105460
                                             94 COMRAM     1     1      0
                                             10 BANK0      8     8      0
                          _Write_RTC
_covertir_valores_de_array_a_escala_
                     _ingreso_numero
                      _setDiaMesAnio
 ---------------------------------------------------------------------------------
 (3) _setDiaMesAnio                                        0     0      0   12252
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2469
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     561
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     696
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (7) _covertir_valores_de_array_a_escala_decimal          14    12      2   79856
                                             90 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                           ___awtoft
                            ___fttol
                             ___wmul
                         _lcd_gotoxy
                          _lcd_putrs
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (8) _pow                                                 17    11      6   65683
                                             73 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (9) _log                                                  5     2      3   21400
                                             57 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _exp                                                  9     6      3   35628
                                             64 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (10) _ldexp                                               7     2      5     400
                                             57 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (10) _floor                                               8     5      3    9183
                                             45 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (10) _frexp                                               7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     556
                                             12 COMRAM    15    11      4
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftge                                              9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4    2758
                                             27 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (10) _eval_poly                                          12     5      7    9553
                                             45 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    3882
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftsub                                             6     0      6    4615
                                             45 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    4270
                                             33 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftneg                                             3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) ___ftdiv                                            15     9      6    3102
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___awtoft                                            4     1      3    2863
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             9     5      4    2689
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _activar_alarma                                       1     1      0   18289
                                             60 COMRAM     1     1      0
                     _ingreso_numero
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
              _verificar_contrasenia
 ---------------------------------------------------------------------------------
 (4) _verificar_contrasenia                               10     8      2     115
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     730
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (7) _ingreso_numero                                       2     2      0   10609
                                             58 COMRAM     2     2      0
            _guarda_numero_ingresado
 ---------------------------------------------------------------------------------
 (8) _guarda_numero_ingresado                              2     0      2   10609
                                             56 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _cambiar_opcion                                       1     1      0    9783
                                             56 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    22     10    2948
                                             33 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     767
                                             27 COMRAM     6     2      4
                           ___awtoft (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    4538
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    3049
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    2297
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     708
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Read_RTC                                             0     0      0     992
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (6) _RtccReadTime                                        18    16      2     449
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (6) _RtccReadDate                                        18    16      2     543
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _ir_a_pantalla_inicial
     _set_reloj_digital
       _setDiaMesAnio
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
       _setHoraMinutoSegundo
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
     _si_apreta_numero_va_a_pantalla_contrasenia
       _ir_a_pantalla_ingresar_contrasenia
         _ingreso_numero
           _guarda_numero_ingresado
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
             _sprintf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
               _isdigit
         _ir_a_pantalla_edicion
           _Read_RTC
             _RtccReadDate
             _RtccReadTime
           _cambiar_opcion
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
             _sprintf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
               _isdigit
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _seleccionar_opcion
             _activar_alarma
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _lcd_comand
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _verificar_contrasenia
             _editar_fecha_reloj_digital
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _covertir_valores_de_array_a_escala_decimal
                 ___awtoft
                   ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _pow
                   ___ftge
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                   ___lltoft
                     ___ftpack
                   _exp
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___ftpack
                     ___ftge
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg
                     ___ftsub
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _floor
                       ___altoft
                         ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftge
                       ___fttol
                         ___awtoft (ARG)
                           ___ftpack
                       _frexp
                     _ldexp
                       _eval_poly (ARG)
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                     _log (ARG)
                       ___awtoft
                         ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       _eval_poly
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                       _frexp
                   _log
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _frexp
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _setDiaMesAnio
                 _Write_RTC
                   _RtccWrOn
                   _RtccWriteDate
                     _RtccWrOn
                   _RtccWriteTime
                     _RtccWrOn
                   ___awdiv
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
             _editar_hora_reloj_digital
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _covertir_valores_de_array_a_escala_decimal
                 ___awtoft
                   ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _pow
                   ___ftge
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                   ___lltoft
                     ___ftpack
                   _exp
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___ftpack
                     ___ftge
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg
                     ___ftsub
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _floor
                       ___altoft
                         ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftge
                       ___fttol
                         ___awtoft (ARG)
                           ___ftpack
                       _frexp
                     _ldexp
                       _eval_poly (ARG)
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                     _log (ARG)
                       ___awtoft
                         ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       _eval_poly
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                       _frexp
                   _log
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _frexp
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _setHoraMinutoSegundo
                 _Write_RTC
                   _RtccWrOn
                   _RtccWriteDate
                     _RtccWrOn
                   _RtccWriteTime
                     _RtccWrOn
                   ___awdiv
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
             _ir_a_pantalla_editar_contrasenia
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
           _set_reloj_digital
             _setDiaMesAnio
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _sprintf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _isdigit
             _setHoraMinutoSegundo
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _sprintf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _mostrar_presionar_a
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _resetear_pantalla_ingresar_contrasenia
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _verificar_contrasenia
     _titila_texto_insert_password
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
     _set_reloj_digital
       _setDiaMesAnio
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
       _setHoraMinutoSegundo
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       C       8        4.7%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     14      95       5       93.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100       6        0.0%
DATA                 0      0     100       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Oct 27 21:04:30 2017

                                       ___altoft@exp 0024                                                    _a 009C  
                                                  _b 009A                                                    _c 0098  
                                                  _i 00A0                                                    _j 009E  
                                                  _k 0096                                        ___altoft@sign 0025  
                                     ?_lcd_send_byte 0003                                         ___awdiv@sign 0006  
                         guarda_numero_ingresado@num 0039                                  ___wmul@multiplicand 001E  
                                        lcd_comand@d 0005                                         __CFG_CP0$OFF 000000  
                                       ___ftadd@exp1 002D                                         ___ftadd@exp2 002C  
                                       ___ftadd@sign 002B                                                  l202 10AA  
                                                l203 109A                                                  l220 1160  
                                                l221 1150                                                  l214 1126  
                                                l215 1116                                                  l311 344E  
                                                l232 11DC                                                  l208 10EC  
                                                l312 346A                                                  l233 11CC  
                                                l209 10DC                                                  l401 1784  
                                                l305 353E                                                  l321 2FB8  
                                                l226 11A2                                                  l410 17A6  
                                                l314 3480                                                  l227 1192  
                                                l403 1702                                                  l244 125A  
                                                l172 31F6                                                  l420 18A0  
                                                l412 17F0                                                  l261 2A9A  
                                                l245 124A                                                  l413 17FA  
                                                l405 174C                                                  l238 1216  
                                                l190 1036                                                  l406 1756  
                                                l430 38F8                                                  l271 2AFA  
                                                l263 2AB2                                                  l239 1206  
                                                l191 1026                                                  l167 3046  
                                                l415 18CE                                                  l335 2FFC  
                                                l520 1588                                                  l504 14A6  
                                                l272 2AEA                                                  l264 2AA2  
                                                l184 3114                                                  l280 2B78  
                                                l168 306A                                                  l408 1828  
                                                l328 2FDA                                                  l513 1502  
                                                l505 14C0                                                  l281 2B94  
                                                l417 184C                                                  l362 2DE6  
                                                l451 38B8                                                  l515 1566  
                                                l507 14D4                                                  l283 2BAE  
                                                l419 1896                                                  l355 2D80  
                                                l179 2CF6                                                  l452 38BA  
                                                l524 15F4                                                  l508 14CE  
                                                l196 1070                                                  l356 2D9C  
                                                l525 15FC                                                  l269 2AE0  
                                                l197 1060                                                  l365 3254  
                                                l285 2BB8                                                  l621 24C2  
                                                l381 12F2                                                  l534 169E  
                                                l526 1620                                                  l366 32AA  
                                                l286 2BD8                                                  l622 251A  
                                                l382 12FC                                                  l358 2DB4  
                                                l463 3948                                                  l471 37A8  
                                                l535 164C                                                  l519 1560  
                                                l367 328E                                                  l615 246E  
                                                l391 1482                                                  l472 37B4  
                                                l712 32E2                                                  l384 13DC  
                                                l456 335A                                                  l473 37C0  
                                                l713 32D6                                                  l393 1400  
                                                l377 132A                                                  l490 3660  
                                                l626 2524                                                  l802 319C  
                                                l386 134C                                                  l458 337C  
                                                l803 31A6                                                  l395 144A  
                                                l379 129A                                                  l468 37CC  
                                                l804 31B4                                                  l396 1454  
                                                l388 13A4                                                  l469 379C  
                                                l389 13AE                                                  l823 3878  
                                                l903 1BB2                                                  l920 1C0A  
                                                l592 2198                                                  l489 3688  
                                                l921 1C26                                                  l593 21F6  
                                                l930 27A4                                                  l922 1C56  
                                                l586 2134                                                  l931 27CA  
                                                l843 39BC                                                  l908 1BA8  
                                                l829 39CC                                                  l917 1BE6  
                                                l909 1B9E                                                  l597 2200  
                                                l870 2C72                                                  l918 1BDC  
                                                l942 264A                                                  l863 2C20  
                                                l927 273E                                                  l935 2EA8  
                                                l864 2C16                                                  l944 2672  
                                                l936 2ED8                                                  l929 2766  
                                                l953 392E                                                  l945 26A4  
                                                l866 2C54                                                  l946 26B4  
                                                l867 2C3E                                                  l971 25F4  
                                                l963 255A                                                  l795 314E  
                                                l948 26CC                                                  l972 25E8  
                                                l796 315E                                                  l869 2C7C  
                                                l949 26DC                                                  l965 25D0  
                                                l894 1B22                                                  l974 2610  
                                                l966 25C0                                                  l798 317C  
                                                l959 383A                                                  l799 3174  
                                                l978 3974                                                  l898 1B4C  
                                                _dia 00CB                                                  _key 00A2  
                                                _mes 00CF                                                  _exp 18E8  
                                                _log 220A                                                  _pow 1E18  
                                                wreg 000FE8                            _editar_hora_reloj_digital 16CC  
                                    RtccReadDate@pDt 0001                                          lcd_gotoxy@x 0006  
                                        lcd_gotoxy@y 0005                                         ___ftdiv@cntr 0012  
                                       ___ftdiv@sign 0017                                                 l1025 3568  
                                               l1026 355C                                                 l1061 364A  
                                               l1062 3654                                                 l1071 3810  
                                               l1072 381A                                                 l1057 362A  
                                               l1058 3622                                                 l1250 1970  
                                               l1090 1E76                                                 l1067 37F8  
                                               l1251 199E                                                 l1091 1EFC  
                                               l1068 37F0                                                 l1252 1AC2  
                                               l1092 1EDA                                                 l1261 2852  
                                               l1253 1A98                                                 l1093 1F80  
                                               l1262 28CC                                                 l1271 29C4  
                                               l1247 1900                                                 l1087 1E5E  
                                               l1088 1E50                                                 l1273 2A0A  
                                               l1249 1938                                                 l1258 2838  
                                               l1267 2E10                                                 l1259 282A  
                                               l1275 2A3A                                                 l1291 2248  
                                               l1276 2A2E                                                 l1297 2996  
                                               l1289 2226                                                 l1298 291A  
                                               l3226 2F04                                                 l4092 1A98  
                                               l4510 2D9C                                                 l4512 2DA4  
                                               l4602 146A                                                 l4364 328E  
                                               l4470 2B94                                                 l4374 233C  
                                               l4542 12F2                                                 l4570 13A4  
                                               l4546 1312                                                 l4634 174C  
                                               l3918 15A4                                                 l4574 13C4  
                                               l4662 17F0                                                 l4638 176C  
                                               l4816 371E                                                 l4690 1896  
                                               l4666 1810                                                 ?_exp 0041  
                                               ?_log 003A                                                 l4598 144A  
                                               l4694 18B6                                                 l4874 346A  
                                               l4982 3352                                                 l4996 3374  
                                               ?_pow 004A                                                 STR_1 0FD7  
                                               STR_2 0FF0                                                 STR_3 0FEB  
                                               STR_4 0FDC                                                 STR_5 0FE6  
                                               STR_6 0FE1                                                 STR_7 0F90  
                                               STR_8 0F9F                                                 STR_9 0FD0  
                                               u3000 33AE                                                 u3020 33C6  
                                               u3100 2C08                                                 u3040 33E0  
                                               u3201 1AE0                                                 u3018 33B0  
                                               u3211 1AF4                                                 u3060 33FC  
                                               u3140 2C86                                                 u3300 1B7C  
                                               u3038 33C8                                                 u4200 1628  
                                               u3240 1B14                                                 u3058 33E2  
                                               u4210 1646                                                 u5010 2B8E  
                                               u3411 2632                                                 u4220 16A6  
                                               u3340 1BBA                                                 u4300 3180  
                                               u3501 253E                                                 u3078 33FE  
                                               u4230 16BE                                                 u4150 15D0  
                                               u3270 1B3E                                                 u3431 265A  
                                               u4240 3680                                                 u3520 2578  
                                               u4400 197A                                                 u4250 36A8  
                                               u5050 2BC2                                                 u3370 1BEE  
                                               u5130 2D96                                                 u5060 2BCC  
                                               u3621 2726                                                 u3525 2570  
                                               u3710 362E                                                 u4510 3038  
                                               u5230 137E                                                 u4247 3676  
                                               u6007 39BE                                                 u3560 25FA  
                                               u4520 305C                                                 u5240 1394  
                                               u4257 369E                                                 u3641 274E  
                                               u6017 2CEE                                                 u4610 1078  
                                               u4530 31D4                                                 u6107 2BEC  
                                               u6027 2D3E                                                 u3740 37FC  
                                               u5500 2ABA                                                 u3820 29E4  
                                               u5180 12CC                                                 u5340 173C  
                                               u6117 102C                                                 u6037 3546  
                                               u5078 2BCE                                                 u3590 2E38  
                                               u4390 1978                                                 u5190 12E2  
                                               u6207 1250                                                 u6127 1066  
                                               u6047 177C                                                 u5440 1886  
                                               u6217 2AA8                                                 u6137 10A0  
                                               u6057 1820                                                 u4810 11AA  
                                               u4730 112E                                                 u4650 10B2  
                                               u4570 103E                                                 u4490 1EC2  
                                               u5290 143A                                                 u6227 2AF0  
                                               u6147 10E2                                                 u6067 18C6  
                                               u3780 2844                                                 u3828 29E6  
                                               u6237 39CE                                                 u6157 111C  
                                               u6077 1322                                                 u5550 2B02  
                                               u3598 2E3A                                                 u5390 17E0  
                                               u5630 3742                                                 u5710 2FA6  
                                               u6167 1156                                                 u6087 13D4  
                                               u6177 1198                                                 u6097 147A  
                                               u4850 11E4                                                 u4770 1168  
                                               u4690 10F4                                                 u5810 2FD6  
                                               u5730 2FAE                                                 u6187 11D2  
                                               u5660 3464                                                 u6197 120C  
                                               u5910 3014                                                 u5830 2FEA  
                                               u5750 2FB4                                                 u4960 32AA  
                                               u4890 121E                                                 u5930 301C  
                                               u5850 2FF2                                                 u5770 2FC8  
                                               u4980 23F6                                                 u5870 2FF8  
                                               u5790 2FD0                                                 u5950 336A  
                                               u5890 300C                                                 u5997 390A  
                                   ?_lcd_send_nibble 0001                                                 _anio 00D1  
                                               _flag 07A0                                                 _main 38F4  
                                               _hora 00C9                                         ___ftpack@arg 0001  
                                       ___ftpack@exp 0004                                                 fsr0h 000FEA  
                                               fsr1h 000FE2                                                 indf0 000FEF  
                                               fsr2h 000FDA                                                 fsr0l 000FE9  
                                               indf2 000FDF                                                 fsr1l 000FE1  
                                               fsr2l 000FD9                                                 exp@x 0041  
                                               log@x 003A                                        __CFG_T1DIG$ON 000000  
                           ?_guarda_numero_ingresado 0039                                                 pow@x 004A  
                                               pow@y 004D                                                 prodh 000FF4  
                                               prodl 000FF3                                                 start 0000  
                                      __CFG_IESO$OFF 000000                                     RtccReadDate@rTD0 000B  
                                   RtccReadDate@rTD1 0003                                         ___ftmul@cntr 001A  
                                       ___param_bank 000000                                         ___ftmul@sign 001B  
                                    RtccReadTime@pTm 0001                                         ___fttol@exp1 001B  
                                              ??_exp 0044                                                ??_log 003D  
                                       ___fttol@lval 0017                                                ??_pow 0050  
                                        _Delay1KTCYx 39BA                                        __CFG_PLLDIV$1 000000  
                                              ?_main 0001                                      __end_of___awdiv 31BE  
                                    __end_of___ftadd 1C7C                                                STR_10 0FAE  
                                              STR_11 0F65                                                STR_12 0F65  
                                              STR_20 0FB7                                                STR_13 0FF5  
                                              STR_21 0F7F                                                STR_22 0F5D  
                                              STR_14 0FC8                                                STR_15 0F5F  
                                              STR_23 0F48                                                STR_24 0F5D  
                                              STR_16 0FF5                                                STR_25 0F9A  
                                              STR_17 0F6E                                                STR_18 0F5D  
                                              STR_19 0FC0                                __size_of_Delay100TCYx 0010  
                                    __end_of___ftdiv 27FC                                      __end_of___ftneg 393C  
                                    __end_of___ftmul 2716                                      ___awdiv@divisor 0003  
                                    __end_of___ftsub 3864                                      __end_of___fttol 2622  
        covertir_valores_de_array_a_escala_decimal@i 00DB                                      __end_of___lwdiv 365E  
                                    __end_of___lwmod 3824                                      ___awdiv@counter 0005  
                                              _TRISA 000F92                                                _TRISB 000F93  
                                              _TRISC 000F94                                         ___lltoft@exp 0011  
                                     __CFG_FCMEN$OFF 000000                                        ___awtoft@sign 000C  
                       __size_of_mostrar_presionar_a 0018                                      __end_of_dpowers 0F0B  
                                              _floor 27FC                                                _ldexp 29AC  
                                              _frexp 2DE8                                                _mes_d 00EA  
                                              _errno 0088                                                _mes_u 00EB  
                                    __end_of_isdigit 397C                                        ___ftpack@sign 0005  
                                              _setup 374E                                                tablat 000FF5  
                                              pow@yi 0057                                 _setHoraMinutoSegundo 31BE  
                                       lcd_putrs@ptr 0009                                                status 000FD8  
                                    __end_of_sprintf 16CC                            _motivo_ingreso_de_numeros 0090  
                                        exp@exponent 0047                              __CFG_DSWDTOSC$INTOSCREF 000000  
                                        ldexp@newexp 003D                                       _activar_alarma 2B36  
                                    __initialization 35B2                                          log@exponent 003D  
                                       _Delay100TCYx 39CA                                         __end_of_main 3918  
                                    ??_lcd_send_byte 0004                                     RtccReadTime@rTD0 000B  
                                   RtccReadTime@rTD1 0003                                     __end_of_Read_RTC 20D4  
     __end_of_resetear_pantalla_ingresar_contrasenia 374E      __size_of_resetear_pantalla_ingresar_contrasenia 004E  
           ??_resetear_pantalla_ingresar_contrasenia 000B              ?_resetear_pantalla_ingresar_contrasenia 0001  
             _resetear_pantalla_ingresar_contrasenia 3700                                               ??_main 00E6  
                                      ___fttol@sign1 0016                                        __activetblptr 000002  
                                   __end_of_RtccWrOn 39BA                                               ?_floor 002E  
                                             ?_ldexp 003A                                               ?_frexp 0001  
                                   __end_of___altoft 332C                                               _EECON2 000FA7  
                                             _ANCON0 000F48                                               _ANCON1 000F49  
                                   ___awdiv@dividend 0001                                               ?_setup 0001  
                                   __end_of___awtoft 389C              editar_fecha_reloj_digital@mes_ingresado 00DF  
                                   __end_of___ftpack 2CA6                           __end_of_seleccionar_opcion 3700  
                                   __end_of___lltoft 35B2                       __size_of_verificar_contrasenia 007A  
                              ?_setHoraMinutoSegundo 0001                                       __CFG_WDTEN$OFF 000000  
                      __end_of_verificar_contrasenia 32B4                                     RtccWriteDate@pDt 0001  
                                             _RTCCFG 000F3F                                       __CFG_WPCFG$OFF 000000  
                                   ??_cambiar_opcion 0039                               __end_of_activar_alarma 2BF8  
                                  _set_reloj_digital 3A02                                       __CFG_WPDIS$OFF 000000  
            resetear_pantalla_ingresar_contrasenia@i 000B                                       __CFG_XINST$OFF 000000  
                                 ?_set_reloj_digital 0001                                     __end_of_lcd_init 33A2  
                                   __end_of_lcd_putc 37E2                                               ___ftge 2E78  
                                             ___wmul 38CE                                            ??___awdiv 0005  
                                          ??___ftadd 0028                                       __CFG_STVREN$ON 000000  
                                          ??___ftdiv 000F                                            ??___ftneg 0004  
                                             _diasem 00CD                                            ??___ftmul 0013  
                                             _anio_d 00E7                                            ??___ftsub 0034  
                                          ??___fttol 0011                                               _anio_u 00E8  
                            ??_ir_a_pantalla_edicion 00E5                                            ??___lwdiv 0005  
                                          ??___lwmod 000C                                               _hora_d 00EE  
                                             _hora_u 00EF                                               clear_0 35FC  
                                ??_set_reloj_digital 0039                                     ___awdiv@quotient 0007  
                                             _minuto 00C7                              ??_ir_a_pantalla_inicial 0060  
                              __end_of_RtccWriteDate 220A                                __end_of_RtccWriteTime 252E  
                                             floor@i 0031                                               floor@x 002E  
                              ___ftmul@f3_as_product 0017                                     RtccWriteTime@pTm 0001  
                                          ??_isdigit 0001                    editar_hora_reloj_digital@posicion 00E3  
                                       __mediumconst 0000                                               tblptrh 000FF7  
                                             tblptrl 000FF6                                               tblptru 000FF8  
                                          ??_sprintf 002C                                     __end_ofexp@coeff 0F2D  
                                   __end_oflog@coeff 0F48                            __end_of_set_reloj_digital 3A0C  
                                         __accesstop 0060                              __end_of__initialization 3602  
                                         ___altoft@c 001C                   __size_of_editar_hora_reloj_digital 021C  
                                         ___ftadd@f1 0022                                           ___ftadd@f2 0025  
                                 __size_of_Write_RTC 019C                                           ___ftge@ff1 0001  
                                         ___ftge@ff2 0004                                      ?_activar_alarma 0001  
                                       eval_poly@res 0037                                        ___rparam_used 000001  
                                         ___ftdiv@f1 0009                                           ___ftdiv@f2 000C  
                                         ___ftdiv@f3 0013                                           ___ftneg@f1 0001  
                                         ___awtoft@c 0009                                           ___ftmul@f1 000D  
                                         ___ftmul@f2 0010                                           ___ftsub@f1 002E  
                                         ___ftsub@f2 0031                                           ___fttol@f1 000D  
                                     __pcstackCOMRAM 0001                                         __pidataBANK0 3994  
                                       __pidataBANK1 39F6                                           ___lltoft@c 0009  
                                      __end_of_floor 28DA                                        __end_of_ldexp 2A72  
                                      __end_of_frexp 2E78                 __end_of_titila_texto_insert_password 2D4A  
              __size_of_titila_texto_insert_password 00A4                         _titila_texto_insert_password 2CA6  
                                      __end_of_setup 3798                                      _alarma_activada 008E  
                                    __CFG_DSWDTPS$G2 000000                                      __CFG_OSC$INTOSC 000000  
         __end_of_ir_a_pantalla_ingresar_contrasenia 3486          __size_of_ir_a_pantalla_ingresar_contrasenia 006E  
               ??_ir_a_pantalla_ingresar_contrasenia 0060                  ?_ir_a_pantalla_ingresar_contrasenia 0001  
                 _ir_a_pantalla_ingresar_contrasenia 3418                                    lcd_gotoxy@address 0007  
                                 __size_of_lcd_putrs 0052                                              ??_floor 0031  
                                            ??_ldexp 003F                                              ??_frexp 0006  
           __end_of_ir_a_pantalla_editar_contrasenia 2DE8            __size_of_ir_a_pantalla_editar_contrasenia 009E  
                 ??_ir_a_pantalla_editar_contrasenia 003D                    ?_ir_a_pantalla_editar_contrasenia 0001  
                   _ir_a_pantalla_editar_contrasenia 2D4A                               ??_setHoraMinutoSegundo 0039  
                                       sprintf@width 0036                                              ??_setup 0039  
                                         __pbssBANK0 0060                                   __size_of_eval_poly 00D2  
                                          ?_Read_RTC 0001                                           _dia_semana 00E9  
                          RtccWriteTime@tempHourWDay 000A                    __end_of_editar_hora_reloj_digital 18E8  
                                          ?_RtccWrOn 0001                                       lcd_send_byte@n 0003  
                                            ?___ftge 0001                                  _mostrar_presionar_a 397C  
                                            ?___wmul 001C                                        ?_RtccReadDate 0001  
                                      ?_RtccReadTime 0001                  __size_of_editar_fecha_reloj_digital 0238  
                                       ?_Delay1KTCYx 0001                                            ?___altoft 001C  
                                          ?___awtoft 0009                               __size_of_setDiaMesAnio 008C  
                                          ?___ftpack 0001                     __size_of_guarda_numero_ingresado 008C  
                                          ?___lltoft 0009                        ?_titila_texto_insert_password 0001  
                                  __end_of_Write_RTC 1E18                                           _lcd_comand 39E8  
                                         _lcd_gotoxy 393C                                 ?_mostrar_presionar_a 0001  
                                            _RTCVALH 000F99                                              _RTCVALL 000F98  
                             verificar_contrasenia@i 0009                                            ?_lcd_init 0001  
                                          ?_lcd_putc 0001                           __size_of_set_reloj_digital 000A  
                                         ??_Read_RTC 0013                                              __Hparam 0000  
            editar_fecha_reloj_digital@dia_ingresado 00DD                                              __Lparam 0000  
                           __size_of_lcd_send_nibble 0076                                           ??_RtccWrOn 0001  
                                     ??_RtccReadDate 0003                                      __size_of___ftge 0090  
                                     ??_RtccReadTime 0003                                              ___awdiv 313A  
                                            ___ftadd 1AD0                                    __end_of_lcd_putrs 36B0  
                                            ___ftdiv 2716                                              ___ftneg 3918  
                                    __size_of___wmul 0026                                              ___ftmul 2622  
                                            ___ftsub 3824                                              ___fttol 252E  
                                            ___lwdiv 360C                                              ___lwmod 37E2  
                            __size_of_ingreso_numero 0268                                         __psmallconst 0F00  
                                         ??___altoft 0020                                          _RtccTimeVal 0084  
                                            __pcinit 35B2                                              _fecha_d 00EC  
                                            _fecha_u 00ED                                           ??___awtoft 000C  
                                         ??___ftpack 0006                                    __end_of_eval_poly 29AC  
                                            __ramtop 0F00                                           ??___lltoft 000D  
                                            __ptext0 38F4                                              __ptext1 374E  
                                            __ptext2 332C                                              __ptext3 39BA  
                                            __ptext4 39DA                                              __ptext5 2CA6  
                                            __ptext6 2F96                                              __ptext7 3418  
                                            __ptext8 3700                                              __ptext9 397C  
                                            _buffer2 00A3                                            _T1CONbits 000FCD  
                                            _dpowers 0F01                                         __size_of_exp 01E8  
                                       __size_of_log 011E                                              _isdigit 395E  
                                       __size_of_pow 0176                                   _numeros_ingresados 0092  
                                 _numeros_para_fecha 0080                                              _segundo 0094  
                              ??_mostrar_presionar_a 000B                                              _sprintf 149C  
                                         ??_lcd_init 0005                                           ??_lcd_putc 0008  
                               end_of_initialization 3602                                              exp@sign 0049  
                                      _setDiaMesAnio 3022                                 lcd_send_byte@address 0004  
                                      __Lmediumconst 0000                          verificar_contrasenia@equals 0007  
                                            pow@sign 0056                                              postdec1 000FE5  
                                            postdec2 000FDD                                   _seleccionar_opcion 36B0  
                                            postinc0 000FEE                                              postinc1 000FE6  
                                            postinc2 000FDE                                __end_of_lcd_send_byte 38CE  
                     __size_of_ir_a_pantalla_edicion 0062                        __end_of_ir_a_pantalla_edicion 3556  
                                          _PORTAbits 000F80                                            _PORTCbits 000F82  
                                ?_seleccionar_opcion 0001                                     __CFG_DSBOREN$OFF 000000  
                     __size_of_ir_a_pantalla_inicial 000E                        __end_of_ir_a_pantalla_inicial 39E8  
                 __end_of_editar_fecha_reloj_digital 149C                           _editar_fecha_reloj_digital 1264  
                                        ?_lcd_comand 0001                                     __CFG_CPUDIV$OSC1 000000  
                                          _TRISBbits 000F93                       ??_titila_texto_insert_password 000B  
                                        ?_lcd_gotoxy 0005                                      _LCD_INIT_STRING 0F0B  
                                   ??_activar_alarma 003D                                       ?_setDiaMesAnio 0001  
                               ??_seleccionar_opcion 0060                                          ___ftdiv@exp 0016  
                              _verificar_contrasenia 323A                                     __CFG_IOL1WAY$OFF 000000  
                          RtccWriteDate@tempDayMonth 000A                                  __CFG_MSSP7B_EN$MSK7 000000  
                                        ___ftmul@exp 0016           editar_hora_reloj_digital@segundo_ingresado 00E1  
                                   Delay100TCYx@unit 0001                                       __end_of___ftge 2F08  
                                     __end_of___wmul 38F4                              _guarda_numero_ingresado 30AE  
                          RtccWriteDate@tempHourWDay 000C              editar_hora_reloj_digital@hora_ingresada 00DD  
                                  ??_lcd_send_nibble 0001                                        __pbitbssBANK0 07A0  
                               __size_of_Delay1KTCYx 0010                                     __CFG_DSWDTEN$OFF 000000  
          editar_hora_reloj_digital@minuto_ingresado 00DF                                           floor@expon 0034  
                                start_initialization 35B2                                           eval_poly@d 0031  
                                         eval_poly@n 0033                                           eval_poly@x 002E  
                                         ldexp@value 003A                                          __end_of_exp 1AD0  
                                        __end_of_log 2328                                          __end_of_pow 1F8E  
                               __end_of_RtccReadDate 2F96                                 __end_of_RtccReadTime 34F4  
 __end_of_covertir_valores_de_array_a_escala_decimal 2432  __size_of_covertir_valores_de_array_a_escala_decimal 010A  
       ??_covertir_valores_de_array_a_escala_decimal 005D          ?_covertir_valores_de_array_a_escala_decimal 005B  
         _covertir_valores_de_array_a_escala_decimal 2328                                           frexp@value 0001  
                               RtccWriteTime@wasAlrm 0006                                 RtccWriteTime@wasWrEn 0007  
                             __size_of_RtccWriteDate 0136                                      RtccWriteDate@di 0003  
                             __size_of_RtccWriteTime 00FC                                    __size_of_Read_RTC 0146  
                                __size_of_lcd_comand 000E                                             ??___ftge 0007  
                                __size_of_lcd_gotoxy 0022                                             ??___wmul 0020  
                                     _ingreso_numero 0FFC                                          __pdataBANK0 00BF  
                                        __pdataBANK1 0100                                    __size_of_RtccWrOn 0012  
                                    RtccWriteTime@di 0003                                     __CFG_LPT1OSC$OFF 000000  
                            __size_of_cambiar_opcion 00C4                                    __size_of___altoft 0078  
                                        _ALRMCFGbits 000F91                              __end_of_LCD_INIT_STRING 0F0F  
                                  __size_of___awtoft 0038                                    __size_of___ftpack 00AE  
                                  __size_of___lltoft 005C                                        __pcstackBANK0 00D3  
                                          _Write_RTC 1C7C                                      ??_setDiaMesAnio 0039  
                                       _isdigit$1970 0002                                      Delay1KTCYx@unit 0001  
                      __size_of_setHoraMinutoSegundo 007C                               ?_verificar_contrasenia 0001  
                                  __size_of_lcd_init 0076                                          sprintf@flag 0032  
                                  __size_of_lcd_putc 004A                                          sprintf@prec 0035  
                                  _array_contrasenia 00BF                                            __pnvBANK0 00E7  
                                   ___lwdiv@dividend 0001                           ?_editar_hora_reloj_digital 0001  
                             __end_of_ingreso_numero 1264                                        ?_Delay100TCYx 0001  
                          ??_guarda_numero_ingresado 003B                                             ?___awdiv 0001  
                                           ?___ftadd 0022                                             ?___ftdiv 0009  
                                           ?___ftneg 0001                                             ?___ftmul 000D  
                                           ?___ftsub 002E                                             ?___fttol 000D  
                                           ?___lwdiv 0001                                             ?___lwmod 0008  
                            RtccWriteTime@tempMinSec 0008                          _array_contrasenia_ingresada 0060  
                                          _lcd_putrs 365E                                        _RtccWriteDate 20D4  
                                        __smallconst 0F00                                        _RtccWriteTime 2432  
                                           ?_isdigit 0001                                            _eval_poly 28DA  
                               __CFG_RTCOSC$T1OSCREF 000000                                           ?_Write_RTC 0001  
                                   ___lwdiv@quotient 0005                                             ?_sprintf 0022  
                                     __size_of_floor 00DE                                       __size_of_ldexp 00C6  
                                     __size_of_frexp 0090                         ??_editar_fecha_reloj_digital 005F  
                                     __size_of_setup 004A                                     _RtccAlrmTimeDate 0070  
                                     ___wmul@product 0020                                             _LATAbits 000F89  
                                           _LATBbits 000F8A                                             _PIE3bits 000FA3  
                                          _segundo_d 00F2                                       ??_Delay100TCYx 0001  
                                          _segundo_u 00F3                                      ?_ingreso_numero 0001  
                                   __CFG_WDTPS$32768 000000                   editar_fecha_reloj_digital@posicion 00E3  
                                 RtccWriteDate@wasOn 0005                                   _Rtcc_read_TimeDate 0068  
                                     ?_RtccWriteDate 0001                          __end_of_mostrar_presionar_a 3994  
                                         ?_lcd_putrs 0009                                    ___wmul@multiplier 001C  
                                     ?_RtccWriteTime 0001                                            lcd_init@i 0005  
                              __size_of_RtccReadDate 008E                                         ??_lcd_comand 0005  
                                         ?_eval_poly 002E                          ?_editar_fecha_reloj_digital 0001  
           editar_fecha_reloj_digital@anio_ingresado 00E1                                            lcd_putc@c 0008  
                              __size_of_RtccReadTime 006E                                         ??_lcd_gotoxy 0006  
                    __end_of_guarda_numero_ingresado 313A                                            copy_data0 35C6  
                                          copy_data1 35E6                                             _Read_RTC 1F8E  
                                  _array_seleccionar 0100                                            frexp@eptr 0004  
                                    _lcd_send_nibble 33A2                                             __Hrparam 0000  
                                           _RtccDate 00B7                                             __Lrparam 0000  
                                           _RtccTime 00BB                                             _RtccWrOn 39A8  
                                 __end_of_lcd_comand 39F6                                   __end_of_lcd_gotoxy 395E  
                                       _RtccReadDate 2F08                                       _cambiar_opcion 2A72  
                                   __size_of___awdiv 0084                                     __size_of___ftadd 01AC  
                                       _RtccReadTime 3486                                     __size_of___ftdiv 00E6  
                                   __size_of___ftneg 0024                                             ___altoft 32B4  
                                   __size_of___ftmul 00F4                                     __size_of___ftsub 0040  
                                   __size_of___fttol 00F4                                     __size_of___lwdiv 0052  
                                   __size_of___lwmod 0042                                             ___awtoft 3864  
                                           ___ftpack 2BF8                                             ___lltoft 3556  
                  ir_a_pantalla_editar_contrasenia@i 003D                                         _RtccTimeDate 0078  
    _covertir_valores_de_array_a_escala_decimal$2441 00D3      _covertir_valores_de_array_a_escala_decimal$2442 00D6  
                                           _exp$2445 0044                                _ir_a_pantalla_edicion 34F4  
                                         sprintf@val 0033                                     __size_of_isdigit 001E  
                                    ___lwdiv@divisor 0003                                _ir_a_pantalla_inicial 39DA  
                                        ??_Write_RTC 000E                                      ___lwdiv@counter 0007  
                                           __ptext10 34F4                                             __ptext11 3A02  
                                           __ptext20 2432                                             __ptext12 36B0  
                                           __ptext21 20D4                                             __ptext13 2D4A  
                                           __ptext30 252E                                             __ptext22 39A8  
                                           __ptext14 16CC                                             __ptext31 2E78  
                                           __ptext23 2328                                             __ptext15 31BE  
                                           __ptext40 3556                                             __ptext32 32B4  
                                           __ptext24 1E18                                             __ptext16 1264  
                                           __ptext41 2BF8                                             __ptext33 28DA  
                                           __ptext25 220A                                             __ptext17 3022  
                                           __ptext50 38CE                                             __ptext42 2B36  
                                           __ptext34 2622                                             __ptext26 18E8  
                                           __ptext18 1C7C                                             __ptext51 37E2  
                                           __ptext43 323A                                             __ptext35 3824  
                                           __ptext27 29AC                                             __ptext19 313A  
                                           __ptext60 3486                                             __ptext52 360C  
                                           __ptext44 39E8                                             __ptext36 1AD0  
                                           __ptext28 27FC                                             __ptext61 2F08  
                                           __ptext53 365E                                             __ptext45 0FFC  
                                           __ptext37 3918                                             __ptext29 2DE8  
                                           __ptext54 3798                                             __ptext46 30AE  
                                           __ptext38 2716                                             __ptext55 393C  
                                           __ptext47 2A72                                             __ptext39 3864  
                                           __ptext56 389C                                             __ptext48 149C  
                                           __ptext57 33A2                                             __ptext49 395E  
                                           __ptext58 39CA                                             __ptext59 1F8E  
                                           _lcd_init 332C                                             _lcd_putc 3798  
                                    _txt_insert_pass 008A                                             _pow$2443 0050  
                                           _pow$2444 0053                                     __size_of_sprintf 0230  
                             __size_of_lcd_send_byte 0032                                        __size_of_main 0024  
                        __size_of_seleccionar_opcion 0050                                             _minuto_d 00F0  
                                           _minuto_u 00F1                               __end_of_cambiar_opcion 2B36  
                                      ??_Delay1KTCYx 0001                                      ??_RtccWriteDate 0004  
                                    ??_RtccWriteTime 0004                                          ??_lcd_putrs 000B  
                                           exp@coeff 0F0F                                             log@coeff 0F2D  
                                        _OSCTUNEbits 000F9B                                           _INTCONbits 000FF2  
 __end_of_si_apreta_numero_va_a_pantalla_contrasenia 3022  __size_of_si_apreta_numero_va_a_pantalla_contrasenia 008C  
       ??_si_apreta_numero_va_a_pantalla_contrasenia 0060          ?_si_apreta_numero_va_a_pantalla_contrasenia 0001  
         _si_apreta_numero_va_a_pantalla_contrasenia 2F96                                          ??_eval_poly 0035  
                                 RtccWriteTime@wasOn 0005                                 __end_of_Delay100TCYx 39DA  
                                           isdigit@c 0003                              ??_verificar_contrasenia 0003  
                                          sprintf@ap 0030                              __end_of_lcd_send_nibble 3418  
                                          sprintf@sp 0022                                     ___lwmod@dividend 0008  
                                         _OSCCONbits 000FD3                          ??_editar_hora_reloj_digital 005F  
                            __size_of_activar_alarma 00C2                                    _boton_seleccionar 008C  
                                    ?_cambiar_opcion 0001                                RtccWriteDate@tempYear 0007  
                       __end_of_setHoraMinutoSegundo 323A                                        _lcd_send_byte 389C  
                                         _RTCCFGbits 000F3F                               ?_ir_a_pantalla_edicion 0001  
                                           sprintf@c 0038                                             sprintf@f 0024  
                                    ___lwmod@divisor 000A                                  __end_of_Delay1KTCYx 39CA  
                                    ___lwmod@counter 000C                               ?_ir_a_pantalla_inicial 0001  
                               RtccWriteDate@wasAlrm 0006                                 RtccWriteDate@wasWrEn 0009  
                              __end_of_setDiaMesAnio 30AE     covertir_valores_de_array_a_escala_decimal@numero 00D9  
                                   ??_ingreso_numero 003B                                lcd_send_nibble@nibble 0002  
