

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Oct 25 13:35:12 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78  0000                     
    79                           ; Version 1.43
    80                           ; Generated 25/07/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F26J50 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataBANK0
   115  0038A2                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _array_seleccionar
   119  0038A2  D7                 	db	low STR_1
   120  0038A3  0F                 	db	high STR_1
   121  0038A4  F0                 	db	low STR_2
   122  0038A5  0F                 	db	high STR_2
   123  0038A6  EB                 	db	low STR_3
   124  0038A7  0F                 	db	high STR_3
   125  0038A8  DC                 	db	low STR_4
   126  0038A9  0F                 	db	high STR_4
   127  0038AA  E6                 	db	low STR_5
   128  0038AB  0F                 	db	high STR_5
   129  0038AC  E1                 	db	low STR_6
   130  0038AD  0F                 	db	high STR_6
   131                           
   132                           ;initializer for _array_contrasenia
   133  0038AE  0001               	dw	1
   134  0038B0  0002               	dw	2
   135  0038B2  0003               	dw	3
   136  0038B4  0004               	dw	4
   137                           
   138                           ;initializer for _minuto
   139  0038B6  001E               	dw	30
   140                           
   141                           ;initializer for _hora
   142  0038B8  0012               	dw	18
   143                           
   144                           ;initializer for _dia
   145  0038BA  0008               	dw	8
   146                           
   147                           ;initializer for _diasem
   148  0038BC  0003               	dw	3
   149                           
   150                           ;initializer for _mes
   151  0038BE  0009               	dw	9
   152                           
   153                           ;initializer for _anio
   154  0038C0  000F               	dw	15
   155                           
   156                           	psect	smallconst
   157  000F00                     __psmallconst:
   158                           	opt stack 0
   159  000F00  00                 	db	0
   160  000F01                     _dpowers:
   161                           	opt stack 0
   162  000F01  0001               	dw	1
   163  000F03  000A               	dw	10
   164  000F05  0064               	dw	100
   165  000F07  03E8               	dw	1000
   166  000F09  2710               	dw	10000
   167  000F0B                     __end_of_dpowers:
   168                           	opt stack 0
   169  000F0B                     _LCD_INIT_STRING:
   170                           	opt stack 0
   171  000F0B  28                 	db	40
   172  000F0C  0C                 	db	12
   173  000F0D  01                 	db	1
   174  000F0E  06                 	db	6
   175  000F0F                     __end_of_LCD_INIT_STRING:
   176                           	opt stack 0
   177  000F0F                     exp@coeff:
   178                           	opt stack 0
   179  000F0F  00                 	db	0
   180  000F10  80                 	db	128
   181  000F11  3F                 	db	63
   182  000F12  72                 	db	114
   183  000F13  31                 	db	49
   184  000F14  3F                 	db	63
   185  000F15  FE                 	db	254
   186  000F16  75                 	db	117
   187  000F17  3E                 	db	62
   188  000F18  58                 	db	88
   189  000F19  63                 	db	99
   190  000F1A  3D                 	db	61
   191  000F1B  95                 	db	149
   192  000F1C  1D                 	db	29
   193  000F1D  3C                 	db	60
   194  000F1E  C5                 	db	197
   195  000F1F  AE                 	db	174
   196  000F20  3A                 	db	58
   197  000F21  79                 	db	121
   198  000F22  21                 	db	33
   199  000F23  39                 	db	57
   200  000F24  94                 	db	148
   201  000F25  80                 	db	128
   202  000F26  37                 	db	55
   203  000F27  93                 	db	147
   204  000F28  A7                 	db	167
   205  000F29  35                 	db	53
   206  000F2A  56                 	db	86
   207  000F2B  15                 	db	21
   208  000F2C  34                 	db	52
   209  000F2D                     __end_ofexp@coeff:
   210                           	opt stack 0
   211  000F2D                     log@coeff:
   212                           	opt stack 0
   213  000F2D  00                 	db	0
   214  000F2E  00                 	db	0
   215  000F2F  00                 	db	0
   216  000F30  00                 	db	0
   217  000F31  80                 	db	128
   218  000F32  3F                 	db	63
   219  000F33  F0                 	db	240
   220  000F34  FF                 	db	255
   221  000F35  BE                 	db	190
   222  000F36  E2                 	db	226
   223  000F37  A9                 	db	169
   224  000F38  3E                 	db	62
   225  000F39  83                 	db	131
   226  000F3A  76                 	db	118
   227  000F3B  BE                 	db	190
   228  000F3C  AE                 	db	174
   229  000F3D  2B                 	db	43
   230  000F3E  3E                 	db	62
   231  000F3F  3C                 	db	60
   232  000F40  C3                 	db	195
   233  000F41  BD                 	db	189
   234  000F42  D2                 	db	210
   235  000F43  13                 	db	19
   236  000F44  3D                 	db	61
   237  000F45  78                 	db	120
   238  000F46  D3                 	db	211
   239  000F47  BB                 	db	187
   240  000F48                     __end_oflog@coeff:
   241                           	opt stack 0
   242  000F48                     STR_23:
   243                           
   244                           ; BSR set to: 15
   245  000F48  49                 	db	73	;'I'
   246  000F49  6E                 	db	110	;'n'
   247  000F4A  73                 	db	115	;'s'
   248  000F4B  65                 	db	101	;'e'
   249  000F4C  72                 	db	114	;'r'
   250  000F4D  74                 	db	116	;'t'
   251  000F4E  20                 	db	32
   252  000F4F  6E                 	db	110	;'n'
   253  000F50  65                 	db	101	;'e'
   254  000F51  77                 	db	119	;'w'
   255  000F52  20                 	db	32
   256  000F53  50                 	db	80	;'P'
   257  000F54  61                 	db	97	;'a'
   258  000F55  73                 	db	115	;'s'
   259  000F56  73                 	db	115	;'s'
   260  000F57  77                 	db	119	;'w'
   261  000F58  6F                 	db	111	;'o'
   262  000F59  72                 	db	114	;'r'
   263  000F5A  64                 	db	100	;'d'
   264  000F5B  20                 	db	32
   265  000F5C  00                 	db	0
   266  000F5D                     STR_18:
   267                           
   268                           ; BSR set to: 15
   269  000F5D  20                 	db	32
   270  000F5E  20                 	db	32
   271  000F5F  20                 	db	32
   272  000F60  20                 	db	32
   273  000F61  20                 	db	32
   274  000F62  20                 	db	32
   275  000F63  20                 	db	32
   276  000F64  20                 	db	32
   277  000F65  20                 	db	32
   278  000F66  20                 	db	32
   279  000F67  20                 	db	32
   280  000F68  20                 	db	32
   281  000F69  20                 	db	32
   282  000F6A  20                 	db	32
   283  000F6B  20                 	db	32
   284  000F6C  20                 	db	32
   285  000F6D  00                 	db	0
   286  000F6E                     STR_17:
   287                           
   288                           ; BSR set to: 15
   289  000F6E  41                 	db	65	;'A'
   290  000F6F  6C                 	db	108	;'l'
   291  000F70  61                 	db	97	;'a'
   292  000F71  72                 	db	114	;'r'
   293  000F72  6D                 	db	109	;'m'
   294  000F73  20                 	db	32
   295  000F74  61                 	db	97	;'a'
   296  000F75  63                 	db	99	;'c'
   297  000F76  74                 	db	116	;'t'
   298  000F77  69                 	db	105	;'i'
   299  000F78  76                 	db	118	;'v'
   300  000F79  61                 	db	97	;'a'
   301  000F7A  74                 	db	116	;'t'
   302  000F7B  65                 	db	101	;'e'
   303  000F7C  64                 	db	100	;'d'
   304  000F7D  20                 	db	32
   305  000F7E  00                 	db	0
   306  000F7F                     STR_21:
   307                           
   308                           ; BSR set to: 15
   309  000F7F  49                 	db	73	;'I'
   310  000F80  6E                 	db	110	;'n'
   311  000F81  73                 	db	115	;'s'
   312  000F82  65                 	db	101	;'e'
   313  000F83  72                 	db	114	;'r'
   314  000F84  74                 	db	116	;'t'
   315  000F85  20                 	db	32
   316  000F86  50                 	db	80	;'P'
   317  000F87  61                 	db	97	;'a'
   318  000F88  73                 	db	115	;'s'
   319  000F89  73                 	db	115	;'s'
   320  000F8A  77                 	db	119	;'w'
   321  000F8B  6F                 	db	111	;'o'
   322  000F8C  72                 	db	114	;'r'
   323  000F8D  64                 	db	100	;'d'
   324  000F8E  20                 	db	32
   325  000F8F  00                 	db	0
   326  000F90                     STR_7:
   327                           
   328                           ; BSR set to: 15
   329  000F90  25                 	db	37
   330  000F91  30                 	db	48	;'0'
   331  000F92  32                 	db	50	;'2'
   332  000F93  75                 	db	117	;'u'
   333  000F94  2F                 	db	47
   334  000F95  25                 	db	37
   335  000F96  30                 	db	48	;'0'
   336  000F97  32                 	db	50	;'2'
   337  000F98  75                 	db	117	;'u'
   338  000F99  2F                 	db	47
   339  000F9A  25                 	db	37
   340  000F9B  30                 	db	48	;'0'
   341  000F9C  32                 	db	50	;'2'
   342  000F9D  75                 	db	117	;'u'
   343  000F9E  00                 	db	0
   344  000F9F                     STR_8:
   345                           
   346                           ; BSR set to: 15
   347  000F9F  25                 	db	37
   348  000FA0  30                 	db	48	;'0'
   349  000FA1  32                 	db	50	;'2'
   350  000FA2  75                 	db	117	;'u'
   351  000FA3  3A                 	db	58	;':'
   352  000FA4  25                 	db	37
   353  000FA5  30                 	db	48	;'0'
   354  000FA6  32                 	db	50	;'2'
   355  000FA7  75                 	db	117	;'u'
   356  000FA8  3A                 	db	58	;':'
   357  000FA9  25                 	db	37
   358  000FAA  30                 	db	48	;'0'
   359  000FAB  32                 	db	50	;'2'
   360  000FAC  75                 	db	117	;'u'
   361  000FAD  00                 	db	0
   362  000FAE                     STR_10:
   363                           
   364                           ; BSR set to: 15
   365  000FAE  50                 	db	80	;'P'
   366  000FAF  61                 	db	97	;'a'
   367  000FB0  73                 	db	115	;'s'
   368  000FB1  73                 	db	115	;'s'
   369  000FB2  77                 	db	119	;'w'
   370  000FB3  6F                 	db	111	;'o'
   371  000FB4  72                 	db	114	;'r'
   372  000FB5  64                 	db	100	;'d'
   373  000FB6  00                 	db	0
   374  000FB7                     STR_20:
   375                           
   376                           ; BSR set to: 15
   377  000FB7  45                 	db	69	;'E'
   378  000FB8  64                 	db	100	;'d'
   379  000FB9  74                 	db	116	;'t'
   380  000FBA  20                 	db	32
   381  000FBB  50                 	db	80	;'P'
   382  000FBC  61                 	db	97	;'a'
   383  000FBD  73                 	db	115	;'s'
   384  000FBE  73                 	db	115	;'s'
   385  000FBF  00                 	db	0
   386  000FC0                     STR_19:
   387                           
   388                           ; BSR set to: 15
   389  000FC0  41                 	db	65	;'A'
   390  000FC1  63                 	db	99	;'c'
   391  000FC2  74                 	db	116	;'t'
   392  000FC3  69                 	db	105	;'i'
   393  000FC4  76                 	db	118	;'v'
   394  000FC5  65                 	db	101	;'e'
   395  000FC6  20                 	db	32
   396  000FC7  00                 	db	0
   397  000FC8                     STR_14:
   398                           
   399                           ; BSR set to: 15
   400  000FC8  50                 	db	80	;'P'
   401  000FC9  72                 	db	114	;'r'
   402  000FCA  65                 	db	101	;'e'
   403  000FCB  73                 	db	115	;'s'
   404  000FCC  73                 	db	115	;'s'
   405  000FCD  20                 	db	32
   406  000FCE  41                 	db	65	;'A'
   407  000FCF  00                 	db	0
   408  000FD0                     STR_9:
   409                           
   410                           ; BSR set to: 15
   411  000FD0  49                 	db	73	;'I'
   412  000FD1  6E                 	db	110	;'n'
   413  000FD2  73                 	db	115	;'s'
   414  000FD3  65                 	db	101	;'e'
   415  000FD4  72                 	db	114	;'r'
   416  000FD5  74                 	db	116	;'t'
   417  000FD6  00                 	db	0
   418  000FD7                     STR_1:
   419                           
   420                           ; BSR set to: 15
   421  000FD7  20                 	db	32
   422  000FD8  44                 	db	68	;'D'
   423  000FD9  69                 	db	105	;'i'
   424  000FDA  61                 	db	97	;'a'
   425  000FDB  00                 	db	0
   426  000FDC                     STR_4:
   427                           
   428                           ; BSR set to: 15
   429  000FDC  48                 	db	72	;'H'
   430  000FDD  6F                 	db	111	;'o'
   431  000FDE  72                 	db	114	;'r'
   432  000FDF  61                 	db	97	;'a'
   433  000FE0  00                 	db	0
   434  000FE1                     STR_6:
   435                           
   436                           ; BSR set to: 15
   437  000FE1  20                 	db	32
   438  000FE2  53                 	db	83	;'S'
   439  000FE3  65                 	db	101	;'e'
   440  000FE4  67                 	db	103	;'g'
   441  000FE5  00                 	db	0
   442  000FE6                     STR_5:
   443                           
   444                           ; BSR set to: 15
   445  000FE6  20                 	db	32
   446  000FE7  4D                 	db	77	;'M'
   447  000FE8  69                 	db	105	;'i'
   448  000FE9  6E                 	db	110	;'n'
   449  000FEA  00                 	db	0
   450  000FEB                     STR_3:
   451                           
   452                           ; BSR set to: 15
   453  000FEB  41                 	db	65	;'A'
   454  000FEC  6E                 	db	110	;'n'
   455  000FED  69                 	db	105	;'i'
   456  000FEE  6F                 	db	111	;'o'
   457  000FEF  00                 	db	0
   458  000FF0                     STR_2:
   459                           
   460                           ; BSR set to: 15
   461  000FF0  20                 	db	32
   462  000FF1  4D                 	db	77	;'M'
   463  000FF2  65                 	db	101	;'e'
   464  000FF3  73                 	db	115	;'s'
   465  000FF4  00                 	db	0
   466  000FF5                     STR_13:
   467                           
   468                           ; BSR set to: 15
   469  000FF5  25                 	db	37
   470  000FF6  30                 	db	48	;'0'
   471  000FF7  31                 	db	49	;'1'
   472  000FF8  75                 	db	117	;'u'
   473  000FF9  00                 	db	0
   474  0000                     
   475                           ; #config settings
   476  000FFA  00                 	db	0	; dummy byte at the end
   477  0000                     
   478                           	psect	nvBANK0
   479  0000F0                     __pnvBANK0:
   480                           	opt stack 0
   481  0000F0                     _anio_d:
   482                           	opt stack 0
   483  0000F0                     	ds	1
   484  0000F1                     _anio_u:
   485                           	opt stack 0
   486  0000F1                     	ds	1
   487  0000F2                     _dia_semana:
   488                           	opt stack 0
   489  0000F2                     	ds	1
   490  0000F3                     _mes_d:
   491                           	opt stack 0
   492  0000F3                     	ds	1
   493  0000F4                     _mes_u:
   494                           	opt stack 0
   495  0000F4                     	ds	1
   496  0000F5                     _fecha_d:
   497                           	opt stack 0
   498  0000F5                     	ds	1
   499  0000F6                     _fecha_u:
   500                           	opt stack 0
   501  0000F6                     	ds	1
   502  0000F7                     _hora_d:
   503                           	opt stack 0
   504  0000F7                     	ds	1
   505  0000F8                     _hora_u:
   506                           	opt stack 0
   507  0000F8                     	ds	1
   508  0000F9                     _minuto_d:
   509                           	opt stack 0
   510  0000F9                     	ds	1
   511  0000FA                     _minuto_u:
   512                           	opt stack 0
   513  0000FA                     	ds	1
   514  0000FB                     _segundo_d:
   515                           	opt stack 0
   516  0000FB                     	ds	1
   517  0000FC                     _segundo_u:
   518                           	opt stack 0
   519  0000FC                     	ds	1
   520  0000                     _RTCCFG	set	3903
   521  0000                     _ANCON1	set	3913
   522  0000                     _ANCON0	set	3912
   523  0000                     _RTCCFGbits	set	3903
   524  0000                     _ALRMCFGbits	set	3985
   525  0000                     _EECON2	set	4007
   526  0000                     _INTCONbits	set	4082
   527  0000                     _RTCVALH	set	3993
   528  0000                     _RTCVALL	set	3992
   529  0000                     _TRISBbits	set	3987
   530  0000                     _T1CONbits	set	4045
   531  0000                     _TRISC	set	3988
   532  0000                     _TRISB	set	3987
   533  0000                     _TRISA	set	3986
   534  0000                     _OSCCONbits	set	4051
   535  0000                     _OSCTUNEbits	set	3995
   536  0000                     _LATBbits	set	3978
   537  0000                     _PORTCbits	set	3970
   538  0000                     _PORTAbits	set	3968
   539  0000                     _LATAbits	set	3977
   540  0000                     _PIE3bits	set	4003
   541                           
   542                           	psect	cinit
   543  00376E                     __pcinit:
   544                           	opt stack 0
   545  00376E                     start_initialization:
   546                           	opt stack 0
   547  00376E                     __initialization:
   548                           	opt stack 0
   549                           
   550                           ; Initialize objects allocated to BANK0 (32 bytes)
   551                           ; load TBLPTR registers with __pidataBANK0
   552  00376E  0EA2               	movlw	low __pidataBANK0
   553  003770  6EF6               	movwf	tblptrl,c
   554  003772  0E38               	movlw	high __pidataBANK0
   555  003774  6EF7               	movwf	tblptrh,c
   556  003776  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   557  003778  6EF8               	movwf	tblptru,c
   558  00377A  EE00  F0BD         	lfsr	0,__pdataBANK0
   559  00377E  EE10 F020          	lfsr	1,32
   560  003782                     copy_data0:
   561  003782  0009               	tblrd		*+
   562  003784  CFF5 FFEE          	movff	tablat,postinc0
   563  003788  50E5               	movf	postdec1,w,c
   564  00378A  50E1               	movf	fsr1l,w,c
   565  00378C  E1FA               	bnz	copy_data0
   566                           
   567                           ; Clear objects allocated to BITBANK0 (1 bytes)
   568  00378E  0100               	movlb	0
   569  003790  6BFD               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   570                           
   571                           ; Clear objects allocated to BANK0 (93 bytes)
   572  003792  EE00  F060         	lfsr	0,__pbssBANK0
   573  003796  0E5D               	movlw	93
   574  003798                     clear_0:
   575  003798  6AEE               	clrf	postinc0,c
   576  00379A  06E8               	decf	wreg,f,c
   577  00379C  E1FD               	bnz	clear_0
   578  00379E                     end_of_initialization:
   579                           	opt stack 0
   580  00379E                     __end_of__initialization:
   581                           	opt stack 0
   582  00379E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   583  0037A0  6EF8               	movwf	tblptru,c
   584  0037A2  0100               	movlb	0
   585  0037A4  EF1C  F01C         	goto	_main	;jump to C main() function
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           postdec1	equ	0xFE5
   593                           fsr1l	equ	0xFE1
   594                           
   595                           	psect	bitbssBANK0
   596  0007E8                     __pbitbssBANK0:
   597                           	opt stack 0
   598  0007E8                     _flag:
   599                           	opt stack 0
   600  0007E8                     	ds	1
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1l	equ	0xFE1
   609                           
   610                           	psect	bssBANK0
   611  000060                     __pbssBANK0:
   612                           	opt stack 0
   613  000060                     _array_contrasenia_ingresada:
   614                           	opt stack 0
   615  000060                     	ds	8
   616  000068                     _Rtcc_read_TimeDate:
   617                           	opt stack 0
   618  000068                     	ds	8
   619  000070                     _RtccAlrmTimeDate:
   620                           	opt stack 0
   621  000070                     	ds	8
   622  000078                     _RtccTimeDate:
   623                           	opt stack 0
   624  000078                     	ds	8
   625  000080                     _numeros_para_fecha:
   626                           	opt stack 0
   627  000080                     	ds	4
   628  000084                     _RtccTimeVal:
   629                           	opt stack 0
   630  000084                     	ds	4
   631  000088                     _errno:
   632                           	opt stack 0
   633  000088                     	ds	2
   634  00008A                     _txt_insert_pass:
   635                           	opt stack 0
   636  00008A                     	ds	2
   637  00008C                     _boton_seleccionar:
   638                           	opt stack 0
   639  00008C                     	ds	2
   640  00008E                     _motivo_ingreso_de_numeros:
   641                           	opt stack 0
   642  00008E                     	ds	2
   643  000090                     _numeros_ingresados:
   644                           	opt stack 0
   645  000090                     	ds	2
   646  000092                     _segundo:
   647                           	opt stack 0
   648  000092                     	ds	2
   649  000094                     _k:
   650                           	opt stack 0
   651  000094                     	ds	2
   652  000096                     _c:
   653                           	opt stack 0
   654  000096                     	ds	2
   655  000098                     _b:
   656                           	opt stack 0
   657  000098                     	ds	2
   658  00009A                     _a:
   659                           	opt stack 0
   660  00009A                     	ds	2
   661  00009C                     _j:
   662                           	opt stack 0
   663  00009C                     	ds	2
   664  00009E                     _i:
   665                           	opt stack 0
   666  00009E                     	ds	2
   667  0000A0                     _key:
   668                           	opt stack 0
   669  0000A0                     	ds	1
   670  0000A1                     _buffer2:
   671                           	opt stack 0
   672  0000A1                     	ds	20
   673  0000B5                     _RtccDate:
   674                           	opt stack 0
   675  0000B5                     	ds	4
   676  0000B9                     _RtccTime:
   677                           	opt stack 0
   678  0000B9                     	ds	4
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	dataBANK0
   689  0000BD                     __pdataBANK0:
   690                           	opt stack 0
   691  0000BD                     _array_seleccionar:
   692                           	opt stack 0
   693  0000BD                     	ds	12
   694  0000C9                     _array_contrasenia:
   695                           	opt stack 0
   696  0000C9                     	ds	8
   697  0000D1                     _minuto:
   698                           	opt stack 0
   699  0000D1                     	ds	2
   700  0000D3                     _hora:
   701                           	opt stack 0
   702  0000D3                     	ds	2
   703  0000D5                     _dia:
   704                           	opt stack 0
   705  0000D5                     	ds	2
   706  0000D7                     _diasem:
   707                           	opt stack 0
   708  0000D7                     	ds	2
   709  0000D9                     _mes:
   710                           	opt stack 0
   711  0000D9                     	ds	2
   712  0000DB                     _anio:
   713                           	opt stack 0
   714  0000DB                     	ds	2
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           postdec1	equ	0xFE5
   722                           fsr1l	equ	0xFE1
   723                           
   724                           	psect	cstackBANK0
   725  0000DD                     __pcstackBANK0:
   726                           	opt stack 0
   727  0000DD                     _covertir_valores_de_array_a_escala_decimal$2440:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x0
   731  0000DD                     	ds	3
   732  0000E0                     _covertir_valores_de_array_a_escala_decimal$2441:
   733                           	opt stack 0
   734                           
   735                           ; 3 bytes @ 0x3
   736  0000E0                     	ds	3
   737  0000E3                     covertir_valores_de_array_a_escala_decimal@numero:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x6
   741  0000E3                     	ds	2
   742  0000E5                     covertir_valores_de_array_a_escala_decimal@i:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x8
   746  0000E5                     	ds	2
   747  0000E7                     editar_fecha_reloj_digital@dia_ingresado:
   748                           	opt stack 0
   749  0000E7                     editar_hora_reloj_digital@hora_ingresada:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0xA
   753  0000E7                     	ds	2
   754  0000E9                     editar_fecha_reloj_digital@mes_ingresado:
   755                           	opt stack 0
   756  0000E9                     editar_hora_reloj_digital@minuto_ingresado:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0xC
   760  0000E9                     	ds	2
   761  0000EB                     editar_fecha_reloj_digital@anio_ingresado:
   762                           	opt stack 0
   763  0000EB                     editar_hora_reloj_digital@segundo_ingresado:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0xE
   767  0000EB                     	ds	2
   768  0000ED                     editar_fecha_reloj_digital@posicion:
   769                           	opt stack 0
   770  0000ED                     editar_hora_reloj_digital@posicion:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x10
   774  0000ED                     	ds	2
   775  0000EF                     ??_main:
   776                           
   777                           ; 1 bytes @ 0x12
   778  0000EF                     	ds	1
   779                           tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           postdec1	equ	0xFE5
   786                           fsr1l	equ	0xFE1
   787                           
   788                           	psect	cstackCOMRAM
   789  000001                     __pcstackCOMRAM:
   790                           	opt stack 0
   791  000001                     ??_isdigit:
   792  000001                     ??_lcd_send_nibble:
   793  000001                     ?_verificar_contrasenia:
   794                           	opt stack 0
   795  000001                     ?___awdiv:
   796                           	opt stack 0
   797  000001                     ?___lwdiv:
   798                           	opt stack 0
   799  000001                     ?___ftpack:
   800                           	opt stack 0
   801  000001                     ?_frexp:
   802                           	opt stack 0
   803  000001                     ?___ftneg:
   804                           	opt stack 0
   805  000001                     Delay100TCYx@unit:
   806                           	opt stack 0
   807  000001                     Delay1KTCYx@unit:
   808                           	opt stack 0
   809  000001                     RtccReadDate@pDt:
   810                           	opt stack 0
   811  000001                     RtccReadTime@pTm:
   812                           	opt stack 0
   813  000001                     RtccWriteDate@pDt:
   814                           	opt stack 0
   815  000001                     RtccWriteTime@pTm:
   816                           	opt stack 0
   817  000001                     ___awdiv@dividend:
   818                           	opt stack 0
   819  000001                     ___lwdiv@dividend:
   820                           	opt stack 0
   821  000001                     ___ftpack@arg:
   822                           	opt stack 0
   823  000001                     ___ftge@ff1:
   824                           	opt stack 0
   825  000001                     ___ftneg@f1:
   826                           	opt stack 0
   827  000001                     frexp@value:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x0
   831  000001                     	ds	1
   832  000002                     lcd_send_nibble@nibble:
   833                           	opt stack 0
   834  000002                     _isdigit$1969:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x1
   838  000002                     	ds	1
   839  000003                     lcd_send_byte@n:
   840                           	opt stack 0
   841  000003                     RtccWriteDate@di:
   842                           	opt stack 0
   843  000003                     RtccWriteTime@di:
   844                           	opt stack 0
   845  000003                     isdigit@c:
   846                           	opt stack 0
   847  000003                     ___awdiv@divisor:
   848                           	opt stack 0
   849  000003                     ___lwdiv@divisor:
   850                           	opt stack 0
   851  000003                     RtccReadDate@rTD1:
   852                           	opt stack 0
   853  000003                     RtccReadTime@rTD1:
   854                           	opt stack 0
   855                           
   856                           ; 8 bytes @ 0x2
   857  000003                     	ds	1
   858  000004                     lcd_send_byte@address:
   859                           	opt stack 0
   860  000004                     ___ftpack@exp:
   861                           	opt stack 0
   862  000004                     frexp@eptr:
   863                           	opt stack 0
   864  000004                     ___ftge@ff2:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x3
   868  000004                     	ds	1
   869  000005                     lcd_init@i:
   870                           	opt stack 0
   871  000005                     lcd_gotoxy@y:
   872                           	opt stack 0
   873  000005                     lcd_comand@d:
   874                           	opt stack 0
   875  000005                     RtccWriteDate@wasOn:
   876                           	opt stack 0
   877  000005                     RtccWriteTime@wasOn:
   878                           	opt stack 0
   879  000005                     ___awdiv@counter:
   880                           	opt stack 0
   881  000005                     ___ftpack@sign:
   882                           	opt stack 0
   883  000005                     ___lwdiv@quotient:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x4
   887  000005                     	ds	1
   888  000006                     ??___ftpack:
   889  000006                     ??_frexp:
   890  000006                     lcd_gotoxy@x:
   891                           	opt stack 0
   892  000006                     RtccWriteDate@wasAlrm:
   893                           	opt stack 0
   894  000006                     RtccWriteTime@wasAlrm:
   895                           	opt stack 0
   896  000006                     ___awdiv@sign:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x5
   900  000006                     	ds	1
   901  000007                     ??___ftge:
   902  000007                     lcd_gotoxy@address:
   903                           	opt stack 0
   904  000007                     RtccWriteTime@wasWrEn:
   905                           	opt stack 0
   906  000007                     ___lwdiv@counter:
   907                           	opt stack 0
   908  000007                     verificar_contrasenia@equals:
   909                           	opt stack 0
   910  000007                     RtccWriteDate@tempYear:
   911                           	opt stack 0
   912  000007                     ___awdiv@quotient:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x6
   916  000007                     	ds	1
   917  000008                     ?___lwmod:
   918                           	opt stack 0
   919  000008                     lcd_putc@c:
   920                           	opt stack 0
   921  000008                     RtccWriteTime@tempMinSec:
   922                           	opt stack 0
   923  000008                     ___lwmod@dividend:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x7
   927  000008                     	ds	1
   928  000009                     ?___ftdiv:
   929                           	opt stack 0
   930  000009                     ?___awtoft:
   931                           	opt stack 0
   932  000009                     ?___lltoft:
   933                           	opt stack 0
   934  000009                     RtccWriteDate@wasWrEn:
   935                           	opt stack 0
   936  000009                     verificar_contrasenia@i:
   937                           	opt stack 0
   938  000009                     lcd_putrs@ptr:
   939                           	opt stack 0
   940  000009                     ___awtoft@c:
   941                           	opt stack 0
   942  000009                     ___ftdiv@f1:
   943                           	opt stack 0
   944  000009                     ___lltoft@c:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x8
   948  000009                     	ds	1
   949  00000A                     RtccWriteDate@tempDayMonth:
   950                           	opt stack 0
   951  00000A                     RtccWriteTime@tempHourWDay:
   952                           	opt stack 0
   953  00000A                     ___lwmod@divisor:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x9
   957  00000A                     	ds	1
   958  00000B                     ??_titila_texto_insert_password:
   959  00000B                     ??_activar_alarma:
   960  00000B                     resetear_pantalla_ingresar_contrasenia@i:
   961                           	opt stack 0
   962  00000B                     RtccReadDate@rTD0:
   963                           	opt stack 0
   964  00000B                     RtccReadTime@rTD0:
   965                           	opt stack 0
   966                           
   967                           ; 8 bytes @ 0xA
   968  00000B                     	ds	1
   969  00000C                     ___awtoft@sign:
   970                           	opt stack 0
   971  00000C                     ___lwmod@counter:
   972                           	opt stack 0
   973  00000C                     RtccWriteDate@tempHourWDay:
   974                           	opt stack 0
   975  00000C                     ___ftdiv@f2:
   976                           	opt stack 0
   977                           
   978                           ; 3 bytes @ 0xB
   979  00000C                     	ds	1
   980  00000D                     ??___lltoft:
   981  00000D                     ?___ftmul:
   982                           	opt stack 0
   983  00000D                     ?___fttol:
   984                           	opt stack 0
   985  00000D                     ___ftmul@f1:
   986                           	opt stack 0
   987  00000D                     ___fttol@f1:
   988                           	opt stack 0
   989                           
   990                           ; 3 bytes @ 0xC
   991  00000D                     	ds	1
   992  00000E                     
   993                           ; 1 bytes @ 0xD
   994  00000E                     	ds	1
   995  00000F                     ??___ftdiv:
   996                           
   997                           ; 1 bytes @ 0xE
   998  00000F                     	ds	1
   999  000010                     ___ftmul@f2:
  1000                           	opt stack 0
  1001                           
  1002                           ; 3 bytes @ 0xF
  1003  000010                     	ds	1
  1004  000011                     ??___fttol:
  1005  000011                     ___lltoft@exp:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x10
  1009  000011                     	ds	1
  1010  000012                     ___ftdiv@cntr:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x11
  1014  000012                     	ds	1
  1015  000013                     ??___ftmul:
  1016  000013                     ___ftdiv@f3:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x12
  1020  000013                     	ds	3
  1021  000016                     ___ftdiv@exp:
  1022                           	opt stack 0
  1023  000016                     ___ftmul@exp:
  1024                           	opt stack 0
  1025  000016                     ___fttol@sign1:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x15
  1029  000016                     	ds	1
  1030  000017                     ___ftdiv@sign:
  1031                           	opt stack 0
  1032  000017                     ___ftmul@f3_as_product:
  1033                           	opt stack 0
  1034  000017                     ___fttol@lval:
  1035                           	opt stack 0
  1036                           
  1037                           ; 4 bytes @ 0x16
  1038  000017                     	ds	3
  1039  00001A                     ___ftmul@cntr:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x19
  1043  00001A                     	ds	1
  1044  00001B                     ___ftmul@sign:
  1045                           	opt stack 0
  1046  00001B                     ___fttol@exp1:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x1A
  1050  00001B                     	ds	1
  1051  00001C                     ?___wmul:
  1052                           	opt stack 0
  1053  00001C                     ?___altoft:
  1054                           	opt stack 0
  1055  00001C                     ___wmul@multiplier:
  1056                           	opt stack 0
  1057  00001C                     ___altoft@c:
  1058                           	opt stack 0
  1059                           
  1060                           ; 4 bytes @ 0x1B
  1061  00001C                     	ds	2
  1062  00001E                     ___wmul@multiplicand:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x1D
  1066  00001E                     	ds	2
  1067  000020                     ??___altoft:
  1068  000020                     ___wmul@product:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x1F
  1072  000020                     	ds	2
  1073  000022                     ?_sprintf:
  1074                           	opt stack 0
  1075  000022                     ?___ftadd:
  1076                           	opt stack 0
  1077  000022                     sprintf@sp:
  1078                           	opt stack 0
  1079  000022                     ___ftadd@f1:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x21
  1083  000022                     	ds	2
  1084  000024                     ___altoft@exp:
  1085                           	opt stack 0
  1086  000024                     sprintf@f:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x23
  1090  000024                     	ds	1
  1091  000025                     ___altoft@sign:
  1092                           	opt stack 0
  1093  000025                     ___ftadd@f2:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0x24
  1097  000025                     	ds	3
  1098  000028                     ??___ftadd:
  1099                           
  1100                           ; 1 bytes @ 0x27
  1101  000028                     	ds	3
  1102  00002B                     ___ftadd@sign:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x2A
  1106  00002B                     	ds	1
  1107  00002C                     ??_sprintf:
  1108  00002C                     ___ftadd@exp2:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x2B
  1112  00002C                     	ds	1
  1113  00002D                     ___ftadd@exp1:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x2C
  1117  00002D                     	ds	1
  1118  00002E                     ?___ftsub:
  1119                           	opt stack 0
  1120  00002E                     ?_floor:
  1121                           	opt stack 0
  1122  00002E                     ?_eval_poly:
  1123                           	opt stack 0
  1124  00002E                     ___ftsub@f1:
  1125                           	opt stack 0
  1126  00002E                     floor@x:
  1127                           	opt stack 0
  1128  00002E                     eval_poly@x:
  1129                           	opt stack 0
  1130                           
  1131                           ; 3 bytes @ 0x2D
  1132  00002E                     	ds	2
  1133  000030                     sprintf@ap:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x2F
  1137  000030                     	ds	1
  1138  000031                     eval_poly@d:
  1139                           	opt stack 0
  1140  000031                     ___ftsub@f2:
  1141                           	opt stack 0
  1142  000031                     floor@i:
  1143                           	opt stack 0
  1144                           
  1145                           ; 3 bytes @ 0x30
  1146  000031                     	ds	1
  1147  000032                     sprintf@flag:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x31
  1151  000032                     	ds	1
  1152  000033                     sprintf@val:
  1153                           	opt stack 0
  1154  000033                     eval_poly@n:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x32
  1158  000033                     	ds	1
  1159  000034                     floor@expon:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x33
  1163  000034                     	ds	1
  1164  000035                     ??_eval_poly:
  1165  000035                     sprintf@prec:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x34
  1169  000035                     	ds	1
  1170  000036                     sprintf@width:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x35
  1174  000036                     	ds	1
  1175  000037                     eval_poly@res:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x36
  1179  000037                     	ds	1
  1180  000038                     sprintf@c:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x37
  1184  000038                     	ds	1
  1185  000039                     ??_cambiar_opcion:
  1186  000039                     guarda_numero_ingresado@num:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x38
  1190  000039                     	ds	1
  1191  00003A                     ?_log:
  1192                           	opt stack 0
  1193  00003A                     ?_ldexp:
  1194                           	opt stack 0
  1195  00003A                     ldexp@value:
  1196                           	opt stack 0
  1197  00003A                     log@x:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0x39
  1201  00003A                     	ds	1
  1202  00003B                     ??_ingreso_numero:
  1203                           
  1204                           ; 1 bytes @ 0x3A
  1205  00003B                     	ds	2
  1206  00003D                     ir_a_pantalla_editar_contrasenia@i:
  1207                           	opt stack 0
  1208  00003D                     ldexp@newexp:
  1209                           	opt stack 0
  1210  00003D                     log@exponent:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x3C
  1214  00003D                     	ds	2
  1215  00003F                     ??_ldexp:
  1216                           
  1217                           ; 1 bytes @ 0x3E
  1218  00003F                     	ds	2
  1219  000041                     ?_exp:
  1220                           	opt stack 0
  1221  000041                     exp@x:
  1222                           	opt stack 0
  1223                           
  1224                           ; 3 bytes @ 0x40
  1225  000041                     	ds	3
  1226  000044                     _exp$2444:
  1227                           	opt stack 0
  1228                           
  1229                           ; 3 bytes @ 0x43
  1230  000044                     	ds	3
  1231  000047                     exp@exponent:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x46
  1235  000047                     	ds	2
  1236  000049                     exp@sign:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x48
  1240  000049                     	ds	1
  1241  00004A                     ?_pow:
  1242                           	opt stack 0
  1243  00004A                     pow@x:
  1244                           	opt stack 0
  1245                           
  1246                           ; 3 bytes @ 0x49
  1247  00004A                     	ds	3
  1248  00004D                     pow@y:
  1249                           	opt stack 0
  1250                           
  1251                           ; 3 bytes @ 0x4C
  1252  00004D                     	ds	3
  1253  000050                     _pow$2442:
  1254                           	opt stack 0
  1255                           
  1256                           ; 3 bytes @ 0x4F
  1257  000050                     	ds	3
  1258  000053                     _pow$2443:
  1259                           	opt stack 0
  1260                           
  1261                           ; 3 bytes @ 0x52
  1262  000053                     	ds	3
  1263  000056                     pow@sign:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x55
  1267  000056                     	ds	1
  1268  000057                     pow@yi:
  1269                           	opt stack 0
  1270                           
  1271                           ; 4 bytes @ 0x56
  1272  000057                     	ds	4
  1273  00005B                     ?_covertir_valores_de_array_a_escala_decimal:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x5A
  1277  00005B                     	ds	2
  1278  00005D                     ??_covertir_valores_de_array_a_escala_decimal:
  1279                           
  1280                           ; 1 bytes @ 0x5C
  1281  00005D                     	ds	2
  1282  00005F                     ??_editar_fecha_reloj_digital:
  1283  00005F                     ??_editar_hora_reloj_digital:
  1284                           
  1285                           ; 1 bytes @ 0x5E
  1286  00005F                     	ds	1
  1287  000060                     tblptru	equ	0xFF8
  1288                           tblptrh	equ	0xFF7
  1289                           tblptrl	equ	0xFF6
  1290                           tablat	equ	0xFF5
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           
  1296                           ; 1 bytes @ 0x5F
  1297 ;;
  1298 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1299 ;;
  1300 ;; *************** function _main *****************
  1301 ;; Defined at:
  1302 ;;		line 644 in file "main.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  2  416[None  ] int 
  1309 ;; Registers used:
  1310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1319 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1320 ;;Total ram usage:        1 bytes
  1321 ;; Hardware stack levels required when called:   13
  1322 ;; This function calls:
  1323 ;;		_Read_RTC
  1324 ;;		_ir_a_pantalla_inicial
  1325 ;;		_setup
  1326 ;; This function is called by:
  1327 ;;		Startup code after reset
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text0
  1332  003838                     __ptext0:
  1333                           	opt stack 0
  1334  003838                     _main:
  1335                           	opt stack 18
  1336                           
  1337                           ;main.c: 645: setup();
  1338                           
  1339                           ;incstack = 0
  1340  003838  ECE8  F01A         	call	_setup	;wreg free
  1341  00383C                     
  1342                           ;main.c: 649: Read_RTC();
  1343  00383C  ECC7  F00F         	call	_Read_RTC	;wreg free
  1344                           
  1345                           ;main.c: 651: ir_a_pantalla_inicial();
  1346  003840  EC95  F01C         	call	_ir_a_pantalla_inicial	;wreg free
  1347  003844  D7FB               	goto	l417
  1348                           
  1349                           ;main.c: 652: }
  1350                           ;main.c: 654: _delay((unsigned long)((98)*(8000000/4000.0)));
  1351  003846  0EFF               	movlw	255
  1352  003848  0100               	movlb	0	; () banked
  1353  00384A  6FEF               	movwf	??_main& (0+255),b
  1354  00384C  0E8A               	movlw	138
  1355  00384E                     u5797:
  1356  00384E  2EE8               	decfsz	wreg,f,c
  1357  003850  D7FE               	bra	u5797
  1358  003852  2FEF               	decfsz	??_main& (0+255),f,b
  1359  003854  D7FC               	bra	u5797
  1360  003856  F000               	nop	
  1361                           
  1362                           ;main.c: 655: return 0;
  1363                           ;	Return value of _main is never used
  1364  003858  EF00  F000         	goto	start
  1365  00385C                     __end_of_main:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           postdec1	equ	0xFE5
  1374                           fsr1l	equ	0xFE1
  1375                           
  1376 ;; *************** function _setup *****************
  1377 ;; Defined at:
  1378 ;;		line 611 in file "main.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;		None
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1396 ;;Total ram usage:        0 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    7
  1399 ;; This function calls:
  1400 ;;		_Write_RTC
  1401 ;;		_lcd_comand
  1402 ;;		_lcd_init
  1403 ;;		_set_reloj_digital
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text1
  1410  0035D0                     __ptext1:
  1411                           	opt stack 0
  1412  0035D0                     _setup:
  1413                           	opt stack 23
  1414                           
  1415                           ;main.c: 612: OSCTUNEbits.INTSRC = 1;
  1416                           
  1417                           ;incstack = 0
  1418  0035D0  8E9B               	bsf	3995,7,c	;volatile
  1419                           
  1420                           ;main.c: 613: OSCTUNEbits.PLLEN = 0;
  1421  0035D2  9C9B               	bcf	3995,6,c	;volatile
  1422                           
  1423                           ;main.c: 614: OSCCONbits.IRCF0 = 1;
  1424  0035D4  88D3               	bsf	4051,4,c	;volatile
  1425                           
  1426                           ;main.c: 615: OSCCONbits.IRCF1 = 1;
  1427  0035D6  8AD3               	bsf	4051,5,c	;volatile
  1428                           
  1429                           ;main.c: 616: OSCCONbits.IRCF2 = 1;
  1430  0035D8  8CD3               	bsf	4051,6,c	;volatile
  1431                           
  1432                           ;main.c: 617: OSCCONbits.SCS0 = 0;
  1433  0035DA  90D3               	bcf	4051,0,c	;volatile
  1434                           
  1435                           ;main.c: 618: OSCCONbits.SCS1 = 0;
  1436  0035DC  92D3               	bcf	4051,1,c	;volatile
  1437                           
  1438                           ;main.c: 619: TRISA = 0b11110000;
  1439  0035DE  0EF0               	movlw	240
  1440  0035E0  6E92               	movwf	3986,c	;volatile
  1441                           
  1442                           ;main.c: 620: TRISB = 0;
  1443  0035E2  0E00               	movlw	0
  1444  0035E4  6E93               	movwf	3987,c	;volatile
  1445                           
  1446                           ;main.c: 621: TRISC = 0b00000111;
  1447  0035E6  0E07               	movlw	7
  1448  0035E8  6E94               	movwf	3988,c	;volatile
  1449                           
  1450                           ;main.c: 625: ANCON0 = 0b11111111;
  1451  0035EA  010F               	movlb	15	; () banked
  1452  0035EC  6948               	setf	72,b	;volatile
  1453                           
  1454                           ; BSR set to: 15
  1455                           ;main.c: 627: ANCON1 = 0b11111111;
  1456  0035EE  010F               	movlb	15	; () banked
  1457  0035F0  6949               	setf	73,b	;volatile
  1458                           
  1459                           ; BSR set to: 15
  1460                           ;main.c: 630: RTCCFGbits.RTCEN = 1;
  1461  0035F2  010F               	movlb	15	; () banked
  1462  0035F4  8F3F               	bsf	63,7,b	;volatile
  1463                           
  1464                           ; BSR set to: 15
  1465                           ;main.c: 631: RTCCFGbits.RTCWREN = 1;
  1466  0035F6  010F               	movlb	15	; () banked
  1467  0035F8  8B3F               	bsf	63,5,b	;volatile
  1468                           
  1469                           ; BSR set to: 15
  1470                           ;main.c: 632: T1CONbits.T1OSCEN = 1;
  1471  0035FA  86CD               	bsf	4045,3,c	;volatile
  1472                           
  1473                           ; BSR set to: 15
  1474                           ;main.c: 633: Write_RTC();
  1475  0035FC  EC3E  F00E         	call	_Write_RTC	;wreg free
  1476                           
  1477                           ;main.c: 634: lcd_init();
  1478  003600  EC35  F019         	call	_lcd_init	;wreg free
  1479                           
  1480                           ;main.c: 635: lcd_comand(0b00001100);
  1481  003604  0E0C               	movlw	12
  1482  003606  EC9C  F01C         	call	_lcd_comand
  1483                           
  1484                           ;main.c: 636: LATBbits.LATB2 = 0;;
  1485  00360A  948A               	bcf	3978,2,c	;volatile
  1486                           
  1487                           ;main.c: 637: LATBbits.LATB1 = 0;;
  1488  00360C  928A               	bcf	3978,1,c	;volatile
  1489                           
  1490                           ;main.c: 638: LATBbits.LATB0 = 0;;
  1491  00360E  908A               	bcf	3978,0,c	;volatile
  1492                           
  1493                           ;main.c: 640: set_reloj_digital();
  1494  003610  ECA3  F01C         	call	_set_reloj_digital	;wreg free
  1495                           
  1496                           ;main.c: 641: Write_RTC();
  1497  003614  EC3E  F00E         	call	_Write_RTC	;wreg free
  1498  003618  0012               	return		;funcret
  1499  00361A                     __end_of_setup:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1l	equ	0xFE1
  1509                           
  1510 ;; *************** function _lcd_init *****************
  1511 ;; Defined at:
  1512 ;;		line 119 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  i               1    4[COMRAM] unsigned char 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1529 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1530 ;;Total ram usage:        1 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    2
  1533 ;; This function calls:
  1534 ;;		_Delay1KTCYx
  1535 ;;		_lcd_send_byte
  1536 ;;		_lcd_send_nibble
  1537 ;; This function is called by:
  1538 ;;		_setup
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text2
  1543  00326A                     __ptext2:
  1544                           	opt stack 0
  1545  00326A                     _lcd_init:
  1546                           	opt stack 27
  1547                           
  1548                           ;unmc_lcd_216.c: 120: int8 i;
  1549                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  1550                           
  1551                           ;incstack = 0
  1552  00326A  9693               	bcf	3987,3,c	;volatile
  1553                           
  1554                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  1555  00326C  9493               	bcf	3987,2,c	;volatile
  1556                           
  1557                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  1558  00326E  968A               	bcf	3978,3,c	;volatile
  1559                           
  1560                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  1561  003270  948A               	bcf	3978,2,c	;volatile
  1562                           
  1563                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  1564  003272  9893               	bcf	3987,4,c	;volatile
  1565                           
  1566                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  1567  003274  9A93               	bcf	3987,5,c	;volatile
  1568                           
  1569                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  1570  003276  9C93               	bcf	3987,6,c	;volatile
  1571                           
  1572                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  1573  003278  9E93               	bcf	3987,7,c	;volatile
  1574                           
  1575                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  1576  00327A  0E0A               	movlw	10
  1577  00327C  EC85  F01C         	call	_Delay1KTCYx
  1578                           
  1579                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  1580  003280  0E0A               	movlw	10
  1581  003282  EC85  F01C         	call	_Delay1KTCYx
  1582                           
  1583                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  1584  003286  0E0A               	movlw	10
  1585  003288  EC85  F01C         	call	_Delay1KTCYx
  1586                           
  1587                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  1588  00328C  0E00               	movlw	0
  1589  00328E  6E05               	movwf	lcd_init@i,c
  1590  003290                     l4885:
  1591  003290  0E02               	movlw	2
  1592  003292  6405               	cpfsgt	lcd_init@i,c
  1593  003294  D001               	goto	l443
  1594  003296  D008               	goto	u5750
  1595  003298                     l443:
  1596                           
  1597                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  1598  003298  0E03               	movlw	3
  1599  00329A  EC70  F019         	call	_lcd_send_nibble
  1600                           
  1601                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  1602  00329E  0E0A               	movlw	10
  1603  0032A0  EC85  F01C         	call	_Delay1KTCYx
  1604  0032A4  2A05               	incf	lcd_init@i,f,c
  1605  0032A6  D7F4               	goto	l4885
  1606  0032A8                     u5750:
  1607                           
  1608                           ;unmc_lcd_216.c: 146: }
  1609                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  1610  0032A8  0E02               	movlw	2
  1611  0032AA  EC70  F019         	call	_lcd_send_nibble
  1612                           
  1613                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  1614  0032AE  0E00               	movlw	0
  1615  0032B0  6E05               	movwf	lcd_init@i,c
  1616  0032B2                     l4899:
  1617  0032B2  0E03               	movlw	3
  1618  0032B4  6405               	cpfsgt	lcd_init@i,c
  1619  0032B6  D001               	goto	l445
  1620  0032B8  0012               	return	
  1621  0032BA                     l445:
  1622                           
  1623                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  1624  0032BA  5005               	movf	lcd_init@i,w,c
  1625  0032BC  0D01               	mullw	1
  1626  0032BE  0E0B               	movlw	low _LCD_INIT_STRING
  1627  0032C0  24F3               	addwf	prodl,w,c
  1628  0032C2  6EF6               	movwf	tblptrl,c
  1629  0032C4  0E0F               	movlw	high _LCD_INIT_STRING
  1630  0032C6  20F4               	addwfc	prodh,w,c
  1631  0032C8  6EF7               	movwf	tblptrh,c
  1632  0032CA                     	if	0	;There are less than 3 active tblptr bytes
  1633  0032CA                     	endif
  1634  0032CA  0008               	tblrd		*
  1635  0032CC  CFF5 F003          	movff	tablat,lcd_send_byte@n
  1636  0032D0  0E00               	movlw	0
  1637  0032D2  ECF0  F01B         	call	_lcd_send_byte
  1638                           
  1639                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  1640  0032D6  0E0A               	movlw	10
  1641  0032D8  EC85  F01C         	call	_Delay1KTCYx
  1642  0032DC  2A05               	incf	lcd_init@i,f,c
  1643  0032DE  D7E9               	goto	l4899
  1644  0032E0                     __end_of_lcd_init:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657 ;; *************** function _Delay1KTCYx *****************
  1658 ;; Defined at:
  1659 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d1ktcyx.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  unit            1    wreg     unsigned char 
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  unit            1    0[COMRAM] unsigned char 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		wreg
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1676 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1677 ;;Total ram usage:        1 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; This function calls:
  1680 ;;		Nothing
  1681 ;; This function is called by:
  1682 ;;		_lcd_init
  1683 ;;		_DelayPORXLCD
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text3
  1688  00390A                     __ptext3:
  1689                           	opt stack 0
  1690  00390A                     _Delay1KTCYx:
  1691                           	opt stack 28
  1692                           
  1693                           ;incstack = 0
  1694                           ;Delay1KTCYx@unit stored from wreg
  1695  00390A  6E01               	movwf	Delay1KTCYx@unit,c
  1696  00390C                     l830:
  1697  00390C  0EC8               	movlw	200
  1698  00390E                     u5807:
  1699  00390E  D000               	nop2	
  1700  003910  2EE8               	decfsz	wreg,f,c
  1701  003912  D7FD               	bra	u5807
  1702  003914  2E01               	decfsz	Delay1KTCYx@unit,f,c
  1703  003916  D7FA               	goto	l830
  1704  003918  0012               	return	
  1705  00391A                     __end_of_Delay1KTCYx:
  1706                           	opt stack 0
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           
  1718 ;; *************** function _ir_a_pantalla_inicial *****************
  1719 ;; Defined at:
  1720 ;;		line 410 in file "main.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:   12
  1741 ;; This function calls:
  1742 ;;		_set_reloj_digital
  1743 ;;		_si_apreta_numero_va_a_pantalla_contrasenia
  1744 ;;		_titila_texto_insert_password
  1745 ;; This function is called by:
  1746 ;;		_main
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text4
  1751  00392A                     __ptext4:
  1752                           	opt stack 0
  1753  00392A                     _ir_a_pantalla_inicial:
  1754                           	opt stack 18
  1755                           
  1756                           ;main.c: 411: set_reloj_digital();
  1757                           
  1758                           ;incstack = 0
  1759  00392A  ECA3  F01C         	call	_set_reloj_digital	;wreg free
  1760                           
  1761                           ;main.c: 412: titila_texto_insert_password();
  1762  00392E  ECF2  F015         	call	_titila_texto_insert_password	;wreg free
  1763                           
  1764                           ;main.c: 413: si_apreta_numero_va_a_pantalla_contrasenia();
  1765  003932  EC6A  F017         	call	_si_apreta_numero_va_a_pantalla_contrasenia	;wreg free
  1766  003936  0012               	return		;funcret
  1767  003938                     __end_of_ir_a_pantalla_inicial:
  1768                           	opt stack 0
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           prodh	equ	0xFF4
  1774                           prodl	equ	0xFF3
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           postdec1	equ	0xFE5
  1778                           fsr1l	equ	0xFE1
  1779                           
  1780 ;; *************** function _titila_texto_insert_password *****************
  1781 ;; Defined at:
  1782 ;;		line 96 in file "main.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;		None
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1800 ;;Total ram usage:        1 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    5
  1803 ;; This function calls:
  1804 ;;		_lcd_gotoxy
  1805 ;;		_lcd_putrs
  1806 ;; This function is called by:
  1807 ;;		_ir_a_pantalla_inicial
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text5
  1812  002BE4                     __ptext5:
  1813                           	opt stack 0
  1814  002BE4                     _titila_texto_insert_password:
  1815                           	opt stack 24
  1816                           
  1817                           ;main.c: 97: if (txt_insert_pass == 0) {
  1818                           
  1819                           ;incstack = 0
  1820  002BE4  0100               	movlb	0	; () banked
  1821  002BE6  518A               	movf	_txt_insert_pass& (0+255),w,b
  1822  002BE8  0100               	movlb	0	; () banked
  1823  002BEA  118B               	iorwf	(_txt_insert_pass+1)& (0+255),w,b
  1824  002BEC  A4D8               	btfss	status,2,c
  1825  002BEE  D022               	goto	l177
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 98: txt_insert_pass = 1;
  1829  002BF0  0E00               	movlw	0
  1830  002BF2  0100               	movlb	0	; () banked
  1831  002BF4  6F8B               	movwf	(_txt_insert_pass+1)& (0+255),b
  1832  002BF6  0E01               	movlw	1
  1833  002BF8  6F8A               	movwf	_txt_insert_pass& (0+255),b
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 99: lcd_gotoxy(1, 1);
  1837  002BFA  0E01               	movlw	1
  1838  002BFC  6E05               	movwf	lcd_gotoxy@y,c
  1839  002BFE  0E01               	movlw	1
  1840  002C00  EC40  F01C         	call	_lcd_gotoxy
  1841                           
  1842                           ;main.c: 100: lcd_putrs("Insert");
  1843  002C04  0ED0               	movlw	low STR_9
  1844  002C06  6E09               	movwf	lcd_putrs@ptr,c
  1845  002C08  0E0F               	movlw	high STR_9
  1846  002C0A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1847  002C0C  EC70  F01A         	call	_lcd_putrs	;wreg free
  1848                           
  1849                           ;main.c: 101: lcd_gotoxy(1, 2);
  1850  002C10  0E02               	movlw	2
  1851  002C12  6E05               	movwf	lcd_gotoxy@y,c
  1852  002C14  0E01               	movlw	1
  1853  002C16  EC40  F01C         	call	_lcd_gotoxy
  1854                           
  1855                           ;main.c: 102: lcd_putrs("Password");
  1856  002C1A  0EAE               	movlw	low STR_10
  1857  002C1C  6E09               	movwf	lcd_putrs@ptr,c
  1858  002C1E  0E0F               	movlw	high STR_10
  1859  002C20  6E0A               	movwf	lcd_putrs@ptr+1,c
  1860  002C22  EC70  F01A         	call	_lcd_putrs	;wreg free
  1861                           
  1862                           ;main.c: 103: _delay((unsigned long)((80)*(8000000/4000.0)));
  1863  002C26  0ED0               	movlw	208
  1864  002C28  6E0B               	movwf	??_titila_texto_insert_password& (0+255),c
  1865  002C2A  0ECA               	movlw	202
  1866  002C2C                     u5817:
  1867  002C2C  2EE8               	decfsz	wreg,f,c
  1868  002C2E  D7FE               	bra	u5817
  1869  002C30  2E0B               	decfsz	??_titila_texto_insert_password& (0+255),f,c
  1870  002C32  D7FC               	bra	u5817
  1871  002C34                     l177:
  1872                           
  1873                           ;main.c: 104: }
  1874                           ;main.c: 106: if (txt_insert_pass == 1) {
  1875  002C34  0100               	movlb	0	; () banked
  1876  002C36  058A               	decf	_txt_insert_pass& (0+255),w,b
  1877  002C38  0100               	movlb	0	; () banked
  1878  002C3A  118B               	iorwf	(_txt_insert_pass+1)& (0+255),w,b
  1879  002C3C  A4D8               	btfss	status,2,c
  1880  002C3E  0012               	return	
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 107: txt_insert_pass = 0;
  1884  002C40  0E00               	movlw	0
  1885  002C42  0100               	movlb	0	; () banked
  1886  002C44  6F8B               	movwf	(_txt_insert_pass+1)& (0+255),b
  1887  002C46  0E00               	movlw	0
  1888  002C48  6F8A               	movwf	_txt_insert_pass& (0+255),b
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 108: lcd_gotoxy(1, 1);
  1892  002C4A  0E01               	movlw	1
  1893  002C4C  6E05               	movwf	lcd_gotoxy@y,c
  1894  002C4E  0E01               	movlw	1
  1895  002C50  EC40  F01C         	call	_lcd_gotoxy
  1896                           
  1897                           ;main.c: 109: lcd_putrs("        ");
  1898  002C54  0E65               	movlw	low (STR_18+8)
  1899  002C56  6E09               	movwf	lcd_putrs@ptr,c
  1900  002C58  0E0F               	movlw	high (STR_18+8)
  1901  002C5A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1902  002C5C  EC70  F01A         	call	_lcd_putrs	;wreg free
  1903                           
  1904                           ;main.c: 110: lcd_gotoxy(1, 2);
  1905  002C60  0E02               	movlw	2
  1906  002C62  6E05               	movwf	lcd_gotoxy@y,c
  1907  002C64  0E01               	movlw	1
  1908  002C66  EC40  F01C         	call	_lcd_gotoxy
  1909                           
  1910                           ;main.c: 111: lcd_putrs("        ");
  1911  002C6A  0E65               	movlw	low (STR_18+8)
  1912  002C6C  6E09               	movwf	lcd_putrs@ptr,c
  1913  002C6E  0E0F               	movlw	high (STR_18+8)
  1914  002C70  6E0A               	movwf	lcd_putrs@ptr+1,c
  1915  002C72  EC70  F01A         	call	_lcd_putrs	;wreg free
  1916                           
  1917                           ;main.c: 112: _delay((unsigned long)((60)*(8000000/4000.0)));
  1918  002C76  0E9C               	movlw	156
  1919  002C78  6E0B               	movwf	??_titila_texto_insert_password& (0+255),c
  1920  002C7A  0ED7               	movlw	215
  1921  002C7C                     u5827:
  1922  002C7C  2EE8               	decfsz	wreg,f,c
  1923  002C7E  D7FE               	bra	u5827
  1924  002C80  2E0B               	decfsz	??_titila_texto_insert_password& (0+255),f,c
  1925  002C82  D7FC               	bra	u5827
  1926  002C84  F000               	nop	
  1927  002C86  0012               	return	
  1928  002C88                     __end_of_titila_texto_insert_password:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           prodh	equ	0xFF4
  1935                           prodl	equ	0xFF3
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _si_apreta_numero_va_a_pantalla_contrasenia *****************
  1943 ;; Defined at:
  1944 ;;		line 359 in file "main.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1962 ;;Total ram usage:        0 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:   11
  1965 ;; This function calls:
  1966 ;;		_ir_a_pantalla_ingresar_contrasenia
  1967 ;; This function is called by:
  1968 ;;		_ir_a_pantalla_inicial
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text6
  1973  002ED4                     __ptext6:
  1974                           	opt stack 0
  1975  002ED4                     _si_apreta_numero_va_a_pantalla_contrasenia:
  1976                           	opt stack 18
  1977                           
  1978                           ;main.c: 360: LATAbits.LATA0 = 1;
  1979                           
  1980                           ;incstack = 0
  1981  002ED4  8089               	bsf	3977,0,c	;volatile
  1982                           
  1983                           ;main.c: 361: LATAbits.LATA1 = 0;
  1984  002ED6  9289               	bcf	3977,1,c	;volatile
  1985                           
  1986                           ;main.c: 362: LATAbits.LATA2 = 0;
  1987  002ED8  9489               	bcf	3977,2,c	;volatile
  1988                           
  1989                           ;main.c: 363: LATAbits.LATA3 = 0;
  1990  002EDA  9689               	bcf	3977,3,c	;volatile
  1991                           
  1992                           ;main.c: 364: {
  1993                           ;main.c: 365: if ((PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) ||
  1994                           ;main.c: 366: (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) ||
  1995                           ;main.c: 367: (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1)) {
  1996  002EDC  AA80               	btfss	3968,5,c	;volatile
  1997  002EDE  D002               	goto	u5510
  1998  002EE0  B089               	btfsc	3977,0,c	;volatile
  1999  002EE2  D007               	goto	u5550
  2000  002EE4                     u5510:
  2001  002EE4  AE80               	btfss	3968,7,c	;volatile
  2002  002EE6  D002               	goto	u5530
  2003  002EE8  B089               	btfsc	3977,0,c	;volatile
  2004  002EEA  D003               	goto	u5550
  2005  002EEC                     u5530:
  2006  002EEC  BC80               	btfsc	3968,6,c	;volatile
  2007  002EEE  A089               	btfss	3977,0,c	;volatile
  2008  002EF0  D002               	goto	l308
  2009  002EF2                     u5550:
  2010                           
  2011                           ;main.c: 369: ir_a_pantalla_ingresar_contrasenia();
  2012  002EF2  ECAB  F019         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2013  002EF6                     l308:
  2014                           
  2015                           ;main.c: 370: }
  2016                           ;main.c: 371: }
  2017                           ;main.c: 372: LATAbits.LATA0 = 0;
  2018  002EF6  9089               	bcf	3977,0,c	;volatile
  2019                           
  2020                           ;main.c: 373: LATAbits.LATA1 = 1;
  2021  002EF8  8289               	bsf	3977,1,c	;volatile
  2022                           
  2023                           ;main.c: 374: LATAbits.LATA2 = 0;
  2024  002EFA  9489               	bcf	3977,2,c	;volatile
  2025                           
  2026                           ;main.c: 375: LATAbits.LATA3 = 0;
  2027  002EFC  9689               	bcf	3977,3,c	;volatile
  2028                           
  2029                           ;main.c: 376: {
  2030                           ;main.c: 377: if ((PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) ||
  2031                           ;main.c: 378: (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) ||
  2032                           ;main.c: 379: (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1)) {
  2033  002EFE  AA80               	btfss	3968,5,c	;volatile
  2034  002F00  D002               	goto	u5570
  2035  002F02  B289               	btfsc	3977,1,c	;volatile
  2036  002F04  D007               	goto	u5610
  2037  002F06                     u5570:
  2038  002F06  AE80               	btfss	3968,7,c	;volatile
  2039  002F08  D002               	goto	u5590
  2040  002F0A  B289               	btfsc	3977,1,c	;volatile
  2041  002F0C  D003               	goto	u5610
  2042  002F0E                     u5590:
  2043  002F0E  BC80               	btfsc	3968,6,c	;volatile
  2044  002F10  A289               	btfss	3977,1,c	;volatile
  2045  002F12  D002               	goto	l315
  2046  002F14                     u5610:
  2047                           
  2048                           ;main.c: 381: ir_a_pantalla_ingresar_contrasenia();
  2049  002F14  ECAB  F019         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2050  002F18                     l315:
  2051                           
  2052                           ;main.c: 382: }
  2053                           ;main.c: 383: }
  2054                           ;main.c: 384: LATAbits.LATA0 = 0;
  2055  002F18  9089               	bcf	3977,0,c	;volatile
  2056                           
  2057                           ;main.c: 385: LATAbits.LATA1 = 0;
  2058  002F1A  9289               	bcf	3977,1,c	;volatile
  2059                           
  2060                           ;main.c: 386: LATAbits.LATA2 = 1;
  2061  002F1C  8489               	bsf	3977,2,c	;volatile
  2062                           
  2063                           ;main.c: 387: LATAbits.LATA3 = 0;
  2064  002F1E  9689               	bcf	3977,3,c	;volatile
  2065                           
  2066                           ;main.c: 388: {
  2067                           ;main.c: 389: if ((PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) ||
  2068                           ;main.c: 390: (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) ||
  2069                           ;main.c: 391: (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1)) {
  2070  002F20  AA80               	btfss	3968,5,c	;volatile
  2071  002F22  D002               	goto	u5630
  2072  002F24  B489               	btfsc	3977,2,c	;volatile
  2073  002F26  D007               	goto	u5670
  2074  002F28                     u5630:
  2075  002F28  AE80               	btfss	3968,7,c	;volatile
  2076  002F2A  D002               	goto	u5650
  2077  002F2C  B489               	btfsc	3977,2,c	;volatile
  2078  002F2E  D003               	goto	u5670
  2079  002F30                     u5650:
  2080  002F30  BC80               	btfsc	3968,6,c	;volatile
  2081  002F32  A489               	btfss	3977,2,c	;volatile
  2082  002F34  D002               	goto	l322
  2083  002F36                     u5670:
  2084                           
  2085                           ;main.c: 393: ir_a_pantalla_ingresar_contrasenia();
  2086  002F36  ECAB  F019         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2087  002F3A                     l322:
  2088                           
  2089                           ;main.c: 394: }
  2090                           ;main.c: 395: }
  2091                           ;main.c: 396: LATAbits.LATA0 = 0;
  2092  002F3A  9089               	bcf	3977,0,c	;volatile
  2093                           
  2094                           ;main.c: 397: LATAbits.LATA1 = 0;
  2095  002F3C  9289               	bcf	3977,1,c	;volatile
  2096                           
  2097                           ;main.c: 398: LATAbits.LATA2 = 0;
  2098  002F3E  9489               	bcf	3977,2,c	;volatile
  2099                           
  2100                           ;main.c: 399: LATAbits.LATA3 = 1;
  2101  002F40  8689               	bsf	3977,3,c	;volatile
  2102                           
  2103                           ;main.c: 400: {
  2104                           ;main.c: 401: if ((PORTAbits.RA5 == 1 && LATAbits.LATA3 == 1) ||
  2105                           ;main.c: 402: (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) ||
  2106                           ;main.c: 403: (PORTAbits.RA6 == 1 && LATAbits.LATA3 == 1)) {
  2107  002F42  AA80               	btfss	3968,5,c	;volatile
  2108  002F44  D002               	goto	u5690
  2109  002F46  B689               	btfsc	3977,3,c	;volatile
  2110  002F48  D008               	goto	u5730
  2111  002F4A                     u5690:
  2112  002F4A  AE80               	btfss	3968,7,c	;volatile
  2113  002F4C  D002               	goto	u5710
  2114  002F4E  B689               	btfsc	3977,3,c	;volatile
  2115  002F50  D004               	goto	u5730
  2116  002F52                     u5710:
  2117  002F52  AC80               	btfss	3968,6,c	;volatile
  2118  002F54  0012               	return	
  2119  002F56  A689               	btfss	3977,3,c	;volatile
  2120  002F58  0012               	return	
  2121  002F5A                     u5730:
  2122                           
  2123                           ;main.c: 405: ir_a_pantalla_ingresar_contrasenia();
  2124  002F5A  ECAB  F019         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2125  002F5E  0012               	return	
  2126  002F60                     __end_of_si_apreta_numero_va_a_pantalla_contrasenia:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           prodh	equ	0xFF4
  2133                           prodl	equ	0xFF3
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           postdec1	equ	0xFE5
  2137                           fsr1l	equ	0xFE1
  2138                           status	equ	0xFD8
  2139                           
  2140 ;; *************** function _ir_a_pantalla_ingresar_contrasenia *****************
  2141 ;; Defined at:
  2142 ;;		line 337 in file "main.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;		None
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;		None
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2160 ;;Total ram usage:        0 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:   10
  2163 ;; This function calls:
  2164 ;;		_ingreso_numero
  2165 ;;		_ir_a_pantalla_edicion
  2166 ;;		_lcd_gotoxy
  2167 ;;		_lcd_putrs
  2168 ;;		_mostrar_presionar_a
  2169 ;;		_resetear_pantalla_ingresar_contrasenia
  2170 ;;		_verificar_contrasenia
  2171 ;; This function is called by:
  2172 ;;		_si_apreta_numero_va_a_pantalla_contrasenia
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text7
  2177  003356                     __ptext7:
  2178                           	opt stack 0
  2179  003356                     _ir_a_pantalla_ingresar_contrasenia:
  2180                           	opt stack 18
  2181                           
  2182                           ;main.c: 339: numeros_ingresados = 0;
  2183                           
  2184                           ;incstack = 0
  2185  003356  0E00               	movlw	0
  2186  003358  0100               	movlb	0	; () banked
  2187  00335A  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  2188  00335C  0E00               	movlw	0
  2189  00335E  6F90               	movwf	_numeros_ingresados& (0+255),b
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main.c: 340: lcd_gotoxy(1, 1);
  2193  003360  0E01               	movlw	1
  2194  003362  6E05               	movwf	lcd_gotoxy@y,c
  2195  003364  0E01               	movlw	1
  2196  003366  EC40  F01C         	call	_lcd_gotoxy
  2197                           
  2198                           ;main.c: 341: lcd_putrs("Insert Password ");
  2199  00336A  0E7F               	movlw	low STR_21
  2200  00336C  6E09               	movwf	lcd_putrs@ptr,c
  2201  00336E  0E0F               	movlw	high STR_21
  2202  003370  6E0A               	movwf	lcd_putrs@ptr+1,c
  2203  003372  EC70  F01A         	call	_lcd_putrs	;wreg free
  2204                           
  2205                           ;main.c: 342: lcd_gotoxy(1, 2);
  2206  003376  0E02               	movlw	2
  2207  003378  6E05               	movwf	lcd_gotoxy@y,c
  2208  00337A  0E01               	movlw	1
  2209  00337C  EC40  F01C         	call	_lcd_gotoxy
  2210                           
  2211                           ;main.c: 343: lcd_putrs("                ");
  2212  003380  0E5D               	movlw	low STR_18
  2213  003382  6E09               	movwf	lcd_putrs@ptr,c
  2214  003384  0E0F               	movlw	high STR_18
  2215  003386  6E0A               	movwf	lcd_putrs@ptr+1,c
  2216  003388  EC70  F01A         	call	_lcd_putrs	;wreg free
  2217  00338C                     
  2218                           ;main.c: 346: if (numeros_ingresados < 4) {
  2219  00338C  0100               	movlb	0	; () banked
  2220  00338E  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  2221  003390  D008               	goto	u5460
  2222  003392  0100               	movlb	0	; () banked
  2223  003394  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  2224  003396  E108               	bnz	l4779
  2225  003398  0E04               	movlw	4
  2226  00339A  0100               	movlb	0	; () banked
  2227  00339C  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  2228  00339E  B0D8               	btfsc	status,0,c
  2229  0033A0  D003               	goto	l299
  2230  0033A2                     u5460:
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 347: ingreso_numero();
  2234  0033A2  ECFE  F007         	call	_ingreso_numero	;wreg free
  2235                           
  2236                           ;main.c: 348: } else {
  2237  0033A6  D7F2               	goto	l298
  2238  0033A8                     l299:
  2239  0033A8                     l4779:
  2240                           
  2241                           ;main.c: 349: mostrar_presionar_a();
  2242  0033A8  EC70  F01C         	call	_mostrar_presionar_a	;wreg free
  2243                           
  2244                           ;main.c: 350: if (verificar_contrasenia() == 1) {
  2245  0033AC  ECBC  F018         	call	_verificar_contrasenia	;wreg free
  2246  0033B0  0401               	decf	?_verificar_contrasenia,w,c
  2247  0033B2  1002               	iorwf	?_verificar_contrasenia+1,w,c
  2248  0033B4  A4D8               	btfss	status,2,c
  2249  0033B6  D003               	goto	l301
  2250                           
  2251                           ;main.c: 351: ir_a_pantalla_edicion();
  2252  0033B8  EC98  F01B         	call	_ir_a_pantalla_edicion	;wreg free
  2253                           
  2254                           ;main.c: 352: } else {
  2255  0033BC  D7E7               	goto	l298
  2256  0033BE                     l301:
  2257                           
  2258                           ;main.c: 353: resetear_pantalla_ingresar_contrasenia();
  2259  0033BE  ECC1  F01A         	call	_resetear_pantalla_ingresar_contrasenia	;wreg free
  2260  0033C2  D7E4               	goto	l298
  2261  0033C4                     __end_of_ir_a_pantalla_ingresar_contrasenia:
  2262                           	opt stack 0
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           postdec1	equ	0xFE5
  2272                           fsr1l	equ	0xFE1
  2273                           status	equ	0xFD8
  2274                           
  2275 ;; *************** function _verificar_contrasenia *****************
  2276 ;; Defined at:
  2277 ;;		line 434 in file "main.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  i               2    8[COMRAM] int 
  2282 ;;  equals          2    6[COMRAM] int 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  2    0[COMRAM] int 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2293 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2294 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2295 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2296 ;;Total ram usage:       10 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; This function calls:
  2299 ;;		Nothing
  2300 ;; This function is called by:
  2301 ;;		_ir_a_pantalla_ingresar_contrasenia
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text8
  2306  003178                     __ptext8:
  2307                           	opt stack 0
  2308  003178                     _verificar_contrasenia:
  2309                           	opt stack 27
  2310                           
  2311                           ;main.c: 435: int equals = 0;
  2312                           
  2313                           ;incstack = 0
  2314  003178  0E00               	movlw	0
  2315  00317A  6E08               	movwf	verificar_contrasenia@equals+1,c
  2316  00317C  0E00               	movlw	0
  2317  00317E  6E07               	movwf	verificar_contrasenia@equals,c
  2318                           
  2319                           ;main.c: 436: for (int i = 0; i < 4; i++) {
  2320  003180  0E00               	movlw	0
  2321  003182  6E0A               	movwf	verificar_contrasenia@i+1,c
  2322  003184  0E00               	movlw	0
  2323  003186  6E09               	movwf	verificar_contrasenia@i,c
  2324  003188  BE0A               	btfsc	verificar_contrasenia@i+1,7,c
  2325  00318A  D003               	goto	l352
  2326  00318C  500A               	movf	verificar_contrasenia@i+1,w,c
  2327  00318E  E12C               	bnz	l353
  2328  003190  D027               	goto	L1
  2329  003192                     l352:
  2330                           
  2331                           ;main.c: 437: if (array_contrasenia[i] == array_contrasenia_ingresada[i]) {
  2332  003192  90D8               	bcf	status,0,c
  2333  003194  3409               	rlcf	verificar_contrasenia@i,w,c
  2334  003196  6ED9               	movwf	fsr2l,c
  2335  003198  340A               	rlcf	verificar_contrasenia@i+1,w,c
  2336  00319A  6EDA               	movwf	fsr2h,c
  2337  00319C  0E60               	movlw	low _array_contrasenia_ingresada
  2338  00319E  26D9               	addwf	fsr2l,f,c
  2339  0031A0  0E00               	movlw	high _array_contrasenia_ingresada
  2340  0031A2  22DA               	addwfc	fsr2h,f,c
  2341  0031A4  90D8               	bcf	status,0,c
  2342  0031A6  3409               	rlcf	verificar_contrasenia@i,w,c
  2343  0031A8  6EE1               	movwf	fsr1l,c
  2344  0031AA  340A               	rlcf	verificar_contrasenia@i+1,w,c
  2345  0031AC  6EE2               	movwf	fsr1h,c
  2346  0031AE  0EC9               	movlw	low _array_contrasenia
  2347  0031B0  26E1               	addwf	fsr1l,f,c
  2348  0031B2  0E00               	movlw	high _array_contrasenia
  2349  0031B4  22E2               	addwfc	fsr1h,f,c
  2350  0031B6  50DE               	movf	postinc2,w,c
  2351  0031B8  18E6               	xorwf	postinc1,w,c
  2352  0031BA  E108               	bnz	l4759
  2353  0031BC  50DE               	movf	postinc2,w,c
  2354  0031BE  18E6               	xorwf	postinc1,w,c
  2355  0031C0  A4D8               	btfss	status,2,c
  2356  0031C2  D004               	goto	l354
  2357                           
  2358                           ;main.c: 438: equals = 1;
  2359  0031C4  0E00               	movlw	0
  2360  0031C6  6E08               	movwf	verificar_contrasenia@equals+1,c
  2361  0031C8  0E01               	movlw	1
  2362  0031CA  D003               	goto	L2
  2363  0031CC                     l354:
  2364  0031CC                     l4759:
  2365                           
  2366                           ;main.c: 440: equals = 0;
  2367  0031CC  0E00               	movlw	0
  2368  0031CE  6E08               	movwf	verificar_contrasenia@equals+1,c
  2369  0031D0  0E00               	movlw	0
  2370  0031D2                     L2:
  2371  0031D2  6E07               	movwf	verificar_contrasenia@equals,c
  2372  0031D4  4A09               	infsnz	verificar_contrasenia@i,f,c
  2373  0031D6  2A0A               	incf	verificar_contrasenia@i+1,f,c
  2374  0031D8  BE0A               	btfsc	verificar_contrasenia@i+1,7,c
  2375  0031DA  D7DB               	goto	l352
  2376  0031DC  500A               	movf	verificar_contrasenia@i+1,w,c
  2377  0031DE  E104               	bnz	u5450
  2378  0031E0                     L1:
  2379  0031E0  0E04               	movlw	4
  2380  0031E2  5C09               	subwf	verificar_contrasenia@i,w,c
  2381  0031E4  A0D8               	btfss	status,0,c
  2382  0031E6  D7D5               	goto	l352
  2383  0031E8                     u5450:
  2384  0031E8                     l353:
  2385                           
  2386                           ;main.c: 441: }
  2387                           ;main.c: 442: }
  2388                           ;main.c: 443: return equals;
  2389  0031E8  C007  F001         	movff	verificar_contrasenia@equals,?_verificar_contrasenia
  2390  0031EC  C008  F002         	movff	verificar_contrasenia@equals+1,?_verificar_contrasenia+1
  2391  0031F0  0012               	return		;funcret
  2392  0031F2                     __end_of_verificar_contrasenia:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           postinc0	equ	0xFEE
  2401                           wreg	equ	0xFE8
  2402                           postinc1	equ	0xFE6
  2403                           postdec1	equ	0xFE5
  2404                           fsr1h	equ	0xFE2
  2405                           fsr1l	equ	0xFE1
  2406                           postinc2	equ	0xFDE
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _resetear_pantalla_ingresar_contrasenia *****************
  2412 ;; Defined at:
  2413 ;;		line 230 in file "main.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;		None
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  i               2   10[COMRAM] int 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2431 ;;Total ram usage:        2 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    5
  2434 ;; This function calls:
  2435 ;;		_lcd_gotoxy
  2436 ;;		_lcd_putrs
  2437 ;; This function is called by:
  2438 ;;		_ir_a_pantalla_ingresar_contrasenia
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text9
  2443  003582                     __ptext9:
  2444                           	opt stack 0
  2445  003582                     _resetear_pantalla_ingresar_contrasenia:
  2446                           	opt stack 22
  2447                           
  2448                           ;main.c: 231: lcd_gotoxy(1, 2);
  2449                           
  2450                           ;incstack = 0
  2451  003582  0E02               	movlw	2
  2452  003584  6E05               	movwf	lcd_gotoxy@y,c
  2453  003586  0E01               	movlw	1
  2454  003588  EC40  F01C         	call	_lcd_gotoxy
  2455                           
  2456                           ;main.c: 232: lcd_putrs("              ");
  2457  00358C  0E5F               	movlw	low (STR_18+2)
  2458  00358E  6E09               	movwf	lcd_putrs@ptr,c
  2459  003590  0E0F               	movlw	high (STR_18+2)
  2460  003592  6E0A               	movwf	lcd_putrs@ptr+1,c
  2461  003594  EC70  F01A         	call	_lcd_putrs	;wreg free
  2462                           
  2463                           ;main.c: 234: for (int i = 0; i < 0; i++) {
  2464  003598  0E00               	movlw	0
  2465  00359A  6E0C               	movwf	resetear_pantalla_ingresar_contrasenia@i+1,c
  2466  00359C  0E00               	movlw	0
  2467  00359E  6E0B               	movwf	resetear_pantalla_ingresar_contrasenia@i,c
  2468  0035A0                     l4723:
  2469  0035A0  AE0C               	btfss	resetear_pantalla_ingresar_contrasenia@i+1,7,c
  2470  0035A2  D010               	goto	u5420
  2471                           
  2472                           ;main.c: 235: array_contrasenia_ingresada[i] = 0;
  2473  0035A4  90D8               	bcf	status,0,c
  2474  0035A6  340B               	rlcf	resetear_pantalla_ingresar_contrasenia@i,w,c
  2475  0035A8  6ED9               	movwf	fsr2l,c
  2476  0035AA  340C               	rlcf	resetear_pantalla_ingresar_contrasenia@i+1,w,c
  2477  0035AC  6EDA               	movwf	fsr2h,c
  2478  0035AE  0E60               	movlw	low _array_contrasenia_ingresada
  2479  0035B0  26D9               	addwf	fsr2l,f,c
  2480  0035B2  0E00               	movlw	high _array_contrasenia_ingresada
  2481  0035B4  22DA               	addwfc	fsr2h,f,c
  2482  0035B6  0E00               	movlw	0
  2483  0035B8  6EDE               	movwf	postinc2,c
  2484  0035BA  0E00               	movlw	0
  2485  0035BC  6EDD               	movwf	postdec2,c
  2486  0035BE  4A0B               	infsnz	resetear_pantalla_ingresar_contrasenia@i,f,c
  2487  0035C0  2A0C               	incf	resetear_pantalla_ingresar_contrasenia@i+1,f,c
  2488  0035C2  D7EE               	goto	l4723
  2489  0035C4                     u5420:
  2490                           
  2491                           ;main.c: 236: }
  2492                           ;main.c: 238: numeros_ingresados = 0;
  2493  0035C4  0E00               	movlw	0
  2494  0035C6  0100               	movlb	0	; () banked
  2495  0035C8  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  2496  0035CA  0E00               	movlw	0
  2497  0035CC  6F90               	movwf	_numeros_ingresados& (0+255),b
  2498                           
  2499                           ; BSR set to: 0
  2500  0035CE  0012               	return		;funcret
  2501  0035D0                     __end_of_resetear_pantalla_ingresar_contrasenia:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           postinc0	equ	0xFEE
  2510                           wreg	equ	0xFE8
  2511                           postinc1	equ	0xFE6
  2512                           postdec1	equ	0xFE5
  2513                           fsr1h	equ	0xFE2
  2514                           fsr1l	equ	0xFE1
  2515                           postinc2	equ	0xFDE
  2516                           postdec2	equ	0xFDD
  2517                           fsr2h	equ	0xFDA
  2518                           fsr2l	equ	0xFD9
  2519                           status	equ	0xFD8
  2520                           
  2521 ;; *************** function _mostrar_presionar_a *****************
  2522 ;; Defined at:
  2523 ;;		line 225 in file "main.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;		None
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;		None
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2541 ;;Total ram usage:        0 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    5
  2544 ;; This function calls:
  2545 ;;		_lcd_gotoxy
  2546 ;;		_lcd_putrs
  2547 ;; This function is called by:
  2548 ;;		_ir_a_pantalla_ingresar_contrasenia
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text10
  2553  0038E0                     __ptext10:
  2554                           	opt stack 0
  2555  0038E0                     _mostrar_presionar_a:
  2556                           	opt stack 22
  2557                           
  2558                           ;main.c: 226: lcd_gotoxy(7, 2);
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;incstack = 0
  2562  0038E0  0E02               	movlw	2
  2563  0038E2  6E05               	movwf	lcd_gotoxy@y,c
  2564  0038E4  0E07               	movlw	7
  2565  0038E6  EC40  F01C         	call	_lcd_gotoxy
  2566                           
  2567                           ;main.c: 227: lcd_putrs("Press A");
  2568  0038EA  0EC8               	movlw	low STR_14
  2569  0038EC  6E09               	movwf	lcd_putrs@ptr,c
  2570  0038EE  0E0F               	movlw	high STR_14
  2571  0038F0  6E0A               	movwf	lcd_putrs@ptr+1,c
  2572  0038F2  EC70  F01A         	call	_lcd_putrs	;wreg free
  2573  0038F6  0012               	return		;funcret
  2574  0038F8                     __end_of_mostrar_presionar_a:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           prodh	equ	0xFF4
  2581                           prodl	equ	0xFF3
  2582                           postinc0	equ	0xFEE
  2583                           wreg	equ	0xFE8
  2584                           postinc1	equ	0xFE6
  2585                           postdec1	equ	0xFE5
  2586                           fsr1h	equ	0xFE2
  2587                           fsr1l	equ	0xFE1
  2588                           postinc2	equ	0xFDE
  2589                           postdec2	equ	0xFDD
  2590                           fsr2h	equ	0xFDA
  2591                           fsr2l	equ	0xFD9
  2592                           status	equ	0xFD8
  2593                           
  2594 ;; *************** function _ir_a_pantalla_edicion *****************
  2595 ;; Defined at:
  2596 ;;		line 322 in file "main.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    9
  2617 ;; This function calls:
  2618 ;;		_Read_RTC
  2619 ;;		_cambiar_opcion
  2620 ;;		_lcd_gotoxy
  2621 ;;		_lcd_putrs
  2622 ;;		_seleccionar_opcion
  2623 ;;		_set_reloj_digital
  2624 ;; This function is called by:
  2625 ;;		_ir_a_pantalla_ingresar_contrasenia
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text11
  2630  003730                     __ptext11:
  2631                           	opt stack 0
  2632  003730                     _ir_a_pantalla_edicion:
  2633                           	opt stack 18
  2634                           
  2635                           ;main.c: 324: lcd_gotoxy(1, 1);
  2636                           
  2637                           ;incstack = 0
  2638                           ;main.c: 323: while (1) {
  2639  003730  0E01               	movlw	1
  2640  003732  6E05               	movwf	lcd_gotoxy@y,c
  2641  003734  0E01               	movlw	1
  2642  003736  EC40  F01C         	call	_lcd_gotoxy
  2643                           
  2644                           ;main.c: 325: lcd_putrs("Active ");
  2645  00373A  0EC0               	movlw	low STR_19
  2646  00373C  6E09               	movwf	lcd_putrs@ptr,c
  2647  00373E  0E0F               	movlw	high STR_19
  2648  003740  6E0A               	movwf	lcd_putrs@ptr+1,c
  2649  003742  EC70  F01A         	call	_lcd_putrs	;wreg free
  2650                           
  2651                           ;main.c: 326: lcd_gotoxy(1, 2);
  2652  003746  0E02               	movlw	2
  2653  003748  6E05               	movwf	lcd_gotoxy@y,c
  2654  00374A  0E01               	movlw	1
  2655  00374C  EC40  F01C         	call	_lcd_gotoxy
  2656                           
  2657                           ;main.c: 327: lcd_putrs("Edt Pass");
  2658  003750  0EB7               	movlw	low STR_20
  2659  003752  6E09               	movwf	lcd_putrs@ptr,c
  2660  003754  0E0F               	movlw	high STR_20
  2661  003756  6E0A               	movwf	lcd_putrs@ptr+1,c
  2662  003758  EC70  F01A         	call	_lcd_putrs	;wreg free
  2663                           
  2664                           ;main.c: 329: Read_RTC();
  2665  00375C  ECC7  F00F         	call	_Read_RTC	;wreg free
  2666                           
  2667                           ;main.c: 331: set_reloj_digital();
  2668  003760  ECA3  F01C         	call	_set_reloj_digital	;wreg free
  2669                           
  2670                           ;main.c: 332: cambiar_opcion();
  2671  003764  EC39  F015         	call	_cambiar_opcion	;wreg free
  2672                           
  2673                           ;main.c: 333: seleccionar_opcion();
  2674  003768  EC99  F01A         	call	_seleccionar_opcion	;wreg free
  2675  00376C  D7E1               	goto	_ir_a_pantalla_edicion
  2676  00376E                     __end_of_ir_a_pantalla_edicion:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           postinc0	equ	0xFEE
  2685                           wreg	equ	0xFE8
  2686                           postinc1	equ	0xFE6
  2687                           postdec1	equ	0xFE5
  2688                           fsr1h	equ	0xFE2
  2689                           fsr1l	equ	0xFE1
  2690                           postinc2	equ	0xFDE
  2691                           postdec2	equ	0xFDD
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _set_reloj_digital *****************
  2697 ;; Defined at:
  2698 ;;		line 91 in file "main.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;		None
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;		None
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2716 ;;Total ram usage:        0 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    6
  2719 ;; This function calls:
  2720 ;;		_setDiaMesAnio
  2721 ;;		_setHoraMinutoSegundo
  2722 ;; This function is called by:
  2723 ;;		_ir_a_pantalla_edicion
  2724 ;;		_ir_a_pantalla_inicial
  2725 ;;		_setup
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text12
  2730  003946                     __ptext12:
  2731                           	opt stack 0
  2732  003946                     _set_reloj_digital:
  2733                           	opt stack 23
  2734                           
  2735                           ;main.c: 92: setDiaMesAnio();
  2736                           
  2737                           ;incstack = 0
  2738  003946  ECB0  F017         	call	_setDiaMesAnio	;wreg free
  2739                           
  2740                           ;main.c: 93: setHoraMinutoSegundo();
  2741  00394A  EC7E  F018         	call	_setHoraMinutoSegundo	;wreg free
  2742  00394E  0012               	return		;funcret
  2743  003950                     __end_of_set_reloj_digital:
  2744                           	opt stack 0
  2745                           tblptru	equ	0xFF8
  2746                           tblptrh	equ	0xFF7
  2747                           tblptrl	equ	0xFF6
  2748                           tablat	equ	0xFF5
  2749                           prodh	equ	0xFF4
  2750                           prodl	equ	0xFF3
  2751                           postinc0	equ	0xFEE
  2752                           wreg	equ	0xFE8
  2753                           postinc1	equ	0xFE6
  2754                           postdec1	equ	0xFE5
  2755                           fsr1h	equ	0xFE2
  2756                           fsr1l	equ	0xFE1
  2757                           postinc2	equ	0xFDE
  2758                           postdec2	equ	0xFDD
  2759                           fsr2h	equ	0xFDA
  2760                           fsr2l	equ	0xFD9
  2761                           status	equ	0xFD8
  2762                           
  2763 ;; *************** function _seleccionar_opcion *****************
  2764 ;; Defined at:
  2765 ;;		line 301 in file "main.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2783 ;;Total ram usage:        0 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    8
  2786 ;; This function calls:
  2787 ;;		_activar_alarma
  2788 ;;		_editar_fecha_reloj_digital
  2789 ;;		_editar_hora_reloj_digital
  2790 ;;		_ir_a_pantalla_editar_contrasenia
  2791 ;; This function is called by:
  2792 ;;		_ir_a_pantalla_edicion
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text13
  2797  003532                     __ptext13:
  2798                           	opt stack 0
  2799  003532                     _seleccionar_opcion:
  2800                           	opt stack 18
  2801                           
  2802                           ;main.c: 302: LATAbits.LATA0 = 1;
  2803                           
  2804                           ;incstack = 0
  2805  003532  8089               	bsf	3977,0,c	;volatile
  2806                           
  2807                           ;main.c: 303: LATAbits.LATA1 = 0;
  2808  003534  9289               	bcf	3977,1,c	;volatile
  2809                           
  2810                           ;main.c: 304: LATAbits.LATA2 = 0;
  2811  003536  9489               	bcf	3977,2,c	;volatile
  2812                           
  2813                           ;main.c: 305: LATAbits.LATA3 = 0;
  2814  003538  9689               	bcf	3977,3,c	;volatile
  2815                           
  2816                           ;main.c: 306: if (PORTCbits.RC2 == 1 && LATAbits.LATA0 == 1) {
  2817  00353A  A482               	btfss	3970,2,c	;volatile
  2818  00353C  0012               	return	
  2819  00353E  A089               	btfss	3977,0,c	;volatile
  2820  003540  0012               	return	
  2821                           
  2822                           ;main.c: 307: if (boton_seleccionar == 0) {
  2823  003542  0100               	movlb	0	; () banked
  2824  003544  518C               	movf	_boton_seleccionar& (0+255),w,b
  2825  003546  0100               	movlb	0	; () banked
  2826  003548  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2827  00354A  B4D8               	btfsc	status,2,c
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 308: activar_alarma();
  2831  00354C  EC0D  F01B         	call	_activar_alarma	;wreg free
  2832                           
  2833                           ;main.c: 309: }
  2834                           ;main.c: 310: if (boton_seleccionar == 1) {
  2835  003550  0100               	movlb	0	; () banked
  2836  003552  058C               	decf	_boton_seleccionar& (0+255),w,b
  2837  003554  0100               	movlb	0	; () banked
  2838  003556  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2839  003558  B4D8               	btfsc	status,2,c
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;main.c: 311: ir_a_pantalla_editar_contrasenia();
  2843  00355A  EC44  F016         	call	_ir_a_pantalla_editar_contrasenia	;wreg free
  2844                           
  2845                           ;main.c: 312: }
  2846                           ;main.c: 313: if (boton_seleccionar == 2) {
  2847  00355E  0E02               	movlw	2
  2848  003560  0100               	movlb	0	; () banked
  2849  003562  198C               	xorwf	_boton_seleccionar& (0+255),w,b
  2850  003564  0100               	movlb	0	; () banked
  2851  003566  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2852  003568  B4D8               	btfsc	status,2,c
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 314: editar_fecha_reloj_digital();
  2856  00356A  EC32  F009         	call	_editar_fecha_reloj_digital	;wreg free
  2857                           
  2858                           ;main.c: 315: }
  2859                           ;main.c: 316: if (boton_seleccionar == 3) {
  2860  00356E  0E03               	movlw	3
  2861  003570  0100               	movlb	0	; () banked
  2862  003572  198C               	xorwf	_boton_seleccionar& (0+255),w,b
  2863  003574  0100               	movlb	0	; () banked
  2864  003576  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2865  003578  A4D8               	btfss	status,2,c
  2866  00357A  0012               	return	
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;main.c: 317: editar_hora_reloj_digital();
  2870  00357C  EC66  F00B         	call	_editar_hora_reloj_digital	;wreg free
  2871  003580  0012               	return	
  2872  003582                     __end_of_seleccionar_opcion:
  2873                           	opt stack 0
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           prodh	equ	0xFF4
  2879                           prodl	equ	0xFF3
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           postinc1	equ	0xFE6
  2883                           postdec1	equ	0xFE5
  2884                           fsr1h	equ	0xFE2
  2885                           fsr1l	equ	0xFE1
  2886                           postinc2	equ	0xFDE
  2887                           postdec2	equ	0xFDD
  2888                           fsr2h	equ	0xFDA
  2889                           fsr2l	equ	0xFD9
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _ir_a_pantalla_editar_contrasenia *****************
  2893 ;; Defined at:
  2894 ;;		line 416 in file "main.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  i               2   60[COMRAM] int 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2909 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2911 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2912 ;;Total ram usage:        2 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    7
  2915 ;; This function calls:
  2916 ;;		_ingreso_numero
  2917 ;;		_lcd_gotoxy
  2918 ;;		_lcd_putrs
  2919 ;; This function is called by:
  2920 ;;		_seleccionar_opcion
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text14
  2925  002C88                     __ptext14:
  2926                           	opt stack 0
  2927  002C88                     _ir_a_pantalla_editar_contrasenia:
  2928                           	opt stack 18
  2929                           
  2930                           ;main.c: 417: numeros_ingresados = 0;
  2931                           
  2932                           ;incstack = 0
  2933  002C88  0E00               	movlw	0
  2934  002C8A  0100               	movlb	0	; () banked
  2935  002C8C  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  2936  002C8E  0E00               	movlw	0
  2937  002C90  6F90               	movwf	_numeros_ingresados& (0+255),b
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;main.c: 418: lcd_gotoxy(1, 1);
  2941  002C92  0E01               	movlw	1
  2942  002C94  6E05               	movwf	lcd_gotoxy@y,c
  2943  002C96  0E01               	movlw	1
  2944  002C98  EC40  F01C         	call	_lcd_gotoxy
  2945                           
  2946                           ;main.c: 419: lcd_putrs("Insert new Password ");
  2947  002C9C  0E48               	movlw	low STR_23
  2948  002C9E  6E09               	movwf	lcd_putrs@ptr,c
  2949  002CA0  0E0F               	movlw	high STR_23
  2950  002CA2  6E0A               	movwf	lcd_putrs@ptr+1,c
  2951  002CA4  EC70  F01A         	call	_lcd_putrs	;wreg free
  2952                           
  2953                           ;main.c: 420: lcd_gotoxy(1, 2);
  2954  002CA8  0E02               	movlw	2
  2955  002CAA  6E05               	movwf	lcd_gotoxy@y,c
  2956  002CAC  0E01               	movlw	1
  2957  002CAE  EC40  F01C         	call	_lcd_gotoxy
  2958                           
  2959                           ;main.c: 421: lcd_putrs("                ");
  2960  002CB2  0E5D               	movlw	low STR_18
  2961  002CB4  6E09               	movwf	lcd_putrs@ptr,c
  2962  002CB6  0E0F               	movlw	high STR_18
  2963  002CB8  6E0A               	movwf	lcd_putrs@ptr+1,c
  2964  002CBA  EC70  F01A         	call	_lcd_putrs	;wreg free
  2965  002CBE                     
  2966                           ;main.c: 423: if (numeros_ingresados < 4) {
  2967  002CBE  0100               	movlb	0	; () banked
  2968  002CC0  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  2969  002CC2  D008               	goto	u4920
  2970  002CC4  0100               	movlb	0	; () banked
  2971  002CC6  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  2972  002CC8  E108               	bnz	l4417
  2973  002CCA  0E04               	movlw	4
  2974  002CCC  0100               	movlb	0	; () banked
  2975  002CCE  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  2976  002CD0  B0D8               	btfsc	status,0,c
  2977  002CD2  D003               	goto	l343
  2978  002CD4                     u4920:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 424: ingreso_numero();
  2982  002CD4  ECFE  F007         	call	_ingreso_numero	;wreg free
  2983                           
  2984                           ;main.c: 425: } else {
  2985  002CD8  D7F2               	goto	l342
  2986  002CDA                     l343:
  2987  002CDA                     l4417:
  2988                           
  2989                           ;main.c: 426: for (int i = 0; i < 4; i++) {
  2990  002CDA  0E00               	movlw	0
  2991  002CDC  6E3E               	movwf	ir_a_pantalla_editar_contrasenia@i+1,c
  2992  002CDE  0E00               	movlw	0
  2993  002CE0  6E3D               	movwf	ir_a_pantalla_editar_contrasenia@i,c
  2994  002CE2                     l4419:
  2995  002CE2  BE3E               	btfsc	ir_a_pantalla_editar_contrasenia@i+1,7,c
  2996  002CE4  D006               	goto	l345
  2997  002CE6  503E               	movf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  2998  002CE8  E11D               	bnz	l349
  2999  002CEA  0E04               	movlw	4
  3000  002CEC  5C3D               	subwf	ir_a_pantalla_editar_contrasenia@i,w,c
  3001  002CEE  B0D8               	btfsc	status,0,c
  3002  002CF0  0012               	return	
  3003  002CF2                     l345:
  3004                           
  3005                           ;main.c: 427: array_contrasenia[i] = array_contrasenia_ingresada[i];
  3006  002CF2  90D8               	bcf	status,0,c
  3007  002CF4  343D               	rlcf	ir_a_pantalla_editar_contrasenia@i,w,c
  3008  002CF6  6ED9               	movwf	fsr2l,c
  3009  002CF8  343E               	rlcf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  3010  002CFA  6EDA               	movwf	fsr2h,c
  3011  002CFC  0E60               	movlw	low _array_contrasenia_ingresada
  3012  002CFE  26D9               	addwf	fsr2l,f,c
  3013  002D00  0E00               	movlw	high _array_contrasenia_ingresada
  3014  002D02  22DA               	addwfc	fsr2h,f,c
  3015  002D04  90D8               	bcf	status,0,c
  3016  002D06  343D               	rlcf	ir_a_pantalla_editar_contrasenia@i,w,c
  3017  002D08  6EE1               	movwf	fsr1l,c
  3018  002D0A  343E               	rlcf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  3019  002D0C  6EE2               	movwf	fsr1h,c
  3020  002D0E  0EC9               	movlw	low _array_contrasenia
  3021  002D10  26E1               	addwf	fsr1l,f,c
  3022  002D12  0E00               	movlw	high _array_contrasenia
  3023  002D14  22E2               	addwfc	fsr1h,f,c
  3024  002D16  CFDE FFE6          	movff	postinc2,postinc1
  3025  002D1A  CFDD FFE5          	movff	postdec2,postdec1
  3026  002D1E  4A3D               	infsnz	ir_a_pantalla_editar_contrasenia@i,f,c
  3027  002D20  2A3E               	incf	ir_a_pantalla_editar_contrasenia@i+1,f,c
  3028  002D22  D7DF               	goto	l4419
  3029  002D24                     l349:
  3030  002D24  0012               	return		;funcret
  3031  002D26                     __end_of_ir_a_pantalla_editar_contrasenia:
  3032                           	opt stack 0
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           prodh	equ	0xFF4
  3038                           prodl	equ	0xFF3
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           postinc1	equ	0xFE6
  3042                           postdec1	equ	0xFE5
  3043                           fsr1h	equ	0xFE2
  3044                           fsr1l	equ	0xFE1
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _editar_hora_reloj_digital *****************
  3052 ;; Defined at:
  3053 ;;		line 534 in file "main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  segundo_ingr    2   14[BANK0 ] int 
  3058 ;;  minuto_ingre    2   12[BANK0 ] int 
  3059 ;;  hora_ingresa    2   10[BANK0 ] int 
  3060 ;;  posicion        2   16[BANK0 ] int 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      void 
  3063 ;; Registers used:
  3064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3071 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3073 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3074 ;;Total ram usage:        9 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    7
  3077 ;; This function calls:
  3078 ;;		_Write_RTC
  3079 ;;		_covertir_valores_de_array_a_escala_decimal
  3080 ;;		_ingreso_numero
  3081 ;;		_setHoraMinutoSegundo
  3082 ;; This function is called by:
  3083 ;;		_seleccionar_opcion
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text15
  3088  0016CC                     __ptext15:
  3089                           	opt stack 0
  3090  0016CC                     _editar_hora_reloj_digital:
  3091                           	opt stack 18
  3092                           
  3093                           ;main.c: 535: int posicion = 0;
  3094                           
  3095                           ;incstack = 0
  3096  0016CC  0E00               	movlw	0
  3097  0016CE  0100               	movlb	0	; () banked
  3098  0016D0  6FEE               	movwf	(editar_hora_reloj_digital@posicion+1)& (0+255),b
  3099  0016D2  0E00               	movlw	0
  3100  0016D4  6FED               	movwf	editar_hora_reloj_digital@posicion& (0+255),b
  3101                           
  3102                           ;main.c: 536: motivo_ingreso_de_numeros = 1;
  3103  0016D6  0E00               	movlw	0
  3104  0016D8  0100               	movlb	0	; () banked
  3105  0016DA  6F8F               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  3106  0016DC  0E01               	movlw	1
  3107  0016DE  6F8E               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;main.c: 539: if (posicion == 0) {
  3111  0016E0  0100               	movlb	0	; () banked
  3112  0016E2  51ED               	movf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3113  0016E4  0100               	movlb	0	; () banked
  3114  0016E6  11EE               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3115  0016E8  A4D8               	btfss	status,2,c
  3116  0016EA  D04C               	goto	l388
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 540: numeros_ingresados = 0;
  3120  0016EC  0E00               	movlw	0
  3121  0016EE  0100               	movlb	0	; () banked
  3122  0016F0  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3123  0016F2  0E00               	movlw	0
  3124  0016F4  6F90               	movwf	_numeros_ingresados& (0+255),b
  3125                           
  3126                           ;main.c: 541: int hora_ingresada = 0;
  3127  0016F6  0E00               	movlw	0
  3128  0016F8  0100               	movlb	0	; () banked
  3129  0016FA  6FE8               	movwf	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),b
  3130  0016FC  0E00               	movlw	0
  3131  0016FE  6FE7               	movwf	editar_hora_reloj_digital@hora_ingresada& (0+255),b
  3132                           
  3133                           ;main.c: 542: while(numeros_ingresados < 3){
  3134  001700  D02A               	goto	l393
  3135  001702                     
  3136                           ; BSR set to: 0
  3137                           ;main.c: 543: ingreso_numero();
  3138                           
  3139                           ; BSR set to: 0
  3140  001702  ECFE  F007         	call	_ingreso_numero	;wreg free
  3141                           
  3142                           ;main.c: 544: if(numeros_ingresados == 2){
  3143  001706  0E02               	movlw	2
  3144  001708  0100               	movlb	0	; () banked
  3145  00170A  1990               	xorwf	_numeros_ingresados& (0+255),w,b
  3146  00170C  0100               	movlb	0	; () banked
  3147  00170E  1191               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3148  001710  A4D8               	btfss	status,2,c
  3149  001712  D021               	goto	l393
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;main.c: 545: hora_ingresada = covertir_valores_de_array_a_escala_decimal();
  3153  001714  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3154  001718  C05B  F0E7         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@hora_ingre
      +                          sada
  3155  00171C  C05C  F0E8         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@hora_ing
      +                          resada+1
  3156                           
  3157                           ;main.c: 546: if((0 <= hora_ingresada) && (hora_ingresada <= 23)){
  3158  001720  0100               	movlb	0	; () banked
  3159  001722  BFE8               	btfsc	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),7,b
  3160  001724  D013               	goto	l392
  3161                           
  3162                           ; BSR set to: 0
  3163  001726  0100               	movlb	0	; () banked
  3164  001728  BFE8               	btfsc	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),7,b
  3165  00172A  D008               	goto	u5130
  3166  00172C  0100               	movlb	0	; () banked
  3167  00172E  51E8               	movf	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),w,b
  3168  001730  E10D               	bnz	l4541
  3169  001732  0E18               	movlw	24
  3170  001734  0100               	movlb	0	; () banked
  3171  001736  5DE7               	subwf	editar_hora_reloj_digital@hora_ingresada& (0+255),w,b
  3172  001738  B0D8               	btfsc	status,0,c
  3173  00173A  D008               	goto	l392
  3174  00173C                     u5130:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;main.c: 547: hora=hora_ingresada;
  3178  00173C  C0E7  F0D3         	movff	editar_hora_reloj_digital@hora_ingresada,_hora
  3179  001740  C0E8  F0D4         	movff	editar_hora_reloj_digital@hora_ingresada+1,_hora+1
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 548: numeros_ingresados++;
  3183  001744  0100               	movlb	0	; () banked
  3184  001746  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  3185  001748  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3186                           
  3187                           ;main.c: 549: }
  3188  00174A  D005               	goto	l393
  3189  00174C                     l392:
  3190  00174C                     l4541:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 550: else{
  3194                           ;main.c: 551: numeros_ingresados = 0;
  3195  00174C  0E00               	movlw	0
  3196  00174E  0100               	movlb	0	; () banked
  3197  001750  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3198  001752  0E00               	movlw	0
  3199  001754  6F90               	movwf	_numeros_ingresados& (0+255),b
  3200  001756                     l393:
  3201                           
  3202                           ; BSR set to: 0
  3203                           
  3204                           ; BSR set to: 0
  3205                           
  3206                           ; BSR set to: 0
  3207                           
  3208                           ; BSR set to: 0
  3209  001756  0100               	movlb	0	; () banked
  3210  001758  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3211  00175A  D7D3               	goto	l390
  3212  00175C  0100               	movlb	0	; () banked
  3213  00175E  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3214  001760  E105               	bnz	l4545
  3215  001762  0E03               	movlw	3
  3216  001764  0100               	movlb	0	; () banked
  3217  001766  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  3218  001768  A0D8               	btfss	status,0,c
  3219  00176A  D7CB               	goto	l390
  3220  00176C                     l4545:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 552: }
  3224                           ;main.c: 553: }
  3225                           ;main.c: 554: }
  3226                           ;main.c: 556: setHoraMinutoSegundo();
  3227  00176C  EC7E  F018         	call	_setHoraMinutoSegundo	;wreg free
  3228                           
  3229                           ;main.c: 557: posicion++;
  3230  001770  0100               	movlb	0	; () banked
  3231  001772  4BED               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3232  001774  2BEE               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;main.c: 558: _delay((unsigned long)((50)*(8000000/4000.0)));
  3236  001776  0E82               	movlw	130
  3237  001778  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3238  00177A  0EDE               	movlw	222
  3239  00177C                     u5837:
  3240  00177C  2EE8               	decfsz	wreg,f,c
  3241  00177E  D7FE               	bra	u5837
  3242  001780  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3243  001782  D7FC               	bra	u5837
  3244  001784                     l388:
  3245                           
  3246                           ;main.c: 559: }
  3247                           ;main.c: 562: if (posicion == 1) {
  3248  001784  0100               	movlb	0	; () banked
  3249  001786  05ED               	decf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3250  001788  0100               	movlb	0	; () banked
  3251  00178A  11EE               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3252  00178C  A4D8               	btfss	status,2,c
  3253  00178E  D04C               	goto	l395
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 563: numeros_ingresados = 0;
  3257  001790  0E00               	movlw	0
  3258  001792  0100               	movlb	0	; () banked
  3259  001794  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3260  001796  0E00               	movlw	0
  3261  001798  6F90               	movwf	_numeros_ingresados& (0+255),b
  3262                           
  3263                           ;main.c: 564: int minuto_ingresado = 0;
  3264  00179A  0E00               	movlw	0
  3265  00179C  0100               	movlb	0	; () banked
  3266  00179E  6FEA               	movwf	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),b
  3267  0017A0  0E00               	movlw	0
  3268  0017A2  6FE9               	movwf	editar_hora_reloj_digital@minuto_ingresado& (0+255),b
  3269                           
  3270                           ;main.c: 565: while(numeros_ingresados < 3){
  3271  0017A4  D02A               	goto	l400
  3272  0017A6                     
  3273                           ; BSR set to: 0
  3274                           ;main.c: 566: ingreso_numero();
  3275                           
  3276                           ; BSR set to: 0
  3277  0017A6  ECFE  F007         	call	_ingreso_numero	;wreg free
  3278                           
  3279                           ;main.c: 567: if(numeros_ingresados == 2){
  3280  0017AA  0E02               	movlw	2
  3281  0017AC  0100               	movlb	0	; () banked
  3282  0017AE  1990               	xorwf	_numeros_ingresados& (0+255),w,b
  3283  0017B0  0100               	movlb	0	; () banked
  3284  0017B2  1191               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3285  0017B4  A4D8               	btfss	status,2,c
  3286  0017B6  D021               	goto	l400
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 568: minuto_ingresado = covertir_valores_de_array_a_escala_decimal();
  3290  0017B8  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3291  0017BC  C05B  F0E9         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@minuto_ing
      +                          resado
  3292  0017C0  C05C  F0EA         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@minuto_i
      +                          ngresado+1
  3293                           
  3294                           ;main.c: 569: if((0 <= minuto_ingresado) && (minuto_ingresado <= 59)){
  3295  0017C4  0100               	movlb	0	; () banked
  3296  0017C6  BFEA               	btfsc	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),7,b
  3297  0017C8  D013               	goto	l399
  3298                           
  3299                           ; BSR set to: 0
  3300  0017CA  0100               	movlb	0	; () banked
  3301  0017CC  BFEA               	btfsc	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),7,b
  3302  0017CE  D008               	goto	u5180
  3303  0017D0  0100               	movlb	0	; () banked
  3304  0017D2  51EA               	movf	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),w,b
  3305  0017D4  E10D               	bnz	l4569
  3306  0017D6  0E3C               	movlw	60
  3307  0017D8  0100               	movlb	0	; () banked
  3308  0017DA  5DE9               	subwf	editar_hora_reloj_digital@minuto_ingresado& (0+255),w,b
  3309  0017DC  B0D8               	btfsc	status,0,c
  3310  0017DE  D008               	goto	l399
  3311  0017E0                     u5180:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 570: minuto = minuto_ingresado;
  3315  0017E0  C0E9  F0D1         	movff	editar_hora_reloj_digital@minuto_ingresado,_minuto
  3316  0017E4  C0EA  F0D2         	movff	editar_hora_reloj_digital@minuto_ingresado+1,_minuto+1
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 571: numeros_ingresados++;
  3320  0017E8  0100               	movlb	0	; () banked
  3321  0017EA  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  3322  0017EC  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3323                           
  3324                           ;main.c: 572: }
  3325  0017EE  D005               	goto	l400
  3326  0017F0                     l399:
  3327  0017F0                     l4569:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 573: else{
  3331                           ;main.c: 574: numeros_ingresados = 0;
  3332  0017F0  0E00               	movlw	0
  3333  0017F2  0100               	movlb	0	; () banked
  3334  0017F4  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3335  0017F6  0E00               	movlw	0
  3336  0017F8  6F90               	movwf	_numeros_ingresados& (0+255),b
  3337  0017FA                     l400:
  3338                           
  3339                           ; BSR set to: 0
  3340                           
  3341                           ; BSR set to: 0
  3342                           
  3343                           ; BSR set to: 0
  3344                           
  3345                           ; BSR set to: 0
  3346  0017FA  0100               	movlb	0	; () banked
  3347  0017FC  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3348  0017FE  D7D3               	goto	l397
  3349  001800  0100               	movlb	0	; () banked
  3350  001802  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3351  001804  E105               	bnz	l4573
  3352  001806  0E03               	movlw	3
  3353  001808  0100               	movlb	0	; () banked
  3354  00180A  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  3355  00180C  A0D8               	btfss	status,0,c
  3356  00180E  D7CB               	goto	l397
  3357  001810                     l4573:
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 575: }
  3361                           ;main.c: 576: }
  3362                           ;main.c: 577: }
  3363                           ;main.c: 579: setHoraMinutoSegundo();
  3364  001810  EC7E  F018         	call	_setHoraMinutoSegundo	;wreg free
  3365                           
  3366                           ;main.c: 580: posicion++;
  3367  001814  0100               	movlb	0	; () banked
  3368  001816  4BED               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3369  001818  2BEE               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 581: _delay((unsigned long)((50)*(8000000/4000.0)));
  3373  00181A  0E82               	movlw	130
  3374  00181C  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3375  00181E  0EDE               	movlw	222
  3376  001820                     u5847:
  3377  001820  2EE8               	decfsz	wreg,f,c
  3378  001822  D7FE               	bra	u5847
  3379  001824  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3380  001826  D7FC               	bra	u5847
  3381  001828                     l395:
  3382                           
  3383                           ;main.c: 582: }
  3384                           ;main.c: 585: if (posicion == 2) {
  3385  001828  0E02               	movlw	2
  3386  00182A  0100               	movlb	0	; () banked
  3387  00182C  19ED               	xorwf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3388  00182E  0100               	movlb	0	; () banked
  3389  001830  11EE               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3390  001832  A4D8               	btfss	status,2,c
  3391  001834  D04C               	goto	l402
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 586: numeros_ingresados = 0;
  3395  001836  0E00               	movlw	0
  3396  001838  0100               	movlb	0	; () banked
  3397  00183A  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3398  00183C  0E00               	movlw	0
  3399  00183E  6F90               	movwf	_numeros_ingresados& (0+255),b
  3400                           
  3401                           ;main.c: 587: int segundo_ingresado = 0;
  3402  001840  0E00               	movlw	0
  3403  001842  0100               	movlb	0	; () banked
  3404  001844  6FEC               	movwf	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),b
  3405  001846  0E00               	movlw	0
  3406  001848  6FEB               	movwf	editar_hora_reloj_digital@segundo_ingresado& (0+255),b
  3407                           
  3408                           ;main.c: 588: while(numeros_ingresados < 3){
  3409  00184A  D02A               	goto	l407
  3410  00184C                     
  3411                           ; BSR set to: 0
  3412                           ;main.c: 589: ingreso_numero();
  3413                           
  3414                           ; BSR set to: 0
  3415  00184C  ECFE  F007         	call	_ingreso_numero	;wreg free
  3416                           
  3417                           ;main.c: 590: if(numeros_ingresados == 2){
  3418  001850  0E02               	movlw	2
  3419  001852  0100               	movlb	0	; () banked
  3420  001854  1990               	xorwf	_numeros_ingresados& (0+255),w,b
  3421  001856  0100               	movlb	0	; () banked
  3422  001858  1191               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3423  00185A  A4D8               	btfss	status,2,c
  3424  00185C  D021               	goto	l407
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;main.c: 591: segundo_ingresado = covertir_valores_de_array_a_escala_decimal();
  3428  00185E  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3429  001862  C05B  F0EB         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@segundo_in
      +                          gresado
  3430  001866  C05C  F0EC         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@segundo_
      +                          ingresado+1
  3431                           
  3432                           ;main.c: 592: if((0 <= segundo_ingresado) && (segundo_ingresado <= 59)){
  3433  00186A  0100               	movlb	0	; () banked
  3434  00186C  BFEC               	btfsc	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),7,b
  3435  00186E  D013               	goto	l406
  3436                           
  3437                           ; BSR set to: 0
  3438  001870  0100               	movlb	0	; () banked
  3439  001872  BFEC               	btfsc	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),7,b
  3440  001874  D008               	goto	u5230
  3441  001876  0100               	movlb	0	; () banked
  3442  001878  51EC               	movf	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),w,b
  3443  00187A  E10D               	bnz	l4597
  3444  00187C  0E3C               	movlw	60
  3445  00187E  0100               	movlb	0	; () banked
  3446  001880  5DEB               	subwf	editar_hora_reloj_digital@segundo_ingresado& (0+255),w,b
  3447  001882  B0D8               	btfsc	status,0,c
  3448  001884  D008               	goto	l406
  3449  001886                     u5230:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;main.c: 593: segundo=segundo_ingresado;
  3453  001886  C0EB  F092         	movff	editar_hora_reloj_digital@segundo_ingresado,_segundo
  3454  00188A  C0EC  F093         	movff	editar_hora_reloj_digital@segundo_ingresado+1,_segundo+1
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;main.c: 594: numeros_ingresados++;
  3458  00188E  0100               	movlb	0	; () banked
  3459  001890  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  3460  001892  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3461                           
  3462                           ;main.c: 595: }
  3463  001894  D005               	goto	l407
  3464  001896                     l406:
  3465  001896                     l4597:
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;main.c: 596: else{
  3469                           ;main.c: 597: numeros_ingresados = 0;
  3470  001896  0E00               	movlw	0
  3471  001898  0100               	movlb	0	; () banked
  3472  00189A  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3473  00189C  0E00               	movlw	0
  3474  00189E  6F90               	movwf	_numeros_ingresados& (0+255),b
  3475  0018A0                     l407:
  3476                           
  3477                           ; BSR set to: 0
  3478                           
  3479                           ; BSR set to: 0
  3480                           
  3481                           ; BSR set to: 0
  3482                           
  3483                           ; BSR set to: 0
  3484  0018A0  0100               	movlb	0	; () banked
  3485  0018A2  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3486  0018A4  D7D3               	goto	l404
  3487  0018A6  0100               	movlb	0	; () banked
  3488  0018A8  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3489  0018AA  E105               	bnz	l4601
  3490  0018AC  0E03               	movlw	3
  3491  0018AE  0100               	movlb	0	; () banked
  3492  0018B0  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  3493  0018B2  A0D8               	btfss	status,0,c
  3494  0018B4  D7CB               	goto	l404
  3495  0018B6                     l4601:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;main.c: 598: }
  3499                           ;main.c: 599: }
  3500                           ;main.c: 600: }
  3501                           ;main.c: 602: setHoraMinutoSegundo();
  3502  0018B6  EC7E  F018         	call	_setHoraMinutoSegundo	;wreg free
  3503                           
  3504                           ;main.c: 603: posicion++;
  3505  0018BA  0100               	movlb	0	; () banked
  3506  0018BC  4BED               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3507  0018BE  2BEE               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 604: _delay((unsigned long)((50)*(8000000/4000.0)));
  3511  0018C0  0E82               	movlw	130
  3512  0018C2  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3513  0018C4  0EDE               	movlw	222
  3514  0018C6                     u5857:
  3515  0018C6  2EE8               	decfsz	wreg,f,c
  3516  0018C8  D7FE               	bra	u5857
  3517  0018CA  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3518  0018CC  D7FC               	bra	u5857
  3519  0018CE                     l402:
  3520                           
  3521                           ;main.c: 605: }
  3522                           ;main.c: 606: Write_RTC();
  3523  0018CE  EC3E  F00E         	call	_Write_RTC	;wreg free
  3524                           
  3525                           ;main.c: 607: motivo_ingreso_de_numeros = 0;
  3526  0018D2  0E00               	movlw	0
  3527  0018D4  0100               	movlb	0	; () banked
  3528  0018D6  6F8F               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  3529  0018D8  0E00               	movlw	0
  3530  0018DA  6F8E               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;main.c: 608: numeros_ingresados = 0;
  3534  0018DC  0E00               	movlw	0
  3535  0018DE  0100               	movlb	0	; () banked
  3536  0018E0  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3537  0018E2  0E00               	movlw	0
  3538  0018E4  6F90               	movwf	_numeros_ingresados& (0+255),b
  3539                           
  3540                           ; BSR set to: 0
  3541  0018E6  0012               	return		;funcret
  3542  0018E8                     __end_of_editar_hora_reloj_digital:
  3543                           	opt stack 0
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           tblptrl	equ	0xFF6
  3547                           tablat	equ	0xFF5
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postinc1	equ	0xFE6
  3553                           postdec1	equ	0xFE5
  3554                           fsr1h	equ	0xFE2
  3555                           fsr1l	equ	0xFE1
  3556                           postinc2	equ	0xFDE
  3557                           postdec2	equ	0xFDD
  3558                           fsr2h	equ	0xFDA
  3559                           fsr2l	equ	0xFD9
  3560                           status	equ	0xFD8
  3561                           
  3562 ;; *************** function _setHoraMinutoSegundo *****************
  3563 ;; Defined at:
  3564 ;;		line 78 in file "main.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    5
  3585 ;; This function calls:
  3586 ;;		_Write_RTC
  3587 ;;		_lcd_gotoxy
  3588 ;;		_lcd_putrs
  3589 ;;		_sprintf
  3590 ;; This function is called by:
  3591 ;;		_set_reloj_digital
  3592 ;;		_editar_hora_reloj_digital
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text16
  3597  0030FC                     __ptext16:
  3598                           	opt stack 0
  3599  0030FC                     _setHoraMinutoSegundo:
  3600                           	opt stack 23
  3601                           
  3602                           ;main.c: 79: if (hora >= 24) {
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;incstack = 0
  3606  0030FC  0100               	movlb	0	; () banked
  3607  0030FE  BFD4               	btfsc	(_hora+1)& (0+255),7,b
  3608  003100  D019               	goto	l170
  3609  003102  0100               	movlb	0	; () banked
  3610  003104  51D4               	movf	(_hora+1)& (0+255),w,b
  3611  003106  E105               	bnz	u4430
  3612  003108  0E18               	movlw	24
  3613  00310A  0100               	movlb	0	; () banked
  3614  00310C  5DD3               	subwf	_hora& (0+255),w,b
  3615  00310E  A0D8               	btfss	status,0,c
  3616  003110  D011               	goto	l170
  3617  003112                     u4430:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;main.c: 80: hora = 0;
  3621  003112  0E00               	movlw	0
  3622  003114  0100               	movlb	0	; () banked
  3623  003116  6FD4               	movwf	(_hora+1)& (0+255),b
  3624  003118  0E00               	movlw	0
  3625  00311A  6FD3               	movwf	_hora& (0+255),b
  3626                           
  3627                           ;main.c: 81: minuto = 0;
  3628  00311C  0E00               	movlw	0
  3629  00311E  0100               	movlb	0	; () banked
  3630  003120  6FD2               	movwf	(_minuto+1)& (0+255),b
  3631  003122  0E00               	movlw	0
  3632  003124  6FD1               	movwf	_minuto& (0+255),b
  3633                           
  3634                           ;main.c: 82: segundo = 0;
  3635  003126  0E00               	movlw	0
  3636  003128  0100               	movlb	0	; () banked
  3637  00312A  6F93               	movwf	(_segundo+1)& (0+255),b
  3638  00312C  0E00               	movlw	0
  3639  00312E  6F92               	movwf	_segundo& (0+255),b
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;main.c: 83: Write_RTC();
  3643  003130  EC3E  F00E         	call	_Write_RTC	;wreg free
  3644  003134                     l170:
  3645                           
  3646                           ;main.c: 84: }
  3647                           ;main.c: 86: sprintf(buffer2, "%02u:%02u:%02u", hora, minuto, segundo);
  3648  003134  0EA1               	movlw	low _buffer2
  3649  003136  6E22               	movwf	sprintf@sp,c
  3650  003138  0E00               	movlw	high _buffer2
  3651  00313A  6E23               	movwf	sprintf@sp+1,c
  3652  00313C  0E9F               	movlw	low STR_8
  3653  00313E  6E24               	movwf	sprintf@f,c
  3654  003140  0E0F               	movlw	high STR_8
  3655  003142  6E25               	movwf	sprintf@f+1,c
  3656  003144  C0D3  F026         	movff	_hora,?_sprintf+4
  3657  003148  C0D4  F027         	movff	_hora+1,?_sprintf+5
  3658  00314C  C0D1  F028         	movff	_minuto,?_sprintf+6
  3659  003150  C0D2  F029         	movff	_minuto+1,?_sprintf+7
  3660  003154  C092  F02A         	movff	_segundo,?_sprintf+8
  3661  003158  C093  F02B         	movff	_segundo+1,?_sprintf+9
  3662  00315C  EC4E  F00A         	call	_sprintf	;wreg free
  3663                           
  3664                           ;main.c: 87: lcd_gotoxy(9, 2);
  3665  003160  0E02               	movlw	2
  3666  003162  6E05               	movwf	lcd_gotoxy@y,c
  3667  003164  0E09               	movlw	9
  3668  003166  EC40  F01C         	call	_lcd_gotoxy
  3669                           
  3670                           ;main.c: 88: lcd_putrs(buffer2);
  3671  00316A  0EA1               	movlw	low _buffer2
  3672  00316C  6E09               	movwf	lcd_putrs@ptr,c
  3673  00316E  0E00               	movlw	high _buffer2
  3674  003170  6E0A               	movwf	lcd_putrs@ptr+1,c
  3675  003172  EC70  F01A         	call	_lcd_putrs	;wreg free
  3676  003176  0012               	return		;funcret
  3677  003178                     __end_of_setHoraMinutoSegundo:
  3678                           	opt stack 0
  3679                           tblptru	equ	0xFF8
  3680                           tblptrh	equ	0xFF7
  3681                           tblptrl	equ	0xFF6
  3682                           tablat	equ	0xFF5
  3683                           prodh	equ	0xFF4
  3684                           prodl	equ	0xFF3
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           postinc1	equ	0xFE6
  3688                           postdec1	equ	0xFE5
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _editar_fecha_reloj_digital *****************
  3698 ;; Defined at:
  3699 ;;		line 457 in file "main.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  anio_ingresa    2   14[BANK0 ] int 
  3704 ;;  mes_ingresad    2   12[BANK0 ] int 
  3705 ;;  dia_ingresad    2   10[BANK0 ] int 
  3706 ;;  posicion        2   16[BANK0 ] int 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3717 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3719 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3720 ;;Total ram usage:        9 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    7
  3723 ;; This function calls:
  3724 ;;		_Write_RTC
  3725 ;;		_covertir_valores_de_array_a_escala_decimal
  3726 ;;		_ingreso_numero
  3727 ;;		_setDiaMesAnio
  3728 ;; This function is called by:
  3729 ;;		_seleccionar_opcion
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text17
  3734  001264                     __ptext17:
  3735                           	opt stack 0
  3736  001264                     _editar_fecha_reloj_digital:
  3737                           	opt stack 18
  3738                           
  3739                           ;main.c: 458: int posicion = 0;
  3740                           
  3741                           ;incstack = 0
  3742  001264  0E00               	movlw	0
  3743  001266  0100               	movlb	0	; () banked
  3744  001268  6FEE               	movwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),b
  3745  00126A  0E00               	movlw	0
  3746  00126C  6FED               	movwf	editar_fecha_reloj_digital@posicion& (0+255),b
  3747                           
  3748                           ;main.c: 460: motivo_ingreso_de_numeros = 1;
  3749  00126E  0E00               	movlw	0
  3750  001270  0100               	movlb	0	; () banked
  3751  001272  6F8F               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  3752  001274  0E01               	movlw	1
  3753  001276  6F8E               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;main.c: 463: if (posicion == 0) {
  3757  001278  0100               	movlb	0	; () banked
  3758  00127A  51ED               	movf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  3759  00127C  0100               	movlb	0	; () banked
  3760  00127E  11EE               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  3761  001280  A4D8               	btfss	status,2,c
  3762  001282  D053               	goto	l364
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 464: numeros_ingresados = 0;
  3766  001284  0E00               	movlw	0
  3767  001286  0100               	movlb	0	; () banked
  3768  001288  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3769  00128A  0E00               	movlw	0
  3770  00128C  6F90               	movwf	_numeros_ingresados& (0+255),b
  3771                           
  3772                           ;main.c: 465: int dia_ingresado = 0;
  3773  00128E  0E00               	movlw	0
  3774  001290  0100               	movlb	0	; () banked
  3775  001292  6FE8               	movwf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),b
  3776  001294  0E00               	movlw	0
  3777  001296  6FE7               	movwf	editar_fecha_reloj_digital@dia_ingresado& (0+255),b
  3778                           
  3779                           ;main.c: 466: while (numeros_ingresados < 3) {
  3780  001298  D031               	goto	l369
  3781  00129A                     
  3782                           ; BSR set to: 0
  3783                           ;main.c: 468: ingreso_numero();
  3784                           
  3785                           ; BSR set to: 0
  3786  00129A  ECFE  F007         	call	_ingreso_numero	;wreg free
  3787                           
  3788                           ;main.c: 470: if (numeros_ingresados == 2) {
  3789  00129E  0E02               	movlw	2
  3790  0012A0  0100               	movlb	0	; () banked
  3791  0012A2  1990               	xorwf	_numeros_ingresados& (0+255),w,b
  3792  0012A4  0100               	movlb	0	; () banked
  3793  0012A6  1191               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3794  0012A8  A4D8               	btfss	status,2,c
  3795  0012AA  D028               	goto	l369
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;main.c: 471: dia_ingresado = covertir_valores_de_array_a_escala_decimal();
  3799  0012AC  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3800  0012B0  C05B  F0E7         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@dia_ingre
      +                          sado
  3801  0012B4  C05C  F0E8         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@dia_ing
      +                          resado+1
  3802                           
  3803                           ;main.c: 472: if ((0 < dia_ingresado) && (dia_ingresado <= 31)) {
  3804  0012B8  0100               	movlb	0	; () banked
  3805  0012BA  BFE8               	btfsc	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),7,b
  3806  0012BC  D01A               	goto	l368
  3807  0012BE  0100               	movlb	0	; () banked
  3808  0012C0  51E8               	movf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),w,b
  3809  0012C2  E104               	bnz	u4970
  3810  0012C4  0100               	movlb	0	; () banked
  3811  0012C6  05E7               	decf	editar_fecha_reloj_digital@dia_ingresado& (0+255),w,b
  3812  0012C8  A0D8               	btfss	status,0,c
  3813  0012CA  D013               	goto	l368
  3814  0012CC                     u4970:
  3815                           
  3816                           ; BSR set to: 0
  3817  0012CC  0100               	movlb	0	; () banked
  3818  0012CE  BFE8               	btfsc	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),7,b
  3819  0012D0  D008               	goto	u4980
  3820  0012D2  0100               	movlb	0	; () banked
  3821  0012D4  51E8               	movf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),w,b
  3822  0012D6  E10D               	bnz	l4449
  3823  0012D8  0E20               	movlw	32
  3824  0012DA  0100               	movlb	0	; () banked
  3825  0012DC  5DE7               	subwf	editar_fecha_reloj_digital@dia_ingresado& (0+255),w,b
  3826  0012DE  B0D8               	btfsc	status,0,c
  3827  0012E0  D008               	goto	l368
  3828  0012E2                     u4980:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;main.c: 473: dia = dia_ingresado;
  3832  0012E2  C0E7  F0D5         	movff	editar_fecha_reloj_digital@dia_ingresado,_dia
  3833  0012E6  C0E8  F0D6         	movff	editar_fecha_reloj_digital@dia_ingresado+1,_dia+1
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;main.c: 474: numeros_ingresados++;
  3837  0012EA  0100               	movlb	0	; () banked
  3838  0012EC  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  3839  0012EE  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3840                           
  3841                           ;main.c: 475: } else {
  3842  0012F0  D005               	goto	l369
  3843  0012F2                     l368:
  3844  0012F2                     l4449:
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;main.c: 476: numeros_ingresados = 0;
  3848  0012F2  0E00               	movlw	0
  3849  0012F4  0100               	movlb	0	; () banked
  3850  0012F6  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3851  0012F8  0E00               	movlw	0
  3852  0012FA  6F90               	movwf	_numeros_ingresados& (0+255),b
  3853  0012FC                     l369:
  3854                           
  3855                           ; BSR set to: 0
  3856                           
  3857                           ; BSR set to: 0
  3858                           
  3859                           ; BSR set to: 0
  3860                           
  3861                           ; BSR set to: 0
  3862  0012FC  0100               	movlb	0	; () banked
  3863  0012FE  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3864  001300  D7CC               	goto	l366
  3865  001302  0100               	movlb	0	; () banked
  3866  001304  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3867  001306  E105               	bnz	l4453
  3868  001308  0E03               	movlw	3
  3869  00130A  0100               	movlb	0	; () banked
  3870  00130C  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  3871  00130E  A0D8               	btfss	status,0,c
  3872  001310  D7C4               	goto	l366
  3873  001312                     l4453:
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;main.c: 477: }
  3877                           ;main.c: 478: }
  3878                           ;main.c: 479: }
  3879                           ;main.c: 481: setDiaMesAnio();
  3880  001312  ECB0  F017         	call	_setDiaMesAnio	;wreg free
  3881                           
  3882                           ;main.c: 482: posicion++;
  3883  001316  0100               	movlb	0	; () banked
  3884  001318  4BED               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  3885  00131A  2BEE               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 483: _delay((unsigned long)((50)*(8000000/4000.0)));
  3889  00131C  0E82               	movlw	130
  3890  00131E  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  3891  001320  0EDE               	movlw	222
  3892  001322                     u5867:
  3893  001322  2EE8               	decfsz	wreg,f,c
  3894  001324  D7FE               	bra	u5867
  3895  001326  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  3896  001328  D7FC               	bra	u5867
  3897  00132A                     l364:
  3898                           
  3899                           ;main.c: 484: }
  3900                           ;main.c: 487: if (posicion == 1) {
  3901  00132A  0100               	movlb	0	; () banked
  3902  00132C  05ED               	decf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  3903  00132E  0100               	movlb	0	; () banked
  3904  001330  11EE               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  3905  001332  A4D8               	btfss	status,2,c
  3906  001334  D053               	goto	l371
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;main.c: 488: numeros_ingresados = 0;
  3910  001336  0E00               	movlw	0
  3911  001338  0100               	movlb	0	; () banked
  3912  00133A  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3913  00133C  0E00               	movlw	0
  3914  00133E  6F90               	movwf	_numeros_ingresados& (0+255),b
  3915                           
  3916                           ;main.c: 489: int mes_ingresado = 0;
  3917  001340  0E00               	movlw	0
  3918  001342  0100               	movlb	0	; () banked
  3919  001344  6FEA               	movwf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),b
  3920  001346  0E00               	movlw	0
  3921  001348  6FE9               	movwf	editar_fecha_reloj_digital@mes_ingresado& (0+255),b
  3922                           
  3923                           ;main.c: 490: while (numeros_ingresados < 3) {
  3924  00134A  D031               	goto	l376
  3925  00134C                     
  3926                           ; BSR set to: 0
  3927                           ;main.c: 491: ingreso_numero();
  3928                           
  3929                           ; BSR set to: 0
  3930  00134C  ECFE  F007         	call	_ingreso_numero	;wreg free
  3931                           
  3932                           ;main.c: 492: if (numeros_ingresados == 2) {
  3933  001350  0E02               	movlw	2
  3934  001352  0100               	movlb	0	; () banked
  3935  001354  1990               	xorwf	_numeros_ingresados& (0+255),w,b
  3936  001356  0100               	movlb	0	; () banked
  3937  001358  1191               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3938  00135A  A4D8               	btfss	status,2,c
  3939  00135C  D028               	goto	l376
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;main.c: 493: mes_ingresado = covertir_valores_de_array_a_escala_decimal();
  3943  00135E  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3944  001362  C05B  F0E9         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@mes_ingre
      +                          sado
  3945  001366  C05C  F0EA         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@mes_ing
      +                          resado+1
  3946                           
  3947                           ;main.c: 494: if ((0 < mes_ingresado) && (mes_ingresado <= 12)) {
  3948  00136A  0100               	movlb	0	; () banked
  3949  00136C  BFEA               	btfsc	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),7,b
  3950  00136E  D01A               	goto	l375
  3951  001370  0100               	movlb	0	; () banked
  3952  001372  51EA               	movf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),w,b
  3953  001374  E104               	bnz	u5020
  3954  001376  0100               	movlb	0	; () banked
  3955  001378  05E9               	decf	editar_fecha_reloj_digital@mes_ingresado& (0+255),w,b
  3956  00137A  A0D8               	btfss	status,0,c
  3957  00137C  D013               	goto	l375
  3958  00137E                     u5020:
  3959                           
  3960                           ; BSR set to: 0
  3961  00137E  0100               	movlb	0	; () banked
  3962  001380  BFEA               	btfsc	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),7,b
  3963  001382  D008               	goto	u5030
  3964  001384  0100               	movlb	0	; () banked
  3965  001386  51EA               	movf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),w,b
  3966  001388  E10D               	bnz	l4477
  3967  00138A  0E0D               	movlw	13
  3968  00138C  0100               	movlb	0	; () banked
  3969  00138E  5DE9               	subwf	editar_fecha_reloj_digital@mes_ingresado& (0+255),w,b
  3970  001390  B0D8               	btfsc	status,0,c
  3971  001392  D008               	goto	l375
  3972  001394                     u5030:
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;main.c: 495: mes = mes_ingresado;
  3976  001394  C0E9  F0D9         	movff	editar_fecha_reloj_digital@mes_ingresado,_mes
  3977  001398  C0EA  F0DA         	movff	editar_fecha_reloj_digital@mes_ingresado+1,_mes+1
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;main.c: 496: numeros_ingresados++;
  3981  00139C  0100               	movlb	0	; () banked
  3982  00139E  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  3983  0013A0  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3984                           
  3985                           ;main.c: 497: } else {
  3986  0013A2  D005               	goto	l376
  3987  0013A4                     l375:
  3988  0013A4                     l4477:
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;main.c: 498: numeros_ingresados = 0;
  3992  0013A4  0E00               	movlw	0
  3993  0013A6  0100               	movlb	0	; () banked
  3994  0013A8  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  3995  0013AA  0E00               	movlw	0
  3996  0013AC  6F90               	movwf	_numeros_ingresados& (0+255),b
  3997  0013AE                     l376:
  3998                           
  3999                           ; BSR set to: 0
  4000                           
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004                           
  4005                           ; BSR set to: 0
  4006  0013AE  0100               	movlb	0	; () banked
  4007  0013B0  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  4008  0013B2  D7CC               	goto	l373
  4009  0013B4  0100               	movlb	0	; () banked
  4010  0013B6  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  4011  0013B8  E105               	bnz	l4481
  4012  0013BA  0E03               	movlw	3
  4013  0013BC  0100               	movlb	0	; () banked
  4014  0013BE  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  4015  0013C0  A0D8               	btfss	status,0,c
  4016  0013C2  D7C4               	goto	l373
  4017  0013C4                     l4481:
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;main.c: 499: }
  4021                           ;main.c: 500: }
  4022                           ;main.c: 501: }
  4023                           ;main.c: 503: setDiaMesAnio();
  4024  0013C4  ECB0  F017         	call	_setDiaMesAnio	;wreg free
  4025                           
  4026                           ;main.c: 504: posicion++;
  4027  0013C8  0100               	movlb	0	; () banked
  4028  0013CA  4BED               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  4029  0013CC  2BEE               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;main.c: 505: _delay((unsigned long)((50)*(8000000/4000.0)));
  4033  0013CE  0E82               	movlw	130
  4034  0013D0  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  4035  0013D2  0EDE               	movlw	222
  4036  0013D4                     u5877:
  4037  0013D4  2EE8               	decfsz	wreg,f,c
  4038  0013D6  D7FE               	bra	u5877
  4039  0013D8  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  4040  0013DA  D7FC               	bra	u5877
  4041  0013DC                     l371:
  4042                           
  4043                           ;main.c: 506: }
  4044                           ;main.c: 509: if (posicion == 2) {
  4045  0013DC  0E02               	movlw	2
  4046  0013DE  0100               	movlb	0	; () banked
  4047  0013E0  19ED               	xorwf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  4048  0013E2  0100               	movlb	0	; () banked
  4049  0013E4  11EE               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  4050  0013E6  A4D8               	btfss	status,2,c
  4051  0013E8  D04C               	goto	l378
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;main.c: 510: numeros_ingresados = 0;
  4055  0013EA  0E00               	movlw	0
  4056  0013EC  0100               	movlb	0	; () banked
  4057  0013EE  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  4058  0013F0  0E00               	movlw	0
  4059  0013F2  6F90               	movwf	_numeros_ingresados& (0+255),b
  4060                           
  4061                           ;main.c: 511: int anio_ingresado = 0;
  4062  0013F4  0E00               	movlw	0
  4063  0013F6  0100               	movlb	0	; () banked
  4064  0013F8  6FEC               	movwf	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),b
  4065  0013FA  0E00               	movlw	0
  4066  0013FC  6FEB               	movwf	editar_fecha_reloj_digital@anio_ingresado& (0+255),b
  4067                           
  4068                           ;main.c: 512: while (numeros_ingresados < 3) {
  4069  0013FE  D02A               	goto	l383
  4070  001400                     
  4071                           ; BSR set to: 0
  4072                           ;main.c: 513: ingreso_numero();
  4073                           
  4074                           ; BSR set to: 0
  4075  001400  ECFE  F007         	call	_ingreso_numero	;wreg free
  4076                           
  4077                           ;main.c: 514: if (numeros_ingresados == 2) {
  4078  001404  0E02               	movlw	2
  4079  001406  0100               	movlb	0	; () banked
  4080  001408  1990               	xorwf	_numeros_ingresados& (0+255),w,b
  4081  00140A  0100               	movlb	0	; () banked
  4082  00140C  1191               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  4083  00140E  A4D8               	btfss	status,2,c
  4084  001410  D021               	goto	l383
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;main.c: 515: anio_ingresado = covertir_valores_de_array_a_escala_decimal();
  4088  001412  EC94  F011         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  4089  001416  C05B  F0EB         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@anio_ingr
      +                          esado
  4090  00141A  C05C  F0EC         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@anio_in
      +                          gresado+1
  4091                           
  4092                           ;main.c: 516: if ((0 <= anio_ingresado) && (anio_ingresado <= 99)) {
  4093  00141E  0100               	movlb	0	; () banked
  4094  001420  BFEC               	btfsc	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),7,b
  4095  001422  D013               	goto	l382
  4096                           
  4097                           ; BSR set to: 0
  4098  001424  0100               	movlb	0	; () banked
  4099  001426  BFEC               	btfsc	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),7,b
  4100  001428  D008               	goto	u5080
  4101  00142A  0100               	movlb	0	; () banked
  4102  00142C  51EC               	movf	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),w,b
  4103  00142E  E10D               	bnz	l4505
  4104  001430  0E64               	movlw	100
  4105  001432  0100               	movlb	0	; () banked
  4106  001434  5DEB               	subwf	editar_fecha_reloj_digital@anio_ingresado& (0+255),w,b
  4107  001436  B0D8               	btfsc	status,0,c
  4108  001438  D008               	goto	l382
  4109  00143A                     u5080:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;main.c: 517: anio = anio_ingresado;
  4113  00143A  C0EB  F0DB         	movff	editar_fecha_reloj_digital@anio_ingresado,_anio
  4114  00143E  C0EC  F0DC         	movff	editar_fecha_reloj_digital@anio_ingresado+1,_anio+1
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;main.c: 518: numeros_ingresados++;
  4118  001442  0100               	movlb	0	; () banked
  4119  001444  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  4120  001446  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  4121                           
  4122                           ;main.c: 519: } else {
  4123  001448  D005               	goto	l383
  4124  00144A                     l382:
  4125  00144A                     l4505:
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;main.c: 520: numeros_ingresados = 0;
  4129  00144A  0E00               	movlw	0
  4130  00144C  0100               	movlb	0	; () banked
  4131  00144E  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  4132  001450  0E00               	movlw	0
  4133  001452  6F90               	movwf	_numeros_ingresados& (0+255),b
  4134  001454                     l383:
  4135                           
  4136                           ; BSR set to: 0
  4137                           
  4138                           ; BSR set to: 0
  4139                           
  4140                           ; BSR set to: 0
  4141                           
  4142                           ; BSR set to: 0
  4143  001454  0100               	movlb	0	; () banked
  4144  001456  BF91               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  4145  001458  D7D3               	goto	l380
  4146  00145A  0100               	movlb	0	; () banked
  4147  00145C  5191               	movf	(_numeros_ingresados+1)& (0+255),w,b
  4148  00145E  E105               	bnz	l4509
  4149  001460  0E03               	movlw	3
  4150  001462  0100               	movlb	0	; () banked
  4151  001464  5D90               	subwf	_numeros_ingresados& (0+255),w,b
  4152  001466  A0D8               	btfss	status,0,c
  4153  001468  D7CB               	goto	l380
  4154  00146A                     l4509:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;main.c: 521: }
  4158                           ;main.c: 522: }
  4159                           ;main.c: 523: }
  4160                           ;main.c: 525: setDiaMesAnio();
  4161  00146A  ECB0  F017         	call	_setDiaMesAnio	;wreg free
  4162                           
  4163                           ;main.c: 526: posicion++;
  4164  00146E  0100               	movlb	0	; () banked
  4165  001470  4BED               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  4166  001472  2BEE               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;main.c: 527: _delay((unsigned long)((50)*(8000000/4000.0)));
  4170  001474  0E82               	movlw	130
  4171  001476  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  4172  001478  0EDE               	movlw	222
  4173  00147A                     u5887:
  4174  00147A  2EE8               	decfsz	wreg,f,c
  4175  00147C  D7FE               	bra	u5887
  4176  00147E  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  4177  001480  D7FC               	bra	u5887
  4178  001482                     l378:
  4179                           
  4180                           ;main.c: 528: }
  4181                           ;main.c: 529: Write_RTC();
  4182  001482  EC3E  F00E         	call	_Write_RTC	;wreg free
  4183                           
  4184                           ;main.c: 530: motivo_ingreso_de_numeros = 0;
  4185  001486  0E00               	movlw	0
  4186  001488  0100               	movlb	0	; () banked
  4187  00148A  6F8F               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  4188  00148C  0E00               	movlw	0
  4189  00148E  6F8E               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;main.c: 531: numeros_ingresados = 0;
  4193  001490  0E00               	movlw	0
  4194  001492  0100               	movlb	0	; () banked
  4195  001494  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  4196  001496  0E00               	movlw	0
  4197  001498  6F90               	movwf	_numeros_ingresados& (0+255),b
  4198                           
  4199                           ; BSR set to: 0
  4200  00149A  0012               	return		;funcret
  4201  00149C                     __end_of_editar_fecha_reloj_digital:
  4202                           	opt stack 0
  4203                           tblptru	equ	0xFF8
  4204                           tblptrh	equ	0xFF7
  4205                           tblptrl	equ	0xFF6
  4206                           tablat	equ	0xFF5
  4207                           prodh	equ	0xFF4
  4208                           prodl	equ	0xFF3
  4209                           postinc0	equ	0xFEE
  4210                           wreg	equ	0xFE8
  4211                           postinc1	equ	0xFE6
  4212                           postdec1	equ	0xFE5
  4213                           fsr1h	equ	0xFE2
  4214                           fsr1l	equ	0xFE1
  4215                           postinc2	equ	0xFDE
  4216                           postdec2	equ	0xFDD
  4217                           fsr2h	equ	0xFDA
  4218                           fsr2l	equ	0xFD9
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function _setDiaMesAnio *****************
  4222 ;; Defined at:
  4223 ;;		line 62 in file "main.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;		None
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;		None
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4241 ;;Total ram usage:        0 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    5
  4244 ;; This function calls:
  4245 ;;		_Write_RTC
  4246 ;;		_lcd_gotoxy
  4247 ;;		_lcd_putrs
  4248 ;;		_sprintf
  4249 ;; This function is called by:
  4250 ;;		_set_reloj_digital
  4251 ;;		_editar_fecha_reloj_digital
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text18
  4256  002F60                     __ptext18:
  4257                           	opt stack 0
  4258  002F60                     _setDiaMesAnio:
  4259                           	opt stack 23
  4260                           
  4261                           ;main.c: 63: if (dia > 31) {
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;incstack = 0
  4265  002F60  0100               	movlb	0	; () banked
  4266  002F62  BFD6               	btfsc	(_dia+1)& (0+255),7,b
  4267  002F64  D00F               	goto	l165
  4268  002F66  0100               	movlb	0	; () banked
  4269  002F68  51D6               	movf	(_dia+1)& (0+255),w,b
  4270  002F6A  E105               	bnz	u4410
  4271  002F6C  0E20               	movlw	32
  4272  002F6E  0100               	movlb	0	; () banked
  4273  002F70  5DD5               	subwf	_dia& (0+255),w,b
  4274  002F72  A0D8               	btfss	status,0,c
  4275  002F74  D007               	goto	l165
  4276  002F76                     u4410:
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;main.c: 64: dia = 1;
  4280  002F76  0E00               	movlw	0
  4281  002F78  0100               	movlb	0	; () banked
  4282  002F7A  6FD6               	movwf	(_dia+1)& (0+255),b
  4283  002F7C  0E01               	movlw	1
  4284  002F7E  6FD5               	movwf	_dia& (0+255),b
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;main.c: 65: Write_RTC();
  4288  002F80  EC3E  F00E         	call	_Write_RTC	;wreg free
  4289  002F84                     l165:
  4290                           
  4291                           ;main.c: 66: }
  4292                           ;main.c: 68: if (mes > 12) {
  4293  002F84  0100               	movlb	0	; () banked
  4294  002F86  BFDA               	btfsc	(_mes+1)& (0+255),7,b
  4295  002F88  D00F               	goto	l166
  4296  002F8A  0100               	movlb	0	; () banked
  4297  002F8C  51DA               	movf	(_mes+1)& (0+255),w,b
  4298  002F8E  E105               	bnz	u4420
  4299  002F90  0E0D               	movlw	13
  4300  002F92  0100               	movlb	0	; () banked
  4301  002F94  5DD9               	subwf	_mes& (0+255),w,b
  4302  002F96  A0D8               	btfss	status,0,c
  4303  002F98  D007               	goto	l166
  4304  002F9A                     u4420:
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;main.c: 69: mes = 1;
  4308  002F9A  0E00               	movlw	0
  4309  002F9C  0100               	movlb	0	; () banked
  4310  002F9E  6FDA               	movwf	(_mes+1)& (0+255),b
  4311  002FA0  0E01               	movlw	1
  4312  002FA2  6FD9               	movwf	_mes& (0+255),b
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;main.c: 70: Write_RTC();
  4316  002FA4  EC3E  F00E         	call	_Write_RTC	;wreg free
  4317  002FA8                     l166:
  4318                           
  4319                           ;main.c: 71: }
  4320                           ;main.c: 73: sprintf(buffer2, "%02u/%02u/%02u", dia, mes, anio);
  4321  002FA8  0EA1               	movlw	low _buffer2
  4322  002FAA  6E22               	movwf	sprintf@sp,c
  4323  002FAC  0E00               	movlw	high _buffer2
  4324  002FAE  6E23               	movwf	sprintf@sp+1,c
  4325  002FB0  0E90               	movlw	low STR_7
  4326  002FB2  6E24               	movwf	sprintf@f,c
  4327  002FB4  0E0F               	movlw	high STR_7
  4328  002FB6  6E25               	movwf	sprintf@f+1,c
  4329  002FB8  C0D5  F026         	movff	_dia,?_sprintf+4
  4330  002FBC  C0D6  F027         	movff	_dia+1,?_sprintf+5
  4331  002FC0  C0D9  F028         	movff	_mes,?_sprintf+6
  4332  002FC4  C0DA  F029         	movff	_mes+1,?_sprintf+7
  4333  002FC8  C0DB  F02A         	movff	_anio,?_sprintf+8
  4334  002FCC  C0DC  F02B         	movff	_anio+1,?_sprintf+9
  4335  002FD0  EC4E  F00A         	call	_sprintf	;wreg free
  4336                           
  4337                           ;main.c: 74: lcd_gotoxy(9, 1);
  4338  002FD4  0E01               	movlw	1
  4339  002FD6  6E05               	movwf	lcd_gotoxy@y,c
  4340  002FD8  0E09               	movlw	9
  4341  002FDA  EC40  F01C         	call	_lcd_gotoxy
  4342                           
  4343                           ;main.c: 75: lcd_putrs(buffer2);
  4344  002FDE  0EA1               	movlw	low _buffer2
  4345  002FE0  6E09               	movwf	lcd_putrs@ptr,c
  4346  002FE2  0E00               	movlw	high _buffer2
  4347  002FE4  6E0A               	movwf	lcd_putrs@ptr+1,c
  4348  002FE6  EC70  F01A         	call	_lcd_putrs	;wreg free
  4349  002FEA  0012               	return		;funcret
  4350  002FEC                     __end_of_setDiaMesAnio:
  4351                           	opt stack 0
  4352                           tblptru	equ	0xFF8
  4353                           tblptrh	equ	0xFF7
  4354                           tblptrl	equ	0xFF6
  4355                           tablat	equ	0xFF5
  4356                           prodh	equ	0xFF4
  4357                           prodl	equ	0xFF3
  4358                           postinc0	equ	0xFEE
  4359                           wreg	equ	0xFE8
  4360                           postinc1	equ	0xFE6
  4361                           postdec1	equ	0xFE5
  4362                           fsr1h	equ	0xFE2
  4363                           fsr1l	equ	0xFE1
  4364                           postinc2	equ	0xFDE
  4365                           postdec2	equ	0xFDD
  4366                           fsr2h	equ	0xFDA
  4367                           fsr2l	equ	0xFD9
  4368                           status	equ	0xFD8
  4369                           
  4370 ;; *************** function _Write_RTC *****************
  4371 ;; Defined at:
  4372 ;;		line 74 in file "../../headers\unmc_rtcc_01.h"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;		None
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      void 
  4379 ;; Registers used:
  4380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4390 ;;Total ram usage:        0 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    2
  4393 ;; This function calls:
  4394 ;;		_RtccWrOn
  4395 ;;		_RtccWriteDate
  4396 ;;		_RtccWriteTime
  4397 ;;		___awdiv
  4398 ;; This function is called by:
  4399 ;;		_setDiaMesAnio
  4400 ;;		_setHoraMinutoSegundo
  4401 ;;		_editar_fecha_reloj_digital
  4402 ;;		_editar_hora_reloj_digital
  4403 ;;		_setup
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text19
  4408  001C7C                     __ptext19:
  4409                           	opt stack 0
  4410  001C7C                     _Write_RTC:
  4411                           	opt stack 25
  4412                           
  4413                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  4414                           
  4415                           ;incstack = 0
  4416  001C7C  EC7C  F01C         	call	_RtccWrOn	;wreg free
  4417                           
  4418                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  4419  001C80  80A3               	bsf	4003,0,c	;volatile
  4420                           
  4421                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  4422  001C82  C092  F001         	movff	_segundo,___awdiv@dividend
  4423  001C86  C093  F002         	movff	_segundo+1,___awdiv@dividend+1
  4424  001C8A  0E00               	movlw	0
  4425  001C8C  6E04               	movwf	___awdiv@divisor+1,c
  4426  001C8E  0E0A               	movlw	10
  4427  001C90  6E03               	movwf	___awdiv@divisor,c
  4428  001C92  EC3C  F018         	call	___awdiv	;wreg free
  4429  001C96  5001               	movf	?___awdiv,w,c
  4430  001C98  0100               	movlb	0	; () banked
  4431  001C9A  6FFB               	movwf	_segundo_d& (0+255),b
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  4435  001C9C  0100               	movlb	0	; () banked
  4436  001C9E  51FB               	movf	_segundo_d& (0+255),w,b
  4437  001CA0  0D0A               	mullw	10
  4438  001CA2  50F3               	movf	prodl,w,c
  4439  001CA4  0800               	sublw	0
  4440  001CA6  0100               	movlb	0	; () banked
  4441  001CA8  2592               	addwf	_segundo& (0+255),w,b
  4442  001CAA  0100               	movlb	0	; () banked
  4443  001CAC  6FFC               	movwf	_segundo_u& (0+255),b
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  4447  001CAE  0100               	movlb	0	; () banked
  4448  001CB0  51FB               	movf	_segundo_d& (0+255),w,b
  4449  001CB2  0D10               	mullw	16
  4450  001CB4  50F3               	movf	prodl,w,c
  4451  001CB6  0100               	movlb	0	; () banked
  4452  001CB8  25FC               	addwf	_segundo_u& (0+255),w,b
  4453  001CBA  0100               	movlb	0	; () banked
  4454  001CBC  6FBA               	movwf	(_RtccTime+1)& (0+255),b
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  4458  001CBE  C0D1  F001         	movff	_minuto,___awdiv@dividend
  4459  001CC2  C0D2  F002         	movff	_minuto+1,___awdiv@dividend+1
  4460  001CC6  0E00               	movlw	0
  4461  001CC8  6E04               	movwf	___awdiv@divisor+1,c
  4462  001CCA  0E0A               	movlw	10
  4463  001CCC  6E03               	movwf	___awdiv@divisor,c
  4464  001CCE  EC3C  F018         	call	___awdiv	;wreg free
  4465  001CD2  5001               	movf	?___awdiv,w,c
  4466  001CD4  0100               	movlb	0	; () banked
  4467  001CD6  6FF9               	movwf	_minuto_d& (0+255),b
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  4471  001CD8  0100               	movlb	0	; () banked
  4472  001CDA  51F9               	movf	_minuto_d& (0+255),w,b
  4473  001CDC  0D0A               	mullw	10
  4474  001CDE  50F3               	movf	prodl,w,c
  4475  001CE0  0800               	sublw	0
  4476  001CE2  0100               	movlb	0	; () banked
  4477  001CE4  25D1               	addwf	_minuto& (0+255),w,b
  4478  001CE6  0100               	movlb	0	; () banked
  4479  001CE8  6FFA               	movwf	_minuto_u& (0+255),b
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  4483  001CEA  0100               	movlb	0	; () banked
  4484  001CEC  51F9               	movf	_minuto_d& (0+255),w,b
  4485  001CEE  0D10               	mullw	16
  4486  001CF0  50F3               	movf	prodl,w,c
  4487  001CF2  0100               	movlb	0	; () banked
  4488  001CF4  25FA               	addwf	_minuto_u& (0+255),w,b
  4489  001CF6  0100               	movlb	0	; () banked
  4490  001CF8  6FBB               	movwf	(_RtccTime+2)& (0+255),b
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  4494  001CFA  C0D3  F001         	movff	_hora,___awdiv@dividend
  4495  001CFE  C0D4  F002         	movff	_hora+1,___awdiv@dividend+1
  4496  001D02  0E00               	movlw	0
  4497  001D04  6E04               	movwf	___awdiv@divisor+1,c
  4498  001D06  0E0A               	movlw	10
  4499  001D08  6E03               	movwf	___awdiv@divisor,c
  4500  001D0A  EC3C  F018         	call	___awdiv	;wreg free
  4501  001D0E  5001               	movf	?___awdiv,w,c
  4502  001D10  0100               	movlb	0	; () banked
  4503  001D12  6FF7               	movwf	_hora_d& (0+255),b
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  4507  001D14  0100               	movlb	0	; () banked
  4508  001D16  51F7               	movf	_hora_d& (0+255),w,b
  4509  001D18  0D0A               	mullw	10
  4510  001D1A  50F3               	movf	prodl,w,c
  4511  001D1C  0800               	sublw	0
  4512  001D1E  0100               	movlb	0	; () banked
  4513  001D20  25D3               	addwf	_hora& (0+255),w,b
  4514  001D22  0100               	movlb	0	; () banked
  4515  001D24  6FF8               	movwf	_hora_u& (0+255),b
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  4519  001D26  0100               	movlb	0	; () banked
  4520  001D28  51F7               	movf	_hora_d& (0+255),w,b
  4521  001D2A  0D10               	mullw	16
  4522  001D2C  50F3               	movf	prodl,w,c
  4523  001D2E  0100               	movlb	0	; () banked
  4524  001D30  25F8               	addwf	_hora_u& (0+255),w,b
  4525  001D32  0100               	movlb	0	; () banked
  4526  001D34  6FBC               	movwf	(_RtccTime+3)& (0+255),b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  4530  001D36  C0DB  F001         	movff	_anio,___awdiv@dividend
  4531  001D3A  C0DC  F002         	movff	_anio+1,___awdiv@dividend+1
  4532  001D3E  0E00               	movlw	0
  4533  001D40  6E04               	movwf	___awdiv@divisor+1,c
  4534  001D42  0E0A               	movlw	10
  4535  001D44  6E03               	movwf	___awdiv@divisor,c
  4536  001D46  EC3C  F018         	call	___awdiv	;wreg free
  4537  001D4A  5001               	movf	?___awdiv,w,c
  4538  001D4C  0100               	movlb	0	; () banked
  4539  001D4E  6FF0               	movwf	_anio_d& (0+255),b
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  4543  001D50  0100               	movlb	0	; () banked
  4544  001D52  51F0               	movf	_anio_d& (0+255),w,b
  4545  001D54  0D0A               	mullw	10
  4546  001D56  50F3               	movf	prodl,w,c
  4547  001D58  0800               	sublw	0
  4548  001D5A  0100               	movlb	0	; () banked
  4549  001D5C  25DB               	addwf	_anio& (0+255),w,b
  4550  001D5E  0100               	movlb	0	; () banked
  4551  001D60  6FF1               	movwf	_anio_u& (0+255),b
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  4555  001D62  0100               	movlb	0	; () banked
  4556  001D64  51F0               	movf	_anio_d& (0+255),w,b
  4557  001D66  0D10               	mullw	16
  4558  001D68  50F3               	movf	prodl,w,c
  4559  001D6A  0100               	movlb	0	; () banked
  4560  001D6C  25F1               	addwf	_anio_u& (0+255),w,b
  4561  001D6E  0100               	movlb	0	; () banked
  4562  001D70  6FB8               	movwf	(_RtccDate+3)& (0+255),b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  4566  001D72  C0D9  F001         	movff	_mes,___awdiv@dividend
  4567  001D76  C0DA  F002         	movff	_mes+1,___awdiv@dividend+1
  4568  001D7A  0E00               	movlw	0
  4569  001D7C  6E04               	movwf	___awdiv@divisor+1,c
  4570  001D7E  0E0A               	movlw	10
  4571  001D80  6E03               	movwf	___awdiv@divisor,c
  4572  001D82  EC3C  F018         	call	___awdiv	;wreg free
  4573  001D86  5001               	movf	?___awdiv,w,c
  4574  001D88  0100               	movlb	0	; () banked
  4575  001D8A  6FF3               	movwf	_mes_d& (0+255),b
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  4579  001D8C  0100               	movlb	0	; () banked
  4580  001D8E  51F3               	movf	_mes_d& (0+255),w,b
  4581  001D90  0D0A               	mullw	10
  4582  001D92  50F3               	movf	prodl,w,c
  4583  001D94  0800               	sublw	0
  4584  001D96  0100               	movlb	0	; () banked
  4585  001D98  25D9               	addwf	_mes& (0+255),w,b
  4586  001D9A  0100               	movlb	0	; () banked
  4587  001D9C  6FF4               	movwf	_mes_u& (0+255),b
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  4591  001D9E  0100               	movlb	0	; () banked
  4592  001DA0  51F3               	movf	_mes_d& (0+255),w,b
  4593  001DA2  0D10               	mullw	16
  4594  001DA4  50F3               	movf	prodl,w,c
  4595  001DA6  0100               	movlb	0	; () banked
  4596  001DA8  25F4               	addwf	_mes_u& (0+255),w,b
  4597  001DAA  0100               	movlb	0	; () banked
  4598  001DAC  6FB7               	movwf	(_RtccDate+2)& (0+255),b
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  4602  001DAE  C0D5  F001         	movff	_dia,___awdiv@dividend
  4603  001DB2  C0D6  F002         	movff	_dia+1,___awdiv@dividend+1
  4604  001DB6  0E00               	movlw	0
  4605  001DB8  6E04               	movwf	___awdiv@divisor+1,c
  4606  001DBA  0E0A               	movlw	10
  4607  001DBC  6E03               	movwf	___awdiv@divisor,c
  4608  001DBE  EC3C  F018         	call	___awdiv	;wreg free
  4609  001DC2  5001               	movf	?___awdiv,w,c
  4610  001DC4  0100               	movlb	0	; () banked
  4611  001DC6  6FF5               	movwf	_fecha_d& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  4615  001DC8  0100               	movlb	0	; () banked
  4616  001DCA  51F5               	movf	_fecha_d& (0+255),w,b
  4617  001DCC  0D0A               	mullw	10
  4618  001DCE  50F3               	movf	prodl,w,c
  4619  001DD0  0800               	sublw	0
  4620  001DD2  0100               	movlb	0	; () banked
  4621  001DD4  25D5               	addwf	_dia& (0+255),w,b
  4622  001DD6  0100               	movlb	0	; () banked
  4623  001DD8  6FF6               	movwf	_fecha_u& (0+255),b
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  4627  001DDA  0100               	movlb	0	; () banked
  4628  001DDC  51F5               	movf	_fecha_d& (0+255),w,b
  4629  001DDE  0D10               	mullw	16
  4630  001DE0  50F3               	movf	prodl,w,c
  4631  001DE2  0100               	movlb	0	; () banked
  4632  001DE4  25F6               	addwf	_fecha_u& (0+255),w,b
  4633  001DE6  0100               	movlb	0	; () banked
  4634  001DE8  6FB6               	movwf	(_RtccDate+1)& (0+255),b
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  4638  001DEA  C0D7  F0F2         	movff	_diasem,_dia_semana
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  4642  001DEE  C0D7  F0B5         	movff	_diasem,_RtccDate
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  4646  001DF2  0EB9               	movlw	low _RtccTime
  4647  001DF4  6E01               	movwf	RtccWriteTime@pTm,c
  4648  001DF6  0E00               	movlw	high _RtccTime
  4649  001DF8  6E02               	movwf	RtccWriteTime@pTm+1,c
  4650  001DFA  0E01               	movlw	1
  4651  001DFC  6E03               	movwf	RtccWriteTime@di,c
  4652  001DFE  EC19  F012         	call	_RtccWriteTime	;wreg free
  4653                           
  4654                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  4655  001E02  0EB5               	movlw	low _RtccDate
  4656  001E04  6E01               	movwf	RtccWriteDate@pDt,c
  4657  001E06  0E00               	movlw	high _RtccDate
  4658  001E08  6E02               	movwf	RtccWriteDate@pDt+1,c
  4659  001E0A  0E01               	movlw	1
  4660  001E0C  6E03               	movwf	RtccWriteDate@di,c
  4661  001E0E  EC6A  F010         	call	_RtccWriteDate	;wreg free
  4662                           
  4663                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  4664  001E12  010F               	movlb	15	; () banked
  4665  001E14  8F3F               	bsf	63,7,b	;volatile
  4666                           
  4667                           ; BSR set to: 15
  4668  001E16  0012               	return		;funcret
  4669  001E18                     __end_of_Write_RTC:
  4670                           	opt stack 0
  4671                           tblptru	equ	0xFF8
  4672                           tblptrh	equ	0xFF7
  4673                           tblptrl	equ	0xFF6
  4674                           tablat	equ	0xFF5
  4675                           prodh	equ	0xFF4
  4676                           prodl	equ	0xFF3
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           postinc1	equ	0xFE6
  4680                           postdec1	equ	0xFE5
  4681                           fsr1h	equ	0xFE2
  4682                           fsr1l	equ	0xFE1
  4683                           postinc2	equ	0xFDE
  4684                           postdec2	equ	0xFDD
  4685                           fsr2h	equ	0xFDA
  4686                           fsr2l	equ	0xFD9
  4687                           status	equ	0xFD8
  4688                           
  4689 ;; *************** function ___awdiv *****************
  4690 ;; Defined at:
  4691 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4692 ;; Parameters:    Size  Location     Type
  4693 ;;  dividend        2    0[COMRAM] int 
  4694 ;;  divisor         2    2[COMRAM] int 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  quotient        2    6[COMRAM] int 
  4697 ;;  sign            1    5[COMRAM] unsigned char 
  4698 ;;  counter         1    4[COMRAM] unsigned char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  2    0[COMRAM] int 
  4701 ;; Registers used:
  4702 ;;		wreg, status,2, status,0
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4709 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4711 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4712 ;;Total ram usage:        8 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_Write_RTC
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text20
  4722  003078                     __ptext20:
  4723                           	opt stack 0
  4724  003078                     ___awdiv:
  4725                           	opt stack 26
  4726                           
  4727                           ; BSR set to: 15
  4728                           ;incstack = 0
  4729  003078  0E00               	movlw	0
  4730  00307A  6E06               	movwf	___awdiv@sign,c
  4731  00307C  AE04               	btfss	___awdiv@divisor+1,7,c
  4732  00307E  D006               	goto	l782
  4733  003080  6C03               	negf	___awdiv@divisor,c
  4734  003082  1E04               	comf	___awdiv@divisor+1,f,c
  4735  003084  B0D8               	btfsc	status,0,c
  4736  003086  2A04               	incf	___awdiv@divisor+1,f,c
  4737  003088  0E01               	movlw	1
  4738  00308A  6E06               	movwf	___awdiv@sign,c
  4739  00308C                     l782:
  4740  00308C  AE02               	btfss	___awdiv@dividend+1,7,c
  4741  00308E  D006               	goto	l783
  4742  003090  6C01               	negf	___awdiv@dividend,c
  4743  003092  1E02               	comf	___awdiv@dividend+1,f,c
  4744  003094  B0D8               	btfsc	status,0,c
  4745  003096  2A02               	incf	___awdiv@dividend+1,f,c
  4746  003098  0E01               	movlw	1
  4747  00309A  1A06               	xorwf	___awdiv@sign,f,c
  4748  00309C                     l783:
  4749  00309C  0E00               	movlw	0
  4750  00309E  6E08               	movwf	___awdiv@quotient+1,c
  4751  0030A0  0E00               	movlw	0
  4752  0030A2  6E07               	movwf	___awdiv@quotient,c
  4753  0030A4  5003               	movf	___awdiv@divisor,w,c
  4754  0030A6  1004               	iorwf	___awdiv@divisor+1,w,c
  4755  0030A8  B4D8               	btfsc	status,2,c
  4756  0030AA  D01C               	goto	l790
  4757  0030AC  0E01               	movlw	1
  4758  0030AE  6E05               	movwf	___awdiv@counter,c
  4759  0030B0  D004               	goto	l785
  4760  0030B2  90D8               	bcf	status,0,c
  4761  0030B4  3603               	rlcf	___awdiv@divisor,f,c
  4762  0030B6  3604               	rlcf	___awdiv@divisor+1,f,c
  4763  0030B8  2A05               	incf	___awdiv@counter,f,c
  4764  0030BA                     l785:
  4765  0030BA  AE04               	btfss	___awdiv@divisor+1,7,c
  4766  0030BC  D7FA               	goto	l786
  4767  0030BE                     u4200:
  4768  0030BE  90D8               	bcf	status,0,c
  4769  0030C0  3607               	rlcf	___awdiv@quotient,f,c
  4770  0030C2  3608               	rlcf	___awdiv@quotient+1,f,c
  4771  0030C4  5003               	movf	___awdiv@divisor,w,c
  4772  0030C6  5C01               	subwf	___awdiv@dividend,w,c
  4773  0030C8  5004               	movf	___awdiv@divisor+1,w,c
  4774  0030CA  5802               	subwfb	___awdiv@dividend+1,w,c
  4775  0030CC  A0D8               	btfss	status,0,c
  4776  0030CE  D005               	goto	l789
  4777  0030D0  5003               	movf	___awdiv@divisor,w,c
  4778  0030D2  5E01               	subwf	___awdiv@dividend,f,c
  4779  0030D4  5004               	movf	___awdiv@divisor+1,w,c
  4780  0030D6  5A02               	subwfb	___awdiv@dividend+1,f,c
  4781  0030D8  8007               	bsf	___awdiv@quotient,0,c
  4782  0030DA                     l789:
  4783  0030DA  90D8               	bcf	status,0,c
  4784  0030DC  3204               	rrcf	___awdiv@divisor+1,f,c
  4785  0030DE  3203               	rrcf	___awdiv@divisor,f,c
  4786  0030E0  2E05               	decfsz	___awdiv@counter,f,c
  4787  0030E2  D7ED               	goto	u4200
  4788  0030E4                     l790:
  4789  0030E4  5006               	movf	___awdiv@sign,w,c
  4790  0030E6  B4D8               	btfsc	status,2,c
  4791  0030E8  D004               	goto	l791
  4792  0030EA  6C07               	negf	___awdiv@quotient,c
  4793  0030EC  1E08               	comf	___awdiv@quotient+1,f,c
  4794  0030EE  B0D8               	btfsc	status,0,c
  4795  0030F0  2A08               	incf	___awdiv@quotient+1,f,c
  4796  0030F2                     l791:
  4797  0030F2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4798  0030F6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4799  0030FA  0012               	return	
  4800  0030FC                     __end_of___awdiv:
  4801                           	opt stack 0
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           postinc1	equ	0xFE6
  4811                           postdec1	equ	0xFE5
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _RtccWriteTime *****************
  4821 ;; Defined at:
  4822 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  pTm             2    0[COMRAM] PTR const struct .
  4825 ;;		 -> RtccTime(4), 
  4826 ;;  di              1    2[COMRAM] enum E7121
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  tempHourWDay    2    9[COMRAM] struct .
  4829 ;;  tempMinSec      2    7[COMRAM] struct .
  4830 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4831 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4832 ;;  wasOn           1    4[COMRAM] enum E7121
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      enum E6550
  4835 ;; Registers used:
  4836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4842 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4843 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4845 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4846 ;;Total ram usage:       11 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    1
  4849 ;; This function calls:
  4850 ;;		_RtccWrOn
  4851 ;; This function is called by:
  4852 ;;		_Write_RTC
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text21
  4857  002432                     __ptext21:
  4858                           	opt stack 0
  4859  002432                     _RtccWriteTime:
  4860                           	opt stack 25
  4861                           
  4862                           ;incstack = 0
  4863  002432  0E00               	movlw	0
  4864  002434  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4865  002436  EE20 F002          	lfsr	2,2
  4866  00243A  5001               	movf	RtccWriteTime@pTm,w,c
  4867  00243C  26D9               	addwf	fsr2l,f,c
  4868  00243E  5002               	movf	RtccWriteTime@pTm+1,w,c
  4869  002440  22DA               	addwfc	fsr2h,f,c
  4870  002442  0E5A               	movlw	90
  4871  002444  60DF               	cpfslt	indf2,c
  4872  002446  0012               	return	
  4873  002448  EE20 F001          	lfsr	2,1
  4874  00244C  5001               	movf	RtccWriteTime@pTm,w,c
  4875  00244E  26D9               	addwf	fsr2l,f,c
  4876  002450  5002               	movf	RtccWriteTime@pTm+1,w,c
  4877  002452  22DA               	addwfc	fsr2h,f,c
  4878  002454  0E5A               	movlw	90
  4879  002456  60DF               	cpfslt	indf2,c
  4880  002458  0012               	return	
  4881  00245A  EE20 F003          	lfsr	2,3
  4882  00245E  5001               	movf	RtccWriteTime@pTm,w,c
  4883  002460  26D9               	addwf	fsr2l,f,c
  4884  002462  5002               	movf	RtccWriteTime@pTm+1,w,c
  4885  002464  22DA               	addwfc	fsr2h,f,c
  4886  002466  0E24               	movlw	36
  4887  002468  64DF               	cpfsgt	indf2,c
  4888  00246A  D001               	goto	l602
  4889  00246C  0012               	return	
  4890  00246E                     l602:
  4891  00246E  EE20 F002          	lfsr	2,2
  4892  002472  5001               	movf	RtccWriteTime@pTm,w,c
  4893  002474  26D9               	addwf	fsr2l,f,c
  4894  002476  5002               	movf	RtccWriteTime@pTm+1,w,c
  4895  002478  22DA               	addwfc	fsr2h,f,c
  4896  00247A  50DF               	movf	indf2,w,c
  4897  00247C  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4898  00247E  EE20 F001          	lfsr	2,1
  4899  002482  5001               	movf	RtccWriteTime@pTm,w,c
  4900  002484  26D9               	addwf	fsr2l,f,c
  4901  002486  5002               	movf	RtccWriteTime@pTm+1,w,c
  4902  002488  22DA               	addwfc	fsr2h,f,c
  4903  00248A  50DF               	movf	indf2,w,c
  4904  00248C  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4905  00248E  5003               	movf	RtccWriteTime@di,w,c
  4906  002490  A4D8               	btfss	status,2,c
  4907  002492  9CF2               	bcf	intcon,6,c	;volatile
  4908  002494  010F               	movlb	15	; () banked
  4909  002496  0E00               	movlw	0
  4910  002498  BB3F               	btfsc	63,5,b	;volatile
  4911  00249A  0E01               	movlw	1
  4912  00249C  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4913  00249E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4914  0024A0  B4D8               	btfsc	status,2,c
  4915                           
  4916                           ; BSR set to: 15
  4917  0024A2  EC7C  F01C         	call	_RtccWrOn	;wreg free
  4918  0024A6  010F               	movlb	15	; () banked
  4919  0024A8  0E00               	movlw	0
  4920  0024AA  BF3F               	btfsc	63,7,b	;volatile
  4921  0024AC  0E01               	movlw	1
  4922  0024AE  6E05               	movwf	RtccWriteTime@wasOn,c
  4923  0024B0  5005               	movf	RtccWriteTime@wasOn,w,c
  4924  0024B2  B4D8               	btfsc	status,2,c
  4925  0024B4  D006               	goto	l608
  4926                           
  4927                           ; BSR set to: 15
  4928  0024B6  0E00               	movlw	0
  4929  0024B8  BE91               	btfsc	3985,7,c	;volatile
  4930  0024BA  0E01               	movlw	1
  4931  0024BC  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4932                           
  4933                           ; BSR set to: 15
  4934  0024BE  010F               	movlb	15	; () banked
  4935  0024C0  9F3F               	bcf	63,7,b	;volatile
  4936  0024C2                     l608:
  4937                           
  4938                           ; BSR set to: 15
  4939                           
  4940                           ; BSR set to: 15
  4941  0024C2  0EFC               	movlw	252
  4942  0024C4  010F               	movlb	15	; () banked
  4943  0024C6  173F               	andwf	63,f,b	;volatile
  4944  0024C8  010F               	movlb	15	; () banked
  4945  0024CA  813F               	bsf	63,0,b	;volatile
  4946                           
  4947                           ; BSR set to: 15
  4948  0024CC  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4949                           
  4950                           ; BSR set to: 15
  4951  0024D0  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4952                           
  4953                           ; BSR set to: 15
  4954  0024D4  EE20 F003          	lfsr	2,3
  4955  0024D8  5001               	movf	RtccWriteTime@pTm,w,c
  4956  0024DA  26D9               	addwf	fsr2l,f,c
  4957  0024DC  5002               	movf	RtccWriteTime@pTm+1,w,c
  4958  0024DE  22DA               	addwfc	fsr2h,f,c
  4959  0024E0  50DF               	movf	indf2,w,c
  4960  0024E2  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4961                           
  4962                           ; BSR set to: 15
  4963  0024E4  0EFC               	movlw	252
  4964  0024E6  010F               	movlb	15	; () banked
  4965  0024E8  173F               	andwf	63,f,b	;volatile
  4966                           
  4967                           ; BSR set to: 15
  4968  0024EA  010F               	movlb	15	; () banked
  4969  0024EC  813F               	bsf	63,0,b	;volatile
  4970                           
  4971                           ; BSR set to: 15
  4972  0024EE  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4973                           
  4974                           ; BSR set to: 15
  4975  0024F2  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4976                           
  4977                           ; BSR set to: 15
  4978  0024F6  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4979                           
  4980                           ; BSR set to: 15
  4981  0024FA  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4982                           
  4983                           ; BSR set to: 15
  4984  0024FE  5005               	movf	RtccWriteTime@wasOn,w,c
  4985  002500  B4D8               	btfsc	status,2,c
  4986  002502  D00B               	goto	l609
  4987                           
  4988                           ; BSR set to: 15
  4989  002504  010F               	movlb	15	; () banked
  4990  002506  8F3F               	bsf	63,7,b	;volatile
  4991                           
  4992                           ; BSR set to: 15
  4993  002508  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4994  00250A  A4D8               	btfss	status,2,c
  4995                           
  4996                           ; BSR set to: 15
  4997  00250C  8E91               	bsf	3985,7,c	;volatile
  4998                           
  4999                           ; BSR set to: 15
  5000                           
  5001                           ; BSR set to: 15
  5002  00250E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5003  002510  B4D8               	btfsc	status,2,c
  5004  002512  D008               	goto	l613
  5005                           
  5006                           ; BSR set to: 15
  5007  002514  EC7C  F01C         	call	_RtccWrOn	;wreg free
  5008  002518  D005               	goto	l613
  5009  00251A                     l609:
  5010  00251A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5011  00251C  A4D8               	btfss	status,2,c
  5012  00251E  D002               	goto	l613
  5013  002520  010F               	movlb	15	; () banked
  5014  002522  9B3F               	bcf	63,5,b	;volatile
  5015  002524                     l613:
  5016                           
  5017                           ; BSR set to: 15
  5018                           
  5019                           ; BSR set to: 15
  5020  002524  5003               	movf	RtccWriteTime@di,w,c
  5021  002526  B4D8               	btfsc	status,2,c
  5022  002528  0012               	return	
  5023  00252A  8CF2               	bsf	intcon,6,c	;volatile
  5024  00252C  0012               	return	
  5025  00252E                     __end_of_RtccWriteTime:
  5026                           	opt stack 0
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon	equ	0xFF2
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           postinc1	equ	0xFE6
  5037                           postdec1	equ	0xFE5
  5038                           fsr1h	equ	0xFE2
  5039                           fsr1l	equ	0xFE1
  5040                           indf2	equ	0xFDF
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _RtccWriteDate *****************
  5048 ;; Defined at:
  5049 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteDate.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  pDt             2    0[COMRAM] PTR const struct .
  5052 ;;		 -> RtccDate(4), 
  5053 ;;  di              1    2[COMRAM] enum E7121
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;  tempHourWDay    2   11[COMRAM] struct .
  5056 ;;  tempDayMonth    2    9[COMRAM] struct .
  5057 ;;  tempYear        2    6[COMRAM] struct .
  5058 ;;  wasWrEn         1    8[COMRAM] enum E7121
  5059 ;;  wasAlrm         1    5[COMRAM] enum E7121
  5060 ;;  wasOn           1    4[COMRAM] enum E7121
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      enum E6550
  5063 ;; Registers used:
  5064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5070 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5071 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5073 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5074 ;;Total ram usage:       13 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    1
  5077 ;; This function calls:
  5078 ;;		_RtccWrOn
  5079 ;; This function is called by:
  5080 ;;		_Write_RTC
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text22
  5085  0020D4                     __ptext22:
  5086                           	opt stack 0
  5087  0020D4                     _RtccWriteDate:
  5088                           	opt stack 25
  5089                           
  5090                           ;incstack = 0
  5091  0020D4  0E00               	movlw	0
  5092  0020D6  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5093  0020D8  EE20 F002          	lfsr	2,2
  5094  0020DC  5001               	movf	RtccWriteDate@pDt,w,c
  5095  0020DE  26D9               	addwf	fsr2l,f,c
  5096  0020E0  5002               	movf	RtccWriteDate@pDt+1,w,c
  5097  0020E2  22DA               	addwfc	fsr2h,f,c
  5098  0020E4  0E13               	movlw	19
  5099  0020E6  60DF               	cpfslt	indf2,c
  5100  0020E8  0012               	return	
  5101  0020EA  EE20 F002          	lfsr	2,2
  5102  0020EE  5001               	movf	RtccWriteDate@pDt,w,c
  5103  0020F0  26D9               	addwf	fsr2l,f,c
  5104  0020F2  5002               	movf	RtccWriteDate@pDt+1,w,c
  5105  0020F4  22DA               	addwfc	fsr2h,f,c
  5106  0020F6  50DF               	movf	indf2,w,c
  5107  0020F8  B4D8               	btfsc	status,2,c
  5108  0020FA  0012               	return	
  5109  0020FC  EE20 F001          	lfsr	2,1
  5110  002100  5001               	movf	RtccWriteDate@pDt,w,c
  5111  002102  26D9               	addwf	fsr2l,f,c
  5112  002104  5002               	movf	RtccWriteDate@pDt+1,w,c
  5113  002106  22DA               	addwfc	fsr2h,f,c
  5114  002108  0E32               	movlw	50
  5115  00210A  60DF               	cpfslt	indf2,c
  5116  00210C  0012               	return	
  5117  00210E  EE20 F001          	lfsr	2,1
  5118  002112  5001               	movf	RtccWriteDate@pDt,w,c
  5119  002114  26D9               	addwf	fsr2l,f,c
  5120  002116  5002               	movf	RtccWriteDate@pDt+1,w,c
  5121  002118  22DA               	addwfc	fsr2h,f,c
  5122  00211A  50DF               	movf	indf2,w,c
  5123  00211C  B4D8               	btfsc	status,2,c
  5124  00211E  0012               	return	
  5125  002120  EE20 F003          	lfsr	2,3
  5126  002124  5001               	movf	RtccWriteDate@pDt,w,c
  5127  002126  26D9               	addwf	fsr2l,f,c
  5128  002128  5002               	movf	RtccWriteDate@pDt+1,w,c
  5129  00212A  22DA               	addwfc	fsr2h,f,c
  5130  00212C  0E99               	movlw	153
  5131  00212E  64DF               	cpfsgt	indf2,c
  5132  002130  D001               	goto	l573
  5133  002132  0012               	return	
  5134  002134                     l573:
  5135  002134  EE20 F003          	lfsr	2,3
  5136  002138  5001               	movf	RtccWriteDate@pDt,w,c
  5137  00213A  26D9               	addwf	fsr2l,f,c
  5138  00213C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5139  00213E  22DA               	addwfc	fsr2h,f,c
  5140  002140  50DF               	movf	indf2,w,c
  5141  002142  6E07               	movwf	RtccWriteDate@tempYear,c
  5142  002144  EE20 F001          	lfsr	2,1
  5143  002148  5001               	movf	RtccWriteDate@pDt,w,c
  5144  00214A  26D9               	addwf	fsr2l,f,c
  5145  00214C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5146  00214E  22DA               	addwfc	fsr2h,f,c
  5147  002150  50DF               	movf	indf2,w,c
  5148  002152  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  5149  002154  EE20 F002          	lfsr	2,2
  5150  002158  5001               	movf	RtccWriteDate@pDt,w,c
  5151  00215A  26D9               	addwf	fsr2l,f,c
  5152  00215C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5153  00215E  22DA               	addwfc	fsr2h,f,c
  5154  002160  50DF               	movf	indf2,w,c
  5155  002162  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  5156  002164  5003               	movf	RtccWriteDate@di,w,c
  5157  002166  A4D8               	btfss	status,2,c
  5158  002168  9CF2               	bcf	intcon,6,c	;volatile
  5159  00216A  010F               	movlb	15	; () banked
  5160  00216C  0E00               	movlw	0
  5161  00216E  BB3F               	btfsc	63,5,b	;volatile
  5162  002170  0E01               	movlw	1
  5163  002172  6E09               	movwf	RtccWriteDate@wasWrEn,c
  5164  002174  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5165  002176  B4D8               	btfsc	status,2,c
  5166                           
  5167                           ; BSR set to: 15
  5168  002178  EC7C  F01C         	call	_RtccWrOn	;wreg free
  5169  00217C  010F               	movlb	15	; () banked
  5170  00217E  0E00               	movlw	0
  5171  002180  BF3F               	btfsc	63,7,b	;volatile
  5172  002182  0E01               	movlw	1
  5173  002184  6E05               	movwf	RtccWriteDate@wasOn,c
  5174  002186  5005               	movf	RtccWriteDate@wasOn,w,c
  5175  002188  B4D8               	btfsc	status,2,c
  5176  00218A  D006               	goto	l579
  5177                           
  5178                           ; BSR set to: 15
  5179  00218C  0E00               	movlw	0
  5180  00218E  BE91               	btfsc	3985,7,c	;volatile
  5181  002190  0E01               	movlw	1
  5182  002192  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5183                           
  5184                           ; BSR set to: 15
  5185  002194  010F               	movlb	15	; () banked
  5186  002196  9F3F               	bcf	63,7,b	;volatile
  5187  002198                     l579:
  5188                           
  5189                           ; BSR set to: 15
  5190                           
  5191                           ; BSR set to: 15
  5192  002198  0EFC               	movlw	252
  5193  00219A  010F               	movlb	15	; () banked
  5194  00219C  173F               	andwf	63,f,b	;volatile
  5195  00219E  010F               	movlb	15	; () banked
  5196  0021A0  813F               	bsf	63,0,b	;volatile
  5197                           
  5198                           ; BSR set to: 15
  5199  0021A2  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  5200                           
  5201                           ; BSR set to: 15
  5202  0021A6  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  5203                           
  5204                           ; BSR set to: 15
  5205  0021AA  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  5206  0021AE  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  5207  0021B2  50DF               	movf	indf2,w,c
  5208  0021B4  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  5209                           
  5210                           ; BSR set to: 15
  5211  0021B6  0EFC               	movlw	252
  5212  0021B8  010F               	movlb	15	; () banked
  5213  0021BA  173F               	andwf	63,f,b	;volatile
  5214                           
  5215                           ; BSR set to: 15
  5216  0021BC  0E03               	movlw	3
  5217  0021BE  010F               	movlb	15	; () banked
  5218  0021C0  133F               	iorwf	63,f,b	;volatile
  5219                           
  5220                           ; BSR set to: 15
  5221  0021C2  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  5222                           
  5223                           ; BSR set to: 15
  5224  0021C6  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  5225                           
  5226                           ; BSR set to: 15
  5227  0021CA  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  5228                           
  5229                           ; BSR set to: 15
  5230  0021CE  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  5231                           
  5232                           ; BSR set to: 15
  5233  0021D2  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  5234                           
  5235                           ; BSR set to: 15
  5236  0021D6  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  5237                           
  5238                           ; BSR set to: 15
  5239  0021DA  5005               	movf	RtccWriteDate@wasOn,w,c
  5240  0021DC  B4D8               	btfsc	status,2,c
  5241  0021DE  D00B               	goto	l580
  5242                           
  5243                           ; BSR set to: 15
  5244  0021E0  010F               	movlb	15	; () banked
  5245  0021E2  8F3F               	bsf	63,7,b	;volatile
  5246                           
  5247                           ; BSR set to: 15
  5248  0021E4  5006               	movf	RtccWriteDate@wasAlrm,w,c
  5249  0021E6  A4D8               	btfss	status,2,c
  5250                           
  5251                           ; BSR set to: 15
  5252  0021E8  8E91               	bsf	3985,7,c	;volatile
  5253                           
  5254                           ; BSR set to: 15
  5255                           
  5256                           ; BSR set to: 15
  5257  0021EA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5258  0021EC  B4D8               	btfsc	status,2,c
  5259  0021EE  D008               	goto	l584
  5260                           
  5261                           ; BSR set to: 15
  5262  0021F0  EC7C  F01C         	call	_RtccWrOn	;wreg free
  5263  0021F4  D005               	goto	l584
  5264  0021F6                     l580:
  5265  0021F6  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5266  0021F8  A4D8               	btfss	status,2,c
  5267  0021FA  D002               	goto	l584
  5268  0021FC  010F               	movlb	15	; () banked
  5269  0021FE  9B3F               	bcf	63,5,b	;volatile
  5270  002200                     l584:
  5271                           
  5272                           ; BSR set to: 15
  5273                           
  5274                           ; BSR set to: 15
  5275  002200  5003               	movf	RtccWriteDate@di,w,c
  5276  002202  B4D8               	btfsc	status,2,c
  5277  002204  0012               	return	
  5278  002206  9CF2               	bcf	intcon,6,c	;volatile
  5279  002208  0012               	return	
  5280  00220A                     __end_of_RtccWriteDate:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           prodh	equ	0xFF4
  5287                           prodl	equ	0xFF3
  5288                           intcon	equ	0xFF2
  5289                           postinc0	equ	0xFEE
  5290                           wreg	equ	0xFE8
  5291                           postinc1	equ	0xFE6
  5292                           postdec1	equ	0xFE5
  5293                           fsr1h	equ	0xFE2
  5294                           fsr1l	equ	0xFE1
  5295                           indf2	equ	0xFDF
  5296                           postinc2	equ	0xFDE
  5297                           postdec2	equ	0xFDD
  5298                           fsr2h	equ	0xFDA
  5299                           fsr2l	equ	0xFD9
  5300                           status	equ	0xFD8
  5301                           
  5302 ;; *************** function _RtccWrOn *****************
  5303 ;; Defined at:
  5304 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWrOn.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  data            2    0        unsigned int 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  1    wreg      void 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_Write_RTC
  5328 ;;		_RtccWriteDate
  5329 ;;		_RtccWriteTime
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text23
  5334  0038F8                     __ptext23:
  5335                           	opt stack 0
  5336  0038F8                     _RtccWrOn:
  5337                           	opt stack 25
  5338                           
  5339                           ;incstack = 0
  5340  0038F8  9CF2               	bcf	intcon,6,c	;volatile
  5341  0038FA  0E55               	movlw	85
  5342  0038FC  6EA7               	movwf	4007,c	;volatile
  5343  0038FE  0EAA               	movlw	170
  5344  003900  6EA7               	movwf	4007,c	;volatile
  5345  003902  010F               	movlb	15	; () banked
  5346  003904  8B3F               	bsf	63,5,b	;volatile
  5347                           
  5348                           ; BSR set to: 15
  5349  003906  8CF2               	bsf	intcon,6,c	;volatile
  5350                           
  5351                           ; BSR set to: 15
  5352  003908  0012               	return		;funcret
  5353  00390A                     __end_of_RtccWrOn:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           postinc1	equ	0xFE6
  5365                           postdec1	equ	0xFE5
  5366                           fsr1h	equ	0xFE2
  5367                           fsr1l	equ	0xFE1
  5368                           indf2	equ	0xFDF
  5369                           postinc2	equ	0xFDE
  5370                           postdec2	equ	0xFDD
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           
  5375 ;; *************** function _ingreso_numero *****************
  5376 ;; Defined at:
  5377 ;;		line 129 in file "main.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5393 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5395 ;;Total ram usage:        2 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    6
  5398 ;; This function calls:
  5399 ;;		_guarda_numero_ingresado
  5400 ;; This function is called by:
  5401 ;;		_ir_a_pantalla_ingresar_contrasenia
  5402 ;;		_ir_a_pantalla_editar_contrasenia
  5403 ;;		_editar_fecha_reloj_digital
  5404 ;;		_editar_hora_reloj_digital
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text24
  5409  000FFC                     __ptext24:
  5410                           	opt stack 0
  5411  000FFC                     _ingreso_numero:
  5412                           	opt stack 18
  5413                           
  5414                           ;main.c: 130: LATAbits.LATA0 = 1;
  5415                           
  5416                           ; BSR set to: 15
  5417                           ;incstack = 0
  5418  000FFC  8089               	bsf	3977,0,c	;volatile
  5419                           
  5420                           ;main.c: 131: LATAbits.LATA1 = 0;
  5421  000FFE  9289               	bcf	3977,1,c	;volatile
  5422                           
  5423                           ;main.c: 132: LATAbits.LATA2 = 0;
  5424  001000  9489               	bcf	3977,2,c	;volatile
  5425                           
  5426                           ;main.c: 133: LATAbits.LATA3 = 0;
  5427  001002  9689               	bcf	3977,3,c	;volatile
  5428                           
  5429                           ;main.c: 134: {
  5430                           ;main.c: 135: if (PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) {
  5431  001004  BA80               	btfsc	3968,5,c	;volatile
  5432  001006  A089               	btfss	3977,0,c	;volatile
  5433  001008  D01A               	goto	u4470
  5434                           
  5435                           ;main.c: 136: key = 1;
  5436  00100A  0E01               	movlw	1
  5437  00100C  0100               	movlb	0	; () banked
  5438  00100E  6FA0               	movwf	_key& (0+255),b
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;main.c: 137: guarda_numero_ingresado(key);
  5442  001010  0100               	movlb	0	; () banked
  5443  001012  51A0               	movf	_key& (0+255),w,b
  5444  001014  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5445  001016  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5446  001018  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5447  00101C  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5448  001020  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5449                           
  5450                           ;main.c: 138: while (PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) {
  5451  001024  D008               	goto	l188
  5452  001026                     
  5453                           ;main.c: 139: _delay((unsigned long)((40)*(8000000/4000.0)));
  5454  001026  0E68               	movlw	104
  5455  001028  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5456  00102A  0EE4               	movlw	228
  5457  00102C                     u5897:
  5458  00102C  2EE8               	decfsz	wreg,f,c
  5459  00102E  D7FE               	bra	u5897
  5460  001030  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5461  001032  D7FC               	bra	u5897
  5462  001034  D000               	nop2	
  5463  001036                     l188:
  5464  001036  AA80               	btfss	3968,5,c	;volatile
  5465  001038  D002               	goto	u4470
  5466  00103A  B089               	btfsc	3977,0,c	;volatile
  5467  00103C  D7F4               	goto	l189
  5468  00103E                     u4470:
  5469                           
  5470                           ;main.c: 140: }
  5471                           ;main.c: 141: }
  5472                           ;main.c: 142: if (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) {
  5473  00103E  BE80               	btfsc	3968,7,c	;volatile
  5474  001040  A089               	btfss	3977,0,c	;volatile
  5475  001042  D01A               	goto	u4510
  5476                           
  5477                           ;main.c: 143: key = 2;
  5478  001044  0E02               	movlw	2
  5479  001046  0100               	movlb	0	; () banked
  5480  001048  6FA0               	movwf	_key& (0+255),b
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;main.c: 144: guarda_numero_ingresado(key);
  5484  00104A  0100               	movlb	0	; () banked
  5485  00104C  51A0               	movf	_key& (0+255),w,b
  5486  00104E  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5487  001050  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5488  001052  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5489  001056  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5490  00105A  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5491                           
  5492                           ;main.c: 145: while (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) {
  5493  00105E  D008               	goto	l194
  5494  001060                     
  5495                           ;main.c: 146: _delay((unsigned long)((40)*(8000000/4000.0)));
  5496  001060  0E68               	movlw	104
  5497  001062  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5498  001064  0EE4               	movlw	228
  5499  001066                     u5907:
  5500  001066  2EE8               	decfsz	wreg,f,c
  5501  001068  D7FE               	bra	u5907
  5502  00106A  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5503  00106C  D7FC               	bra	u5907
  5504  00106E  D000               	nop2	
  5505  001070                     l194:
  5506  001070  AE80               	btfss	3968,7,c	;volatile
  5507  001072  D002               	goto	u4510
  5508  001074  B089               	btfsc	3977,0,c	;volatile
  5509  001076  D7F4               	goto	l195
  5510  001078                     u4510:
  5511                           
  5512                           ;main.c: 147: }
  5513                           ;main.c: 148: }
  5514                           ;main.c: 149: if (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1) {
  5515  001078  BC80               	btfsc	3968,6,c	;volatile
  5516  00107A  A089               	btfss	3977,0,c	;volatile
  5517  00107C  D01A               	goto	u4550
  5518                           
  5519                           ;main.c: 150: key = 3;
  5520  00107E  0E03               	movlw	3
  5521  001080  0100               	movlb	0	; () banked
  5522  001082  6FA0               	movwf	_key& (0+255),b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;main.c: 151: guarda_numero_ingresado(key);
  5526  001084  0100               	movlb	0	; () banked
  5527  001086  51A0               	movf	_key& (0+255),w,b
  5528  001088  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5529  00108A  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5530  00108C  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5531  001090  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5532  001094  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5533                           
  5534                           ;main.c: 152: while (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1) {
  5535  001098  D008               	goto	l200
  5536  00109A                     
  5537                           ;main.c: 153: _delay((unsigned long)((40)*(8000000/4000.0)));
  5538  00109A  0E68               	movlw	104
  5539  00109C  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5540  00109E  0EE4               	movlw	228
  5541  0010A0                     u5917:
  5542  0010A0  2EE8               	decfsz	wreg,f,c
  5543  0010A2  D7FE               	bra	u5917
  5544  0010A4  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5545  0010A6  D7FC               	bra	u5917
  5546  0010A8  D000               	nop2	
  5547  0010AA                     l200:
  5548  0010AA  AC80               	btfss	3968,6,c	;volatile
  5549  0010AC  D002               	goto	u4550
  5550  0010AE  B089               	btfsc	3977,0,c	;volatile
  5551  0010B0  D7F4               	goto	l201
  5552  0010B2                     u4550:
  5553                           
  5554                           ;main.c: 154: }
  5555                           ;main.c: 155: }
  5556                           ;main.c: 156: }
  5557                           ;main.c: 157: LATAbits.LATA0 = 0;
  5558  0010B2  9089               	bcf	3977,0,c	;volatile
  5559                           
  5560                           ;main.c: 158: LATAbits.LATA1 = 1;
  5561  0010B4  8289               	bsf	3977,1,c	;volatile
  5562                           
  5563                           ;main.c: 159: LATAbits.LATA2 = 0;
  5564  0010B6  9489               	bcf	3977,2,c	;volatile
  5565                           
  5566                           ;main.c: 160: LATAbits.LATA3 = 0;
  5567  0010B8  9689               	bcf	3977,3,c	;volatile
  5568                           
  5569                           ;main.c: 161: {
  5570                           ;main.c: 162: if (PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) {
  5571  0010BA  BA80               	btfsc	3968,5,c	;volatile
  5572  0010BC  A289               	btfss	3977,1,c	;volatile
  5573  0010BE  D01A               	goto	u4590
  5574                           
  5575                           ;main.c: 163: key = 4;
  5576  0010C0  0E04               	movlw	4
  5577  0010C2  0100               	movlb	0	; () banked
  5578  0010C4  6FA0               	movwf	_key& (0+255),b
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;main.c: 164: guarda_numero_ingresado(key);
  5582  0010C6  0100               	movlb	0	; () banked
  5583  0010C8  51A0               	movf	_key& (0+255),w,b
  5584  0010CA  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5585  0010CC  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5586  0010CE  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5587  0010D2  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5588  0010D6  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5589                           
  5590                           ;main.c: 165: while (PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) {
  5591  0010DA  D008               	goto	l206
  5592  0010DC                     
  5593                           ;main.c: 166: _delay((unsigned long)((40)*(8000000/4000.0)));
  5594  0010DC  0E68               	movlw	104
  5595  0010DE  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5596  0010E0  0EE4               	movlw	228
  5597  0010E2                     u5927:
  5598  0010E2  2EE8               	decfsz	wreg,f,c
  5599  0010E4  D7FE               	bra	u5927
  5600  0010E6  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5601  0010E8  D7FC               	bra	u5927
  5602  0010EA  D000               	nop2	
  5603  0010EC                     l206:
  5604  0010EC  AA80               	btfss	3968,5,c	;volatile
  5605  0010EE  D002               	goto	u4590
  5606  0010F0  B289               	btfsc	3977,1,c	;volatile
  5607  0010F2  D7F4               	goto	l207
  5608  0010F4                     u4590:
  5609                           
  5610                           ;main.c: 167: }
  5611                           ;main.c: 168: }
  5612                           ;main.c: 169: if (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) {
  5613  0010F4  BE80               	btfsc	3968,7,c	;volatile
  5614  0010F6  A289               	btfss	3977,1,c	;volatile
  5615  0010F8  D01A               	goto	u4630
  5616                           
  5617                           ;main.c: 170: key = 5;
  5618  0010FA  0E05               	movlw	5
  5619  0010FC  0100               	movlb	0	; () banked
  5620  0010FE  6FA0               	movwf	_key& (0+255),b
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;main.c: 171: guarda_numero_ingresado(key);
  5624  001100  0100               	movlb	0	; () banked
  5625  001102  51A0               	movf	_key& (0+255),w,b
  5626  001104  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5627  001106  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5628  001108  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5629  00110C  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5630  001110  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5631                           
  5632                           ;main.c: 172: while (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) {
  5633  001114  D008               	goto	l212
  5634  001116                     
  5635                           ;main.c: 173: _delay((unsigned long)((40)*(8000000/4000.0)));
  5636  001116  0E68               	movlw	104
  5637  001118  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5638  00111A  0EE4               	movlw	228
  5639  00111C                     u5937:
  5640  00111C  2EE8               	decfsz	wreg,f,c
  5641  00111E  D7FE               	bra	u5937
  5642  001120  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5643  001122  D7FC               	bra	u5937
  5644  001124  D000               	nop2	
  5645  001126                     l212:
  5646  001126  AE80               	btfss	3968,7,c	;volatile
  5647  001128  D002               	goto	u4630
  5648  00112A  B289               	btfsc	3977,1,c	;volatile
  5649  00112C  D7F4               	goto	l213
  5650  00112E                     u4630:
  5651                           
  5652                           ;main.c: 174: }
  5653                           ;main.c: 175: }
  5654                           ;main.c: 176: if (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1) {
  5655  00112E  BC80               	btfsc	3968,6,c	;volatile
  5656  001130  A289               	btfss	3977,1,c	;volatile
  5657  001132  D01A               	goto	u4670
  5658                           
  5659                           ;main.c: 177: key = 6;
  5660  001134  0E06               	movlw	6
  5661  001136  0100               	movlb	0	; () banked
  5662  001138  6FA0               	movwf	_key& (0+255),b
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;main.c: 178: guarda_numero_ingresado(key);
  5666  00113A  0100               	movlb	0	; () banked
  5667  00113C  51A0               	movf	_key& (0+255),w,b
  5668  00113E  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5669  001140  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5670  001142  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5671  001146  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5672  00114A  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5673                           
  5674                           ;main.c: 179: while (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1) {
  5675  00114E  D008               	goto	l218
  5676  001150                     
  5677                           ;main.c: 180: _delay((unsigned long)((40)*(8000000/4000.0)));
  5678  001150  0E68               	movlw	104
  5679  001152  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5680  001154  0EE4               	movlw	228
  5681  001156                     u5947:
  5682  001156  2EE8               	decfsz	wreg,f,c
  5683  001158  D7FE               	bra	u5947
  5684  00115A  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5685  00115C  D7FC               	bra	u5947
  5686  00115E  D000               	nop2	
  5687  001160                     l218:
  5688  001160  AC80               	btfss	3968,6,c	;volatile
  5689  001162  D002               	goto	u4670
  5690  001164  B289               	btfsc	3977,1,c	;volatile
  5691  001166  D7F4               	goto	l219
  5692  001168                     u4670:
  5693                           
  5694                           ;main.c: 181: }
  5695                           ;main.c: 182: }
  5696                           ;main.c: 183: }
  5697                           ;main.c: 184: LATAbits.LATA0 = 0;
  5698  001168  9089               	bcf	3977,0,c	;volatile
  5699                           
  5700                           ;main.c: 185: LATAbits.LATA1 = 0;
  5701  00116A  9289               	bcf	3977,1,c	;volatile
  5702                           
  5703                           ;main.c: 186: LATAbits.LATA2 = 1;
  5704  00116C  8489               	bsf	3977,2,c	;volatile
  5705                           
  5706                           ;main.c: 187: LATAbits.LATA3 = 0;
  5707  00116E  9689               	bcf	3977,3,c	;volatile
  5708                           
  5709                           ;main.c: 188: {
  5710                           ;main.c: 189: if (PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) {
  5711  001170  BA80               	btfsc	3968,5,c	;volatile
  5712  001172  A489               	btfss	3977,2,c	;volatile
  5713  001174  D01A               	goto	u4710
  5714                           
  5715                           ;main.c: 190: key = 7;
  5716  001176  0E07               	movlw	7
  5717  001178  0100               	movlb	0	; () banked
  5718  00117A  6FA0               	movwf	_key& (0+255),b
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;main.c: 191: guarda_numero_ingresado(key);
  5722  00117C  0100               	movlb	0	; () banked
  5723  00117E  51A0               	movf	_key& (0+255),w,b
  5724  001180  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5725  001182  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5726  001184  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5727  001188  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5728  00118C  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5729                           
  5730                           ;main.c: 192: while (PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) {
  5731  001190  D008               	goto	l224
  5732  001192                     
  5733                           ;main.c: 193: _delay((unsigned long)((40)*(8000000/4000.0)));
  5734  001192  0E68               	movlw	104
  5735  001194  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5736  001196  0EE4               	movlw	228
  5737  001198                     u5957:
  5738  001198  2EE8               	decfsz	wreg,f,c
  5739  00119A  D7FE               	bra	u5957
  5740  00119C  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5741  00119E  D7FC               	bra	u5957
  5742  0011A0  D000               	nop2	
  5743  0011A2                     l224:
  5744  0011A2  AA80               	btfss	3968,5,c	;volatile
  5745  0011A4  D002               	goto	u4710
  5746  0011A6  B489               	btfsc	3977,2,c	;volatile
  5747  0011A8  D7F4               	goto	l225
  5748  0011AA                     u4710:
  5749                           
  5750                           ;main.c: 194: }
  5751                           ;main.c: 195: }
  5752                           ;main.c: 196: if (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) {
  5753  0011AA  BE80               	btfsc	3968,7,c	;volatile
  5754  0011AC  A489               	btfss	3977,2,c	;volatile
  5755  0011AE  D01A               	goto	u4750
  5756                           
  5757                           ;main.c: 197: key = 8;
  5758  0011B0  0E08               	movlw	8
  5759  0011B2  0100               	movlb	0	; () banked
  5760  0011B4  6FA0               	movwf	_key& (0+255),b
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;main.c: 198: guarda_numero_ingresado(key);
  5764  0011B6  0100               	movlb	0	; () banked
  5765  0011B8  51A0               	movf	_key& (0+255),w,b
  5766  0011BA  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5767  0011BC  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5768  0011BE  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5769  0011C2  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5770  0011C6  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5771                           
  5772                           ;main.c: 199: while (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) {
  5773  0011CA  D008               	goto	l230
  5774  0011CC                     
  5775                           ;main.c: 200: _delay((unsigned long)((40)*(8000000/4000.0)));
  5776  0011CC  0E68               	movlw	104
  5777  0011CE  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5778  0011D0  0EE4               	movlw	228
  5779  0011D2                     u5967:
  5780  0011D2  2EE8               	decfsz	wreg,f,c
  5781  0011D4  D7FE               	bra	u5967
  5782  0011D6  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5783  0011D8  D7FC               	bra	u5967
  5784  0011DA  D000               	nop2	
  5785  0011DC                     l230:
  5786  0011DC  AE80               	btfss	3968,7,c	;volatile
  5787  0011DE  D002               	goto	u4750
  5788  0011E0  B489               	btfsc	3977,2,c	;volatile
  5789  0011E2  D7F4               	goto	l231
  5790  0011E4                     u4750:
  5791                           
  5792                           ;main.c: 201: }
  5793                           ;main.c: 202: }
  5794                           ;main.c: 203: if (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1) {
  5795  0011E4  BC80               	btfsc	3968,6,c	;volatile
  5796  0011E6  A489               	btfss	3977,2,c	;volatile
  5797  0011E8  D01A               	goto	u4790
  5798                           
  5799                           ;main.c: 204: key = 9;
  5800  0011EA  0E09               	movlw	9
  5801  0011EC  0100               	movlb	0	; () banked
  5802  0011EE  6FA0               	movwf	_key& (0+255),b
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;main.c: 205: guarda_numero_ingresado(key);
  5806  0011F0  0100               	movlb	0	; () banked
  5807  0011F2  51A0               	movf	_key& (0+255),w,b
  5808  0011F4  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5809  0011F6  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5810  0011F8  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5811  0011FC  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5812  001200  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5813                           
  5814                           ;main.c: 206: while (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1) {
  5815  001204  D008               	goto	l236
  5816  001206                     
  5817                           ;main.c: 207: _delay((unsigned long)((40)*(8000000/4000.0)));
  5818  001206  0E68               	movlw	104
  5819  001208  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5820  00120A  0EE4               	movlw	228
  5821  00120C                     u5977:
  5822  00120C  2EE8               	decfsz	wreg,f,c
  5823  00120E  D7FE               	bra	u5977
  5824  001210  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5825  001212  D7FC               	bra	u5977
  5826  001214  D000               	nop2	
  5827  001216                     l236:
  5828  001216  AC80               	btfss	3968,6,c	;volatile
  5829  001218  D002               	goto	u4790
  5830  00121A  B489               	btfsc	3977,2,c	;volatile
  5831  00121C  D7F4               	goto	l237
  5832  00121E                     u4790:
  5833                           
  5834                           ;main.c: 208: }
  5835                           ;main.c: 209: }
  5836                           ;main.c: 210: }
  5837                           ;main.c: 211: LATAbits.LATA0 = 0;
  5838  00121E  9089               	bcf	3977,0,c	;volatile
  5839                           
  5840                           ;main.c: 212: LATAbits.LATA1 = 0;
  5841  001220  9289               	bcf	3977,1,c	;volatile
  5842                           
  5843                           ;main.c: 213: LATAbits.LATA2 = 0;
  5844  001222  9489               	bcf	3977,2,c	;volatile
  5845                           
  5846                           ;main.c: 214: LATAbits.LATA3 = 1;
  5847  001224  8689               	bsf	3977,3,c	;volatile
  5848                           
  5849                           ;main.c: 216: if (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) {
  5850  001226  AE80               	btfss	3968,7,c	;volatile
  5851  001228  0012               	return	
  5852  00122A  A689               	btfss	3977,3,c	;volatile
  5853  00122C  0012               	return	
  5854                           
  5855                           ;main.c: 217: key = 0;
  5856  00122E  0E00               	movlw	0
  5857  001230  0100               	movlb	0	; () banked
  5858  001232  6FA0               	movwf	_key& (0+255),b
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;main.c: 218: guarda_numero_ingresado(key);
  5862  001234  0100               	movlb	0	; () banked
  5863  001236  51A0               	movf	_key& (0+255),w,b
  5864  001238  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5865  00123A  6A3C               	clrf	(??_ingreso_numero+1)& (0+255),c
  5866  00123C  C03B  F039         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  5867  001240  C03C  F03A         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  5868  001244  ECF6  F017         	call	_guarda_numero_ingresado	;wreg free
  5869                           
  5870                           ;main.c: 219: while (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) {
  5871  001248  D008               	goto	l242
  5872  00124A                     
  5873                           ;main.c: 220: _delay((unsigned long)((40)*(8000000/4000.0)));
  5874  00124A  0E68               	movlw	104
  5875  00124C  6E3B               	movwf	??_ingreso_numero& (0+255),c
  5876  00124E  0EE4               	movlw	228
  5877  001250                     u5987:
  5878  001250  2EE8               	decfsz	wreg,f,c
  5879  001252  D7FE               	bra	u5987
  5880  001254  2E3B               	decfsz	??_ingreso_numero& (0+255),f,c
  5881  001256  D7FC               	bra	u5987
  5882  001258  D000               	nop2	
  5883  00125A                     l242:
  5884  00125A  AE80               	btfss	3968,7,c	;volatile
  5885  00125C  0012               	return	
  5886  00125E  A689               	btfss	3977,3,c	;volatile
  5887  001260  0012               	return	
  5888  001262  D7F3               	goto	l243
  5889  001264                     __end_of_ingreso_numero:
  5890                           	opt stack 0
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           postinc0	equ	0xFEE
  5899                           wreg	equ	0xFE8
  5900                           postinc1	equ	0xFE6
  5901                           postdec1	equ	0xFE5
  5902                           fsr1h	equ	0xFE2
  5903                           fsr1l	equ	0xFE1
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           fsr2h	equ	0xFDA
  5908                           fsr2l	equ	0xFD9
  5909                           status	equ	0xFD8
  5910                           
  5911 ;; *************** function _guarda_numero_ingresado *****************
  5912 ;; Defined at:
  5913 ;;		line 116 in file "main.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  num             2   56[COMRAM] PTR int 
  5916 ;;		 -> RAM(3775), 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;		None
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5931 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5932 ;;Total ram usage:        2 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    5
  5935 ;; This function calls:
  5936 ;;		_lcd_gotoxy
  5937 ;;		_lcd_putrs
  5938 ;;		_sprintf
  5939 ;; This function is called by:
  5940 ;;		_ingreso_numero
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text25
  5945  002FEC                     __ptext25:
  5946                           	opt stack 0
  5947  002FEC                     _guarda_numero_ingresado:
  5948                           	opt stack 18
  5949                           
  5950                           ;main.c: 117: if (motivo_ingreso_de_numeros == 0) {
  5951                           
  5952                           ;incstack = 0
  5953  002FEC  0100               	movlb	0	; () banked
  5954  002FEE  518E               	movf	_motivo_ingreso_de_numeros& (0+255),w,b
  5955  002FF0  0100               	movlb	0	; () banked
  5956  002FF2  118F               	iorwf	(_motivo_ingreso_de_numeros+1)& (0+255),w,b
  5957  002FF4  A4D8               	btfss	status,2,c
  5958  002FF6  D02D               	goto	l182
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;main.c: 118: array_contrasenia_ingresada[numeros_ingresados] = num;
  5962  002FF8  90D8               	bcf	status,0,c
  5963  002FFA  0100               	movlb	0	; () banked
  5964  002FFC  3590               	rlcf	_numeros_ingresados& (0+255),w,b
  5965  002FFE  6ED9               	movwf	fsr2l,c
  5966  003000  0100               	movlb	0	; () banked
  5967  003002  3591               	rlcf	(_numeros_ingresados+1)& (0+255),w,b
  5968  003004  6EDA               	movwf	fsr2h,c
  5969  003006  0E60               	movlw	low _array_contrasenia_ingresada
  5970  003008  26D9               	addwf	fsr2l,f,c
  5971  00300A  0E00               	movlw	high _array_contrasenia_ingresada
  5972  00300C  22DA               	addwfc	fsr2h,f,c
  5973  00300E  C039  FFDE         	movff	guarda_numero_ingresado@num,postinc2
  5974  003012  C03A  FFDD         	movff	guarda_numero_ingresado@num+1,postdec2
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;main.c: 119: lcd_gotoxy(numeros_ingresados + 1, 2);
  5978  003016  0E02               	movlw	2
  5979  003018  6E05               	movwf	lcd_gotoxy@y,c
  5980  00301A  0100               	movlb	0	; () banked
  5981  00301C  2990               	incf	_numeros_ingresados& (0+255),w,b
  5982  00301E  EC40  F01C         	call	_lcd_gotoxy
  5983                           
  5984                           ;main.c: 120: sprintf(buffer2, "%01u", num);
  5985  003022  0EA1               	movlw	low _buffer2
  5986  003024  6E22               	movwf	sprintf@sp,c
  5987  003026  0E00               	movlw	high _buffer2
  5988  003028  6E23               	movwf	sprintf@sp+1,c
  5989  00302A  0EF5               	movlw	low STR_13
  5990  00302C  6E24               	movwf	sprintf@f,c
  5991  00302E  0E0F               	movlw	high STR_13
  5992  003030  6E25               	movwf	sprintf@f+1,c
  5993  003032  C039  F026         	movff	guarda_numero_ingresado@num,?_sprintf+4
  5994  003036  C03A  F027         	movff	guarda_numero_ingresado@num+1,?_sprintf+5
  5995  00303A  EC4E  F00A         	call	_sprintf	;wreg free
  5996                           
  5997                           ;main.c: 121: lcd_putrs(buffer2);
  5998  00303E  0EA1               	movlw	low _buffer2
  5999  003040  6E09               	movwf	lcd_putrs@ptr,c
  6000  003042  0E00               	movlw	high _buffer2
  6001  003044  6E0A               	movwf	lcd_putrs@ptr+1,c
  6002  003046  EC70  F01A         	call	_lcd_putrs	;wreg free
  6003                           
  6004                           ;main.c: 122: numeros_ingresados++;
  6005  00304A  0100               	movlb	0	; () banked
  6006  00304C  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  6007  00304E  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  6008                           
  6009                           ;main.c: 123: } else {
  6010  003050  0012               	return	
  6011  003052                     l182:
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;main.c: 124: numeros_para_fecha[numeros_ingresados] = num;
  6015                           
  6016                           ; BSR set to: 0
  6017  003052  90D8               	bcf	status,0,c
  6018  003054  0100               	movlb	0	; () banked
  6019  003056  3590               	rlcf	_numeros_ingresados& (0+255),w,b
  6020  003058  6ED9               	movwf	fsr2l,c
  6021  00305A  0100               	movlb	0	; () banked
  6022  00305C  3591               	rlcf	(_numeros_ingresados+1)& (0+255),w,b
  6023  00305E  6EDA               	movwf	fsr2h,c
  6024  003060  0E80               	movlw	low _numeros_para_fecha
  6025  003062  26D9               	addwf	fsr2l,f,c
  6026  003064  0E00               	movlw	high _numeros_para_fecha
  6027  003066  22DA               	addwfc	fsr2h,f,c
  6028  003068  C039  FFDE         	movff	guarda_numero_ingresado@num,postinc2
  6029  00306C  C03A  FFDD         	movff	guarda_numero_ingresado@num+1,postdec2
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;main.c: 125: numeros_ingresados++;
  6033  003070  0100               	movlb	0	; () banked
  6034  003072  4B90               	infsnz	_numeros_ingresados& (0+255),f,b
  6035  003074  2B91               	incf	(_numeros_ingresados+1)& (0+255),f,b
  6036  003076  0012               	return	
  6037  003078                     __end_of_guarda_numero_ingresado:
  6038                           	opt stack 0
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           intcon	equ	0xFF2
  6046                           postinc0	equ	0xFEE
  6047                           wreg	equ	0xFE8
  6048                           postinc1	equ	0xFE6
  6049                           postdec1	equ	0xFE5
  6050                           fsr1h	equ	0xFE2
  6051                           fsr1l	equ	0xFE1
  6052                           indf2	equ	0xFDF
  6053                           postinc2	equ	0xFDE
  6054                           postdec2	equ	0xFDD
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _covertir_valores_de_array_a_escala_decimal *****************
  6060 ;; Defined at:
  6061 ;;		line 446 in file "main.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;		None
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  i               2    8[BANK0 ] int 
  6066 ;;  numero          2    6[BANK0 ] int 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  2   90[COMRAM] int 
  6069 ;; Registers used:
  6070 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6076 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6077 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6078 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6079 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6080 ;;Total ram usage:       14 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    5
  6083 ;; This function calls:
  6084 ;;		___awtoft
  6085 ;;		___fttol
  6086 ;;		___wmul
  6087 ;;		_lcd_gotoxy
  6088 ;;		_lcd_putrs
  6089 ;;		_pow
  6090 ;;		_sprintf
  6091 ;; This function is called by:
  6092 ;;		_editar_fecha_reloj_digital
  6093 ;;		_editar_hora_reloj_digital
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text26
  6098  002328                     __ptext26:
  6099                           	opt stack 0
  6100  002328                     _covertir_valores_de_array_a_escala_decimal:
  6101                           	opt stack 19
  6102                           
  6103                           ;main.c: 447: int numero = 0;
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;incstack = 0
  6107  002328  0E00               	movlw	0
  6108  00232A  0100               	movlb	0	; () banked
  6109  00232C  6FE4               	movwf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),b
  6110  00232E  0E00               	movlw	0
  6111  002330  6FE3               	movwf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),b
  6112                           
  6113                           ;main.c: 448: for (int i = 2 - 1; i >= 0; i--) {
  6114  002332  0E00               	movlw	0
  6115  002334  0100               	movlb	0	; () banked
  6116  002336  6FE6               	movwf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),b
  6117  002338  0E01               	movlw	1
  6118  00233A  6FE5               	movwf	covertir_valores_de_array_a_escala_decimal@i& (0+255),b
  6119  00233C                     l4303:
  6120                           
  6121                           ; BSR set to: 0
  6122  00233C  0100               	movlb	0	; () banked
  6123  00233E  BFE6               	btfsc	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),7,b
  6124  002340  D05A               	goto	u4850
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;main.c: 449: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  6128                           
  6129                           ; BSR set to: 0
  6130                           
  6131                           ; BSR set to: 0
  6132  002342  0E01               	movlw	1
  6133  002344  0100               	movlb	0	; () banked
  6134  002346  25E5               	addwf	covertir_valores_de_array_a_escala_decimal@i& (0+255),w,b
  6135  002348  6E5D               	movwf	??_covertir_valores_de_array_a_escala_decimal& (0+255),c
  6136  00234A  0E00               	movlw	0
  6137  00234C  0100               	movlb	0	; () banked
  6138  00234E  21E6               	addwfc	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),w,b
  6139  002350  6E5E               	movwf	(??_covertir_valores_de_array_a_escala_decimal+1)& (0+255),c
  6140  002352  1E5D               	comf	??_covertir_valores_de_array_a_escala_decimal,f,c
  6141  002354  1E5E               	comf	??_covertir_valores_de_array_a_escala_decimal+1,f,c
  6142  002356  4A5D               	infsnz	??_covertir_valores_de_array_a_escala_decimal,f,c
  6143  002358  2A5E               	incf	??_covertir_valores_de_array_a_escala_decimal+1,f,c
  6144  00235A  0E02               	movlw	2
  6145  00235C  245D               	addwf	??_covertir_valores_de_array_a_escala_decimal,w,c
  6146  00235E  6E09               	movwf	___awtoft@c,c
  6147  002360  0E00               	movlw	0
  6148  002362  205E               	addwfc	??_covertir_valores_de_array_a_escala_decimal+1,w,c
  6149  002364  6E0A               	movwf	___awtoft@c+1,c
  6150  002366  ECD4  F01B         	call	___awtoft	;wreg free
  6151  00236A  C009  F0DD         	movff	?___awtoft,_covertir_valores_de_array_a_escala_decimal$2440
  6152  00236E  C00A  F0DE         	movff	?___awtoft+1,_covertir_valores_de_array_a_escala_decimal$2440+1
  6153  002372  C00B  F0DF         	movff	?___awtoft+2,_covertir_valores_de_array_a_escala_decimal$2440+2
  6154                           
  6155                           ;main.c: 449: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  6156  002376  C0DD  F04D         	movff	_covertir_valores_de_array_a_escala_decimal$2440,pow@y
  6157  00237A  C0DE  F04E         	movff	_covertir_valores_de_array_a_escala_decimal$2440+1,pow@y+1
  6158  00237E  C0DF  F04F         	movff	_covertir_valores_de_array_a_escala_decimal$2440+2,pow@y+2
  6159  002382  0E00               	movlw	0
  6160  002384  6E4A               	movwf	pow@x,c
  6161  002386  0E20               	movlw	32
  6162  002388  6E4B               	movwf	pow@x+1,c
  6163  00238A  0E41               	movlw	65
  6164  00238C  6E4C               	movwf	pow@x+2,c
  6165  00238E  EC0C  F00F         	call	_pow	;wreg free
  6166  002392  C04A  F0E0         	movff	?_pow,_covertir_valores_de_array_a_escala_decimal$2441
  6167  002396  C04B  F0E1         	movff	?_pow+1,_covertir_valores_de_array_a_escala_decimal$2441+1
  6168  00239A  C04C  F0E2         	movff	?_pow+2,_covertir_valores_de_array_a_escala_decimal$2441+2
  6169                           
  6170                           ;main.c: 449: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  6171  00239E  C0E0  F00D         	movff	_covertir_valores_de_array_a_escala_decimal$2441,___fttol@f1
  6172  0023A2  C0E1  F00E         	movff	_covertir_valores_de_array_a_escala_decimal$2441+1,___fttol@f1+1
  6173  0023A6  C0E2  F00F         	movff	_covertir_valores_de_array_a_escala_decimal$2441+2,___fttol@f1+2
  6174  0023AA  EC97  F012         	call	___fttol	;wreg free
  6175  0023AE  C00D  F01C         	movff	?___fttol,___wmul@multiplier
  6176  0023B2  C00E  F01D         	movff	?___fttol+1,___wmul@multiplier+1
  6177  0023B6  90D8               	bcf	status,0,c
  6178  0023B8  0100               	movlb	0	; () banked
  6179  0023BA  35E5               	rlcf	covertir_valores_de_array_a_escala_decimal@i& (0+255),w,b
  6180  0023BC  6ED9               	movwf	fsr2l,c
  6181  0023BE  0100               	movlb	0	; () banked
  6182  0023C0  35E6               	rlcf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),w,b
  6183  0023C2  6EDA               	movwf	fsr2h,c
  6184  0023C4  0E80               	movlw	low _numeros_para_fecha
  6185  0023C6  26D9               	addwf	fsr2l,f,c
  6186  0023C8  0E00               	movlw	high _numeros_para_fecha
  6187  0023CA  22DA               	addwfc	fsr2h,f,c
  6188  0023CC  CFDE F01E          	movff	postinc2,___wmul@multiplicand
  6189  0023D0  CFDD F01F          	movff	postdec2,___wmul@multiplicand+1
  6190  0023D4  EC09  F01C         	call	___wmul	;wreg free
  6191  0023D8  0100               	movlb	0	; () banked
  6192  0023DA  51E3               	movf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),w,b
  6193  0023DC  241C               	addwf	?___wmul,w,c
  6194  0023DE  0100               	movlb	0	; () banked
  6195  0023E0  6FE3               	movwf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),b
  6196  0023E2  0100               	movlb	0	; () banked
  6197  0023E4  51E4               	movf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),w,b
  6198  0023E6  201D               	addwfc	?___wmul+1,w,c
  6199  0023E8  0100               	movlb	0	; () banked
  6200  0023EA  6FE4               	movwf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),b
  6201                           
  6202                           ; BSR set to: 0
  6203  0023EC  0100               	movlb	0	; () banked
  6204  0023EE  07E5               	decf	covertir_valores_de_array_a_escala_decimal@i& (0+255),f,b
  6205  0023F0  A0D8               	btfss	status,0,c
  6206  0023F2  07E6               	decf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),f,b
  6207  0023F4  D7A3               	goto	l4303
  6208  0023F6                     u4850:
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;main.c: 450: };
  6212                           ;main.c: 451: sprintf(buffer2, "%02u", numero);
  6213                           
  6214                           ; BSR set to: 0
  6215  0023F6  0EA1               	movlw	low _buffer2
  6216  0023F8  6E22               	movwf	sprintf@sp,c
  6217  0023FA  0E00               	movlw	high _buffer2
  6218  0023FC  6E23               	movwf	sprintf@sp+1,c
  6219  0023FE  0E9A               	movlw	low (STR_7+10)
  6220  002400  6E24               	movwf	sprintf@f,c
  6221  002402  0E0F               	movlw	high (STR_7+10)
  6222  002404  6E25               	movwf	sprintf@f+1,c
  6223  002406  C0E3  F026         	movff	covertir_valores_de_array_a_escala_decimal@numero,?_sprintf+4
  6224  00240A  C0E4  F027         	movff	covertir_valores_de_array_a_escala_decimal@numero+1,?_sprintf+5
  6225  00240E  EC4E  F00A         	call	_sprintf	;wreg free
  6226                           
  6227                           ;main.c: 452: lcd_gotoxy(8, 2);
  6228  002412  0E02               	movlw	2
  6229  002414  6E05               	movwf	lcd_gotoxy@y,c
  6230  002416  0E08               	movlw	8
  6231  002418  EC40  F01C         	call	_lcd_gotoxy
  6232                           
  6233                           ;main.c: 453: lcd_putrs(buffer2);
  6234  00241C  0EA1               	movlw	low _buffer2
  6235  00241E  6E09               	movwf	lcd_putrs@ptr,c
  6236  002420  0E00               	movlw	high _buffer2
  6237  002422  6E0A               	movwf	lcd_putrs@ptr+1,c
  6238  002424  EC70  F01A         	call	_lcd_putrs	;wreg free
  6239                           
  6240                           ;main.c: 454: return numero;
  6241  002428  C0E3  F05B         	movff	covertir_valores_de_array_a_escala_decimal@numero,?_covertir_valores_de_array_a_e
      +                          scala_decimal
  6242  00242C  C0E4  F05C         	movff	covertir_valores_de_array_a_escala_decimal@numero+1,?_covertir_valores_de_array_a
      +                          _escala_decimal+1
  6243  002430  0012               	return	
  6244  002432                     __end_of_covertir_valores_de_array_a_escala_decimal:
  6245                           	opt stack 0
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           postinc1	equ	0xFE6
  6256                           postdec1	equ	0xFE5
  6257                           fsr1h	equ	0xFE2
  6258                           fsr1l	equ	0xFE1
  6259                           indf2	equ	0xFDF
  6260                           postinc2	equ	0xFDE
  6261                           postdec2	equ	0xFDD
  6262                           fsr2h	equ	0xFDA
  6263                           fsr2l	equ	0xFD9
  6264                           status	equ	0xFD8
  6265                           
  6266 ;; *************** function _pow *****************
  6267 ;; Defined at:
  6268 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  x               3   73[COMRAM] int 
  6271 ;;  y               3   76[COMRAM] int 
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;  yi              4   86[COMRAM] unsigned long 
  6274 ;;  sign            1   85[COMRAM] unsigned char 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  3   73[COMRAM] unsigned char 
  6277 ;; Registers used:
  6278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6284 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6285 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6287 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6288 ;;Total ram usage:       17 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    4
  6291 ;; This function calls:
  6292 ;;		___ftge
  6293 ;;		___ftmul
  6294 ;;		___ftneg
  6295 ;;		___fttol
  6296 ;;		___lltoft
  6297 ;;		_exp
  6298 ;;		_log
  6299 ;; This function is called by:
  6300 ;;		_covertir_valores_de_array_a_escala_decimal
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text27
  6305  001E18                     __ptext27:
  6306                           	opt stack 0
  6307  001E18                     _pow:
  6308                           	opt stack 19
  6309                           
  6310                           ;incstack = 0
  6311  001E18  0E00               	movlw	0
  6312  001E1A  6E56               	movwf	pow@sign,c
  6313  001E1C  504A               	movf	pow@x,w,c
  6314  001E1E  104B               	iorwf	pow@x+1,w,c
  6315  001E20  104C               	iorwf	pow@x+2,w,c
  6316  001E22  A4D8               	btfss	status,2,c
  6317  001E24  D01C               	goto	l1074
  6318  001E26  0E00               	movlw	0
  6319  001E28  6E01               	movwf	___ftge@ff1,c
  6320  001E2A  0E00               	movlw	0
  6321  001E2C  6E02               	movwf	___ftge@ff1+1,c
  6322  001E2E  0E00               	movlw	0
  6323  001E30  6E03               	movwf	___ftge@ff1+2,c
  6324  001E32  C04D  F004         	movff	pow@y,___ftge@ff2
  6325  001E36  C04E  F005         	movff	pow@y+1,___ftge@ff2+1
  6326  001E3A  C04F  F006         	movff	pow@y+2,___ftge@ff2+2
  6327  001E3E  ECDB  F016         	call	___ftge	;wreg free
  6328  001E42  A0D8               	btfss	status,0,c
  6329  001E44  D005               	goto	l1075
  6330  001E46  0E00               	movlw	0
  6331  001E48  0100               	movlb	0	; () banked
  6332  001E4A  6F89               	movwf	(_errno+1)& (0+255),b
  6333  001E4C  0E21               	movlw	33
  6334  001E4E  6F88               	movwf	_errno& (0+255),b
  6335  001E50                     l1075:
  6336  001E50  0E00               	movlw	0
  6337  001E52  6E4A               	movwf	?_pow,c
  6338  001E54  0E00               	movlw	0
  6339  001E56  6E4B               	movwf	?_pow+1,c
  6340  001E58  0E00               	movlw	0
  6341  001E5A  6E4C               	movwf	?_pow+2,c
  6342  001E5C  0012               	return	
  6343  001E5E                     l1074:
  6344  001E5E  504D               	movf	pow@y,w,c
  6345  001E60  104E               	iorwf	pow@y+1,w,c
  6346  001E62  104F               	iorwf	pow@y+2,w,c
  6347  001E64  A4D8               	btfss	status,2,c
  6348  001E66  D007               	goto	l1077
  6349  001E68  0E00               	movlw	0
  6350  001E6A  6E4A               	movwf	?_pow,c
  6351  001E6C  0E80               	movlw	128
  6352  001E6E  6E4B               	movwf	?_pow+1,c
  6353  001E70  0E3F               	movlw	63
  6354  001E72  6E4C               	movwf	?_pow+2,c
  6355  001E74  0012               	return	
  6356  001E76                     l1077:
  6357  001E76  AE4C               	btfss	pow@x+2,7,c
  6358  001E78  D041               	goto	l1078
  6359  001E7A  C04D  F00D         	movff	pow@y,___fttol@f1
  6360  001E7E  C04E  F00E         	movff	pow@y+1,___fttol@f1+1
  6361  001E82  C04F  F00F         	movff	pow@y+2,___fttol@f1+2
  6362  001E86  EC97  F012         	call	___fttol	;wreg free
  6363  001E8A  C00D  F057         	movff	?___fttol,pow@yi
  6364  001E8E  C00E  F058         	movff	?___fttol+1,pow@yi+1
  6365  001E92  C00F  F059         	movff	?___fttol+2,pow@yi+2
  6366  001E96  C010  F05A         	movff	?___fttol+3,pow@yi+3
  6367  001E9A  C057  F009         	movff	pow@yi,___lltoft@c
  6368  001E9E  C058  F00A         	movff	pow@yi+1,___lltoft@c+1
  6369  001EA2  C059  F00B         	movff	pow@yi+2,___lltoft@c+2
  6370  001EA6  C05A  F00C         	movff	pow@yi+3,___lltoft@c+3
  6371  001EAA  EC19  F01A         	call	___lltoft	;wreg free
  6372  001EAE  504D               	movf	pow@y,w,c
  6373  001EB0  1809               	xorwf	?___lltoft,w,c
  6374  001EB2  E107               	bnz	u4390
  6375  001EB4  504E               	movf	pow@y+1,w,c
  6376  001EB6  180A               	xorwf	?___lltoft+1,w,c
  6377  001EB8  E104               	bnz	u4390
  6378  001EBA  504F               	movf	pow@y+2,w,c
  6379  001EBC  180B               	xorwf	?___lltoft+2,w,c
  6380  001EBE  B4D8               	btfsc	status,2,c
  6381  001EC0  D00C               	goto	l1079
  6382  001EC2                     u4390:
  6383  001EC2  0E00               	movlw	0
  6384  001EC4  0100               	movlb	0	; () banked
  6385  001EC6  6F89               	movwf	(_errno+1)& (0+255),b
  6386  001EC8  0E21               	movlw	33
  6387  001ECA  6F88               	movwf	_errno& (0+255),b
  6388  001ECC  0E00               	movlw	0
  6389  001ECE  6E4A               	movwf	?_pow,c
  6390  001ED0  0E00               	movlw	0
  6391  001ED2  6E4B               	movwf	?_pow+1,c
  6392  001ED4  0E00               	movlw	0
  6393  001ED6  6E4C               	movwf	?_pow+2,c
  6394                           
  6395                           ; BSR set to: 0
  6396  001ED8  0012               	return	
  6397  001EDA                     l1079:
  6398                           
  6399                           ; BSR set to: 0
  6400  001EDA  5057               	movf	pow@yi,w,c
  6401  001EDC  0B01               	andlw	1
  6402  001EDE  6E56               	movwf	pow@sign,c
  6403  001EE0  C04A  F001         	movff	pow@x,___ftneg@f1
  6404  001EE4  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  6405  001EE8  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  6406  001EEC  EC2E  F01C         	call	___ftneg	;wreg free
  6407  001EF0  C001  F04A         	movff	?___ftneg,pow@x
  6408  001EF4  C002  F04B         	movff	?___ftneg+1,pow@x+1
  6409  001EF8  C003  F04C         	movff	?___ftneg+2,pow@x+2
  6410  001EFC                     l1078:
  6411  001EFC  C04A  F03A         	movff	pow@x,log@x
  6412  001F00  C04B  F03B         	movff	pow@x+1,log@x+1
  6413  001F04  C04C  F03C         	movff	pow@x+2,log@x+2
  6414  001F08  EC05  F011         	call	_log	;wreg free
  6415  001F0C  C03A  F050         	movff	?_log,_pow$2442
  6416  001F10  C03B  F051         	movff	?_log+1,_pow$2442+1
  6417  001F14  C03C  F052         	movff	?_log+2,_pow$2442+2
  6418  001F18  C050  F00D         	movff	_pow$2442,___ftmul@f1
  6419  001F1C  C051  F00E         	movff	_pow$2442+1,___ftmul@f1+1
  6420  001F20  C052  F00F         	movff	_pow$2442+2,___ftmul@f1+2
  6421  001F24  C04D  F010         	movff	pow@y,___ftmul@f2
  6422  001F28  C04E  F011         	movff	pow@y+1,___ftmul@f2+1
  6423  001F2C  C04F  F012         	movff	pow@y+2,___ftmul@f2+2
  6424  001F30  EC11  F013         	call	___ftmul	;wreg free
  6425  001F34  C00D  F053         	movff	?___ftmul,_pow$2443
  6426  001F38  C00E  F054         	movff	?___ftmul+1,_pow$2443+1
  6427  001F3C  C00F  F055         	movff	?___ftmul+2,_pow$2443+2
  6428  001F40  C053  F041         	movff	_pow$2443,exp@x
  6429  001F44  C054  F042         	movff	_pow$2443+1,exp@x+1
  6430  001F48  C055  F043         	movff	_pow$2443+2,exp@x+2
  6431  001F4C  EC74  F00C         	call	_exp	;wreg free
  6432  001F50  C041  F04A         	movff	?_exp,pow@x
  6433  001F54  C042  F04B         	movff	?_exp+1,pow@x+1
  6434  001F58  C043  F04C         	movff	?_exp+2,pow@x+2
  6435  001F5C  5056               	movf	pow@sign,w,c
  6436  001F5E  B4D8               	btfsc	status,2,c
  6437  001F60  D00F               	goto	l1080
  6438  001F62  C04A  F001         	movff	pow@x,___ftneg@f1
  6439  001F66  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  6440  001F6A  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  6441  001F6E  EC2E  F01C         	call	___ftneg	;wreg free
  6442  001F72  C001  F04A         	movff	?___ftneg,?_pow
  6443  001F76  C002  F04B         	movff	?___ftneg+1,?_pow+1
  6444  001F7A  C003  F04C         	movff	?___ftneg+2,?_pow+2
  6445  001F7E  0012               	return	
  6446  001F80                     l1080:
  6447  001F80  C04A  F04A         	movff	pow@x,?_pow
  6448  001F84  C04B  F04B         	movff	pow@x+1,?_pow+1
  6449  001F88  C04C  F04C         	movff	pow@x+2,?_pow+2
  6450  001F8C  0012               	return		;funcret
  6451  001F8E                     __end_of_pow:
  6452                           	opt stack 0
  6453                           tblptru	equ	0xFF8
  6454                           tblptrh	equ	0xFF7
  6455                           tblptrl	equ	0xFF6
  6456                           tablat	equ	0xFF5
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           intcon	equ	0xFF2
  6460                           postinc0	equ	0xFEE
  6461                           wreg	equ	0xFE8
  6462                           postinc1	equ	0xFE6
  6463                           postdec1	equ	0xFE5
  6464                           fsr1h	equ	0xFE2
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _log *****************
  6474 ;; Defined at:
  6475 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  x               3   57[COMRAM] unsigned char 
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  exponent        2   60[COMRAM] int 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  3   57[COMRAM] int 
  6482 ;; Registers used:
  6483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6489 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6492 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6493 ;;Total ram usage:        5 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    3
  6496 ;; This function calls:
  6497 ;;		___awtoft
  6498 ;;		___ftadd
  6499 ;;		___ftmul
  6500 ;;		_eval_poly
  6501 ;;		_frexp
  6502 ;; This function is called by:
  6503 ;;		_pow
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text28
  6508  00220A                     __ptext28:
  6509                           	opt stack 0
  6510  00220A                     _log:
  6511                           	opt stack 19
  6512                           
  6513                           ;incstack = 0
  6514  00220A  AE3C               	btfss	log@x+2,7,c
  6515  00220C  D00C               	goto	l1276
  6516  00220E  0E00               	movlw	0
  6517  002210  0100               	movlb	0	; () banked
  6518  002212  6F89               	movwf	(_errno+1)& (0+255),b
  6519  002214  0E21               	movlw	33
  6520  002216  6F88               	movwf	_errno& (0+255),b
  6521  002218  0E00               	movlw	0
  6522  00221A  6E3A               	movwf	?_log,c
  6523  00221C  0E00               	movlw	0
  6524  00221E  6E3B               	movwf	?_log+1,c
  6525  002220  0E00               	movlw	0
  6526  002222  6E3C               	movwf	?_log+2,c
  6527                           
  6528                           ; BSR set to: 0
  6529  002224  0012               	return	
  6530  002226                     l1276:
  6531                           
  6532                           ; BSR set to: 0
  6533  002226  503A               	movf	log@x,w,c
  6534  002228  103B               	iorwf	log@x+1,w,c
  6535  00222A  103C               	iorwf	log@x+2,w,c
  6536  00222C  A4D8               	btfss	status,2,c
  6537  00222E  D00C               	goto	l1278
  6538  002230  0E00               	movlw	0
  6539  002232  0100               	movlb	0	; () banked
  6540  002234  6F89               	movwf	(_errno+1)& (0+255),b
  6541  002236  0E22               	movlw	34
  6542  002238  6F88               	movwf	_errno& (0+255),b
  6543  00223A  0E00               	movlw	0
  6544  00223C  6E3A               	movwf	?_log,c
  6545  00223E  0E00               	movlw	0
  6546  002240  6E3B               	movwf	?_log+1,c
  6547  002242  0E00               	movlw	0
  6548  002244  6E3C               	movwf	?_log+2,c
  6549                           
  6550                           ; BSR set to: 0
  6551  002246  0012               	return	
  6552  002248                     l1278:
  6553                           
  6554                           ; BSR set to: 0
  6555  002248  0E00               	movlw	0
  6556  00224A  6E10               	movwf	___ftmul@f2,c
  6557  00224C  0E00               	movlw	0
  6558  00224E  6E11               	movwf	___ftmul@f2+1,c
  6559  002250  0E40               	movlw	64
  6560  002252  6E12               	movwf	___ftmul@f2+2,c
  6561  002254  0E3D               	movlw	low log@exponent
  6562  002256  6E04               	movwf	frexp@eptr,c
  6563  002258  0E00               	movlw	high log@exponent
  6564  00225A  6E05               	movwf	frexp@eptr+1,c
  6565  00225C  C03A  F001         	movff	log@x,frexp@value
  6566  002260  C03B  F002         	movff	log@x+1,frexp@value+1
  6567  002264  C03C  F003         	movff	log@x+2,frexp@value+2
  6568  002268  EC93  F016         	call	_frexp	;wreg free
  6569  00226C  C001  F00D         	movff	?_frexp,___ftmul@f1
  6570  002270  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  6571  002274  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  6572  002278  EC11  F013         	call	___ftmul	;wreg free
  6573  00227C  C00D  F022         	movff	?___ftmul,___ftadd@f1
  6574  002280  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  6575  002284  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  6576  002288  0E00               	movlw	0
  6577  00228A  6E25               	movwf	___ftadd@f2,c
  6578  00228C  0E80               	movlw	128
  6579  00228E  6E26               	movwf	___ftadd@f2+1,c
  6580  002290  0EBF               	movlw	191
  6581  002292  6E27               	movwf	___ftadd@f2+2,c
  6582  002294  EC68  F00D         	call	___ftadd	;wreg free
  6583  002298  C022  F03A         	movff	?___ftadd,log@x
  6584  00229C  C023  F03B         	movff	?___ftadd+1,log@x+1
  6585  0022A0  C024  F03C         	movff	?___ftadd+2,log@x+2
  6586  0022A4  063D               	decf	log@exponent,f,c
  6587  0022A6  A0D8               	btfss	status,0,c
  6588  0022A8  063E               	decf	log@exponent+1,f,c
  6589  0022AA  C03A  F02E         	movff	log@x,eval_poly@x
  6590  0022AE  C03B  F02F         	movff	log@x+1,eval_poly@x+1
  6591  0022B2  C03C  F030         	movff	log@x+2,eval_poly@x+2
  6592  0022B6  0E2D               	movlw	low log@coeff
  6593  0022B8  6E31               	movwf	eval_poly@d,c
  6594  0022BA  0E0F               	movlw	high log@coeff
  6595  0022BC  6E32               	movwf	eval_poly@d+1,c
  6596  0022BE  0E00               	movlw	0
  6597  0022C0  6E34               	movwf	eval_poly@n+1,c
  6598  0022C2  0E08               	movlw	8
  6599  0022C4  6E33               	movwf	eval_poly@n,c
  6600  0022C6  EC6D  F014         	call	_eval_poly	;wreg free
  6601  0022CA  C02E  F03A         	movff	?_eval_poly,log@x
  6602  0022CE  C02F  F03B         	movff	?_eval_poly+1,log@x+1
  6603  0022D2  C030  F03C         	movff	?_eval_poly+2,log@x+2
  6604  0022D6  0E72               	movlw	114
  6605  0022D8  6E10               	movwf	___ftmul@f2,c
  6606  0022DA  0E31               	movlw	49
  6607  0022DC  6E11               	movwf	___ftmul@f2+1,c
  6608  0022DE  0E3F               	movlw	63
  6609  0022E0  6E12               	movwf	___ftmul@f2+2,c
  6610  0022E2  C03D  F009         	movff	log@exponent,___awtoft@c
  6611  0022E6  C03E  F00A         	movff	log@exponent+1,___awtoft@c+1
  6612  0022EA  ECD4  F01B         	call	___awtoft	;wreg free
  6613  0022EE  C009  F00D         	movff	?___awtoft,___ftmul@f1
  6614  0022F2  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  6615  0022F6  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  6616  0022FA  EC11  F013         	call	___ftmul	;wreg free
  6617  0022FE  C00D  F022         	movff	?___ftmul,___ftadd@f1
  6618  002302  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  6619  002306  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  6620  00230A  C03A  F025         	movff	log@x,___ftadd@f2
  6621  00230E  C03B  F026         	movff	log@x+1,___ftadd@f2+1
  6622  002312  C03C  F027         	movff	log@x+2,___ftadd@f2+2
  6623  002316  EC68  F00D         	call	___ftadd	;wreg free
  6624  00231A  C022  F03A         	movff	?___ftadd,?_log
  6625  00231E  C023  F03B         	movff	?___ftadd+1,?_log+1
  6626  002322  C024  F03C         	movff	?___ftadd+2,?_log+2
  6627  002326  0012               	return	
  6628  002328                     __end_of_log:
  6629                           	opt stack 0
  6630                           tblptru	equ	0xFF8
  6631                           tblptrh	equ	0xFF7
  6632                           tblptrl	equ	0xFF6
  6633                           tablat	equ	0xFF5
  6634                           prodh	equ	0xFF4
  6635                           prodl	equ	0xFF3
  6636                           intcon	equ	0xFF2
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           postinc1	equ	0xFE6
  6640                           postdec1	equ	0xFE5
  6641                           fsr1h	equ	0xFE2
  6642                           fsr1l	equ	0xFE1
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           postdec2	equ	0xFDD
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _exp *****************
  6651 ;; Defined at:
  6652 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  x               3   64[COMRAM] int 
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;  exponent        2   70[COMRAM] int 
  6657 ;;  sign            1   72[COMRAM] unsigned char 
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  3   64[COMRAM] unsigned char 
  6660 ;; Registers used:
  6661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6667 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6668 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6670 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6671 ;;Total ram usage:        9 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    3
  6674 ;; This function calls:
  6675 ;;		___awtoft
  6676 ;;		___ftdiv
  6677 ;;		___ftge
  6678 ;;		___ftmul
  6679 ;;		___ftneg
  6680 ;;		___ftsub
  6681 ;;		___fttol
  6682 ;;		_eval_poly
  6683 ;;		_floor
  6684 ;;		_ldexp
  6685 ;; This function is called by:
  6686 ;;		_pow
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           	psect	text29
  6691  0018E8                     __ptext29:
  6692                           	opt stack 0
  6693  0018E8                     _exp:
  6694                           	opt stack 19
  6695                           
  6696                           ;incstack = 0
  6697  0018E8  5041               	movf	exp@x,w,c
  6698  0018EA  1042               	iorwf	exp@x+1,w,c
  6699  0018EC  1043               	iorwf	exp@x+2,w,c
  6700  0018EE  A4D8               	btfss	status,2,c
  6701  0018F0  D007               	goto	l1234
  6702  0018F2  0E00               	movlw	0
  6703  0018F4  6E41               	movwf	?_exp,c
  6704  0018F6  0E80               	movlw	128
  6705  0018F8  6E42               	movwf	?_exp+1,c
  6706  0018FA  0E3F               	movlw	63
  6707  0018FC  6E43               	movwf	?_exp+2,c
  6708  0018FE  0012               	return	
  6709  001900                     l1234:
  6710  001900  0E72               	movlw	114
  6711  001902  6E01               	movwf	___ftge@ff1,c
  6712  001904  0E31               	movlw	49
  6713  001906  6E02               	movwf	___ftge@ff1+1,c
  6714  001908  0E44               	movlw	68
  6715  00190A  6E03               	movwf	___ftge@ff1+2,c
  6716  00190C  C041  F004         	movff	exp@x,___ftge@ff2
  6717  001910  C042  F005         	movff	exp@x+1,___ftge@ff2+1
  6718  001914  C043  F006         	movff	exp@x+2,___ftge@ff2+2
  6719  001918  ECDB  F016         	call	___ftge	;wreg free
  6720  00191C  B0D8               	btfsc	status,0,c
  6721  00191E  D00C               	goto	l1236
  6722  001920  0E00               	movlw	0
  6723  001922  0100               	movlb	0	; () banked
  6724  001924  6F89               	movwf	(_errno+1)& (0+255),b
  6725  001926  0E22               	movlw	34
  6726  001928  6F88               	movwf	_errno& (0+255),b
  6727  00192A  0EFF               	movlw	255
  6728  00192C  6E41               	movwf	?_exp,c
  6729  00192E  0E7F               	movlw	127
  6730  001930  6E42               	movwf	?_exp+1,c
  6731  001932  0E7F               	movlw	127
  6732  001934  6E43               	movwf	?_exp+2,c
  6733                           
  6734                           ; BSR set to: 0
  6735  001936  0012               	return	
  6736  001938                     l1236:
  6737                           
  6738                           ; BSR set to: 0
  6739  001938  C041  F001         	movff	exp@x,___ftge@ff1
  6740  00193C  C042  F002         	movff	exp@x+1,___ftge@ff1+1
  6741  001940  C043  F003         	movff	exp@x+2,___ftge@ff1+2
  6742  001944  0E49               	movlw	73
  6743  001946  6E04               	movwf	___ftge@ff2,c
  6744  001948  0E3A               	movlw	58
  6745  00194A  6E05               	movwf	___ftge@ff2+1,c
  6746  00194C  0EC4               	movlw	196
  6747  00194E  6E06               	movwf	___ftge@ff2+2,c
  6748  001950  ECDB  F016         	call	___ftge	;wreg free
  6749  001954  B0D8               	btfsc	status,0,c
  6750  001956  D00C               	goto	l1237
  6751  001958  0E00               	movlw	0
  6752  00195A  0100               	movlb	0	; () banked
  6753  00195C  6F89               	movwf	(_errno+1)& (0+255),b
  6754  00195E  0E22               	movlw	34
  6755  001960  6F88               	movwf	_errno& (0+255),b
  6756  001962  0E00               	movlw	0
  6757  001964  6E41               	movwf	?_exp,c
  6758  001966  0E00               	movlw	0
  6759  001968  6E42               	movwf	?_exp+1,c
  6760  00196A  0E00               	movlw	0
  6761  00196C  6E43               	movwf	?_exp+2,c
  6762                           
  6763                           ; BSR set to: 0
  6764  00196E  0012               	return	
  6765  001970                     l1237:
  6766                           
  6767                           ; BSR set to: 0
  6768  001970  AE43               	btfss	exp@x+2,7,c
  6769  001972  D002               	goto	u4290
  6770  001974  0E01               	movlw	1
  6771  001976  D001               	goto	u4300
  6772  001978                     u4290:
  6773  001978  0E00               	movlw	0
  6774  00197A                     u4300:
  6775  00197A  6E49               	movwf	exp@sign,c
  6776  00197C  5049               	movf	exp@sign,w,c
  6777  00197E  B4D8               	btfsc	status,2,c
  6778  001980  D00E               	goto	l1238
  6779  001982  C041  F001         	movff	exp@x,___ftneg@f1
  6780  001986  C042  F002         	movff	exp@x+1,___ftneg@f1+1
  6781  00198A  C043  F003         	movff	exp@x+2,___ftneg@f1+2
  6782  00198E  EC2E  F01C         	call	___ftneg	;wreg free
  6783  001992  C001  F041         	movff	?___ftneg,exp@x
  6784  001996  C002  F042         	movff	?___ftneg+1,exp@x+1
  6785  00199A  C003  F043         	movff	?___ftneg+2,exp@x+2
  6786  00199E                     l1238:
  6787  00199E  C041  F00D         	movff	exp@x,___ftmul@f1
  6788  0019A2  C042  F00E         	movff	exp@x+1,___ftmul@f1+1
  6789  0019A6  C043  F00F         	movff	exp@x+2,___ftmul@f1+2
  6790  0019AA  0EAA               	movlw	170
  6791  0019AC  6E10               	movwf	___ftmul@f2,c
  6792  0019AE  0EB8               	movlw	184
  6793  0019B0  6E11               	movwf	___ftmul@f2+1,c
  6794  0019B2  0E3F               	movlw	63
  6795  0019B4  6E12               	movwf	___ftmul@f2+2,c
  6796  0019B6  EC11  F013         	call	___ftmul	;wreg free
  6797  0019BA  C00D  F041         	movff	?___ftmul,exp@x
  6798  0019BE  C00E  F042         	movff	?___ftmul+1,exp@x+1
  6799  0019C2  C00F  F043         	movff	?___ftmul+2,exp@x+2
  6800  0019C6  C041  F02E         	movff	exp@x,floor@x
  6801  0019CA  C042  F02F         	movff	exp@x+1,floor@x+1
  6802  0019CE  C043  F030         	movff	exp@x+2,floor@x+2
  6803  0019D2  ECFE  F013         	call	_floor	;wreg free
  6804  0019D6  C02E  F044         	movff	?_floor,_exp$2444
  6805  0019DA  C02F  F045         	movff	?_floor+1,_exp$2444+1
  6806  0019DE  C030  F046         	movff	?_floor+2,_exp$2444+2
  6807  0019E2  C044  F00D         	movff	_exp$2444,___fttol@f1
  6808  0019E6  C045  F00E         	movff	_exp$2444+1,___fttol@f1+1
  6809  0019EA  C046  F00F         	movff	_exp$2444+2,___fttol@f1+2
  6810  0019EE  EC97  F012         	call	___fttol	;wreg free
  6811  0019F2  C00D  F047         	movff	?___fttol,exp@exponent
  6812  0019F6  C00E  F048         	movff	?___fttol+1,exp@exponent+1
  6813  0019FA  C041  F02E         	movff	exp@x,___ftsub@f1
  6814  0019FE  C042  F02F         	movff	exp@x+1,___ftsub@f1+1
  6815  001A02  C043  F030         	movff	exp@x+2,___ftsub@f1+2
  6816  001A06  C047  F009         	movff	exp@exponent,___awtoft@c
  6817  001A0A  C048  F00A         	movff	exp@exponent+1,___awtoft@c+1
  6818  001A0E  ECD4  F01B         	call	___awtoft	;wreg free
  6819  001A12  C009  F031         	movff	?___awtoft,___ftsub@f2
  6820  001A16  C00A  F032         	movff	?___awtoft+1,___ftsub@f2+1
  6821  001A1A  C00B  F033         	movff	?___awtoft+2,___ftsub@f2+2
  6822  001A1E  EC78  F01B         	call	___ftsub	;wreg free
  6823  001A22  C02E  F041         	movff	?___ftsub,exp@x
  6824  001A26  C02F  F042         	movff	?___ftsub+1,exp@x+1
  6825  001A2A  C030  F043         	movff	?___ftsub+2,exp@x+2
  6826  001A2E  C041  F02E         	movff	exp@x,eval_poly@x
  6827  001A32  C042  F02F         	movff	exp@x+1,eval_poly@x+1
  6828  001A36  C043  F030         	movff	exp@x+2,eval_poly@x+2
  6829  001A3A  0E0F               	movlw	low exp@coeff
  6830  001A3C  6E31               	movwf	eval_poly@d,c
  6831  001A3E  0E0F               	movlw	high exp@coeff
  6832  001A40  6E32               	movwf	eval_poly@d+1,c
  6833  001A42  0E00               	movlw	0
  6834  001A44  6E34               	movwf	eval_poly@n+1,c
  6835  001A46  0E09               	movlw	9
  6836  001A48  6E33               	movwf	eval_poly@n,c
  6837  001A4A  EC6D  F014         	call	_eval_poly	;wreg free
  6838  001A4E  C02E  F03A         	movff	?_eval_poly,ldexp@value
  6839  001A52  C02F  F03B         	movff	?_eval_poly+1,ldexp@value+1
  6840  001A56  C030  F03C         	movff	?_eval_poly+2,ldexp@value+2
  6841  001A5A  C047  F03D         	movff	exp@exponent,ldexp@newexp
  6842  001A5E  C048  F03E         	movff	exp@exponent+1,ldexp@newexp+1
  6843  001A62  ECD6  F014         	call	_ldexp	;wreg free
  6844  001A66  C03A  F041         	movff	?_ldexp,exp@x
  6845  001A6A  C03B  F042         	movff	?_ldexp+1,exp@x+1
  6846  001A6E  C03C  F043         	movff	?_ldexp+2,exp@x+2
  6847  001A72  5049               	movf	exp@sign,w,c
  6848  001A74  B4D8               	btfsc	status,2,c
  6849  001A76  D025               	goto	l1239
  6850  001A78  2841               	incf	exp@x,w,c
  6851  001A7A  E10E               	bnz	l4037
  6852  001A7C  0E7F               	movlw	127
  6853  001A7E  1842               	xorwf	exp@x+1,w,c
  6854  001A80  E10B               	bnz	l4037
  6855  001A82  0E7F               	movlw	127
  6856  001A84  1843               	xorwf	exp@x+2,w,c
  6857  001A86  A4D8               	btfss	status,2,c
  6858  001A88  D007               	goto	l1240
  6859  001A8A  0E00               	movlw	0
  6860  001A8C  6E41               	movwf	?_exp,c
  6861  001A8E  0E00               	movlw	0
  6862  001A90  6E42               	movwf	?_exp+1,c
  6863  001A92  0E00               	movlw	0
  6864  001A94  6E43               	movwf	?_exp+2,c
  6865  001A96  0012               	return	
  6866  001A98                     l1240:
  6867  001A98                     l4037:
  6868  001A98  0E00               	movlw	0
  6869  001A9A  6E09               	movwf	___ftdiv@f1,c
  6870  001A9C  0E80               	movlw	128
  6871  001A9E  6E0A               	movwf	___ftdiv@f1+1,c
  6872  001AA0  0E3F               	movlw	63
  6873  001AA2  6E0B               	movwf	___ftdiv@f1+2,c
  6874  001AA4  C041  F00C         	movff	exp@x,___ftdiv@f2
  6875  001AA8  C042  F00D         	movff	exp@x+1,___ftdiv@f2+1
  6876  001AAC  C043  F00E         	movff	exp@x+2,___ftdiv@f2+2
  6877  001AB0  EC8B  F013         	call	___ftdiv	;wreg free
  6878  001AB4  C009  F041         	movff	?___ftdiv,?_exp
  6879  001AB8  C00A  F042         	movff	?___ftdiv+1,?_exp+1
  6880  001ABC  C00B  F043         	movff	?___ftdiv+2,?_exp+2
  6881  001AC0  0012               	return	
  6882  001AC2                     l1239:
  6883  001AC2  C041  F041         	movff	exp@x,?_exp
  6884  001AC6  C042  F042         	movff	exp@x+1,?_exp+1
  6885  001ACA  C043  F043         	movff	exp@x+2,?_exp+2
  6886  001ACE  0012               	return		;funcret
  6887  001AD0                     __end_of_exp:
  6888                           	opt stack 0
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           intcon	equ	0xFF2
  6896                           postinc0	equ	0xFEE
  6897                           wreg	equ	0xFE8
  6898                           postinc1	equ	0xFE6
  6899                           postdec1	equ	0xFE5
  6900                           fsr1h	equ	0xFE2
  6901                           fsr1l	equ	0xFE1
  6902                           indf2	equ	0xFDF
  6903                           postinc2	equ	0xFDE
  6904                           postdec2	equ	0xFDD
  6905                           fsr2h	equ	0xFDA
  6906                           fsr2l	equ	0xFD9
  6907                           status	equ	0xFD8
  6908                           
  6909 ;; *************** function _ldexp *****************
  6910 ;; Defined at:
  6911 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  value           3   57[COMRAM] unsigned char 
  6914 ;;  newexp          2   60[COMRAM] int 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  3   57[COMRAM] int 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6926 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6928 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6929 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6930 ;;Total ram usage:        7 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; This function calls:
  6933 ;;		Nothing
  6934 ;; This function is called by:
  6935 ;;		_exp
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text30
  6940  0029AC                     __ptext30:
  6941                           	opt stack 0
  6942  0029AC                     _ldexp:
  6943                           	opt stack 21
  6944                           
  6945                           ;incstack = 0
  6946  0029AC  503A               	movf	ldexp@value,w,c
  6947  0029AE  103B               	iorwf	ldexp@value+1,w,c
  6948  0029B0  103C               	iorwf	ldexp@value+2,w,c
  6949  0029B2  A4D8               	btfss	status,2,c
  6950  0029B4  D007               	goto	l1258
  6951  0029B6  0E00               	movlw	0
  6952  0029B8  6E3A               	movwf	?_ldexp,c
  6953  0029BA  0E00               	movlw	0
  6954  0029BC  6E3B               	movwf	?_ldexp+1,c
  6955  0029BE  0E00               	movlw	0
  6956  0029C0  6E3C               	movwf	?_ldexp+2,c
  6957  0029C2  0012               	return	
  6958  0029C4                     l1258:
  6959  0029C4  503C               	movf	ldexp@value+2,w,c
  6960  0029C6  0B7F               	andlw	127
  6961  0029C8  6E3F               	movwf	??_ldexp& (0+255),c
  6962  0029CA  6A40               	clrf	(??_ldexp+1)& (0+255),c
  6963  0029CC  90D8               	bcf	status,0,c
  6964  0029CE  363F               	rlcf	??_ldexp,f,c
  6965  0029D0  3640               	rlcf	??_ldexp+1,f,c
  6966  0029D2  503F               	movf	??_ldexp,w,c
  6967  0029D4  263D               	addwf	ldexp@newexp,f,c
  6968  0029D6  5040               	movf	??_ldexp+1,w,c
  6969  0029D8  223E               	addwfc	ldexp@newexp+1,f,c
  6970  0029DA  AE3B               	btfss	ldexp@value+1,7,c
  6971  0029DC  D003               	goto	u3720
  6972  0029DE  6A3F               	clrf	??_ldexp& (0+255),c
  6973  0029E0  2A3F               	incf	??_ldexp& (0+255),f,c
  6974  0029E2  D001               	goto	u3728
  6975  0029E4                     u3720:
  6976  0029E4  6A3F               	clrf	??_ldexp& (0+255),c
  6977  0029E6                     u3728:
  6978  0029E6  503F               	movf	??_ldexp,w,c
  6979  0029E8  263D               	addwf	ldexp@newexp,f,c
  6980  0029EA  0E00               	movlw	0
  6981  0029EC  223E               	addwfc	ldexp@newexp+1,f,c
  6982  0029EE  AE3E               	btfss	ldexp@newexp+1,7,c
  6983  0029F0  D00C               	goto	l1260
  6984  0029F2  0E00               	movlw	0
  6985  0029F4  0100               	movlb	0	; () banked
  6986  0029F6  6F89               	movwf	(_errno+1)& (0+255),b
  6987  0029F8  0E22               	movlw	34
  6988  0029FA  6F88               	movwf	_errno& (0+255),b
  6989  0029FC  0E00               	movlw	0
  6990  0029FE  6E3A               	movwf	?_ldexp,c
  6991  002A00  0E00               	movlw	0
  6992  002A02  6E3B               	movwf	?_ldexp+1,c
  6993  002A04  0E00               	movlw	0
  6994  002A06                     L3:
  6995  002A06  6E3C               	movwf	?_ldexp+2,c
  6996                           
  6997                           ; BSR set to: 0
  6998  002A08  0012               	return	
  6999  002A0A                     l1260:
  7000                           
  7001                           ; BSR set to: 0
  7002  002A0A  BE3E               	btfsc	ldexp@newexp+1,7,c
  7003  002A0C  D016               	goto	l1262
  7004  002A0E  043E               	decf	ldexp@newexp+1,w,c
  7005  002A10  A0D8               	btfss	status,0,c
  7006  002A12  D013               	goto	l1262
  7007  002A14  0E00               	movlw	0
  7008  002A16  0100               	movlb	0	; () banked
  7009  002A18  6F89               	movwf	(_errno+1)& (0+255),b
  7010  002A1A  0E22               	movlw	34
  7011  002A1C  6F88               	movwf	_errno& (0+255),b
  7012                           
  7013                           ; BSR set to: 0
  7014  002A1E  AE3C               	btfss	ldexp@value+2,7,c
  7015  002A20  D006               	goto	l1263
  7016                           
  7017                           ; BSR set to: 0
  7018  002A22  0EFF               	movlw	255
  7019  002A24  6E3A               	movwf	?_ldexp,c
  7020  002A26  0E7F               	movlw	127
  7021  002A28  6E3B               	movwf	?_ldexp+1,c
  7022  002A2A  0EFF               	movlw	255
  7023  002A2C  D7EC               	goto	L3
  7024  002A2E                     l1263:
  7025                           
  7026                           ; BSR set to: 0
  7027                           
  7028                           ; BSR set to: 0
  7029  002A2E  0EFF               	movlw	255
  7030  002A30  6E3A               	movwf	?_ldexp,c
  7031  002A32  0E7F               	movlw	127
  7032  002A34  6E3B               	movwf	?_ldexp+1,c
  7033  002A36  0E7F               	movlw	127
  7034  002A38  D7E6               	goto	L3
  7035  002A3A                     l1262:
  7036                           
  7037                           ; BSR set to: 0
  7038  002A3A  343E               	rlcf	ldexp@newexp+1,w,c
  7039  002A3C  303E               	rrcf	ldexp@newexp+1,w,c
  7040  002A3E  6E40               	movwf	(??_ldexp+1)& (0+255),c
  7041  002A40  303D               	rrcf	ldexp@newexp,w,c
  7042  002A42  6E3F               	movwf	??_ldexp& (0+255),c
  7043  002A44  503C               	movf	ldexp@value+2,w,c
  7044  002A46  183F               	xorwf	??_ldexp,w,c
  7045  002A48  0B80               	andlw	-128
  7046  002A4A  183F               	xorwf	??_ldexp,w,c
  7047  002A4C  6E3C               	movwf	ldexp@value+2,c
  7048  002A4E  C03D  F03F         	movff	ldexp@newexp,??_ldexp
  7049  002A52  0E01               	movlw	1
  7050  002A54  163F               	andwf	??_ldexp,f,c
  7051  002A56  323F               	rrcf	??_ldexp,f,c
  7052  002A58  323F               	rrcf	??_ldexp,f,c
  7053  002A5A  503B               	movf	ldexp@value+1,w,c
  7054  002A5C  183F               	xorwf	??_ldexp,w,c
  7055  002A5E  0B7F               	andlw	-129
  7056  002A60  183F               	xorwf	??_ldexp,w,c
  7057  002A62  6E3B               	movwf	ldexp@value+1,c
  7058  002A64  C03A  F03A         	movff	ldexp@value,?_ldexp
  7059  002A68  C03B  F03B         	movff	ldexp@value+1,?_ldexp+1
  7060  002A6C  C03C  F03C         	movff	ldexp@value+2,?_ldexp+2
  7061  002A70  0012               	return	
  7062  002A72                     __end_of_ldexp:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           postinc0	equ	0xFEE
  7072                           wreg	equ	0xFE8
  7073                           postinc1	equ	0xFE6
  7074                           postdec1	equ	0xFE5
  7075                           fsr1h	equ	0xFE2
  7076                           fsr1l	equ	0xFE1
  7077                           indf2	equ	0xFDF
  7078                           postinc2	equ	0xFDE
  7079                           postdec2	equ	0xFDD
  7080                           fsr2h	equ	0xFDA
  7081                           fsr2l	equ	0xFD9
  7082                           status	equ	0xFD8
  7083                           
  7084 ;; *************** function _floor *****************
  7085 ;; Defined at:
  7086 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  x               3   45[COMRAM] int 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;  i               3   48[COMRAM] int 
  7091 ;;  expon           2   51[COMRAM] int 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  3   45[COMRAM] int 
  7094 ;; Registers used:
  7095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7101 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7102 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7104 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7105 ;;Total ram usage:        8 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    2
  7108 ;; This function calls:
  7109 ;;		___altoft
  7110 ;;		___ftadd
  7111 ;;		___ftge
  7112 ;;		___fttol
  7113 ;;		_frexp
  7114 ;; This function is called by:
  7115 ;;		_exp
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text31
  7120  0027FC                     __ptext31:
  7121                           	opt stack 0
  7122  0027FC                     _floor:
  7123                           	opt stack 19
  7124                           
  7125                           ;incstack = 0
  7126  0027FC  C02E  F001         	movff	floor@x,frexp@value
  7127  002800  C02F  F002         	movff	floor@x+1,frexp@value+1
  7128  002804  C030  F003         	movff	floor@x+2,frexp@value+2
  7129  002808  0E34               	movlw	low floor@expon
  7130  00280A  6E04               	movwf	frexp@eptr,c
  7131  00280C  0E00               	movlw	high floor@expon
  7132  00280E  6E05               	movwf	frexp@eptr+1,c
  7133  002810  EC93  F016         	call	_frexp	;wreg free
  7134  002814  AE35               	btfss	floor@expon+1,7,c
  7135  002816  D010               	goto	l1245
  7136  002818  AE30               	btfss	floor@x+2,7,c
  7137  00281A  D007               	goto	l1246
  7138  00281C  0E00               	movlw	0
  7139  00281E  6E2E               	movwf	?_floor,c
  7140  002820  0E80               	movlw	128
  7141  002822  6E2F               	movwf	?_floor+1,c
  7142  002824  0EBF               	movlw	191
  7143  002826  6E30               	movwf	?_floor+2,c
  7144  002828  0012               	return	
  7145  00282A                     l1246:
  7146  00282A  0E00               	movlw	0
  7147  00282C  6E2E               	movwf	?_floor,c
  7148  00282E  0E00               	movlw	0
  7149  002830  6E2F               	movwf	?_floor+1,c
  7150  002832  0E00               	movlw	0
  7151  002834  6E30               	movwf	?_floor+2,c
  7152  002836  0012               	return	
  7153  002838                     l1245:
  7154  002838  5035               	movf	floor@expon+1,w,c
  7155  00283A  E104               	bnz	u3680
  7156  00283C  0E15               	movlw	21
  7157  00283E  5C34               	subwf	floor@expon,w,c
  7158  002840  A0D8               	btfss	status,0,c
  7159  002842  D007               	goto	l1248
  7160  002844                     u3680:
  7161  002844  C02E  F02E         	movff	floor@x,?_floor
  7162  002848  C02F  F02F         	movff	floor@x+1,?_floor+1
  7163  00284C  C030  F030         	movff	floor@x+2,?_floor+2
  7164  002850  0012               	return	
  7165  002852                     l1248:
  7166  002852  C02E  F00D         	movff	floor@x,___fttol@f1
  7167  002856  C02F  F00E         	movff	floor@x+1,___fttol@f1+1
  7168  00285A  C030  F00F         	movff	floor@x+2,___fttol@f1+2
  7169  00285E  EC97  F012         	call	___fttol	;wreg free
  7170  002862  C00D  F01C         	movff	?___fttol,___altoft@c
  7171  002866  C00E  F01D         	movff	?___fttol+1,___altoft@c+1
  7172  00286A  C00F  F01E         	movff	?___fttol+2,___altoft@c+2
  7173  00286E  C010  F01F         	movff	?___fttol+3,___altoft@c+3
  7174  002872  ECF9  F018         	call	___altoft	;wreg free
  7175  002876  C01C  F031         	movff	?___altoft,floor@i
  7176  00287A  C01D  F032         	movff	?___altoft+1,floor@i+1
  7177  00287E  C01E  F033         	movff	?___altoft+2,floor@i+2
  7178  002882  C02E  F001         	movff	floor@x,___ftge@ff1
  7179  002886  C02F  F002         	movff	floor@x+1,___ftge@ff1+1
  7180  00288A  C030  F003         	movff	floor@x+2,___ftge@ff1+2
  7181  00288E  C031  F004         	movff	floor@i,___ftge@ff2
  7182  002892  C032  F005         	movff	floor@i+1,___ftge@ff2+1
  7183  002896  C033  F006         	movff	floor@i+2,___ftge@ff2+2
  7184  00289A  ECDB  F016         	call	___ftge	;wreg free
  7185  00289E  B0D8               	btfsc	status,0,c
  7186  0028A0  D015               	goto	l1249
  7187  0028A2  C031  F022         	movff	floor@i,___ftadd@f1
  7188  0028A6  C032  F023         	movff	floor@i+1,___ftadd@f1+1
  7189  0028AA  C033  F024         	movff	floor@i+2,___ftadd@f1+2
  7190  0028AE  0E00               	movlw	0
  7191  0028B0  6E25               	movwf	___ftadd@f2,c
  7192  0028B2  0E80               	movlw	128
  7193  0028B4  6E26               	movwf	___ftadd@f2+1,c
  7194  0028B6  0EBF               	movlw	191
  7195  0028B8  6E27               	movwf	___ftadd@f2+2,c
  7196  0028BA  EC68  F00D         	call	___ftadd	;wreg free
  7197  0028BE  C022  F02E         	movff	?___ftadd,?_floor
  7198  0028C2  C023  F02F         	movff	?___ftadd+1,?_floor+1
  7199  0028C6  C024  F030         	movff	?___ftadd+2,?_floor+2
  7200  0028CA  0012               	return	
  7201  0028CC                     l1249:
  7202  0028CC  C031  F02E         	movff	floor@i,?_floor
  7203  0028D0  C032  F02F         	movff	floor@i+1,?_floor+1
  7204  0028D4  C033  F030         	movff	floor@i+2,?_floor+2
  7205  0028D8  0012               	return		;funcret
  7206  0028DA                     __end_of_floor:
  7207                           	opt stack 0
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           postinc0	equ	0xFEE
  7216                           wreg	equ	0xFE8
  7217                           postinc1	equ	0xFE6
  7218                           postdec1	equ	0xFE5
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function _frexp *****************
  7229 ;; Defined at:
  7230 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  value           3    0[COMRAM] int 
  7233 ;;  eptr            2    3[COMRAM] PTR int 
  7234 ;;		 -> log@exponent(2), floor@expon(2), 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  3    0[COMRAM] PTR int 
  7239 ;; Registers used:
  7240 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7246 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7249 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7250 ;;Total ram usage:        7 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; This function calls:
  7253 ;;		Nothing
  7254 ;; This function is called by:
  7255 ;;		_floor
  7256 ;;		_log
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           	psect	text32
  7261  002D26                     __ptext32:
  7262                           	opt stack 0
  7263  002D26                     _frexp:
  7264                           	opt stack 21
  7265                           
  7266                           ;incstack = 0
  7267  002D26  5001               	movf	frexp@value,w,c
  7268  002D28  1002               	iorwf	frexp@value+1,w,c
  7269  002D2A  1003               	iorwf	frexp@value+2,w,c
  7270  002D2C  A4D8               	btfss	status,2,c
  7271  002D2E  D00F               	goto	l1254
  7272  002D30  C004  FFD9         	movff	frexp@eptr,fsr2l
  7273  002D34  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7274  002D38  0E00               	movlw	0
  7275  002D3A  6EDE               	movwf	postinc2,c
  7276  002D3C  0E00               	movlw	0
  7277  002D3E  6EDD               	movwf	postdec2,c
  7278  002D40  0E00               	movlw	0
  7279  002D42  6E01               	movwf	?_frexp,c
  7280  002D44  0E00               	movlw	0
  7281  002D46  6E02               	movwf	?_frexp+1,c
  7282  002D48  0E00               	movlw	0
  7283  002D4A  6E03               	movwf	?_frexp+2,c
  7284  002D4C  0012               	return	
  7285  002D4E                     l1254:
  7286  002D4E  5003               	movf	frexp@value+2,w,c
  7287  002D50  0B7F               	andlw	127
  7288  002D52  6E06               	movwf	??_frexp& (0+255),c
  7289  002D54  6A07               	clrf	(??_frexp+1)& (0+255),c
  7290  002D56  90D8               	bcf	status,0,c
  7291  002D58  3606               	rlcf	??_frexp,f,c
  7292  002D5A  3607               	rlcf	??_frexp+1,f,c
  7293  002D5C  C004  FFD9         	movff	frexp@eptr,fsr2l
  7294  002D60  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7295  002D64  C006  FFDE         	movff	??_frexp,postinc2
  7296  002D68  C007  FFDD         	movff	??_frexp+1,postdec2
  7297  002D6C  AE02               	btfss	frexp@value+1,7,c
  7298  002D6E  D003               	goto	u3490
  7299  002D70  6A06               	clrf	??_frexp& (0+255),c
  7300  002D72  2A06               	incf	??_frexp& (0+255),f,c
  7301  002D74  D001               	goto	u3498
  7302  002D76                     u3490:
  7303  002D76  6A06               	clrf	??_frexp& (0+255),c
  7304  002D78                     u3498:
  7305  002D78  5006               	movf	??_frexp,w,c
  7306  002D7A  C004  FFD9         	movff	frexp@eptr,fsr2l
  7307  002D7E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7308  002D82  12DE               	iorwf	postinc2,f,c
  7309  002D84  0E00               	movlw	0
  7310  002D86  12DD               	iorwf	postdec2,f,c
  7311  002D88  C004  FFD9         	movff	frexp@eptr,fsr2l
  7312  002D8C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7313  002D90  0E82               	movlw	130
  7314  002D92  26DE               	addwf	postinc2,f,c
  7315  002D94  0EFF               	movlw	255
  7316  002D96  22DD               	addwfc	postdec2,f,c
  7317  002D98  8003               	bsf	frexp@value+2,0,c
  7318  002D9A  8203               	bsf	frexp@value+2,1,c
  7319  002D9C  8403               	bsf	frexp@value+2,2,c
  7320  002D9E  8603               	bsf	frexp@value+2,3,c
  7321  002DA0  8803               	bsf	frexp@value+2,4,c
  7322  002DA2  8A03               	bsf	frexp@value+2,5,c
  7323  002DA4  9C03               	bcf	frexp@value+2,6,c
  7324  002DA6  9E02               	bcf	frexp@value+1,7,c
  7325  002DA8  C001  F001         	movff	frexp@value,?_frexp
  7326  002DAC  C002  F002         	movff	frexp@value+1,?_frexp+1
  7327  002DB0  C003  F003         	movff	frexp@value+2,?_frexp+2
  7328  002DB4  0012               	return	
  7329  002DB6                     __end_of_frexp:
  7330                           	opt stack 0
  7331                           tblptru	equ	0xFF8
  7332                           tblptrh	equ	0xFF7
  7333                           tblptrl	equ	0xFF6
  7334                           tablat	equ	0xFF5
  7335                           prodh	equ	0xFF4
  7336                           prodl	equ	0xFF3
  7337                           intcon	equ	0xFF2
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           postinc1	equ	0xFE6
  7341                           postdec1	equ	0xFE5
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function ___fttol *****************
  7352 ;; Defined at:
  7353 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;  f1              3   12[COMRAM] float 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  lval            4   22[COMRAM] unsigned long 
  7358 ;;  exp1            1   26[COMRAM] unsigned char 
  7359 ;;  sign1           1   21[COMRAM] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  4   12[COMRAM] long 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7369 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7370 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7371 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7372 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7373 ;;Total ram usage:       15 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; This function calls:
  7376 ;;		Nothing
  7377 ;; This function is called by:
  7378 ;;		_covertir_valores_de_array_a_escala_decimal
  7379 ;;		_pow
  7380 ;;		_exp
  7381 ;;		_floor
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           	psect	text33
  7386  00252E                     __ptext33:
  7387                           	opt stack 0
  7388  00252E                     ___fttol:
  7389                           	opt stack 20
  7390                           
  7391                           ;incstack = 0
  7392  00252E  C00F  F011         	movff	___fttol@f1+2,??___fttol
  7393  002532  6A12               	clrf	(??___fttol+1)& (0+255),c
  7394  002534  6A13               	clrf	(??___fttol+2)& (0+255),c
  7395  002536  340E               	rlcf	___fttol@f1+1,w,c
  7396  002538  3611               	rlcf	??___fttol& (0+255),f,c
  7397  00253A  E301               	bnc	u3401
  7398  00253C  8012               	bsf	(??___fttol+1)& (0+255),0,c
  7399  00253E                     u3401:
  7400  00253E  5011               	movf	??___fttol,w,c
  7401  002540  6E1B               	movwf	___fttol@exp1,c
  7402  002542  501B               	movf	___fttol@exp1,w,c
  7403  002544  A4D8               	btfss	status,2,c
  7404  002546  D009               	goto	l950
  7405  002548  0E00               	movlw	0
  7406  00254A  6E0D               	movwf	?___fttol,c
  7407  00254C  0E00               	movlw	0
  7408  00254E  6E0E               	movwf	?___fttol+1,c
  7409  002550  0E00               	movlw	0
  7410  002552  6E0F               	movwf	?___fttol+2,c
  7411  002554  0E00               	movlw	0
  7412  002556  6E10               	movwf	?___fttol+3,c
  7413  002558  0012               	return	
  7414  00255A                     l950:
  7415  00255A  0E17               	movlw	23
  7416  00255C  6E11               	movwf	??___fttol& (0+255),c
  7417  00255E  C00D  F012         	movff	___fttol@f1,??___fttol+1
  7418  002562  C00E  F013         	movff	___fttol@f1+1,??___fttol+2
  7419  002566  C00F  F014         	movff	___fttol@f1+2,??___fttol+3
  7420  00256A  2811               	incf	??___fttol,w,c
  7421  00256C  6E15               	movwf	(??___fttol+4)& (0+255),c
  7422  00256E  D004               	goto	u3420
  7423  002570                     u3425:
  7424  002570  90D8               	bcf	status,0,c
  7425  002572  3214               	rrcf	??___fttol+3,f,c
  7426  002574  3213               	rrcf	??___fttol+2,f,c
  7427  002576  3212               	rrcf	??___fttol+1,f,c
  7428  002578                     u3420:
  7429  002578  2E15               	decfsz	(??___fttol+4)& (0+255),f,c
  7430  00257A  D7FA               	goto	u3425
  7431  00257C  5012               	movf	??___fttol+1,w,c
  7432  00257E  6E16               	movwf	___fttol@sign1,c
  7433  002580  8E0E               	bsf	___fttol@f1+1,7,c
  7434  002582  0EFF               	movlw	255
  7435  002584  160D               	andwf	___fttol@f1,f,c
  7436  002586  0EFF               	movlw	255
  7437  002588  160E               	andwf	___fttol@f1+1,f,c
  7438  00258A  0E00               	movlw	0
  7439  00258C  160F               	andwf	___fttol@f1+2,f,c
  7440  00258E  500D               	movf	___fttol@f1,w,c
  7441  002590  6E17               	movwf	___fttol@lval,c
  7442  002592  500E               	movf	___fttol@f1+1,w,c
  7443  002594  6E18               	movwf	___fttol@lval+1,c
  7444  002596  500F               	movf	___fttol@f1+2,w,c
  7445  002598  6E19               	movwf	___fttol@lval+2,c
  7446  00259A  6A1A               	clrf	___fttol@lval+3,c
  7447  00259C  0E8E               	movlw	142
  7448  00259E  5E1B               	subwf	___fttol@exp1,f,c
  7449  0025A0  AE1B               	btfss	___fttol@exp1,7,c
  7450  0025A2  D016               	goto	l952
  7451  0025A4  501B               	movf	___fttol@exp1,w,c
  7452  0025A6  0A80               	xorlw	128
  7453  0025A8  0F8F               	addlw	143
  7454  0025AA  B0D8               	btfsc	status,0,c
  7455  0025AC  D009               	goto	l953
  7456  0025AE  0E00               	movlw	0
  7457  0025B0  6E0D               	movwf	?___fttol,c
  7458  0025B2  0E00               	movlw	0
  7459  0025B4  6E0E               	movwf	?___fttol+1,c
  7460  0025B6  0E00               	movlw	0
  7461  0025B8  6E0F               	movwf	?___fttol+2,c
  7462  0025BA  0E00               	movlw	0
  7463  0025BC  6E10               	movwf	?___fttol+3,c
  7464  0025BE  0012               	return	
  7465  0025C0                     l953:
  7466  0025C0  90D8               	bcf	status,0,c
  7467  0025C2  321A               	rrcf	___fttol@lval+3,f,c
  7468  0025C4  3219               	rrcf	___fttol@lval+2,f,c
  7469  0025C6  3218               	rrcf	___fttol@lval+1,f,c
  7470  0025C8  3217               	rrcf	___fttol@lval,f,c
  7471  0025CA  3E1B               	incfsz	___fttol@exp1,f,c
  7472  0025CC  D7F9               	goto	l953
  7473  0025CE  D015               	goto	u3460
  7474  0025D0                     l952:
  7475  0025D0  0E17               	movlw	23
  7476  0025D2  641B               	cpfsgt	___fttol@exp1,c
  7477  0025D4  D00F               	goto	l958
  7478  0025D6  0E00               	movlw	0
  7479  0025D8  6E0D               	movwf	?___fttol,c
  7480  0025DA  0E00               	movlw	0
  7481  0025DC  6E0E               	movwf	?___fttol+1,c
  7482  0025DE  0E00               	movlw	0
  7483  0025E0  6E0F               	movwf	?___fttol+2,c
  7484  0025E2  0E00               	movlw	0
  7485  0025E4  6E10               	movwf	?___fttol+3,c
  7486  0025E6  0012               	return	
  7487  0025E8  90D8               	bcf	status,0,c
  7488  0025EA  3617               	rlcf	___fttol@lval,f,c
  7489  0025EC  3618               	rlcf	___fttol@lval+1,f,c
  7490  0025EE  3619               	rlcf	___fttol@lval+2,f,c
  7491  0025F0  361A               	rlcf	___fttol@lval+3,f,c
  7492  0025F2  061B               	decf	___fttol@exp1,f,c
  7493  0025F4                     l958:
  7494  0025F4  501B               	movf	___fttol@exp1,w,c
  7495  0025F6  A4D8               	btfss	status,2,c
  7496  0025F8  D7F7               	goto	l959
  7497  0025FA                     u3460:
  7498  0025FA  5016               	movf	___fttol@sign1,w,c
  7499  0025FC  B4D8               	btfsc	status,2,c
  7500  0025FE  D008               	goto	l961
  7501  002600  1E1A               	comf	___fttol@lval+3,f,c
  7502  002602  1E19               	comf	___fttol@lval+2,f,c
  7503  002604  1E18               	comf	___fttol@lval+1,f,c
  7504  002606  6C17               	negf	___fttol@lval,c
  7505  002608  0E00               	movlw	0
  7506  00260A  2218               	addwfc	___fttol@lval+1,f,c
  7507  00260C  2219               	addwfc	___fttol@lval+2,f,c
  7508  00260E  221A               	addwfc	___fttol@lval+3,f,c
  7509  002610                     l961:
  7510  002610  C017  F00D         	movff	___fttol@lval,?___fttol
  7511  002614  C018  F00E         	movff	___fttol@lval+1,?___fttol+1
  7512  002618  C019  F00F         	movff	___fttol@lval+2,?___fttol+2
  7513  00261C  C01A  F010         	movff	___fttol@lval+3,?___fttol+3
  7514  002620  0012               	return	
  7515  002622                     __end_of___fttol:
  7516                           	opt stack 0
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           prodh	equ	0xFF4
  7522                           prodl	equ	0xFF3
  7523                           intcon	equ	0xFF2
  7524                           postinc0	equ	0xFEE
  7525                           wreg	equ	0xFE8
  7526                           postinc1	equ	0xFE6
  7527                           postdec1	equ	0xFE5
  7528                           fsr1h	equ	0xFE2
  7529                           fsr1l	equ	0xFE1
  7530                           indf2	equ	0xFDF
  7531                           postinc2	equ	0xFDE
  7532                           postdec2	equ	0xFDD
  7533                           fsr2h	equ	0xFDA
  7534                           fsr2l	equ	0xFD9
  7535                           status	equ	0xFD8
  7536                           
  7537 ;; *************** function ___ftge *****************
  7538 ;; Defined at:
  7539 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;  ff1             3    0[COMRAM] float 
  7542 ;;  ff2             3    3[COMRAM] float 
  7543 ;; Auto vars:     Size  Location     Type
  7544 ;;		None
  7545 ;; Return value:  Size  Location     Type
  7546 ;;		None               void
  7547 ;; Registers used:
  7548 ;;		wreg, status,2, status,0
  7549 ;; Tracked objects:
  7550 ;;		On entry : 0/0
  7551 ;;		On exit  : 0/0
  7552 ;;		Unchanged: 0/0
  7553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7554 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7556 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7557 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7558 ;;Total ram usage:        9 bytes
  7559 ;; Hardware stack levels used:    1
  7560 ;; This function calls:
  7561 ;;		Nothing
  7562 ;; This function is called by:
  7563 ;;		_pow
  7564 ;;		_exp
  7565 ;;		_floor
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           	psect	text34
  7570  002DB6                     __ptext34:
  7571                           	opt stack 0
  7572  002DB6                     ___ftge:
  7573                           	opt stack 20
  7574                           
  7575                           ;incstack = 0
  7576  002DB6  AE03               	btfss	___ftge@ff1+2,7,c
  7577  002DB8  D016               	goto	l922
  7578  002DBA  C001  F007         	movff	___ftge@ff1,??___ftge
  7579  002DBE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7580  002DC2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7581  002DC6  1E07               	comf	??___ftge,f,c
  7582  002DC8  1E08               	comf	??___ftge+1,f,c
  7583  002DCA  1E09               	comf	??___ftge+2,f,c
  7584  002DCC  2A07               	incf	??___ftge,f,c
  7585  002DCE  0E00               	movlw	0
  7586  002DD0  2208               	addwfc	??___ftge+1,f,c
  7587  002DD2  2209               	addwfc	??___ftge+2,f,c
  7588  002DD4  0E00               	movlw	0
  7589  002DD6  2407               	addwf	??___ftge,w,c
  7590  002DD8  6E01               	movwf	___ftge@ff1,c
  7591  002DDA  0E00               	movlw	0
  7592  002DDC  2008               	addwfc	??___ftge+1,w,c
  7593  002DDE  6E02               	movwf	___ftge@ff1+1,c
  7594  002DE0  0E80               	movlw	128
  7595  002DE2  2009               	addwfc	??___ftge+2,w,c
  7596  002DE4  6E03               	movwf	___ftge@ff1+2,c
  7597  002DE6                     l922:
  7598  002DE6  AE06               	btfss	___ftge@ff2+2,7,c
  7599  002DE8  D016               	goto	l923
  7600  002DEA  C004  F007         	movff	___ftge@ff2,??___ftge
  7601  002DEE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7602  002DF2  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7603  002DF6  1E07               	comf	??___ftge,f,c
  7604  002DF8  1E08               	comf	??___ftge+1,f,c
  7605  002DFA  1E09               	comf	??___ftge+2,f,c
  7606  002DFC  2A07               	incf	??___ftge,f,c
  7607  002DFE  0E00               	movlw	0
  7608  002E00  2208               	addwfc	??___ftge+1,f,c
  7609  002E02  2209               	addwfc	??___ftge+2,f,c
  7610  002E04  0E00               	movlw	0
  7611  002E06  2407               	addwf	??___ftge,w,c
  7612  002E08  6E04               	movwf	___ftge@ff2,c
  7613  002E0A  0E00               	movlw	0
  7614  002E0C  2008               	addwfc	??___ftge+1,w,c
  7615  002E0E  6E05               	movwf	___ftge@ff2+1,c
  7616  002E10  0E80               	movlw	128
  7617  002E12  2009               	addwfc	??___ftge+2,w,c
  7618  002E14  6E06               	movwf	___ftge@ff2+2,c
  7619  002E16                     l923:
  7620  002E16  0E00               	movlw	0
  7621  002E18  1A01               	xorwf	___ftge@ff1,f,c
  7622  002E1A  0E00               	movlw	0
  7623  002E1C  1A02               	xorwf	___ftge@ff1+1,f,c
  7624  002E1E  0E80               	movlw	128
  7625  002E20  1A03               	xorwf	___ftge@ff1+2,f,c
  7626  002E22  0E00               	movlw	0
  7627  002E24  1A04               	xorwf	___ftge@ff2,f,c
  7628  002E26  0E00               	movlw	0
  7629  002E28  1A05               	xorwf	___ftge@ff2+1,f,c
  7630  002E2A  0E80               	movlw	128
  7631  002E2C  1A06               	xorwf	___ftge@ff2+2,f,c
  7632  002E2E  5004               	movf	___ftge@ff2,w,c
  7633  002E30  5C01               	subwf	___ftge@ff1,w,c
  7634  002E32  5005               	movf	___ftge@ff2+1,w,c
  7635  002E34  5802               	subwfb	___ftge@ff1+1,w,c
  7636  002E36  5006               	movf	___ftge@ff2+2,w,c
  7637  002E38  5803               	subwfb	___ftge@ff1+2,w,c
  7638  002E3A  B0D8               	btfsc	status,0,c
  7639  002E3C  D002               	goto	l3171
  7640  002E3E  90D8               	bcf	status,0,c
  7641  002E40  0012               	return	
  7642  002E42                     l3171:
  7643  002E42  80D8               	bsf	status,0,c
  7644  002E44  0012               	return	
  7645  002E46                     __end_of___ftge:
  7646                           	opt stack 0
  7647                           tblptru	equ	0xFF8
  7648                           tblptrh	equ	0xFF7
  7649                           tblptrl	equ	0xFF6
  7650                           tablat	equ	0xFF5
  7651                           prodh	equ	0xFF4
  7652                           prodl	equ	0xFF3
  7653                           intcon	equ	0xFF2
  7654                           postinc0	equ	0xFEE
  7655                           wreg	equ	0xFE8
  7656                           postinc1	equ	0xFE6
  7657                           postdec1	equ	0xFE5
  7658                           fsr1h	equ	0xFE2
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function ___altoft *****************
  7668 ;; Defined at:
  7669 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\altoft.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;  c               4   27[COMRAM] long 
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;  sign            1   36[COMRAM] unsigned char 
  7674 ;;  exp             1   35[COMRAM] unsigned char 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;                  3   27[COMRAM] float 
  7677 ;; Registers used:
  7678 ;;		wreg, status,2, status,0, cstack
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7686 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7687 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7688 ;;Total ram usage:       10 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:    1
  7691 ;; This function calls:
  7692 ;;		___ftpack
  7693 ;; This function is called by:
  7694 ;;		_floor
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text35
  7699  0031F2                     __ptext35:
  7700                           	opt stack 0
  7701  0031F2                     ___altoft:
  7702                           	opt stack 19
  7703                           
  7704                           ;incstack = 0
  7705  0031F2  0E00               	movlw	0
  7706  0031F4  6E25               	movwf	___altoft@sign,c
  7707  0031F6  0E8E               	movlw	142
  7708  0031F8  6E24               	movwf	___altoft@exp,c
  7709  0031FA  AE1F               	btfss	___altoft@c+3,7,c
  7710  0031FC  D011               	goto	l699
  7711  0031FE  1E1F               	comf	___altoft@c+3,f,c
  7712  003200  1E1E               	comf	___altoft@c+2,f,c
  7713  003202  1E1D               	comf	___altoft@c+1,f,c
  7714  003204  6C1C               	negf	___altoft@c,c
  7715  003206  0E00               	movlw	0
  7716  003208  221D               	addwfc	___altoft@c+1,f,c
  7717  00320A  221E               	addwfc	___altoft@c+2,f,c
  7718  00320C  221F               	addwfc	___altoft@c+3,f,c
  7719  00320E  0E01               	movlw	1
  7720  003210  6E25               	movwf	___altoft@sign,c
  7721  003212  D006               	goto	l699
  7722  003214  90D8               	bcf	status,0,c
  7723  003216  321F               	rrcf	___altoft@c+3,f,c
  7724  003218  321E               	rrcf	___altoft@c+2,f,c
  7725  00321A  321D               	rrcf	___altoft@c+1,f,c
  7726  00321C  321C               	rrcf	___altoft@c,f,c
  7727  00321E  2A24               	incf	___altoft@exp,f,c
  7728  003220                     l699:
  7729  003220  0E00               	movlw	0
  7730  003222  141C               	andwf	___altoft@c,w,c
  7731  003224  6E20               	movwf	??___altoft& (0+255),c
  7732  003226  0E00               	movlw	0
  7733  003228  141D               	andwf	___altoft@c+1,w,c
  7734  00322A  6E21               	movwf	(??___altoft+1)& (0+255),c
  7735  00322C  0E00               	movlw	0
  7736  00322E  141E               	andwf	___altoft@c+2,w,c
  7737  003230  6E22               	movwf	(??___altoft+2)& (0+255),c
  7738  003232  0EFF               	movlw	255
  7739  003234  141F               	andwf	___altoft@c+3,w,c
  7740  003236  6E23               	movwf	(??___altoft+3)& (0+255),c
  7741  003238  5020               	movf	??___altoft,w,c
  7742  00323A  1021               	iorwf	??___altoft+1,w,c
  7743  00323C  1022               	iorwf	??___altoft+2,w,c
  7744  00323E  1023               	iorwf	??___altoft+3,w,c
  7745  003240  A4D8               	btfss	status,2,c
  7746  003242  D7E8               	goto	l700
  7747  003244  C01C  F001         	movff	___altoft@c,___ftpack@arg
  7748  003248  C01D  F002         	movff	___altoft@c+1,___ftpack@arg+1
  7749  00324C  C01E  F003         	movff	___altoft@c+2,___ftpack@arg+2
  7750  003250  C024  F004         	movff	___altoft@exp,___ftpack@exp
  7751  003254  C025  F005         	movff	___altoft@sign,___ftpack@sign
  7752  003258  EC9B  F015         	call	___ftpack	;wreg free
  7753  00325C  C001  F01C         	movff	?___ftpack,?___altoft
  7754  003260  C002  F01D         	movff	?___ftpack+1,?___altoft+1
  7755  003264  C003  F01E         	movff	?___ftpack+2,?___altoft+2
  7756  003268  0012               	return	
  7757  00326A                     __end_of___altoft:
  7758                           	opt stack 0
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           postinc0	equ	0xFEE
  7767                           wreg	equ	0xFE8
  7768                           postinc1	equ	0xFE6
  7769                           postdec1	equ	0xFE5
  7770                           fsr1h	equ	0xFE2
  7771                           fsr1l	equ	0xFE1
  7772                           indf2	equ	0xFDF
  7773                           postinc2	equ	0xFDE
  7774                           postdec2	equ	0xFDD
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779 ;; *************** function _eval_poly *****************
  7780 ;; Defined at:
  7781 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  x               3   45[COMRAM] float 
  7784 ;;  d               2   48[COMRAM] PTR const 
  7785 ;;		 -> log@coeff(27), exp@coeff(30), 
  7786 ;;  n               2   50[COMRAM] int 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;  res             3   54[COMRAM] int 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  3   45[COMRAM] int 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7798 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7799 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7801 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7802 ;;Total ram usage:       12 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    2
  7805 ;; This function calls:
  7806 ;;		___ftadd
  7807 ;;		___ftmul
  7808 ;;		___wmul
  7809 ;; This function is called by:
  7810 ;;		_exp
  7811 ;;		_log
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text36
  7816  0028DA                     __ptext36:
  7817                           	opt stack 0
  7818  0028DA                     _eval_poly:
  7819                           	opt stack 19
  7820                           
  7821                           ;incstack = 0
  7822  0028DA  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  7823  0028DE  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  7824  0028E2  0E00               	movlw	0
  7825  0028E4  6E1F               	movwf	___wmul@multiplicand+1,c
  7826  0028E6  0E03               	movlw	3
  7827  0028E8  6E1E               	movwf	___wmul@multiplicand,c
  7828  0028EA  EC09  F01C         	call	___wmul	;wreg free
  7829  0028EE  C031  F035         	movff	eval_poly@d,??_eval_poly
  7830  0028F2  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  7831  0028F6  501C               	movf	?___wmul,w,c
  7832  0028F8  2635               	addwf	??_eval_poly,f,c
  7833  0028FA  501D               	movf	?___wmul+1,w,c
  7834  0028FC  2236               	addwfc	??_eval_poly+1,f,c
  7835  0028FE  C035  FFF6         	movff	??_eval_poly,tblptrl
  7836  002902  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  7837  002906                     	if	0	;tblptru may be non-zero
  7838  002906                     	endif
  7839  002906                     	if	0	;tblptru may be non-zero
  7840  002906                     	endif
  7841  002906  0009               	tblrd		*+
  7842  002908  CFF5 F037          	movff	tablat,eval_poly@res
  7843  00290C  0009               	tblrd		*+
  7844  00290E  CFF5 F038          	movff	tablat,eval_poly@res+1
  7845  002912  000A               	tblrd		*-
  7846  002914  CFF5 F039          	movff	tablat,eval_poly@res+2
  7847  002918  D03E               	goto	l1284
  7848  00291A  C037  F010         	movff	eval_poly@res,___ftmul@f2
  7849  00291E  C038  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  7850  002922  C039  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  7851  002926  C02E  F00D         	movff	eval_poly@x,___ftmul@f1
  7852  00292A  C02F  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  7853  00292E  C030  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  7854  002932  EC11  F013         	call	___ftmul	;wreg free
  7855  002936  C00D  F022         	movff	?___ftmul,___ftadd@f1
  7856  00293A  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  7857  00293E  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  7858  002942  0E00               	movlw	0
  7859  002944  6E1F               	movwf	___wmul@multiplicand+1,c
  7860  002946  0E03               	movlw	3
  7861  002948  6E1E               	movwf	___wmul@multiplicand,c
  7862  00294A  0633               	decf	eval_poly@n,f,c
  7863  00294C  A0D8               	btfss	status,0,c
  7864  00294E  0634               	decf	eval_poly@n+1,f,c
  7865  002950  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  7866  002954  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  7867  002958  EC09  F01C         	call	___wmul	;wreg free
  7868  00295C  C031  F035         	movff	eval_poly@d,??_eval_poly
  7869  002960  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  7870  002964  501C               	movf	?___wmul,w,c
  7871  002966  2635               	addwf	??_eval_poly,f,c
  7872  002968  501D               	movf	?___wmul+1,w,c
  7873  00296A  2236               	addwfc	??_eval_poly+1,f,c
  7874  00296C  C035  FFF6         	movff	??_eval_poly,tblptrl
  7875  002970  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  7876  002974                     	if	0	;tblptru may be non-zero
  7877  002974                     	endif
  7878  002974                     	if	0	;tblptru may be non-zero
  7879  002974                     	endif
  7880  002974  0009               	tblrd		*+
  7881  002976  CFF5 F025          	movff	tablat,___ftadd@f2
  7882  00297A  0009               	tblrd		*+
  7883  00297C  CFF5 F026          	movff	tablat,___ftadd@f2+1
  7884  002980  000A               	tblrd		*-
  7885  002982  CFF5 F027          	movff	tablat,___ftadd@f2+2
  7886  002986  EC68  F00D         	call	___ftadd	;wreg free
  7887  00298A  C022  F037         	movff	?___ftadd,eval_poly@res
  7888  00298E  C023  F038         	movff	?___ftadd+1,eval_poly@res+1
  7889  002992  C024  F039         	movff	?___ftadd+2,eval_poly@res+2
  7890  002996                     l1284:
  7891  002996  5033               	movf	eval_poly@n,w,c
  7892  002998  1034               	iorwf	eval_poly@n+1,w,c
  7893  00299A  A4D8               	btfss	status,2,c
  7894  00299C  D7BE               	goto	l1285
  7895  00299E  C037  F02E         	movff	eval_poly@res,?_eval_poly
  7896  0029A2  C038  F02F         	movff	eval_poly@res+1,?_eval_poly+1
  7897  0029A6  C039  F030         	movff	eval_poly@res+2,?_eval_poly+2
  7898  0029AA  0012               	return		;funcret
  7899  0029AC                     __end_of_eval_poly:
  7900                           	opt stack 0
  7901                           tblptru	equ	0xFF8
  7902                           tblptrh	equ	0xFF7
  7903                           tblptrl	equ	0xFF6
  7904                           tablat	equ	0xFF5
  7905                           prodh	equ	0xFF4
  7906                           prodl	equ	0xFF3
  7907                           intcon	equ	0xFF2
  7908                           postinc0	equ	0xFEE
  7909                           wreg	equ	0xFE8
  7910                           postinc1	equ	0xFE6
  7911                           postdec1	equ	0xFE5
  7912                           fsr1h	equ	0xFE2
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function ___ftmul *****************
  7922 ;; Defined at:
  7923 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  f1              3   12[COMRAM] float 
  7926 ;;  f2              3   15[COMRAM] float 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  7929 ;;  sign            1   26[COMRAM] unsigned char 
  7930 ;;  cntr            1   25[COMRAM] unsigned char 
  7931 ;;  exp             1   21[COMRAM] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  3   12[COMRAM] float 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7941 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7942 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7943 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7944 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7945 ;;Total ram usage:       15 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    1
  7948 ;; This function calls:
  7949 ;;		___ftpack
  7950 ;; This function is called by:
  7951 ;;		_pow
  7952 ;;		_exp
  7953 ;;		_log
  7954 ;;		_eval_poly
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           	psect	text37
  7959  002622                     __ptext37:
  7960                           	opt stack 0
  7961  002622                     ___ftmul:
  7962                           	opt stack 19
  7963                           
  7964                           ;incstack = 0
  7965  002622  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  7966  002626  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7967  002628  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7968  00262A  340E               	rlcf	___ftmul@f1+1,w,c
  7969  00262C  3613               	rlcf	??___ftmul& (0+255),f,c
  7970  00262E  E301               	bnc	u3311
  7971  002630  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7972  002632                     u3311:
  7973  002632  5013               	movf	??___ftmul,w,c
  7974  002634  6E16               	movwf	___ftmul@exp,c
  7975  002636  5016               	movf	___ftmul@exp,w,c
  7976  002638  A4D8               	btfss	status,2,c
  7977  00263A  D007               	goto	l929
  7978  00263C  0E00               	movlw	0
  7979  00263E  6E0D               	movwf	?___ftmul,c
  7980  002640  0E00               	movlw	0
  7981  002642  6E0E               	movwf	?___ftmul+1,c
  7982  002644  0E00               	movlw	0
  7983  002646  6E0F               	movwf	?___ftmul+2,c
  7984  002648  0012               	return	
  7985  00264A                     l929:
  7986  00264A  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  7987  00264E  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7988  002650  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7989  002652  3411               	rlcf	___ftmul@f2+1,w,c
  7990  002654  3613               	rlcf	??___ftmul& (0+255),f,c
  7991  002656  E301               	bnc	u3331
  7992  002658  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7993  00265A                     u3331:
  7994  00265A  5013               	movf	??___ftmul,w,c
  7995  00265C  6E1B               	movwf	___ftmul@sign,c
  7996  00265E  501B               	movf	___ftmul@sign,w,c
  7997  002660  A4D8               	btfss	status,2,c
  7998  002662  D007               	goto	l931
  7999  002664  0E00               	movlw	0
  8000  002666  6E0D               	movwf	?___ftmul,c
  8001  002668  0E00               	movlw	0
  8002  00266A  6E0E               	movwf	?___ftmul+1,c
  8003  00266C  0E00               	movlw	0
  8004  00266E  6E0F               	movwf	?___ftmul+2,c
  8005  002670  0012               	return	
  8006  002672                     l931:
  8007  002672  501B               	movf	___ftmul@sign,w,c
  8008  002674  0F7B               	addlw	123
  8009  002676  2616               	addwf	___ftmul@exp,f,c
  8010  002678  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  8011  00267C  5012               	movf	___ftmul@f2+2,w,c
  8012  00267E  1A1B               	xorwf	___ftmul@sign,f,c
  8013  002680  0E80               	movlw	128
  8014  002682  161B               	andwf	___ftmul@sign,f,c
  8015  002684  8E0E               	bsf	___ftmul@f1+1,7,c
  8016  002686  8E11               	bsf	___ftmul@f2+1,7,c
  8017  002688  0EFF               	movlw	255
  8018  00268A  1610               	andwf	___ftmul@f2,f,c
  8019  00268C  0EFF               	movlw	255
  8020  00268E  1611               	andwf	___ftmul@f2+1,f,c
  8021  002690  0E00               	movlw	0
  8022  002692  1612               	andwf	___ftmul@f2+2,f,c
  8023  002694  0E00               	movlw	0
  8024  002696  6E17               	movwf	___ftmul@f3_as_product,c
  8025  002698  0E00               	movlw	0
  8026  00269A  6E18               	movwf	___ftmul@f3_as_product+1,c
  8027  00269C  0E00               	movlw	0
  8028  00269E  6E19               	movwf	___ftmul@f3_as_product+2,c
  8029  0026A0  0E07               	movlw	7
  8030  0026A2  6E1A               	movwf	___ftmul@cntr,c
  8031  0026A4  A00D               	btfss	___ftmul@f1,0,c
  8032  0026A6  D006               	goto	l933
  8033  0026A8  5010               	movf	___ftmul@f2,w,c
  8034  0026AA  2617               	addwf	___ftmul@f3_as_product,f,c
  8035  0026AC  5011               	movf	___ftmul@f2+1,w,c
  8036  0026AE  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  8037  0026B0  5012               	movf	___ftmul@f2+2,w,c
  8038  0026B2  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  8039  0026B4                     l933:
  8040  0026B4  90D8               	bcf	status,0,c
  8041  0026B6  320F               	rrcf	___ftmul@f1+2,f,c
  8042  0026B8  320E               	rrcf	___ftmul@f1+1,f,c
  8043  0026BA  320D               	rrcf	___ftmul@f1,f,c
  8044  0026BC  90D8               	bcf	status,0,c
  8045  0026BE  3610               	rlcf	___ftmul@f2,f,c
  8046  0026C0  3611               	rlcf	___ftmul@f2+1,f,c
  8047  0026C2  3612               	rlcf	___ftmul@f2+2,f,c
  8048  0026C4  2E1A               	decfsz	___ftmul@cntr,f,c
  8049  0026C6  D7EE               	goto	l932
  8050  0026C8  0E09               	movlw	9
  8051  0026CA  6E1A               	movwf	___ftmul@cntr,c
  8052  0026CC  A00D               	btfss	___ftmul@f1,0,c
  8053  0026CE  D006               	goto	l936
  8054  0026D0  5010               	movf	___ftmul@f2,w,c
  8055  0026D2  2617               	addwf	___ftmul@f3_as_product,f,c
  8056  0026D4  5011               	movf	___ftmul@f2+1,w,c
  8057  0026D6  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  8058  0026D8  5012               	movf	___ftmul@f2+2,w,c
  8059  0026DA  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  8060  0026DC                     l936:
  8061  0026DC  90D8               	bcf	status,0,c
  8062  0026DE  320F               	rrcf	___ftmul@f1+2,f,c
  8063  0026E0  320E               	rrcf	___ftmul@f1+1,f,c
  8064  0026E2  320D               	rrcf	___ftmul@f1,f,c
  8065  0026E4  90D8               	bcf	status,0,c
  8066  0026E6  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  8067  0026E8  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  8068  0026EA  3217               	rrcf	___ftmul@f3_as_product,f,c
  8069  0026EC  2E1A               	decfsz	___ftmul@cntr,f,c
  8070  0026EE  D7EE               	goto	l935
  8071  0026F0  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  8072  0026F4  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8073  0026F8  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8074  0026FC  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  8075  002700  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  8076  002704  EC9B  F015         	call	___ftpack	;wreg free
  8077  002708  C001  F00D         	movff	?___ftpack,?___ftmul
  8078  00270C  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  8079  002710  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  8080  002714  0012               	return	
  8081  002716                     __end_of___ftmul:
  8082                           	opt stack 0
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           postinc0	equ	0xFEE
  8091                           wreg	equ	0xFE8
  8092                           postinc1	equ	0xFE6
  8093                           postdec1	equ	0xFE5
  8094                           fsr1h	equ	0xFE2
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           postinc2	equ	0xFDE
  8098                           postdec2	equ	0xFDD
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function ___ftsub *****************
  8104 ;; Defined at:
  8105 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  f1              3   45[COMRAM] float 
  8108 ;;  f2              3   48[COMRAM] float 
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;		None
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  3   45[COMRAM] float 
  8113 ;; Registers used:
  8114 ;;		wreg, status,2, status,0, cstack
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8120 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8123 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8124 ;;Total ram usage:        6 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    2
  8127 ;; This function calls:
  8128 ;;		___ftadd
  8129 ;; This function is called by:
  8130 ;;		_exp
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text38
  8135  0036F0                     __ptext38:
  8136                           	opt stack 0
  8137  0036F0                     ___ftsub:
  8138                           	opt stack 19
  8139                           
  8140                           ;incstack = 0
  8141  0036F0  5031               	movf	___ftsub@f2,w,c
  8142  0036F2  1032               	iorwf	___ftsub@f2+1,w,c
  8143  0036F4  1033               	iorwf	___ftsub@f2+2,w,c
  8144  0036F6  B4D8               	btfsc	status,2,c
  8145  0036F8  D006               	goto	l946
  8146  0036FA  0E00               	movlw	0
  8147  0036FC  1A31               	xorwf	___ftsub@f2,f,c
  8148  0036FE  0E00               	movlw	0
  8149  003700  1A32               	xorwf	___ftsub@f2+1,f,c
  8150  003702  0E80               	movlw	128
  8151  003704  1A33               	xorwf	___ftsub@f2+2,f,c
  8152  003706                     l946:
  8153  003706  C02E  F022         	movff	___ftsub@f1,___ftadd@f1
  8154  00370A  C02F  F023         	movff	___ftsub@f1+1,___ftadd@f1+1
  8155  00370E  C030  F024         	movff	___ftsub@f1+2,___ftadd@f1+2
  8156  003712  C031  F025         	movff	___ftsub@f2,___ftadd@f2
  8157  003716  C032  F026         	movff	___ftsub@f2+1,___ftadd@f2+1
  8158  00371A  C033  F027         	movff	___ftsub@f2+2,___ftadd@f2+2
  8159  00371E  EC68  F00D         	call	___ftadd	;wreg free
  8160  003722  C022  F02E         	movff	?___ftadd,?___ftsub
  8161  003726  C023  F02F         	movff	?___ftadd+1,?___ftsub+1
  8162  00372A  C024  F030         	movff	?___ftadd+2,?___ftsub+2
  8163  00372E  0012               	return	
  8164  003730                     __end_of___ftsub:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           postinc0	equ	0xFEE
  8174                           wreg	equ	0xFE8
  8175                           postinc1	equ	0xFE6
  8176                           postdec1	equ	0xFE5
  8177                           fsr1h	equ	0xFE2
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           fsr2h	equ	0xFDA
  8183                           fsr2l	equ	0xFD9
  8184                           status	equ	0xFD8
  8185                           
  8186 ;; *************** function ___ftadd *****************
  8187 ;; Defined at:
  8188 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  f1              3   33[COMRAM] float 
  8191 ;;  f2              3   36[COMRAM] float 
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  exp1            1   44[COMRAM] unsigned char 
  8194 ;;  exp2            1   43[COMRAM] unsigned char 
  8195 ;;  sign            1   42[COMRAM] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  3   33[COMRAM] float 
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8205 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8206 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8207 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8208 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8209 ;;Total ram usage:       12 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    1
  8212 ;; This function calls:
  8213 ;;		___ftpack
  8214 ;; This function is called by:
  8215 ;;		___ftsub
  8216 ;;		_floor
  8217 ;;		_log
  8218 ;;		_eval_poly
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text39
  8223  001AD0                     __ptext39:
  8224                           	opt stack 0
  8225  001AD0                     ___ftadd:
  8226                           	opt stack 19
  8227                           
  8228                           ;incstack = 0
  8229  001AD0  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  8230  001AD4  6A29               	clrf	(??___ftadd+1)& (0+255),c
  8231  001AD6  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  8232  001AD8  3423               	rlcf	___ftadd@f1+1,w,c
  8233  001ADA  3628               	rlcf	??___ftadd& (0+255),f,c
  8234  001ADC  E301               	bnc	u3101
  8235  001ADE  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  8236  001AE0                     u3101:
  8237  001AE0  5028               	movf	??___ftadd,w,c
  8238  001AE2  6E2D               	movwf	___ftadd@exp1,c
  8239  001AE4  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  8240  001AE8  6A29               	clrf	(??___ftadd+1)& (0+255),c
  8241  001AEA  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  8242  001AEC  3426               	rlcf	___ftadd@f2+1,w,c
  8243  001AEE  3628               	rlcf	??___ftadd& (0+255),f,c
  8244  001AF0  E301               	bnc	u3111
  8245  001AF2  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  8246  001AF4                     u3111:
  8247  001AF4  5028               	movf	??___ftadd,w,c
  8248  001AF6  6E2C               	movwf	___ftadd@exp2,c
  8249  001AF8  502D               	movf	___ftadd@exp1,w,c
  8250  001AFA  B4D8               	btfsc	status,2,c
  8251  001AFC  D00B               	goto	u3140
  8252  001AFE  502C               	movf	___ftadd@exp2,w,c
  8253  001B00  5C2D               	subwf	___ftadd@exp1,w,c
  8254  001B02  B0D8               	btfsc	status,0,c
  8255  001B04  D00E               	goto	l881
  8256  001B06  502D               	movf	___ftadd@exp1,w,c
  8257  001B08  0800               	sublw	0
  8258  001B0A  242C               	addwf	___ftadd@exp2,w,c
  8259  001B0C  6E28               	movwf	??___ftadd& (0+255),c
  8260  001B0E  0E18               	movlw	24
  8261  001B10  6428               	cpfsgt	??___ftadd,c
  8262  001B12  D007               	goto	l881
  8263  001B14                     u3140:
  8264  001B14  C025  F022         	movff	___ftadd@f2,?___ftadd
  8265  001B18  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  8266  001B1C  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  8267  001B20  0012               	return	
  8268  001B22                     l881:
  8269  001B22  502C               	movf	___ftadd@exp2,w,c
  8270  001B24  B4D8               	btfsc	status,2,c
  8271  001B26  D00B               	goto	u3170
  8272  001B28  502D               	movf	___ftadd@exp1,w,c
  8273  001B2A  5C2C               	subwf	___ftadd@exp2,w,c
  8274  001B2C  B0D8               	btfsc	status,0,c
  8275  001B2E  D00E               	goto	l885
  8276  001B30  502C               	movf	___ftadd@exp2,w,c
  8277  001B32  0800               	sublw	0
  8278  001B34  242D               	addwf	___ftadd@exp1,w,c
  8279  001B36  6E28               	movwf	??___ftadd& (0+255),c
  8280  001B38  0E18               	movlw	24
  8281  001B3A  6428               	cpfsgt	??___ftadd,c
  8282  001B3C  D007               	goto	l885
  8283  001B3E                     u3170:
  8284  001B3E  C022  F022         	movff	___ftadd@f1,?___ftadd
  8285  001B42  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  8286  001B46  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  8287  001B4A  0012               	return	
  8288  001B4C                     l885:
  8289  001B4C  0E06               	movlw	6
  8290  001B4E  6E2B               	movwf	___ftadd@sign,c
  8291  001B50  BE24               	btfsc	___ftadd@f1+2,7,c
  8292  001B52  8E2B               	bsf	___ftadd@sign,7,c
  8293  001B54  BE27               	btfsc	___ftadd@f2+2,7,c
  8294  001B56  8C2B               	bsf	___ftadd@sign,6,c
  8295  001B58  8E23               	bsf	___ftadd@f1+1,7,c
  8296  001B5A  0EFF               	movlw	255
  8297  001B5C  1622               	andwf	___ftadd@f1,f,c
  8298  001B5E  0EFF               	movlw	255
  8299  001B60  1623               	andwf	___ftadd@f1+1,f,c
  8300  001B62  0E00               	movlw	0
  8301  001B64  1624               	andwf	___ftadd@f1+2,f,c
  8302  001B66  8E26               	bsf	___ftadd@f2+1,7,c
  8303  001B68  0EFF               	movlw	255
  8304  001B6A  1625               	andwf	___ftadd@f2,f,c
  8305  001B6C  0EFF               	movlw	255
  8306  001B6E  1626               	andwf	___ftadd@f2+1,f,c
  8307  001B70  0E00               	movlw	0
  8308  001B72  1627               	andwf	___ftadd@f2+2,f,c
  8309  001B74  502C               	movf	___ftadd@exp2,w,c
  8310  001B76  5C2D               	subwf	___ftadd@exp1,w,c
  8311  001B78  B0D8               	btfsc	status,0,c
  8312  001B7A  D01B               	goto	l890
  8313  001B7C                     u3200:
  8314  001B7C  90D8               	bcf	status,0,c
  8315  001B7E  3625               	rlcf	___ftadd@f2,f,c
  8316  001B80  3626               	rlcf	___ftadd@f2+1,f,c
  8317  001B82  3627               	rlcf	___ftadd@f2+2,f,c
  8318  001B84  062C               	decf	___ftadd@exp2,f,c
  8319  001B86  502D               	movf	___ftadd@exp1,w,c
  8320  001B88  182C               	xorwf	___ftadd@exp2,w,c
  8321  001B8A  B4D8               	btfsc	status,2,c
  8322  001B8C  D00D               	goto	l895
  8323  001B8E  062B               	decf	___ftadd@sign,f,c
  8324  001B90  C02B  F028         	movff	___ftadd@sign,??___ftadd
  8325  001B94  0E07               	movlw	7
  8326  001B96  1628               	andwf	??___ftadd,f,c
  8327  001B98  B4D8               	btfsc	status,2,c
  8328  001B9A  D006               	goto	l895
  8329  001B9C  D7EF               	goto	u3200
  8330  001B9E  90D8               	bcf	status,0,c
  8331  001BA0  3224               	rrcf	___ftadd@f1+2,f,c
  8332  001BA2  3223               	rrcf	___ftadd@f1+1,f,c
  8333  001BA4  3222               	rrcf	___ftadd@f1,f,c
  8334  001BA6  2A2D               	incf	___ftadd@exp1,f,c
  8335  001BA8                     l895:
  8336  001BA8  502C               	movf	___ftadd@exp2,w,c
  8337  001BAA  182D               	xorwf	___ftadd@exp1,w,c
  8338  001BAC  B4D8               	btfsc	status,2,c
  8339  001BAE  D01F               	goto	u3270
  8340  001BB0  D7F6               	goto	l896
  8341  001BB2                     l890:
  8342  001BB2  502D               	movf	___ftadd@exp1,w,c
  8343  001BB4  5C2C               	subwf	___ftadd@exp2,w,c
  8344  001BB6  B0D8               	btfsc	status,0,c
  8345  001BB8  D01A               	goto	u3270
  8346  001BBA                     u3240:
  8347  001BBA  90D8               	bcf	status,0,c
  8348  001BBC  3622               	rlcf	___ftadd@f1,f,c
  8349  001BBE  3623               	rlcf	___ftadd@f1+1,f,c
  8350  001BC0  3624               	rlcf	___ftadd@f1+2,f,c
  8351  001BC2  062D               	decf	___ftadd@exp1,f,c
  8352  001BC4  502D               	movf	___ftadd@exp1,w,c
  8353  001BC6  182C               	xorwf	___ftadd@exp2,w,c
  8354  001BC8  B4D8               	btfsc	status,2,c
  8355  001BCA  D00D               	goto	l904
  8356  001BCC  062B               	decf	___ftadd@sign,f,c
  8357  001BCE  C02B  F028         	movff	___ftadd@sign,??___ftadd
  8358  001BD2  0E07               	movlw	7
  8359  001BD4  1628               	andwf	??___ftadd,f,c
  8360  001BD6  B4D8               	btfsc	status,2,c
  8361  001BD8  D006               	goto	l904
  8362  001BDA  D7EF               	goto	u3240
  8363  001BDC  90D8               	bcf	status,0,c
  8364  001BDE  3227               	rrcf	___ftadd@f2+2,f,c
  8365  001BE0  3226               	rrcf	___ftadd@f2+1,f,c
  8366  001BE2  3225               	rrcf	___ftadd@f2,f,c
  8367  001BE4  2A2C               	incf	___ftadd@exp2,f,c
  8368  001BE6                     l904:
  8369  001BE6  502C               	movf	___ftadd@exp2,w,c
  8370  001BE8  182D               	xorwf	___ftadd@exp1,w,c
  8371  001BEA  A4D8               	btfss	status,2,c
  8372  001BEC  D7F7               	goto	l905
  8373  001BEE                     u3270:
  8374  001BEE  AE2B               	btfss	___ftadd@sign,7,c
  8375  001BF0  D00C               	goto	l907
  8376  001BF2  0EFF               	movlw	255
  8377  001BF4  1A22               	xorwf	___ftadd@f1,f,c
  8378  001BF6  0EFF               	movlw	255
  8379  001BF8  1A23               	xorwf	___ftadd@f1+1,f,c
  8380  001BFA  0EFF               	movlw	255
  8381  001BFC  1A24               	xorwf	___ftadd@f1+2,f,c
  8382  001BFE  0E01               	movlw	1
  8383  001C00  2622               	addwf	___ftadd@f1,f,c
  8384  001C02  0E00               	movlw	0
  8385  001C04  2223               	addwfc	___ftadd@f1+1,f,c
  8386  001C06  0E00               	movlw	0
  8387  001C08  2224               	addwfc	___ftadd@f1+2,f,c
  8388  001C0A                     l907:
  8389  001C0A  AC2B               	btfss	___ftadd@sign,6,c
  8390  001C0C  D00C               	goto	l908
  8391  001C0E  0EFF               	movlw	255
  8392  001C10  1A25               	xorwf	___ftadd@f2,f,c
  8393  001C12  0EFF               	movlw	255
  8394  001C14  1A26               	xorwf	___ftadd@f2+1,f,c
  8395  001C16  0EFF               	movlw	255
  8396  001C18  1A27               	xorwf	___ftadd@f2+2,f,c
  8397  001C1A  0E01               	movlw	1
  8398  001C1C  2625               	addwf	___ftadd@f2,f,c
  8399  001C1E  0E00               	movlw	0
  8400  001C20  2226               	addwfc	___ftadd@f2+1,f,c
  8401  001C22  0E00               	movlw	0
  8402  001C24  2227               	addwfc	___ftadd@f2+2,f,c
  8403  001C26                     l908:
  8404  001C26  0E00               	movlw	0
  8405  001C28  6E2B               	movwf	___ftadd@sign,c
  8406  001C2A  5022               	movf	___ftadd@f1,w,c
  8407  001C2C  2625               	addwf	___ftadd@f2,f,c
  8408  001C2E  5023               	movf	___ftadd@f1+1,w,c
  8409  001C30  2226               	addwfc	___ftadd@f2+1,f,c
  8410  001C32  5024               	movf	___ftadd@f1+2,w,c
  8411  001C34  2227               	addwfc	___ftadd@f2+2,f,c
  8412  001C36  AE27               	btfss	___ftadd@f2+2,7,c
  8413  001C38  D00E               	goto	l909
  8414  001C3A  0EFF               	movlw	255
  8415  001C3C  1A25               	xorwf	___ftadd@f2,f,c
  8416  001C3E  0EFF               	movlw	255
  8417  001C40  1A26               	xorwf	___ftadd@f2+1,f,c
  8418  001C42  0EFF               	movlw	255
  8419  001C44  1A27               	xorwf	___ftadd@f2+2,f,c
  8420  001C46  0E01               	movlw	1
  8421  001C48  2625               	addwf	___ftadd@f2,f,c
  8422  001C4A  0E00               	movlw	0
  8423  001C4C  2226               	addwfc	___ftadd@f2+1,f,c
  8424  001C4E  0E00               	movlw	0
  8425  001C50  2227               	addwfc	___ftadd@f2+2,f,c
  8426  001C52  0E01               	movlw	1
  8427  001C54  6E2B               	movwf	___ftadd@sign,c
  8428  001C56                     l909:
  8429  001C56  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  8430  001C5A  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  8431  001C5E  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  8432  001C62  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  8433  001C66  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  8434  001C6A  EC9B  F015         	call	___ftpack	;wreg free
  8435  001C6E  C001  F022         	movff	?___ftpack,?___ftadd
  8436  001C72  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  8437  001C76  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  8438  001C7A  0012               	return	
  8439  001C7C                     __end_of___ftadd:
  8440                           	opt stack 0
  8441                           tblptru	equ	0xFF8
  8442                           tblptrh	equ	0xFF7
  8443                           tblptrl	equ	0xFF6
  8444                           tablat	equ	0xFF5
  8445                           prodh	equ	0xFF4
  8446                           prodl	equ	0xFF3
  8447                           intcon	equ	0xFF2
  8448                           postinc0	equ	0xFEE
  8449                           wreg	equ	0xFE8
  8450                           postinc1	equ	0xFE6
  8451                           postdec1	equ	0xFE5
  8452                           fsr1h	equ	0xFE2
  8453                           fsr1l	equ	0xFE1
  8454                           indf2	equ	0xFDF
  8455                           postinc2	equ	0xFDE
  8456                           postdec2	equ	0xFDD
  8457                           fsr2h	equ	0xFDA
  8458                           fsr2l	equ	0xFD9
  8459                           status	equ	0xFD8
  8460                           
  8461 ;; *************** function ___ftneg *****************
  8462 ;; Defined at:
  8463 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  f1              3    0[COMRAM] float 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  3    0[COMRAM] float 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8477 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8480 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8481 ;;Total ram usage:        3 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_pow
  8487 ;;		_exp
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text40
  8492  00385C                     __ptext40:
  8493                           	opt stack 0
  8494  00385C                     ___ftneg:
  8495                           	opt stack 21
  8496                           
  8497                           ;incstack = 0
  8498  00385C  5001               	movf	___ftneg@f1,w,c
  8499  00385E  1002               	iorwf	___ftneg@f1+1,w,c
  8500  003860  1003               	iorwf	___ftneg@f1+2,w,c
  8501  003862  B4D8               	btfsc	status,2,c
  8502  003864  D006               	goto	l940
  8503  003866  0E00               	movlw	0
  8504  003868  1A01               	xorwf	___ftneg@f1,f,c
  8505  00386A  0E00               	movlw	0
  8506  00386C  1A02               	xorwf	___ftneg@f1+1,f,c
  8507  00386E  0E80               	movlw	128
  8508  003870  1A03               	xorwf	___ftneg@f1+2,f,c
  8509  003872                     l940:
  8510  003872  C001  F001         	movff	___ftneg@f1,?___ftneg
  8511  003876  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8512  00387A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8513  00387E  0012               	return		;funcret
  8514  003880                     __end_of___ftneg:
  8515                           	opt stack 0
  8516                           tblptru	equ	0xFF8
  8517                           tblptrh	equ	0xFF7
  8518                           tblptrl	equ	0xFF6
  8519                           tablat	equ	0xFF5
  8520                           prodh	equ	0xFF4
  8521                           prodl	equ	0xFF3
  8522                           intcon	equ	0xFF2
  8523                           postinc0	equ	0xFEE
  8524                           wreg	equ	0xFE8
  8525                           postinc1	equ	0xFE6
  8526                           postdec1	equ	0xFE5
  8527                           fsr1h	equ	0xFE2
  8528                           fsr1l	equ	0xFE1
  8529                           indf2	equ	0xFDF
  8530                           postinc2	equ	0xFDE
  8531                           postdec2	equ	0xFDD
  8532                           fsr2h	equ	0xFDA
  8533                           fsr2l	equ	0xFD9
  8534                           status	equ	0xFD8
  8535                           
  8536 ;; *************** function ___ftdiv *****************
  8537 ;; Defined at:
  8538 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  f1              3    8[COMRAM] float 
  8541 ;;  f2              3   11[COMRAM] float 
  8542 ;; Auto vars:     Size  Location     Type
  8543 ;;  f3              3   18[COMRAM] float 
  8544 ;;  sign            1   22[COMRAM] unsigned char 
  8545 ;;  exp             1   21[COMRAM] unsigned char 
  8546 ;;  cntr            1   17[COMRAM] unsigned char 
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  3    8[COMRAM] float 
  8549 ;; Registers used:
  8550 ;;		wreg, status,2, status,0, cstack
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8556 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8557 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8558 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8559 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8560 ;;Total ram usage:       15 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    1
  8563 ;; This function calls:
  8564 ;;		___ftpack
  8565 ;; This function is called by:
  8566 ;;		_exp
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           	psect	text41
  8571  002716                     __ptext41:
  8572                           	opt stack 0
  8573  002716                     ___ftdiv:
  8574                           	opt stack 20
  8575                           
  8576                           ;incstack = 0
  8577  002716  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  8578  00271A  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  8579  00271C  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  8580  00271E  340A               	rlcf	___ftdiv@f1+1,w,c
  8581  002720  360F               	rlcf	??___ftdiv& (0+255),f,c
  8582  002722  E301               	bnc	u3521
  8583  002724  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  8584  002726                     u3521:
  8585  002726  500F               	movf	??___ftdiv,w,c
  8586  002728  6E16               	movwf	___ftdiv@exp,c
  8587  00272A  5016               	movf	___ftdiv@exp,w,c
  8588  00272C  A4D8               	btfss	status,2,c
  8589  00272E  D007               	goto	l914
  8590  002730  0E00               	movlw	0
  8591  002732  6E09               	movwf	?___ftdiv,c
  8592  002734  0E00               	movlw	0
  8593  002736  6E0A               	movwf	?___ftdiv+1,c
  8594  002738  0E00               	movlw	0
  8595  00273A  6E0B               	movwf	?___ftdiv+2,c
  8596  00273C  0012               	return	
  8597  00273E                     l914:
  8598  00273E  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  8599  002742  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  8600  002744  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  8601  002746  340D               	rlcf	___ftdiv@f2+1,w,c
  8602  002748  360F               	rlcf	??___ftdiv& (0+255),f,c
  8603  00274A  E301               	bnc	u3541
  8604  00274C  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  8605  00274E                     u3541:
  8606  00274E  500F               	movf	??___ftdiv,w,c
  8607  002750  6E17               	movwf	___ftdiv@sign,c
  8608  002752  5017               	movf	___ftdiv@sign,w,c
  8609  002754  A4D8               	btfss	status,2,c
  8610  002756  D007               	goto	l916
  8611  002758  0E00               	movlw	0
  8612  00275A  6E09               	movwf	?___ftdiv,c
  8613  00275C  0E00               	movlw	0
  8614  00275E  6E0A               	movwf	?___ftdiv+1,c
  8615  002760  0E00               	movlw	0
  8616  002762  6E0B               	movwf	?___ftdiv+2,c
  8617  002764  0012               	return	
  8618  002766                     l916:
  8619  002766  0E00               	movlw	0
  8620  002768  6E13               	movwf	___ftdiv@f3,c
  8621  00276A  0E00               	movlw	0
  8622  00276C  6E14               	movwf	___ftdiv@f3+1,c
  8623  00276E  0E00               	movlw	0
  8624  002770  6E15               	movwf	___ftdiv@f3+2,c
  8625  002772  5017               	movf	___ftdiv@sign,w,c
  8626  002774  0F89               	addlw	137
  8627  002776  5E16               	subwf	___ftdiv@exp,f,c
  8628  002778  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  8629  00277C  500E               	movf	___ftdiv@f2+2,w,c
  8630  00277E  1A17               	xorwf	___ftdiv@sign,f,c
  8631  002780  0E80               	movlw	128
  8632  002782  1617               	andwf	___ftdiv@sign,f,c
  8633  002784  8E0A               	bsf	___ftdiv@f1+1,7,c
  8634  002786  0EFF               	movlw	255
  8635  002788  1609               	andwf	___ftdiv@f1,f,c
  8636  00278A  0EFF               	movlw	255
  8637  00278C  160A               	andwf	___ftdiv@f1+1,f,c
  8638  00278E  0E00               	movlw	0
  8639  002790  160B               	andwf	___ftdiv@f1+2,f,c
  8640  002792  8E0D               	bsf	___ftdiv@f2+1,7,c
  8641  002794  0EFF               	movlw	255
  8642  002796  160C               	andwf	___ftdiv@f2,f,c
  8643  002798  0EFF               	movlw	255
  8644  00279A  160D               	andwf	___ftdiv@f2+1,f,c
  8645  00279C  0E00               	movlw	0
  8646  00279E  160E               	andwf	___ftdiv@f2+2,f,c
  8647  0027A0  0E18               	movlw	24
  8648  0027A2  6E12               	movwf	___ftdiv@cntr,c
  8649  0027A4  90D8               	bcf	status,0,c
  8650  0027A6  3613               	rlcf	___ftdiv@f3,f,c
  8651  0027A8  3614               	rlcf	___ftdiv@f3+1,f,c
  8652  0027AA  3615               	rlcf	___ftdiv@f3+2,f,c
  8653  0027AC  500C               	movf	___ftdiv@f2,w,c
  8654  0027AE  5C09               	subwf	___ftdiv@f1,w,c
  8655  0027B0  500D               	movf	___ftdiv@f2+1,w,c
  8656  0027B2  580A               	subwfb	___ftdiv@f1+1,w,c
  8657  0027B4  500E               	movf	___ftdiv@f2+2,w,c
  8658  0027B6  580B               	subwfb	___ftdiv@f1+2,w,c
  8659  0027B8  A0D8               	btfss	status,0,c
  8660  0027BA  D007               	goto	l918
  8661  0027BC  500C               	movf	___ftdiv@f2,w,c
  8662  0027BE  5E09               	subwf	___ftdiv@f1,f,c
  8663  0027C0  500D               	movf	___ftdiv@f2+1,w,c
  8664  0027C2  5A0A               	subwfb	___ftdiv@f1+1,f,c
  8665  0027C4  500E               	movf	___ftdiv@f2+2,w,c
  8666  0027C6  5A0B               	subwfb	___ftdiv@f1+2,f,c
  8667  0027C8  8013               	bsf	___ftdiv@f3,0,c
  8668  0027CA                     l918:
  8669  0027CA  90D8               	bcf	status,0,c
  8670  0027CC  3609               	rlcf	___ftdiv@f1,f,c
  8671  0027CE  360A               	rlcf	___ftdiv@f1+1,f,c
  8672  0027D0  360B               	rlcf	___ftdiv@f1+2,f,c
  8673  0027D2  2E12               	decfsz	___ftdiv@cntr,f,c
  8674  0027D4  D7E7               	goto	l917
  8675  0027D6  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  8676  0027DA  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8677  0027DE  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8678  0027E2  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  8679  0027E6  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  8680  0027EA  EC9B  F015         	call	___ftpack	;wreg free
  8681  0027EE  C001  F009         	movff	?___ftpack,?___ftdiv
  8682  0027F2  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  8683  0027F6  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  8684  0027FA  0012               	return	
  8685  0027FC                     __end_of___ftdiv:
  8686                           	opt stack 0
  8687                           tblptru	equ	0xFF8
  8688                           tblptrh	equ	0xFF7
  8689                           tblptrl	equ	0xFF6
  8690                           tablat	equ	0xFF5
  8691                           prodh	equ	0xFF4
  8692                           prodl	equ	0xFF3
  8693                           intcon	equ	0xFF2
  8694                           postinc0	equ	0xFEE
  8695                           wreg	equ	0xFE8
  8696                           postinc1	equ	0xFE6
  8697                           postdec1	equ	0xFE5
  8698                           fsr1h	equ	0xFE2
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function ___awtoft *****************
  8708 ;; Defined at:
  8709 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awtoft.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;  c               2    8[COMRAM] int 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  sign            1   11[COMRAM] unsigned char 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  3    8[COMRAM] float 
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8723 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8726 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8727 ;;Total ram usage:        4 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    1
  8730 ;; This function calls:
  8731 ;;		___ftpack
  8732 ;; This function is called by:
  8733 ;;		_covertir_valores_de_array_a_escala_decimal
  8734 ;;		_exp
  8735 ;;		_log
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           	psect	text42
  8740  0037A8                     __ptext42:
  8741                           	opt stack 0
  8742  0037A8                     ___awtoft:
  8743                           	opt stack 20
  8744                           
  8745                           ;incstack = 0
  8746  0037A8  0E00               	movlw	0
  8747  0037AA  6E0C               	movwf	___awtoft@sign,c
  8748  0037AC  AE0A               	btfss	___awtoft@c+1,7,c
  8749  0037AE  D006               	goto	l810
  8750  0037B0  6C09               	negf	___awtoft@c,c
  8751  0037B2  1E0A               	comf	___awtoft@c+1,f,c
  8752  0037B4  B0D8               	btfsc	status,0,c
  8753  0037B6  2A0A               	incf	___awtoft@c+1,f,c
  8754  0037B8  0E01               	movlw	1
  8755  0037BA  6E0C               	movwf	___awtoft@sign,c
  8756  0037BC                     l810:
  8757  0037BC  C009  F001         	movff	___awtoft@c,___ftpack@arg
  8758  0037C0  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  8759  0037C4  6A03               	clrf	___ftpack@arg+2,c
  8760  0037C6  0E8E               	movlw	142
  8761  0037C8  6E04               	movwf	___ftpack@exp,c
  8762  0037CA  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8763  0037CE  EC9B  F015         	call	___ftpack	;wreg free
  8764  0037D2  C001  F009         	movff	?___ftpack,?___awtoft
  8765  0037D6  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8766  0037DA  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8767  0037DE  0012               	return	
  8768  0037E0                     __end_of___awtoft:
  8769                           	opt stack 0
  8770                           tblptru	equ	0xFF8
  8771                           tblptrh	equ	0xFF7
  8772                           tblptrl	equ	0xFF6
  8773                           tablat	equ	0xFF5
  8774                           prodh	equ	0xFF4
  8775                           prodl	equ	0xFF3
  8776                           intcon	equ	0xFF2
  8777                           postinc0	equ	0xFEE
  8778                           wreg	equ	0xFE8
  8779                           postinc1	equ	0xFE6
  8780                           postdec1	equ	0xFE5
  8781                           fsr1h	equ	0xFE2
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           postinc2	equ	0xFDE
  8785                           postdec2	equ	0xFDD
  8786                           fsr2h	equ	0xFDA
  8787                           fsr2l	equ	0xFD9
  8788                           status	equ	0xFD8
  8789                           
  8790 ;; *************** function ___lltoft *****************
  8791 ;; Defined at:
  8792 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;  c               4    8[COMRAM] unsigned long 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  exp             1   16[COMRAM] unsigned char 
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  3    8[COMRAM] float 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0, cstack
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8808 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8809 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8810 ;;Total ram usage:        9 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    1
  8813 ;; This function calls:
  8814 ;;		___ftpack
  8815 ;; This function is called by:
  8816 ;;		_pow
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           	psect	text43
  8821  003432                     __ptext43:
  8822                           	opt stack 0
  8823  003432                     ___lltoft:
  8824                           	opt stack 21
  8825                           
  8826                           ;incstack = 0
  8827  003432  0E8E               	movlw	142
  8828  003434  6E11               	movwf	___lltoft@exp,c
  8829  003436  D006               	goto	l1012
  8830  003438  90D8               	bcf	status,0,c
  8831  00343A  320C               	rrcf	___lltoft@c+3,f,c
  8832  00343C  320B               	rrcf	___lltoft@c+2,f,c
  8833  00343E  320A               	rrcf	___lltoft@c+1,f,c
  8834  003440  3209               	rrcf	___lltoft@c,f,c
  8835  003442  2A11               	incf	___lltoft@exp,f,c
  8836  003444                     l1012:
  8837  003444  0E00               	movlw	0
  8838  003446  1409               	andwf	___lltoft@c,w,c
  8839  003448  6E0D               	movwf	??___lltoft& (0+255),c
  8840  00344A  0E00               	movlw	0
  8841  00344C  140A               	andwf	___lltoft@c+1,w,c
  8842  00344E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  8843  003450  0E00               	movlw	0
  8844  003452  140B               	andwf	___lltoft@c+2,w,c
  8845  003454  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  8846  003456  0EFF               	movlw	255
  8847  003458  140C               	andwf	___lltoft@c+3,w,c
  8848  00345A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  8849  00345C  500D               	movf	??___lltoft,w,c
  8850  00345E  100E               	iorwf	??___lltoft+1,w,c
  8851  003460  100F               	iorwf	??___lltoft+2,w,c
  8852  003462  1010               	iorwf	??___lltoft+3,w,c
  8853  003464  A4D8               	btfss	status,2,c
  8854  003466  D7E8               	goto	l1013
  8855  003468  C009  F001         	movff	___lltoft@c,___ftpack@arg
  8856  00346C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  8857  003470  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  8858  003474  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  8859  003478  0E00               	movlw	0
  8860  00347A  6E05               	movwf	___ftpack@sign,c
  8861  00347C  EC9B  F015         	call	___ftpack	;wreg free
  8862  003480  C001  F009         	movff	?___ftpack,?___lltoft
  8863  003484  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  8864  003488  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  8865  00348C  0012               	return	
  8866  00348E                     __end_of___lltoft:
  8867                           	opt stack 0
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           postinc0	equ	0xFEE
  8876                           wreg	equ	0xFE8
  8877                           postinc1	equ	0xFE6
  8878                           postdec1	equ	0xFE5
  8879                           fsr1h	equ	0xFE2
  8880                           fsr1l	equ	0xFE1
  8881                           indf2	equ	0xFDF
  8882                           postinc2	equ	0xFDE
  8883                           postdec2	equ	0xFDD
  8884                           fsr2h	equ	0xFDA
  8885                           fsr2l	equ	0xFD9
  8886                           status	equ	0xFD8
  8887                           
  8888 ;; *************** function ___ftpack *****************
  8889 ;; Defined at:
  8890 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;  arg             3    0[COMRAM] unsigned um
  8893 ;;  exp             1    3[COMRAM] unsigned char 
  8894 ;;  sign            1    4[COMRAM] unsigned char 
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  3    0[COMRAM] float 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8906 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8908 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8909 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8910 ;;Total ram usage:        8 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; This function calls:
  8913 ;;		Nothing
  8914 ;; This function is called by:
  8915 ;;		___altoft
  8916 ;;		___awtoft
  8917 ;;		___ftadd
  8918 ;;		___ftdiv
  8919 ;;		___ftmul
  8920 ;;		___lltoft
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text44
  8925  002B36                     __ptext44:
  8926                           	opt stack 0
  8927  002B36                     ___ftpack:
  8928                           	opt stack 19
  8929                           
  8930                           ;incstack = 0
  8931  002B36  5004               	movf	___ftpack@exp,w,c
  8932  002B38  B4D8               	btfsc	status,2,c
  8933  002B3A  D005               	goto	u3000
  8934  002B3C  5001               	movf	___ftpack@arg,w,c
  8935  002B3E  1002               	iorwf	___ftpack@arg+1,w,c
  8936  002B40  1003               	iorwf	___ftpack@arg+2,w,c
  8937  002B42  A4D8               	btfss	status,2,c
  8938  002B44  D00C               	goto	l850
  8939  002B46                     u3000:
  8940  002B46  0E00               	movlw	0
  8941  002B48  6E01               	movwf	?___ftpack,c
  8942  002B4A  0E00               	movlw	0
  8943  002B4C  6E02               	movwf	?___ftpack+1,c
  8944  002B4E  0E00               	movlw	0
  8945  002B50  6E03               	movwf	?___ftpack+2,c
  8946  002B52  0012               	return	
  8947  002B54  2A04               	incf	___ftpack@exp,f,c
  8948  002B56  90D8               	bcf	status,0,c
  8949  002B58  3203               	rrcf	___ftpack@arg+2,f,c
  8950  002B5A  3202               	rrcf	___ftpack@arg+1,f,c
  8951  002B5C  3201               	rrcf	___ftpack@arg,f,c
  8952  002B5E                     l850:
  8953  002B5E  0E00               	movlw	0
  8954  002B60  1401               	andwf	___ftpack@arg,w,c
  8955  002B62  6E06               	movwf	??___ftpack& (0+255),c
  8956  002B64  0E00               	movlw	0
  8957  002B66  1402               	andwf	___ftpack@arg+1,w,c
  8958  002B68  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8959  002B6A  0EFE               	movlw	254
  8960  002B6C  1403               	andwf	___ftpack@arg+2,w,c
  8961  002B6E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8962  002B70  5006               	movf	??___ftpack,w,c
  8963  002B72  1007               	iorwf	??___ftpack+1,w,c
  8964  002B74  1008               	iorwf	??___ftpack+2,w,c
  8965  002B76  B4D8               	btfsc	status,2,c
  8966  002B78  D00C               	goto	l853
  8967  002B7A  D7EC               	goto	l851
  8968  002B7C  2A04               	incf	___ftpack@exp,f,c
  8969  002B7E  0E01               	movlw	1
  8970  002B80  2601               	addwf	___ftpack@arg,f,c
  8971  002B82  0E00               	movlw	0
  8972  002B84  2202               	addwfc	___ftpack@arg+1,f,c
  8973  002B86  0E00               	movlw	0
  8974  002B88  2203               	addwfc	___ftpack@arg+2,f,c
  8975  002B8A  90D8               	bcf	status,0,c
  8976  002B8C  3203               	rrcf	___ftpack@arg+2,f,c
  8977  002B8E  3202               	rrcf	___ftpack@arg+1,f,c
  8978  002B90  3201               	rrcf	___ftpack@arg,f,c
  8979  002B92                     l853:
  8980  002B92  0E00               	movlw	0
  8981  002B94  1401               	andwf	___ftpack@arg,w,c
  8982  002B96  6E06               	movwf	??___ftpack& (0+255),c
  8983  002B98  0E00               	movlw	0
  8984  002B9A  1402               	andwf	___ftpack@arg+1,w,c
  8985  002B9C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8986  002B9E  0EFF               	movlw	255
  8987  002BA0  1403               	andwf	___ftpack@arg+2,w,c
  8988  002BA2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8989  002BA4  5006               	movf	??___ftpack,w,c
  8990  002BA6  1007               	iorwf	??___ftpack+1,w,c
  8991  002BA8  1008               	iorwf	??___ftpack+2,w,c
  8992  002BAA  B4D8               	btfsc	status,2,c
  8993  002BAC  D006               	goto	l856
  8994  002BAE  D7E6               	goto	l854
  8995  002BB0  0604               	decf	___ftpack@exp,f,c
  8996  002BB2  90D8               	bcf	status,0,c
  8997  002BB4  3601               	rlcf	___ftpack@arg,f,c
  8998  002BB6  3602               	rlcf	___ftpack@arg+1,f,c
  8999  002BB8  3603               	rlcf	___ftpack@arg+2,f,c
  9000  002BBA                     l856:
  9001  002BBA  BE02               	btfsc	___ftpack@arg+1,7,c
  9002  002BBC  D003               	goto	u3040
  9003  002BBE  0E02               	movlw	2
  9004  002BC0  6004               	cpfslt	___ftpack@exp,c
  9005  002BC2  D7F6               	goto	l857
  9006  002BC4                     u3040:
  9007  002BC4  A004               	btfss	___ftpack@exp,0,c
  9008  002BC6  9E02               	bcf	___ftpack@arg+1,7,c
  9009  002BC8  90D8               	bcf	status,0,c
  9010  002BCA  3204               	rrcf	___ftpack@exp,f,c
  9011  002BCC  5004               	movf	___ftpack@exp,w,c
  9012  002BCE  1203               	iorwf	___ftpack@arg+2,f,c
  9013  002BD0  5005               	movf	___ftpack@sign,w,c
  9014  002BD2  A4D8               	btfss	status,2,c
  9015  002BD4  8E03               	bsf	___ftpack@arg+2,7,c
  9016  002BD6  C001  F001         	movff	___ftpack@arg,?___ftpack
  9017  002BDA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9018  002BDE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9019  002BE2  0012               	return	
  9020  002BE4                     __end_of___ftpack:
  9021                           	opt stack 0
  9022                           tblptru	equ	0xFF8
  9023                           tblptrh	equ	0xFF7
  9024                           tblptrl	equ	0xFF6
  9025                           tablat	equ	0xFF5
  9026                           prodh	equ	0xFF4
  9027                           prodl	equ	0xFF3
  9028                           intcon	equ	0xFF2
  9029                           postinc0	equ	0xFEE
  9030                           wreg	equ	0xFE8
  9031                           postinc1	equ	0xFE6
  9032                           postdec1	equ	0xFE5
  9033                           fsr1h	equ	0xFE2
  9034                           fsr1l	equ	0xFE1
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           
  9042 ;; *************** function _activar_alarma *****************
  9043 ;; Defined at:
  9044 ;;		line 277 in file "main.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  1    wreg      void 
  9051 ;; Registers used:
  9052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9060 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9061 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9062 ;;Total ram usage:        1 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    5
  9065 ;; This function calls:
  9066 ;;		_lcd_comand
  9067 ;;		_lcd_gotoxy
  9068 ;;		_lcd_putrs
  9069 ;; This function is called by:
  9070 ;;		_seleccionar_opcion
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           	psect	text45
  9075  00361A                     __ptext45:
  9076                           	opt stack 0
  9077  00361A                     _activar_alarma:
  9078                           	opt stack 20
  9079                           
  9080                           ;main.c: 278: numeros_ingresados = 0;
  9081                           
  9082                           ;incstack = 0
  9083  00361A  0E00               	movlw	0
  9084  00361C  0100               	movlb	0	; () banked
  9085  00361E  6F91               	movwf	(_numeros_ingresados+1)& (0+255),b
  9086  003620  0E00               	movlw	0
  9087  003622  6F90               	movwf	_numeros_ingresados& (0+255),b
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;main.c: 279: lcd_gotoxy(1, 1);
  9091  003624  0E01               	movlw	1
  9092  003626  6E05               	movwf	lcd_gotoxy@y,c
  9093  003628  0E01               	movlw	1
  9094  00362A  EC40  F01C         	call	_lcd_gotoxy
  9095                           
  9096                           ;main.c: 280: lcd_putrs("Alarm activated ");
  9097  00362E  0E6E               	movlw	low STR_17
  9098  003630  6E09               	movwf	lcd_putrs@ptr,c
  9099  003632  0E0F               	movlw	high STR_17
  9100  003634  6E0A               	movwf	lcd_putrs@ptr+1,c
  9101  003636  EC70  F01A         	call	_lcd_putrs	;wreg free
  9102                           
  9103                           ;main.c: 281: lcd_gotoxy(1, 2);
  9104  00363A  0E02               	movlw	2
  9105  00363C  6E05               	movwf	lcd_gotoxy@y,c
  9106  00363E  0E01               	movlw	1
  9107  003640  EC40  F01C         	call	_lcd_gotoxy
  9108                           
  9109                           ;main.c: 282: lcd_putrs("                ");
  9110  003644  0E5D               	movlw	low STR_18
  9111  003646  6E09               	movwf	lcd_putrs@ptr,c
  9112  003648  0E0F               	movlw	high STR_18
  9113  00364A  6E0A               	movwf	lcd_putrs@ptr+1,c
  9114  00364C  EC70  F01A         	call	_lcd_putrs	;wreg free
  9115                           
  9116                           ;main.c: 287: }
  9117                           ;main.c: 290: if (1 != 1) {
  9118                           
  9119                           ;main.c: 286: break;
  9120                           
  9121                           ;main.c: 284: while (1) {
  9122  003650  0012               	return	
  9123                           
  9124                           ;main.c: 295: _delay((unsigned long)((98)*(8000000/4000.0)));
  9125                           
  9126                           ;main.c: 294: LATBbits.LATB0 = !LATBbits.LATB0;
  9127                           
  9128                           ;main.c: 293: LATBbits.LATB1 = !LATBbits.LATB1;;
  9129                           
  9130                           ;main.c: 292: lcd_comand(0b00000010);
  9131  003652  0EFF               	movlw	255
  9132  003654  6E0B               	movwf	??_activar_alarma& (0+255),c
  9133  003656  0E8A               	movlw	138
  9134  003658                     u5997:
  9135  003658  2EE8               	decfsz	wreg,f,c
  9136  00365A  D7FE               	bra	u5997
  9137  00365C  2E0B               	decfsz	??_activar_alarma& (0+255),f,c
  9138  00365E  D7FC               	bra	u5997
  9139  003660  D000               	nop2	
  9140  003662  0012               	return	
  9141  003664                     __end_of_activar_alarma:
  9142                           	opt stack 0
  9143                           tblptru	equ	0xFF8
  9144                           tblptrh	equ	0xFF7
  9145                           tblptrl	equ	0xFF6
  9146                           tablat	equ	0xFF5
  9147                           prodh	equ	0xFF4
  9148                           prodl	equ	0xFF3
  9149                           intcon	equ	0xFF2
  9150                           postinc0	equ	0xFEE
  9151                           wreg	equ	0xFE8
  9152                           postinc1	equ	0xFE6
  9153                           postdec1	equ	0xFE5
  9154                           fsr1h	equ	0xFE2
  9155                           fsr1l	equ	0xFE1
  9156                           indf2	equ	0xFDF
  9157                           postinc2	equ	0xFDE
  9158                           postdec2	equ	0xFDD
  9159                           fsr2h	equ	0xFDA
  9160                           fsr2l	equ	0xFD9
  9161                           status	equ	0xFD8
  9162                           
  9163 ;; *************** function _lcd_comand *****************
  9164 ;; Defined at:
  9165 ;;		line 189 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  d               1    wreg     unsigned char 
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;  d               1    4[COMRAM] unsigned char 
  9170 ;; Return value:  Size  Location     Type
  9171 ;;                  1    wreg      void 
  9172 ;; Registers used:
  9173 ;;		wreg, status,2, status,0, cstack
  9174 ;; Tracked objects:
  9175 ;;		On entry : 0/0
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9183 ;;Total ram usage:        1 bytes
  9184 ;; Hardware stack levels used:    1
  9185 ;; Hardware stack levels required when called:    2
  9186 ;; This function calls:
  9187 ;;		_lcd_send_byte
  9188 ;; This function is called by:
  9189 ;;		_activar_alarma
  9190 ;;		_setup
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text46
  9195  003938                     __ptext46:
  9196                           	opt stack 0
  9197  003938                     _lcd_comand:
  9198                           	opt stack 27
  9199                           
  9200                           ;incstack = 0
  9201                           ;lcd_comand@d stored from wreg
  9202  003938  6E05               	movwf	lcd_comand@d,c
  9203                           
  9204                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  9205  00393A  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  9206  00393E  0E00               	movlw	0
  9207  003940  ECF0  F01B         	call	_lcd_send_byte
  9208  003944  0012               	return		;funcret
  9209  003946                     __end_of_lcd_comand:
  9210                           	opt stack 0
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           postinc0	equ	0xFEE
  9219                           wreg	equ	0xFE8
  9220                           postinc1	equ	0xFE6
  9221                           postdec1	equ	0xFE5
  9222                           fsr1h	equ	0xFE2
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function _cambiar_opcion *****************
  9232 ;; Defined at:
  9233 ;;		line 241 in file "main.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;		None
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      void 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9251 ;;Total ram usage:        1 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    5
  9254 ;; This function calls:
  9255 ;;		_lcd_gotoxy
  9256 ;;		_lcd_putrs
  9257 ;;		_sprintf
  9258 ;; This function is called by:
  9259 ;;		_ir_a_pantalla_edicion
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           	psect	text47
  9264  002A72                     __ptext47:
  9265                           	opt stack 0
  9266  002A72                     _cambiar_opcion:
  9267                           	opt stack 21
  9268                           
  9269                           ;main.c: 242: LATAbits.LATA0 = 0;
  9270                           
  9271                           ;incstack = 0
  9272  002A72  9089               	bcf	3977,0,c	;volatile
  9273                           
  9274                           ;main.c: 243: LATAbits.LATA1 = 0;
  9275  002A74  9289               	bcf	3977,1,c	;volatile
  9276                           
  9277                           ;main.c: 244: LATAbits.LATA2 = 1;
  9278  002A76  8489               	bsf	3977,2,c	;volatile
  9279                           
  9280                           ;main.c: 245: LATAbits.LATA3 = 0;
  9281  002A78  9689               	bcf	3977,3,c	;volatile
  9282                           
  9283                           ;main.c: 246: if (PORTCbits.RC2 == 1 && LATAbits.LATA2 == 1) {
  9284  002A7A  B482               	btfsc	3970,2,c	;volatile
  9285  002A7C  A489               	btfss	3977,2,c	;volatile
  9286  002A7E  D01D               	goto	u5290
  9287                           
  9288                           ;main.c: 247: if (boton_seleccionar == 3) {
  9289  002A80  0E03               	movlw	3
  9290  002A82  0100               	movlb	0	; () banked
  9291  002A84  198C               	xorwf	_boton_seleccionar& (0+255),w,b
  9292  002A86  0100               	movlb	0	; () banked
  9293  002A88  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  9294  002A8A  A4D8               	btfss	status,2,c
  9295  002A8C  D006               	goto	l259
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;main.c: 248: boton_seleccionar = 0;
  9299  002A8E  0E00               	movlw	0
  9300  002A90  0100               	movlb	0	; () banked
  9301  002A92  6F8D               	movwf	(_boton_seleccionar+1)& (0+255),b
  9302  002A94  0E00               	movlw	0
  9303  002A96  6F8C               	movwf	_boton_seleccionar& (0+255),b
  9304                           
  9305                           ;main.c: 249: } else {
  9306  002A98  D00C               	goto	l261
  9307  002A9A                     l259:
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;main.c: 250: boton_seleccionar++;
  9311                           
  9312                           ; BSR set to: 0
  9313  002A9A  0100               	movlb	0	; () banked
  9314  002A9C  4B8C               	infsnz	_boton_seleccionar& (0+255),f,b
  9315  002A9E  2B8D               	incf	(_boton_seleccionar+1)& (0+255),f,b
  9316                           
  9317                           ; BSR set to: 0
  9318                           ;main.c: 251: }
  9319                           ;main.c: 252: while (PORTCbits.RC2 == 1 && LATAbits.LATA2 == 1) {
  9320  002AA0  D008               	goto	l261
  9321  002AA2                     
  9322                           ;main.c: 253: _delay((unsigned long)((40)*(8000000/4000.0)));
  9323                           
  9324                           ; BSR set to: 0
  9325  002AA2  0E68               	movlw	104
  9326  002AA4  6E39               	movwf	??_cambiar_opcion& (0+255),c
  9327  002AA6  0EE4               	movlw	228
  9328  002AA8                     u6007:
  9329  002AA8  2EE8               	decfsz	wreg,f,c
  9330  002AAA  D7FE               	bra	u6007
  9331  002AAC  2E39               	decfsz	??_cambiar_opcion& (0+255),f,c
  9332  002AAE  D7FC               	bra	u6007
  9333  002AB0  D000               	nop2	
  9334  002AB2                     l261:
  9335  002AB2  A482               	btfss	3970,2,c	;volatile
  9336  002AB4  D002               	goto	u5290
  9337  002AB6  B489               	btfsc	3977,2,c	;volatile
  9338  002AB8  D7F4               	goto	l262
  9339  002ABA                     u5290:
  9340                           
  9341                           ;main.c: 254: }
  9342                           ;main.c: 255: }
  9343                           ;main.c: 257: LATAbits.LATA0 = 0;
  9344  002ABA  9089               	bcf	3977,0,c	;volatile
  9345                           
  9346                           ;main.c: 258: LATAbits.LATA1 = 0;
  9347  002ABC  9289               	bcf	3977,1,c	;volatile
  9348                           
  9349                           ;main.c: 259: LATAbits.LATA2 = 0;
  9350  002ABE  9489               	bcf	3977,2,c	;volatile
  9351                           
  9352                           ;main.c: 260: LATAbits.LATA3 = 1;
  9353  002AC0  8689               	bsf	3977,3,c	;volatile
  9354                           
  9355                           ;main.c: 261: if (PORTCbits.RC2 == 1 && LATAbits.LATA3 == 1) {
  9356  002AC2  B482               	btfsc	3970,2,c	;volatile
  9357  002AC4  A689               	btfss	3977,3,c	;volatile
  9358  002AC6  D01D               	goto	u5340
  9359                           
  9360                           ;main.c: 262: if (boton_seleccionar == 0) {
  9361  002AC8  0100               	movlb	0	; () banked
  9362  002ACA  518C               	movf	_boton_seleccionar& (0+255),w,b
  9363  002ACC  0100               	movlb	0	; () banked
  9364  002ACE  118D               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  9365  002AD0  A4D8               	btfss	status,2,c
  9366  002AD2  D006               	goto	l267
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;main.c: 263: boton_seleccionar = 3;
  9370  002AD4  0E00               	movlw	0
  9371  002AD6  0100               	movlb	0	; () banked
  9372  002AD8  6F8D               	movwf	(_boton_seleccionar+1)& (0+255),b
  9373  002ADA  0E03               	movlw	3
  9374  002ADC  6F8C               	movwf	_boton_seleccionar& (0+255),b
  9375                           
  9376                           ;main.c: 264: } else {
  9377  002ADE  D00D               	goto	l269
  9378  002AE0                     l267:
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;main.c: 265: boton_seleccionar--;
  9382                           
  9383                           ; BSR set to: 0
  9384  002AE0  0100               	movlb	0	; () banked
  9385  002AE2  078C               	decf	_boton_seleccionar& (0+255),f,b
  9386  002AE4  A0D8               	btfss	status,0,c
  9387  002AE6  078D               	decf	(_boton_seleccionar+1)& (0+255),f,b
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;main.c: 266: }
  9391                           ;main.c: 267: while (PORTCbits.RC2 == 1 && LATAbits.LATA3 == 1) {
  9392  002AE8  D008               	goto	l269
  9393  002AEA                     
  9394                           ;main.c: 268: _delay((unsigned long)((40)*(8000000/4000.0)));
  9395                           
  9396                           ; BSR set to: 0
  9397  002AEA  0E68               	movlw	104
  9398  002AEC  6E39               	movwf	??_cambiar_opcion& (0+255),c
  9399  002AEE  0EE4               	movlw	228
  9400  002AF0                     u6017:
  9401  002AF0  2EE8               	decfsz	wreg,f,c
  9402  002AF2  D7FE               	bra	u6017
  9403  002AF4  2E39               	decfsz	??_cambiar_opcion& (0+255),f,c
  9404  002AF6  D7FC               	bra	u6017
  9405  002AF8  D000               	nop2	
  9406  002AFA                     l269:
  9407  002AFA  A482               	btfss	3970,2,c	;volatile
  9408  002AFC  D002               	goto	u5340
  9409  002AFE  B689               	btfsc	3977,3,c	;volatile
  9410  002B00  D7F4               	goto	l270
  9411  002B02                     u5340:
  9412                           
  9413                           ;main.c: 269: }
  9414                           ;main.c: 270: }
  9415                           ;main.c: 272: sprintf(buffer2, "%01u", boton_seleccionar);
  9416  002B02  0EA1               	movlw	low _buffer2
  9417  002B04  6E22               	movwf	sprintf@sp,c
  9418  002B06  0E00               	movlw	high _buffer2
  9419  002B08  6E23               	movwf	sprintf@sp+1,c
  9420  002B0A  0EF5               	movlw	low STR_13
  9421  002B0C  6E24               	movwf	sprintf@f,c
  9422  002B0E  0E0F               	movlw	high STR_13
  9423  002B10  6E25               	movwf	sprintf@f+1,c
  9424  002B12  C08C  F026         	movff	_boton_seleccionar,?_sprintf+4
  9425  002B16  C08D  F027         	movff	_boton_seleccionar+1,?_sprintf+5
  9426  002B1A  EC4E  F00A         	call	_sprintf	;wreg free
  9427                           
  9428                           ;main.c: 273: lcd_gotoxy(8, 1);
  9429  002B1E  0E01               	movlw	1
  9430  002B20  6E05               	movwf	lcd_gotoxy@y,c
  9431  002B22  0E08               	movlw	8
  9432  002B24  EC40  F01C         	call	_lcd_gotoxy
  9433                           
  9434                           ;main.c: 274: lcd_putrs(buffer2);
  9435  002B28  0EA1               	movlw	low _buffer2
  9436  002B2A  6E09               	movwf	lcd_putrs@ptr,c
  9437  002B2C  0E00               	movlw	high _buffer2
  9438  002B2E  6E0A               	movwf	lcd_putrs@ptr+1,c
  9439  002B30  EC70  F01A         	call	_lcd_putrs	;wreg free
  9440  002B34  0012               	return		;funcret
  9441  002B36                     __end_of_cambiar_opcion:
  9442                           	opt stack 0
  9443                           tblptru	equ	0xFF8
  9444                           tblptrh	equ	0xFF7
  9445                           tblptrl	equ	0xFF6
  9446                           tablat	equ	0xFF5
  9447                           prodh	equ	0xFF4
  9448                           prodl	equ	0xFF3
  9449                           intcon	equ	0xFF2
  9450                           postinc0	equ	0xFEE
  9451                           wreg	equ	0xFE8
  9452                           postinc1	equ	0xFE6
  9453                           postdec1	equ	0xFE5
  9454                           fsr1h	equ	0xFE2
  9455                           fsr1l	equ	0xFE1
  9456                           indf2	equ	0xFDF
  9457                           postinc2	equ	0xFDE
  9458                           postdec2	equ	0xFDD
  9459                           fsr2h	equ	0xFDA
  9460                           fsr2l	equ	0xFD9
  9461                           status	equ	0xFD8
  9462                           
  9463 ;; *************** function _sprintf *****************
  9464 ;; Defined at:
  9465 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;  sp              2   33[COMRAM] PTR unsigned char 
  9468 ;;		 -> buffer2(20), 
  9469 ;;  f               2   35[COMRAM] PTR const unsigned char 
  9470 ;;		 -> STR_25(5), STR_16(5), STR_13(5), STR_8(15), 
  9471 ;;		 -> STR_7(15), 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  tmpval          4    0        struct .
  9474 ;;  cp              3    0        PTR const unsigned char 
  9475 ;;  width           2   53[COMRAM] int 
  9476 ;;  val             2   50[COMRAM] unsigned int 
  9477 ;;  ap              2   47[COMRAM] PTR void [1]
  9478 ;;		 -> ?_sprintf(2), 
  9479 ;;  len             2    0        unsigned int 
  9480 ;;  c               1   55[COMRAM] char 
  9481 ;;  prec            1   52[COMRAM] char 
  9482 ;;  flag            1   49[COMRAM] unsigned char 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  2   33[COMRAM] int 
  9485 ;; Registers used:
  9486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9492 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9493 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9494 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9495 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9496 ;;Total ram usage:       23 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    1
  9499 ;; This function calls:
  9500 ;;		___lwdiv
  9501 ;;		___lwmod
  9502 ;;		___wmul
  9503 ;;		_isdigit
  9504 ;; This function is called by:
  9505 ;;		_setDiaMesAnio
  9506 ;;		_setHoraMinutoSegundo
  9507 ;;		_guarda_numero_ingresado
  9508 ;;		_cambiar_opcion
  9509 ;;		_covertir_valores_de_array_a_escala_decimal
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           	psect	text48
  9514  00149C                     __ptext48:
  9515                           	opt stack 0
  9516  00149C                     _sprintf:
  9517                           	opt stack 26
  9518                           
  9519                           ;doprnt.c: 494: va_list ap;
  9520                           ;doprnt.c: 499: signed char c;
  9521                           ;doprnt.c: 501: int width;
  9522                           ;doprnt.c: 506: signed char prec;
  9523                           ;doprnt.c: 508: unsigned char flag;
  9524                           ;doprnt.c: 523: union {
  9525                           ;doprnt.c: 524: unsigned long vd;
  9526                           ;doprnt.c: 525: double integ;
  9527                           ;doprnt.c: 526: } tmpval;
  9528                           ;doprnt.c: 528: unsigned int val;
  9529                           ;doprnt.c: 529: unsigned len;
  9530                           ;doprnt.c: 530: const char * cp;
  9531                           ;doprnt.c: 533: *ap = __va_start();
  9532                           
  9533                           ;incstack = 0
  9534  00149C  0E26               	movlw	low (?_sprintf+4)
  9535  00149E  6E30               	movwf	sprintf@ap,c
  9536  0014A0  0E00               	movlw	high (?_sprintf+4)
  9537  0014A2  6E31               	movwf	sprintf@ap+1,c
  9538                           
  9539                           ;doprnt.c: 536: while(c = *f++) {
  9540  0014A4  D100               	goto	u4120
  9541  0014A6                     
  9542                           ;doprnt.c: 538: if(c != '%')
  9543  0014A6  0E25               	movlw	37
  9544  0014A8  1838               	xorwf	sprintf@c,w,c
  9545  0014AA  B4D8               	btfsc	status,2,c
  9546  0014AC  D009               	goto	l492
  9547                           
  9548                           ;doprnt.c: 540: {
  9549                           ;doprnt.c: 541: ((*sp++ = (c)));
  9550  0014AE  C022  FFD9         	movff	sprintf@sp,fsr2l
  9551  0014B2  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  9552  0014B6  C038  FFDF         	movff	sprintf@c,indf2
  9553  0014BA  4A22               	infsnz	sprintf@sp,f,c
  9554  0014BC  2A23               	incf	sprintf@sp+1,f,c
  9555                           
  9556                           ;doprnt.c: 542: continue;
  9557  0014BE  D0F3               	goto	u4120
  9558  0014C0                     l492:
  9559                           
  9560                           ;doprnt.c: 543: }
  9561                           ;doprnt.c: 546: width = 0;
  9562  0014C0  0E00               	movlw	0
  9563  0014C2  6E37               	movwf	sprintf@width+1,c
  9564  0014C4  0E00               	movlw	0
  9565  0014C6  6E36               	movwf	sprintf@width,c
  9566                           
  9567                           ;doprnt.c: 548: flag = 0;
  9568  0014C8  0E00               	movlw	0
  9569  0014CA  6E32               	movwf	sprintf@flag,c
  9570                           
  9571                           ;doprnt.c: 551: switch(*f) {
  9572                           
  9573                           ;doprnt.c: 550: for(;;) {
  9574  0014CC  D003               	goto	l494
  9575  0014CE                     
  9576                           ;doprnt.c: 580: flag |= 0x04;
  9577  0014CE  8432               	bsf	sprintf@flag,2,c
  9578                           
  9579                           ;doprnt.c: 581: f++;
  9580  0014D0  4A24               	infsnz	sprintf@f,f,c
  9581  0014D2  2A25               	incf	sprintf@f+1,f,c
  9582  0014D4                     l494:
  9583  0014D4  C024  FFF6         	movff	sprintf@f,tblptrl
  9584  0014D8  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9585  0014DC                     	if	0	;tblptru may be non-zero
  9586  0014DC                     	endif
  9587  0014DC                     	if	0	;tblptru may be non-zero
  9588  0014DC                     	endif
  9589  0014DC  0008               	tblrd		*
  9590  0014DE  50F5               	movf	tablat,w,c
  9591                           
  9592                           ; Switch size 1, requested type "space"
  9593                           ; Number of cases is 1, Range of values is 48 to 48
  9594                           ; switch strategies available:
  9595                           ; Name         Instructions Cycles
  9596                           ; simple_byte            4     3 (average)
  9597                           ;	Chosen strategy is simple_byte
  9598  0014E0  0A30               	xorlw	48	; case 48
  9599  0014E2  B4D8               	btfsc	status,2,c
  9600  0014E4  D7F4               	goto	l495
  9601                           
  9602                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9603                           
  9604                           ;doprnt.c: 586: }
  9605                           
  9606                           ;doprnt.c: 585: break;
  9607  0014E6  C024  FFF6         	movff	sprintf@f,tblptrl
  9608  0014EA  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9609  0014EE                     	if	0	;tblptru may be non-zero
  9610  0014EE                     	endif
  9611  0014EE                     	if	0	;tblptru may be non-zero
  9612  0014EE                     	endif
  9613  0014EE  0008               	tblrd		*
  9614  0014F0  50F5               	movf	tablat,w,c
  9615  0014F2  EC61  F01C         	call	_isdigit
  9616  0014F6  A0D8               	btfss	status,0,c
  9617  0014F8  D036               	goto	l502
  9618                           
  9619                           ;doprnt.c: 598: width = 0;
  9620  0014FA  0E00               	movlw	0
  9621  0014FC  6E37               	movwf	sprintf@width+1,c
  9622  0014FE  0E00               	movlw	0
  9623  001500  6E36               	movwf	sprintf@width,c
  9624  001502                     
  9625                           ;doprnt.c: 600: width *= 10;
  9626  001502  C036  F01C         	movff	sprintf@width,___wmul@multiplier
  9627  001506  C037  F01D         	movff	sprintf@width+1,___wmul@multiplier+1
  9628  00150A  0E00               	movlw	0
  9629  00150C  6E1F               	movwf	___wmul@multiplicand+1,c
  9630  00150E  0E0A               	movlw	10
  9631  001510  6E1E               	movwf	___wmul@multiplicand,c
  9632  001512  EC09  F01C         	call	___wmul	;wreg free
  9633  001516  C01C  F036         	movff	?___wmul,sprintf@width
  9634  00151A  C01D  F037         	movff	?___wmul+1,sprintf@width+1
  9635                           
  9636                           ;doprnt.c: 601: width += *f++ - '0';
  9637  00151E  0ED0               	movlw	208
  9638  001520  6E2C               	movwf	??_sprintf& (0+255),c
  9639  001522  0EFF               	movlw	255
  9640  001524  6E2D               	movwf	(??_sprintf+1)& (0+255),c
  9641  001526  C024  FFF6         	movff	sprintf@f,tblptrl
  9642  00152A  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9643  00152E                     	if	0	;tblptru may be non-zero
  9644  00152E                     	endif
  9645  00152E                     	if	0	;tblptru may be non-zero
  9646  00152E                     	endif
  9647  00152E  0008               	tblrd		*
  9648  001530  50F5               	movf	tablat,w,c
  9649  001532  6E2E               	movwf	(??_sprintf+2)& (0+255),c
  9650  001534  6A2F               	clrf	(??_sprintf+3)& (0+255),c
  9651  001536  502C               	movf	??_sprintf,w,c
  9652  001538  262E               	addwf	??_sprintf+2,f,c
  9653  00153A  502D               	movf	??_sprintf+1,w,c
  9654  00153C  222F               	addwfc	??_sprintf+3,f,c
  9655  00153E  502E               	movf	??_sprintf+2,w,c
  9656  001540  2636               	addwf	sprintf@width,f,c
  9657  001542  502F               	movf	??_sprintf+3,w,c
  9658  001544  2237               	addwfc	sprintf@width+1,f,c
  9659  001546  4A24               	infsnz	sprintf@f,f,c
  9660  001548  2A25               	incf	sprintf@f+1,f,c
  9661                           
  9662                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9663  00154A  C024  FFF6         	movff	sprintf@f,tblptrl
  9664  00154E  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9665  001552                     	if	0	;tblptru may be non-zero
  9666  001552                     	endif
  9667  001552                     	if	0	;tblptru may be non-zero
  9668  001552                     	endif
  9669  001552  0008               	tblrd		*
  9670  001554  50F5               	movf	tablat,w,c
  9671  001556  EC61  F01C         	call	_isdigit
  9672  00155A  A0D8               	btfss	status,0,c
  9673  00155C  D004               	goto	l502
  9674  00155E  D7D1               	goto	l500
  9675  001560                     
  9676                           ;doprnt.c: 818: flag |= 0xC0;
  9677  001560  0EC0               	movlw	192
  9678  001562  1232               	iorwf	sprintf@flag,f,c
  9679                           
  9680                           ;doprnt.c: 822: }
  9681                           
  9682                           ;doprnt.c: 819: break;
  9683  001564  D011               	goto	l507
  9684  001566                     l502:
  9685  001566  C024  FFF6         	movff	sprintf@f,tblptrl
  9686  00156A  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9687  00156E  4A24               	infsnz	sprintf@f,f,c
  9688  001570  2A25               	incf	sprintf@f+1,f,c
  9689  001572                     	if	0	;tblptru may be non-zero
  9690  001572                     	endif
  9691  001572                     	if	0	;tblptru may be non-zero
  9692  001572                     	endif
  9693  001572  0008               	tblrd		*
  9694  001574  CFF5 F038          	movff	tablat,sprintf@c
  9695  001578  5038               	movf	sprintf@c,w,c
  9696                           
  9697                           ; Switch size 1, requested type "space"
  9698                           ; Number of cases is 2, Range of values is 0 to 117
  9699                           ; switch strategies available:
  9700                           ; Name         Instructions Cycles
  9701                           ; simple_byte            7     4 (average)
  9702                           ;	Chosen strategy is simple_byte
  9703  00157A  0A00               	xorlw	0	; case 0
  9704  00157C  B4D8               	btfsc	status,2,c
  9705  00157E  D09F               	goto	u4130
  9706  001580  0A75               	xorlw	117	; case 117
  9707  001582  B4D8               	btfsc	status,2,c
  9708  001584  D7ED               	goto	l506
  9709  001586  D08F               	goto	u4120
  9710  001588                     l507:
  9711                           
  9712                           ;doprnt.c: 1273: {
  9713                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9714  001588  C030  FFD9         	movff	sprintf@ap,fsr2l
  9715  00158C  C031  FFDA         	movff	sprintf@ap+1,fsr2h
  9716  001590  CFDE F033          	movff	postinc2,sprintf@val
  9717  001594  CFDD F034          	movff	postdec2,sprintf@val+1
  9718  001598  0E02               	movlw	2
  9719  00159A  2630               	addwf	sprintf@ap,f,c
  9720  00159C  0E00               	movlw	0
  9721  00159E  2231               	addwfc	sprintf@ap+1,f,c
  9722                           
  9723                           ;doprnt.c: 1287: }
  9724                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9725  0015A0  0E01               	movlw	1
  9726  0015A2  6E38               	movwf	sprintf@c,c
  9727  0015A4                     l3863:
  9728  0015A4  0E05               	movlw	5
  9729  0015A6  1838               	xorwf	sprintf@c,w,c
  9730  0015A8  B4D8               	btfsc	status,2,c
  9731  0015AA  D012               	goto	u4050
  9732                           
  9733                           ;doprnt.c: 1306: if(val < dpowers[c])
  9734  0015AC  5038               	movf	sprintf@c,w,c
  9735  0015AE  0D02               	mullw	2
  9736  0015B0  0E01               	movlw	low _dpowers
  9737  0015B2  24F3               	addwf	prodl,w,c
  9738  0015B4  6EF6               	movwf	tblptrl,c
  9739  0015B6  0E0F               	movlw	high _dpowers
  9740  0015B8  20F4               	addwfc	prodh,w,c
  9741  0015BA  6EF7               	movwf	tblptrh,c
  9742  0015BC                     	if	0	;There are less than 3 active tblptr bytes
  9743  0015BC                     	endif
  9744  0015BC  0009               	tblrd		*+
  9745  0015BE  50F5               	movf	tablat,w,c
  9746  0015C0  5C33               	subwf	sprintf@val,w,c
  9747  0015C2  0009               	tblrd		*+
  9748  0015C4  50F5               	movf	tablat,w,c
  9749  0015C6  5834               	subwfb	sprintf@val+1,w,c
  9750  0015C8  A0D8               	btfss	status,0,c
  9751  0015CA  D002               	goto	u4050
  9752                           
  9753                           ;doprnt.c: 1307: break;
  9754  0015CC  2A38               	incf	sprintf@c,f,c
  9755  0015CE  D7EA               	goto	l3863
  9756  0015D0                     u4050:
  9757                           
  9758                           ;doprnt.c: 1381: if(width > c)
  9759  0015D0  0E80               	movlw	128
  9760  0015D2  BE38               	btfsc	sprintf@c,7,c
  9761  0015D4  0E7F               	movlw	127
  9762  0015D6  6E2C               	movwf	??_sprintf& (0+255),c
  9763  0015D8  5036               	movf	sprintf@width,w,c
  9764  0015DA  5C38               	subwf	sprintf@c,w,c
  9765  0015DC  5037               	movf	sprintf@width+1,w,c
  9766  0015DE  0A80               	xorlw	128
  9767  0015E0  582C               	subwfb	??_sprintf& (0+255),w,c
  9768  0015E2  B0D8               	btfsc	status,0,c
  9769  0015E4  D007               	goto	l511
  9770                           
  9771                           ;doprnt.c: 1382: width -= c;
  9772  0015E6  5038               	movf	sprintf@c,w,c
  9773  0015E8  5E36               	subwf	sprintf@width,f,c
  9774  0015EA  0E00               	movlw	0
  9775  0015EC  BE38               	btfsc	sprintf@c,7,c
  9776  0015EE  0EFF               	movlw	255
  9777  0015F0  5A37               	subwfb	sprintf@width+1,f,c
  9778  0015F2  D004               	goto	l512
  9779  0015F4                     l511:
  9780                           
  9781                           ;doprnt.c: 1383: else
  9782                           ;doprnt.c: 1384: width = 0;
  9783  0015F4  0E00               	movlw	0
  9784  0015F6  6E37               	movwf	sprintf@width+1,c
  9785  0015F8  0E00               	movlw	0
  9786  0015FA  6E36               	movwf	sprintf@width,c
  9787  0015FC                     l512:
  9788                           
  9789                           ;doprnt.c: 1387: if(flag & 0x04) {
  9790  0015FC  A432               	btfss	sprintf@flag,2,c
  9791  0015FE  D010               	goto	l513
  9792  001600                     
  9793                           ;doprnt.c: 1415: if(width)
  9794  001600  5036               	movf	sprintf@width,w,c
  9795  001602  1037               	iorwf	sprintf@width+1,w,c
  9796  001604  B4D8               	btfsc	status,2,c
  9797  001606  D01F               	goto	u4110
  9798                           
  9799                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9800                           
  9801                           ;doprnt.c: 1416: do
  9802  001608  C022  FFD9         	movff	sprintf@sp,fsr2l
  9803  00160C  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  9804  001610  0E30               	movlw	48
  9805  001612  6EDF               	movwf	indf2,c
  9806  001614  4A22               	infsnz	sprintf@sp,f,c
  9807  001616  2A23               	incf	sprintf@sp+1,f,c
  9808                           
  9809                           ;doprnt.c: 1418: while(--width);
  9810  001618  0636               	decf	sprintf@width,f,c
  9811  00161A  A0D8               	btfss	status,0,c
  9812  00161C  0637               	decf	sprintf@width+1,f,c
  9813  00161E  D7F0               	goto	L5
  9814  001620                     l513:
  9815                           
  9816                           ;doprnt.c: 1422: {
  9817                           ;doprnt.c: 1424: if(width
  9818                           ;doprnt.c: 1428: )
  9819  001620  5036               	movf	sprintf@width,w,c
  9820  001622  1037               	iorwf	sprintf@width+1,w,c
  9821  001624  B4D8               	btfsc	status,2,c
  9822  001626  D00F               	goto	u4110
  9823  001628                     u4100:
  9824                           
  9825                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9826                           
  9827                           ;doprnt.c: 1429: do
  9828  001628  C022  FFD9         	movff	sprintf@sp,fsr2l
  9829  00162C  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  9830  001630  0E20               	movlw	32
  9831  001632  6EDF               	movwf	indf2,c
  9832  001634  4A22               	infsnz	sprintf@sp,f,c
  9833  001636  2A23               	incf	sprintf@sp+1,f,c
  9834                           
  9835                           ;doprnt.c: 1431: while(--width);
  9836  001638  0636               	decf	sprintf@width,f,c
  9837  00163A  A0D8               	btfss	status,0,c
  9838  00163C  0637               	decf	sprintf@width+1,f,c
  9839  00163E  5036               	movf	sprintf@width,w,c
  9840  001640  1037               	iorwf	sprintf@width+1,w,c
  9841  001642  A4D8               	btfss	status,2,c
  9842  001644  D7F1               	goto	u4100
  9843  001646                     u4110:
  9844                           
  9845                           ;doprnt.c: 1469: }
  9846                           ;doprnt.c: 1472: prec = c;
  9847  001646  C038  F035         	movff	sprintf@c,sprintf@prec
  9848                           
  9849                           ;doprnt.c: 1474: while(prec--) {
  9850  00164A  D029               	goto	l521
  9851  00164C                     
  9852                           ;doprnt.c: 1478: {
  9853                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9854  00164C  5035               	movf	sprintf@prec,w,c
  9855  00164E  0D02               	mullw	2
  9856  001650  0E01               	movlw	low _dpowers
  9857  001652  24F3               	addwf	prodl,w,c
  9858  001654  6EF6               	movwf	tblptrl,c
  9859  001656  0E0F               	movlw	high _dpowers
  9860  001658  20F4               	addwfc	prodh,w,c
  9861  00165A  6EF7               	movwf	tblptrh,c
  9862  00165C                     	if	0	;There are less than 3 active tblptr bytes
  9863  00165C                     	endif
  9864  00165C  0009               	tblrd		*+
  9865  00165E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  9866  001662  000A               	tblrd		*-
  9867  001664  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  9868  001668  C033  F001         	movff	sprintf@val,___lwdiv@dividend
  9869  00166C  C034  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  9870  001670  EC47  F01A         	call	___lwdiv	;wreg free
  9871  001674  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  9872  001678  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  9873  00167C  0E00               	movlw	0
  9874  00167E  6E0B               	movwf	___lwmod@divisor+1,c
  9875  001680  0E0A               	movlw	10
  9876  001682  6E0A               	movwf	___lwmod@divisor,c
  9877  001684  EC57  F01B         	call	___lwmod	;wreg free
  9878  001688  5008               	movf	?___lwmod,w,c
  9879  00168A  0F30               	addlw	48
  9880  00168C  6E38               	movwf	sprintf@c,c
  9881                           
  9882                           ;doprnt.c: 1523: }
  9883                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9884  00168E  C022  FFD9         	movff	sprintf@sp,fsr2l
  9885  001692  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  9886  001696  C038  FFDF         	movff	sprintf@c,indf2
  9887  00169A  4A22               	infsnz	sprintf@sp,f,c
  9888  00169C  2A23               	incf	sprintf@sp+1,f,c
  9889  00169E                     l521:
  9890  00169E  0635               	decf	sprintf@prec,f,c
  9891  0016A0  2835               	incf	sprintf@prec,w,c
  9892  0016A2  A4D8               	btfss	status,2,c
  9893  0016A4  D7D3               	goto	l522
  9894  0016A6                     u4120:
  9895  0016A6  C024  FFF6         	movff	sprintf@f,tblptrl
  9896  0016AA  C025  FFF7         	movff	sprintf@f+1,tblptrh
  9897  0016AE  4A24               	infsnz	sprintf@f,f,c
  9898  0016B0  2A25               	incf	sprintf@f+1,f,c
  9899  0016B2                     	if	0	;tblptru may be non-zero
  9900  0016B2                     	endif
  9901  0016B2                     	if	0	;tblptru may be non-zero
  9902  0016B2                     	endif
  9903  0016B2  0008               	tblrd		*
  9904  0016B4  CFF5 F038          	movff	tablat,sprintf@c
  9905  0016B8  5038               	movf	sprintf@c,w,c
  9906  0016BA  A4D8               	btfss	status,2,c
  9907  0016BC  D6F4               	goto	l491
  9908  0016BE                     u4130:
  9909                           
  9910                           ;doprnt.c: 1538: *sp = 0;
  9911                           
  9912                           ;doprnt.c: 1525: }
  9913                           ;doprnt.c: 1533: }
  9914                           ;doprnt.c: 1535: alldone:
  9915  0016BE  C022  FFD9         	movff	sprintf@sp,fsr2l
  9916  0016C2  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  9917  0016C6  0E00               	movlw	0
  9918  0016C8  6EDF               	movwf	indf2,c
  9919  0016CA  0012               	return	
  9920  0016CC                     __end_of_sprintf:
  9921                           	opt stack 0
  9922                           tblptru	equ	0xFF8
  9923                           tblptrh	equ	0xFF7
  9924                           tblptrl	equ	0xFF6
  9925                           tablat	equ	0xFF5
  9926                           prodh	equ	0xFF4
  9927                           prodl	equ	0xFF3
  9928                           intcon	equ	0xFF2
  9929                           postinc0	equ	0xFEE
  9930                           wreg	equ	0xFE8
  9931                           postinc1	equ	0xFE6
  9932                           postdec1	equ	0xFE5
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           fsr2h	equ	0xFDA
  9939                           fsr2l	equ	0xFD9
  9940                           status	equ	0xFD8
  9941                           
  9942 ;; *************** function _isdigit *****************
  9943 ;; Defined at:
  9944 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;  c               1    wreg     unsigned char 
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;  c               1    2[COMRAM] unsigned char 
  9949 ;; Return value:  Size  Location     Type
  9950 ;;		None               void
  9951 ;; Registers used:
  9952 ;;		wreg, status,2, status,0
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9961 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9962 ;;Total ram usage:        3 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; This function calls:
  9965 ;;		Nothing
  9966 ;; This function is called by:
  9967 ;;		_sprintf
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           	psect	text49
  9972  0038C2                     __ptext49:
  9973                           	opt stack 0
  9974  0038C2                     _isdigit:
  9975                           	opt stack 26
  9976                           
  9977                           ;incstack = 0
  9978                           ;isdigit@c stored from wreg
  9979  0038C2  6E03               	movwf	isdigit@c,c
  9980  0038C4  0E00               	movlw	0
  9981  0038C6  6E02               	movwf	_isdigit$1969,c
  9982  0038C8  0E3A               	movlw	58
  9983  0038CA  6003               	cpfslt	isdigit@c,c
  9984  0038CC  D005               	goto	l965
  9985  0038CE  0E2F               	movlw	47
  9986  0038D0  6403               	cpfsgt	isdigit@c,c
  9987  0038D2  D002               	goto	l965
  9988  0038D4  0E01               	movlw	1
  9989  0038D6  6E02               	movwf	_isdigit$1969,c
  9990  0038D8                     l965:
  9991  0038D8  C002  F001         	movff	_isdigit$1969,??_isdigit
  9992  0038DC  3001               	rrcf	??_isdigit,w,c
  9993  0038DE  0012               	return	
  9994  0038E0                     __end_of_isdigit:
  9995                           	opt stack 0
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           postinc0	equ	0xFEE
 10004                           wreg	equ	0xFE8
 10005                           postinc1	equ	0xFE6
 10006                           postdec1	equ	0xFE5
 10007                           fsr1h	equ	0xFE2
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function ___wmul *****************
 10017 ;; Defined at:
 10018 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;  multiplier      2   27[COMRAM] unsigned int 
 10021 ;;  multiplicand    2   29[COMRAM] unsigned int 
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;  product         2   31[COMRAM] unsigned int 
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  2   27[COMRAM] unsigned int 
 10026 ;; Registers used:
 10027 ;;		wreg, status,2, status,0, prodl, prodh
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10036 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10037 ;;Total ram usage:        6 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; This function calls:
 10040 ;;		Nothing
 10041 ;; This function is called by:
 10042 ;;		_covertir_valores_de_array_a_escala_decimal
 10043 ;;		_sprintf
 10044 ;;		_eval_poly
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           	psect	text50
 10049  003812                     __ptext50:
 10050                           	opt stack 0
 10051  003812                     ___wmul:
 10052                           	opt stack 26
 10053                           
 10054                           ;incstack = 0
 10055  003812  501C               	movf	___wmul@multiplier,w,c
 10056  003814  021E               	mulwf	___wmul@multiplicand,c
 10057  003816  CFF3 F020          	movff	prodl,___wmul@product
 10058  00381A  CFF4 F021          	movff	prodh,___wmul@product+1
 10059  00381E  501C               	movf	___wmul@multiplier,w,c
 10060  003820  021F               	mulwf	___wmul@multiplicand+1,c
 10061  003822  50F3               	movf	prodl,w,c
 10062  003824  2621               	addwf	___wmul@product+1,f,c
 10063  003826  501D               	movf	___wmul@multiplier+1,w,c
 10064  003828  021E               	mulwf	___wmul@multiplicand,c
 10065  00382A  50F3               	movf	prodl,w,c
 10066  00382C  2621               	addwf	___wmul@product+1,f,c
 10067  00382E  C020  F01C         	movff	___wmul@product,?___wmul
 10068  003832  C021  F01D         	movff	___wmul@product+1,?___wmul+1
 10069  003836  0012               	return	
 10070  003838                     __end_of___wmul:
 10071                           	opt stack 0
 10072                           tblptru	equ	0xFF8
 10073                           tblptrh	equ	0xFF7
 10074                           tblptrl	equ	0xFF6
 10075                           tablat	equ	0xFF5
 10076                           prodh	equ	0xFF4
 10077                           prodl	equ	0xFF3
 10078                           intcon	equ	0xFF2
 10079                           postinc0	equ	0xFEE
 10080                           wreg	equ	0xFE8
 10081                           postinc1	equ	0xFE6
 10082                           postdec1	equ	0xFE5
 10083                           fsr1h	equ	0xFE2
 10084                           fsr1l	equ	0xFE1
 10085                           indf2	equ	0xFDF
 10086                           postinc2	equ	0xFDE
 10087                           postdec2	equ	0xFDD
 10088                           fsr2h	equ	0xFDA
 10089                           fsr2l	equ	0xFD9
 10090                           status	equ	0xFD8
 10091                           
 10092 ;; *************** function ___lwmod *****************
 10093 ;; Defined at:
 10094 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;  dividend        2    7[COMRAM] unsigned int 
 10097 ;;  divisor         2    9[COMRAM] unsigned int 
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;  counter         1   11[COMRAM] unsigned char 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;                  2    7[COMRAM] unsigned int 
 10102 ;; Registers used:
 10103 ;;		wreg, status,2, status,0
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10112 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10113 ;;Total ram usage:        5 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; This function calls:
 10116 ;;		Nothing
 10117 ;; This function is called by:
 10118 ;;		_sprintf
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           	psect	text51
 10123  0036AE                     __ptext51:
 10124                           	opt stack 0
 10125  0036AE                     ___lwmod:
 10126                           	opt stack 26
 10127                           
 10128                           ;incstack = 0
 10129  0036AE  500A               	movf	___lwmod@divisor,w,c
 10130  0036B0  100B               	iorwf	___lwmod@divisor+1,w,c
 10131  0036B2  B4D8               	btfsc	status,2,c
 10132  0036B4  D018               	goto	l1059
 10133  0036B6  0E01               	movlw	1
 10134  0036B8  6E0C               	movwf	___lwmod@counter,c
 10135  0036BA  D004               	goto	l1054
 10136  0036BC  90D8               	bcf	status,0,c
 10137  0036BE  360A               	rlcf	___lwmod@divisor,f,c
 10138  0036C0  360B               	rlcf	___lwmod@divisor+1,f,c
 10139  0036C2  2A0C               	incf	___lwmod@counter,f,c
 10140  0036C4                     l1054:
 10141  0036C4  AE0B               	btfss	___lwmod@divisor+1,7,c
 10142  0036C6  D7FA               	goto	l1055
 10143  0036C8                     u3640:
 10144  0036C8  500A               	movf	___lwmod@divisor,w,c
 10145  0036CA  5C08               	subwf	___lwmod@dividend,w,c
 10146  0036CC  500B               	movf	___lwmod@divisor+1,w,c
 10147  0036CE  5809               	subwfb	___lwmod@dividend+1,w,c
 10148  0036D0  A0D8               	btfss	status,0,c
 10149  0036D2  D004               	goto	l1058
 10150  0036D4  500A               	movf	___lwmod@divisor,w,c
 10151  0036D6  5E08               	subwf	___lwmod@dividend,f,c
 10152  0036D8  500B               	movf	___lwmod@divisor+1,w,c
 10153  0036DA  5A09               	subwfb	___lwmod@dividend+1,f,c
 10154  0036DC                     l1058:
 10155  0036DC  90D8               	bcf	status,0,c
 10156  0036DE  320B               	rrcf	___lwmod@divisor+1,f,c
 10157  0036E0  320A               	rrcf	___lwmod@divisor,f,c
 10158  0036E2  2E0C               	decfsz	___lwmod@counter,f,c
 10159  0036E4  D7F1               	goto	u3640
 10160  0036E6                     l1059:
 10161  0036E6  C008  F008         	movff	___lwmod@dividend,?___lwmod
 10162  0036EA  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 10163  0036EE  0012               	return		;funcret
 10164  0036F0                     __end_of___lwmod:
 10165                           	opt stack 0
 10166                           tblptru	equ	0xFF8
 10167                           tblptrh	equ	0xFF7
 10168                           tblptrl	equ	0xFF6
 10169                           tablat	equ	0xFF5
 10170                           prodh	equ	0xFF4
 10171                           prodl	equ	0xFF3
 10172                           intcon	equ	0xFF2
 10173                           postinc0	equ	0xFEE
 10174                           wreg	equ	0xFE8
 10175                           postinc1	equ	0xFE6
 10176                           postdec1	equ	0xFE5
 10177                           fsr1h	equ	0xFE2
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function ___lwdiv *****************
 10187 ;; Defined at:
 10188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  dividend        2    0[COMRAM] unsigned int 
 10191 ;;  divisor         2    2[COMRAM] unsigned int 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  quotient        2    4[COMRAM] unsigned int 
 10194 ;;  counter         1    6[COMRAM] unsigned char 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  2    0[COMRAM] unsigned int 
 10197 ;; Registers used:
 10198 ;;		wreg, status,2, status,0
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10205 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10207 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10208 ;;Total ram usage:        7 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_sprintf
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           	psect	text52
 10218  00348E                     __ptext52:
 10219                           	opt stack 0
 10220  00348E                     ___lwdiv:
 10221                           	opt stack 26
 10222                           
 10223                           ;incstack = 0
 10224  00348E  0E00               	movlw	0
 10225  003490  6E06               	movwf	___lwdiv@quotient+1,c
 10226  003492  0E00               	movlw	0
 10227  003494  6E05               	movwf	___lwdiv@quotient,c
 10228  003496  5003               	movf	___lwdiv@divisor,w,c
 10229  003498  1004               	iorwf	___lwdiv@divisor+1,w,c
 10230  00349A  B4D8               	btfsc	status,2,c
 10231  00349C  D01C               	goto	l1049
 10232  00349E  0E01               	movlw	1
 10233  0034A0  6E07               	movwf	___lwdiv@counter,c
 10234  0034A2  D004               	goto	l1044
 10235  0034A4  90D8               	bcf	status,0,c
 10236  0034A6  3603               	rlcf	___lwdiv@divisor,f,c
 10237  0034A8  3604               	rlcf	___lwdiv@divisor+1,f,c
 10238  0034AA  2A07               	incf	___lwdiv@counter,f,c
 10239  0034AC                     l1044:
 10240  0034AC  AE04               	btfss	___lwdiv@divisor+1,7,c
 10241  0034AE  D7FA               	goto	l1045
 10242  0034B0                     u3610:
 10243  0034B0  90D8               	bcf	status,0,c
 10244  0034B2  3605               	rlcf	___lwdiv@quotient,f,c
 10245  0034B4  3606               	rlcf	___lwdiv@quotient+1,f,c
 10246  0034B6  5003               	movf	___lwdiv@divisor,w,c
 10247  0034B8  5C01               	subwf	___lwdiv@dividend,w,c
 10248  0034BA  5004               	movf	___lwdiv@divisor+1,w,c
 10249  0034BC  5802               	subwfb	___lwdiv@dividend+1,w,c
 10250  0034BE  A0D8               	btfss	status,0,c
 10251  0034C0  D005               	goto	l1048
 10252  0034C2  5003               	movf	___lwdiv@divisor,w,c
 10253  0034C4  5E01               	subwf	___lwdiv@dividend,f,c
 10254  0034C6  5004               	movf	___lwdiv@divisor+1,w,c
 10255  0034C8  5A02               	subwfb	___lwdiv@dividend+1,f,c
 10256  0034CA  8005               	bsf	___lwdiv@quotient,0,c
 10257  0034CC                     l1048:
 10258  0034CC  90D8               	bcf	status,0,c
 10259  0034CE  3204               	rrcf	___lwdiv@divisor+1,f,c
 10260  0034D0  3203               	rrcf	___lwdiv@divisor,f,c
 10261  0034D2  2E07               	decfsz	___lwdiv@counter,f,c
 10262  0034D4  D7ED               	goto	u3610
 10263  0034D6                     l1049:
 10264  0034D6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 10265  0034DA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10266  0034DE  0012               	return		;funcret
 10267  0034E0                     __end_of___lwdiv:
 10268                           	opt stack 0
 10269                           tblptru	equ	0xFF8
 10270                           tblptrh	equ	0xFF7
 10271                           tblptrl	equ	0xFF6
 10272                           tablat	equ	0xFF5
 10273                           prodh	equ	0xFF4
 10274                           prodl	equ	0xFF3
 10275                           intcon	equ	0xFF2
 10276                           postinc0	equ	0xFEE
 10277                           wreg	equ	0xFE8
 10278                           postinc1	equ	0xFE6
 10279                           postdec1	equ	0xFE5
 10280                           fsr1h	equ	0xFE2
 10281                           fsr1l	equ	0xFE1
 10282                           indf2	equ	0xFDF
 10283                           postinc2	equ	0xFDE
 10284                           postdec2	equ	0xFDD
 10285                           fsr2h	equ	0xFDA
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8
 10288                           
 10289 ;; *************** function _lcd_putrs *****************
 10290 ;; Defined at:
 10291 ;;		line 221 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
 10294 ;;		 -> STR_24(17), STR_23(21), STR_22(17), STR_21(17), 
 10295 ;;		 -> STR_20(9), STR_19(8), STR_18(17), STR_17(17), 
 10296 ;;		 -> STR_15(15), STR_14(8), STR_12(9), STR_11(9), 
 10297 ;;		 -> STR_10(9), STR_9(7), buffer2(20), 
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;		None
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  1    wreg      void 
 10302 ;; Registers used:
 10303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10309 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10313 ;;Total ram usage:        2 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    4
 10316 ;; This function calls:
 10317 ;;		_lcd_putc
 10318 ;; This function is called by:
 10319 ;;		_setDiaMesAnio
 10320 ;;		_setHoraMinutoSegundo
 10321 ;;		_titila_texto_insert_password
 10322 ;;		_guarda_numero_ingresado
 10323 ;;		_mostrar_presionar_a
 10324 ;;		_resetear_pantalla_ingresar_contrasenia
 10325 ;;		_cambiar_opcion
 10326 ;;		_activar_alarma
 10327 ;;		_ir_a_pantalla_edicion
 10328 ;;		_ir_a_pantalla_ingresar_contrasenia
 10329 ;;		_ir_a_pantalla_editar_contrasenia
 10330 ;;		_covertir_valores_de_array_a_escala_decimal
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           	psect	text53
 10335  0034E0                     __ptext53:
 10336                           	opt stack 0
 10337  0034E0                     _lcd_putrs:
 10338                           	opt stack 23
 10339                           
 10340                           ;unmc_lcd_216.c: 223: while(*ptr){
 10341                           
 10342                           ;incstack = 0
 10343  0034E0  D014               	goto	l476
 10344  0034E2                     
 10345                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
 10346  0034E2  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
 10347  0034E6  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
 10348  0034EA  6AF8               	clrf	tblptru,c
 10349  0034EC  0E0E               	movlw	(high __ramtop+-1)
 10350  0034EE  64F7               	cpfsgt	tblptrh,c
 10351  0034F0  D003               	bra	u4147
 10352  0034F2  0008               	tblrd		*
 10353  0034F4  50F5               	movf	tablat,w,c
 10354  0034F6  D005               	bra	u4140
 10355  0034F8                     u4147:
 10356  0034F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 10357  0034FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 10358  003500  50EF               	movf	indf0,w,c
 10359  003502                     u4140:
 10360  003502  EC32  F01B         	call	_lcd_putc
 10361  003506  4A09               	infsnz	lcd_putrs@ptr,f,c
 10362  003508  2A0A               	incf	lcd_putrs@ptr+1,f,c
 10363  00350A                     l476:
 10364  00350A  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
 10365  00350E  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
 10366  003512  6AF8               	clrf	tblptru,c
 10367  003514  0E0E               	movlw	(high __ramtop+-1)
 10368  003516  64F7               	cpfsgt	tblptrh,c
 10369  003518  D003               	bra	u4157
 10370  00351A  0008               	tblrd		*
 10371  00351C  50F5               	movf	tablat,w,c
 10372  00351E  D005               	bra	u4150
 10373  003520                     u4157:
 10374  003520  CFF6 FFE9          	movff	tblptrl,fsr0l
 10375  003524  CFF7 FFEA          	movff	tblptrh,fsr0h
 10376  003528  50EF               	movf	indf0,w,c
 10377  00352A                     u4150:
 10378  00352A  0900               	iorlw	0
 10379  00352C  B4D8               	btfsc	status,2,c
 10380  00352E  0012               	return	
 10381  003530  D7D8               	goto	l477
 10382  003532                     __end_of_lcd_putrs:
 10383                           	opt stack 0
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           intcon	equ	0xFF2
 10391                           indf0	equ	0xFEF
 10392                           postinc0	equ	0xFEE
 10393                           fsr0h	equ	0xFEA
 10394                           fsr0l	equ	0xFE9
 10395                           wreg	equ	0xFE8
 10396                           postinc1	equ	0xFE6
 10397                           postdec1	equ	0xFE5
 10398                           fsr1h	equ	0xFE2
 10399                           fsr1l	equ	0xFE1
 10400                           indf2	equ	0xFDF
 10401                           postinc2	equ	0xFDE
 10402                           postdec2	equ	0xFDD
 10403                           fsr2h	equ	0xFDA
 10404                           fsr2l	equ	0xFD9
 10405                           status	equ	0xFD8
 10406                           
 10407 ;; *************** function _lcd_putc *****************
 10408 ;; Defined at:
 10409 ;;		line 172 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10410 ;; Parameters:    Size  Location     Type
 10411 ;;  c               1    wreg     unsigned char 
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;  c               1    7[COMRAM] unsigned char 
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  1    wreg      void 
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0, cstack
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10427 ;;Total ram usage:        1 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    3
 10430 ;; This function calls:
 10431 ;;		_lcd_gotoxy
 10432 ;;		_lcd_send_byte
 10433 ;; This function is called by:
 10434 ;;		_lcd_putrs
 10435 ;;		_lcd_puts
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           	psect	text54
 10440  003664                     __ptext54:
 10441                           	opt stack 0
 10442  003664                     _lcd_putc:
 10443                           	opt stack 23
 10444                           
 10445                           ;incstack = 0
 10446                           ;lcd_putc@c stored from wreg
 10447  003664  6E08               	movwf	lcd_putc@c,c
 10448                           
 10449                           ;unmc_lcd_216.c: 173: switch(c){
 10450  003666  D018               	goto	l455
 10451  003668                     
 10452                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
 10453  003668  0E01               	movlw	1
 10454  00366A  6E03               	movwf	lcd_send_byte@n,c
 10455  00366C  0E00               	movlw	0
 10456  00366E  ECF0  F01B         	call	_lcd_send_byte
 10457                           
 10458                           ;unmc_lcd_216.c: 176: break;
 10459  003672  0012               	return	
 10460  003674                     
 10461                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
 10462  003674  0E02               	movlw	2
 10463  003676  6E05               	movwf	lcd_gotoxy@y,c
 10464  003678  0E01               	movlw	1
 10465  00367A  EC40  F01C         	call	_lcd_gotoxy
 10466                           
 10467                           ;unmc_lcd_216.c: 179: break;
 10468  00367E  0012               	return	
 10469  003680                     
 10470                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
 10471  003680  0E10               	movlw	16
 10472  003682  6E03               	movwf	lcd_send_byte@n,c
 10473  003684  0E00               	movlw	0
 10474  003686  ECF0  F01B         	call	_lcd_send_byte
 10475                           
 10476                           ;unmc_lcd_216.c: 182: break;
 10477  00368A  0012               	return	
 10478  00368C                     
 10479                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
 10480  00368C  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
 10481  003690  0E01               	movlw	1
 10482  003692  ECF0  F01B         	call	_lcd_send_byte
 10483                           
 10484                           ;unmc_lcd_216.c: 186: }
 10485                           
 10486                           ;unmc_lcd_216.c: 185: break;
 10487  003696  0012               	return	
 10488  003698                     l455:
 10489  003698  5008               	movf	lcd_putc@c,w,c
 10490                           
 10491                           ; Switch size 1, requested type "space"
 10492                           ; Number of cases is 3, Range of values is 8 to 12
 10493                           ; switch strategies available:
 10494                           ; Name         Instructions Cycles
 10495                           ; simple_byte           10     6 (average)
 10496                           ;	Chosen strategy is simple_byte
 10497  00369A  0A08               	xorlw	8	; case 8
 10498  00369C  B4D8               	btfsc	status,2,c
 10499  00369E  D7F0               	goto	l459
 10500  0036A0  0A02               	xorlw	2	; case 10
 10501  0036A2  B4D8               	btfsc	status,2,c
 10502  0036A4  D7E7               	goto	l458
 10503  0036A6  0A06               	xorlw	6	; case 12
 10504  0036A8  B4D8               	btfsc	status,2,c
 10505  0036AA  D7DE               	goto	l456
 10506  0036AC  D7EF               	goto	l460
 10507  0036AE                     __end_of_lcd_putc:
 10508                           	opt stack 0
 10509                           tblptru	equ	0xFF8
 10510                           tblptrh	equ	0xFF7
 10511                           tblptrl	equ	0xFF6
 10512                           tablat	equ	0xFF5
 10513                           prodh	equ	0xFF4
 10514                           prodl	equ	0xFF3
 10515                           intcon	equ	0xFF2
 10516                           indf0	equ	0xFEF
 10517                           postinc0	equ	0xFEE
 10518                           fsr0h	equ	0xFEA
 10519                           fsr0l	equ	0xFE9
 10520                           wreg	equ	0xFE8
 10521                           postinc1	equ	0xFE6
 10522                           postdec1	equ	0xFE5
 10523                           fsr1h	equ	0xFE2
 10524                           fsr1l	equ	0xFE1
 10525                           indf2	equ	0xFDF
 10526                           postinc2	equ	0xFDE
 10527                           postdec2	equ	0xFDD
 10528                           fsr2h	equ	0xFDA
 10529                           fsr2l	equ	0xFD9
 10530                           status	equ	0xFD8
 10531                           
 10532 ;; *************** function _lcd_gotoxy *****************
 10533 ;; Defined at:
 10534 ;;		line 158 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;  x               1    wreg     unsigned char 
 10537 ;;  y               1    4[COMRAM] unsigned char 
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;  x               1    5[COMRAM] unsigned char 
 10540 ;;  address         1    6[COMRAM] unsigned char 
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  1    wreg      void 
 10543 ;; Registers used:
 10544 ;;		wreg, status,2, status,0, cstack
 10545 ;; Tracked objects:
 10546 ;;		On entry : 0/0
 10547 ;;		On exit  : 0/0
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10550 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10551 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10553 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10554 ;;Total ram usage:        3 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    2
 10557 ;; This function calls:
 10558 ;;		_lcd_send_byte
 10559 ;; This function is called by:
 10560 ;;		_setDiaMesAnio
 10561 ;;		_setHoraMinutoSegundo
 10562 ;;		_titila_texto_insert_password
 10563 ;;		_guarda_numero_ingresado
 10564 ;;		_mostrar_presionar_a
 10565 ;;		_resetear_pantalla_ingresar_contrasenia
 10566 ;;		_cambiar_opcion
 10567 ;;		_activar_alarma
 10568 ;;		_ir_a_pantalla_edicion
 10569 ;;		_ir_a_pantalla_ingresar_contrasenia
 10570 ;;		_ir_a_pantalla_editar_contrasenia
 10571 ;;		_covertir_valores_de_array_a_escala_decimal
 10572 ;;		_lcd_putc
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           	psect	text55
 10577  003880                     __ptext55:
 10578                           	opt stack 0
 10579  003880                     _lcd_gotoxy:
 10580                           	opt stack 23
 10581                           
 10582                           ;incstack = 0
 10583                           ;lcd_gotoxy@x stored from wreg
 10584  003880  6E06               	movwf	lcd_gotoxy@x,c
 10585                           
 10586                           ;unmc_lcd_216.c: 159: int8 address;
 10587                           ;unmc_lcd_216.c: 161: if(y != 1)
 10588  003882  0405               	decf	lcd_gotoxy@y,w,c
 10589  003884  B4D8               	btfsc	status,2,c
 10590  003886  D002               	goto	l450
 10591                           
 10592                           ;unmc_lcd_216.c: 162: address = 0x40;
 10593  003888  0E40               	movlw	64
 10594  00388A  D001               	goto	L4
 10595  00388C                     l450:
 10596                           
 10597                           ;unmc_lcd_216.c: 163: else
 10598                           ;unmc_lcd_216.c: 164: address=0;
 10599  00388C  0E00               	movlw	0
 10600  00388E                     L4:
 10601  00388E  6E07               	movwf	lcd_gotoxy@address,c
 10602                           
 10603                           ;unmc_lcd_216.c: 166: address += x-1;
 10604  003890  0406               	decf	lcd_gotoxy@x,w,c
 10605  003892  2607               	addwf	lcd_gotoxy@address,f,c
 10606                           
 10607                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
 10608  003894  5007               	movf	lcd_gotoxy@address,w,c
 10609  003896  0980               	iorlw	128
 10610  003898  6E03               	movwf	lcd_send_byte@n,c
 10611  00389A  0E00               	movlw	0
 10612  00389C  ECF0  F01B         	call	_lcd_send_byte
 10613  0038A0  0012               	return		;funcret
 10614  0038A2                     __end_of_lcd_gotoxy:
 10615                           	opt stack 0
 10616                           tblptru	equ	0xFF8
 10617                           tblptrh	equ	0xFF7
 10618                           tblptrl	equ	0xFF6
 10619                           tablat	equ	0xFF5
 10620                           prodh	equ	0xFF4
 10621                           prodl	equ	0xFF3
 10622                           intcon	equ	0xFF2
 10623                           indf0	equ	0xFEF
 10624                           postinc0	equ	0xFEE
 10625                           fsr0h	equ	0xFEA
 10626                           fsr0l	equ	0xFE9
 10627                           wreg	equ	0xFE8
 10628                           postinc1	equ	0xFE6
 10629                           postdec1	equ	0xFE5
 10630                           fsr1h	equ	0xFE2
 10631                           fsr1l	equ	0xFE1
 10632                           indf2	equ	0xFDF
 10633                           postinc2	equ	0xFDE
 10634                           postdec2	equ	0xFDD
 10635                           fsr2h	equ	0xFDA
 10636                           fsr2l	equ	0xFD9
 10637                           status	equ	0xFD8
 10638                           
 10639 ;; *************** function _lcd_send_byte *****************
 10640 ;; Defined at:
 10641 ;;		line 86 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;  address         1    wreg     unsigned char 
 10644 ;;  n               1    2[COMRAM] unsigned char 
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;  address         1    3[COMRAM] unsigned char 
 10647 ;; Return value:  Size  Location     Type
 10648 ;;                  1    wreg      void 
 10649 ;; Registers used:
 10650 ;;		wreg, status,2, status,0, cstack
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10656 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10659 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10660 ;;Total ram usage:        2 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; Hardware stack levels required when called:    1
 10663 ;; This function calls:
 10664 ;;		_Delay100TCYx
 10665 ;;		_lcd_send_nibble
 10666 ;; This function is called by:
 10667 ;;		_lcd_init
 10668 ;;		_lcd_gotoxy
 10669 ;;		_lcd_putc
 10670 ;;		_lcd_comand
 10671 ;;		_lcd_setcursor_vb
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           	psect	text56
 10676  0037E0                     __ptext56:
 10677                           	opt stack 0
 10678  0037E0                     _lcd_send_byte:
 10679                           	opt stack 24
 10680                           
 10681                           ;incstack = 0
 10682                           ;lcd_send_byte@address stored from wreg
 10683  0037E0  6E04               	movwf	lcd_send_byte@address,c
 10684                           
 10685                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 10686  0037E2  968A               	bcf	3978,3,c	;volatile
 10687                           
 10688                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 10689  0037E4  0E02               	movlw	2
 10690  0037E6  EC8D  F01C         	call	_Delay100TCYx
 10691                           
 10692                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 10693  0037EA  9893               	bcf	3987,4,c	;volatile
 10694                           
 10695                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 10696  0037EC  9A93               	bcf	3987,5,c	;volatile
 10697                           
 10698                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 10699  0037EE  9C93               	bcf	3987,6,c	;volatile
 10700                           
 10701                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 10702  0037F0  9E93               	bcf	3987,7,c	;volatile
 10703                           
 10704                           ;unmc_lcd_216.c: 101: if(address)
 10705  0037F2  5004               	movf	lcd_send_byte@address,w,c
 10706  0037F4  B4D8               	btfsc	status,2,c
 10707  0037F6  D002               	goto	l438
 10708                           
 10709                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 10710  0037F8  868A               	bsf	3978,3,c	;volatile
 10711  0037FA  D001               	goto	l439
 10712  0037FC                     l438:
 10713                           
 10714                           ;unmc_lcd_216.c: 103: else
 10715                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 10716  0037FC  968A               	bcf	3978,3,c	;volatile
 10717  0037FE                     l439:
 10718                           
 10719                           ;unmc_lcd_216.c: 106: __nop();
 10720  0037FE  F000               	nop	
 10721                           
 10722                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10723  003800  3803               	swapf	lcd_send_byte@n,w,c
 10724  003802  0B0F               	andlw	15
 10725  003804  EC70  F019         	call	_lcd_send_nibble
 10726                           
 10727                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10728  003808  5003               	movf	lcd_send_byte@n,w,c
 10729  00380A  0B0F               	andlw	15
 10730  00380C  EC70  F019         	call	_lcd_send_nibble
 10731  003810  0012               	return		;funcret
 10732  003812                     __end_of_lcd_send_byte:
 10733                           	opt stack 0
 10734                           tblptru	equ	0xFF8
 10735                           tblptrh	equ	0xFF7
 10736                           tblptrl	equ	0xFF6
 10737                           tablat	equ	0xFF5
 10738                           prodh	equ	0xFF4
 10739                           prodl	equ	0xFF3
 10740                           intcon	equ	0xFF2
 10741                           indf0	equ	0xFEF
 10742                           postinc0	equ	0xFEE
 10743                           fsr0h	equ	0xFEA
 10744                           fsr0l	equ	0xFE9
 10745                           wreg	equ	0xFE8
 10746                           postinc1	equ	0xFE6
 10747                           postdec1	equ	0xFE5
 10748                           fsr1h	equ	0xFE2
 10749                           fsr1l	equ	0xFE1
 10750                           indf2	equ	0xFDF
 10751                           postinc2	equ	0xFDE
 10752                           postdec2	equ	0xFDD
 10753                           fsr2h	equ	0xFDA
 10754                           fsr2l	equ	0xFD9
 10755                           status	equ	0xFD8
 10756                           
 10757 ;; *************** function _lcd_send_nibble *****************
 10758 ;; Defined at:
 10759 ;;		line 25 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  nibble          1    wreg     unsigned char 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  nibble          1    1[COMRAM] unsigned char 
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  1    wreg      void 
 10766 ;; Registers used:
 10767 ;;		wreg, status,2, status,0
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10777 ;;Total ram usage:        2 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; This function calls:
 10780 ;;		Nothing
 10781 ;; This function is called by:
 10782 ;;		_lcd_send_byte
 10783 ;;		_lcd_init
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           	psect	text57
 10788  0032E0                     __ptext57:
 10789                           	opt stack 0
 10790  0032E0                     _lcd_send_nibble:
 10791                           	opt stack 24
 10792                           
 10793                           ;incstack = 0
 10794                           ;lcd_send_nibble@nibble stored from wreg
 10795  0032E0  6E02               	movwf	lcd_send_nibble@nibble,c
 10796                           
 10797                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10798  0032E2  A002               	btfss	lcd_send_nibble@nibble,0,c
 10799  0032E4  D003               	goto	u2900
 10800  0032E6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10801  0032E8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10802  0032EA  D001               	goto	u2918
 10803  0032EC                     u2900:
 10804  0032EC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10805  0032EE                     u2918:
 10806  0032EE  3A01               	swapf	??_lcd_send_nibble,f,c
 10807  0032F0  508A               	movf	3978,w,c	;volatile
 10808  0032F2  1801               	xorwf	??_lcd_send_nibble,w,c
 10809  0032F4  0BEF               	andlw	-17
 10810  0032F6  1801               	xorwf	??_lcd_send_nibble,w,c
 10811  0032F8  6E8A               	movwf	3978,c	;volatile
 10812                           
 10813                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10814  0032FA  A202               	btfss	lcd_send_nibble@nibble,1,c
 10815  0032FC  D003               	goto	u2920
 10816  0032FE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10817  003300  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10818  003302  D001               	goto	u2938
 10819  003304                     u2920:
 10820  003304  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10821  003306                     u2938:
 10822  003306  3A01               	swapf	??_lcd_send_nibble,f,c
 10823  003308  4601               	rlncf	??_lcd_send_nibble,f,c
 10824  00330A  508A               	movf	3978,w,c	;volatile
 10825  00330C  1801               	xorwf	??_lcd_send_nibble,w,c
 10826  00330E  0BDF               	andlw	-33
 10827  003310  1801               	xorwf	??_lcd_send_nibble,w,c
 10828  003312  6E8A               	movwf	3978,c	;volatile
 10829                           
 10830                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10831  003314  A402               	btfss	lcd_send_nibble@nibble,2,c
 10832  003316  D003               	goto	u2940
 10833  003318  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10834  00331A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10835  00331C  D001               	goto	u2958
 10836  00331E                     u2940:
 10837  00331E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10838  003320                     u2958:
 10839  003320  3A01               	swapf	??_lcd_send_nibble,f,c
 10840  003322  4601               	rlncf	??_lcd_send_nibble,f,c
 10841  003324  4601               	rlncf	??_lcd_send_nibble,f,c
 10842  003326  508A               	movf	3978,w,c	;volatile
 10843  003328  1801               	xorwf	??_lcd_send_nibble,w,c
 10844  00332A  0BBF               	andlw	-65
 10845  00332C  1801               	xorwf	??_lcd_send_nibble,w,c
 10846  00332E  6E8A               	movwf	3978,c	;volatile
 10847                           
 10848                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10849  003330  A602               	btfss	lcd_send_nibble@nibble,3,c
 10850  003332  D003               	goto	u2960
 10851  003334  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10852  003336  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10853  003338  D001               	goto	u2978
 10854  00333A                     u2960:
 10855  00333A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10856  00333C                     u2978:
 10857  00333C  3201               	rrcf	??_lcd_send_nibble,f,c
 10858  00333E  3201               	rrcf	??_lcd_send_nibble,f,c
 10859  003340  508A               	movf	3978,w,c	;volatile
 10860  003342  1801               	xorwf	??_lcd_send_nibble,w,c
 10861  003344  0B7F               	andlw	-129
 10862  003346  1801               	xorwf	??_lcd_send_nibble,w,c
 10863  003348  6E8A               	movwf	3978,c	;volatile
 10864                           
 10865                           ;unmc_lcd_216.c: 32: __nop();
 10866  00334A  F000               	nop	
 10867                           
 10868                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10869  00334C  848A               	bsf	3978,2,c	;volatile
 10870                           
 10871                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10872  00334E  F000               	nop	
 10873  003350  F000               	nop	
 10874                           
 10875                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10876  003352  948A               	bcf	3978,2,c	;volatile
 10877  003354  0012               	return		;funcret
 10878  003356                     __end_of_lcd_send_nibble:
 10879                           	opt stack 0
 10880                           tblptru	equ	0xFF8
 10881                           tblptrh	equ	0xFF7
 10882                           tblptrl	equ	0xFF6
 10883                           tablat	equ	0xFF5
 10884                           prodh	equ	0xFF4
 10885                           prodl	equ	0xFF3
 10886                           intcon	equ	0xFF2
 10887                           indf0	equ	0xFEF
 10888                           postinc0	equ	0xFEE
 10889                           fsr0h	equ	0xFEA
 10890                           fsr0l	equ	0xFE9
 10891                           wreg	equ	0xFE8
 10892                           postinc1	equ	0xFE6
 10893                           postdec1	equ	0xFE5
 10894                           fsr1h	equ	0xFE2
 10895                           fsr1l	equ	0xFE1
 10896                           indf2	equ	0xFDF
 10897                           postinc2	equ	0xFDE
 10898                           postdec2	equ	0xFDD
 10899                           fsr2h	equ	0xFDA
 10900                           fsr2l	equ	0xFD9
 10901                           status	equ	0xFD8
 10902                           
 10903 ;; *************** function _Delay100TCYx *****************
 10904 ;; Defined at:
 10905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d100tcyx.c"
 10906 ;; Parameters:    Size  Location     Type
 10907 ;;  unit            1    wreg     unsigned char 
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;  unit            1    0[COMRAM] unsigned char 
 10910 ;; Return value:  Size  Location     Type
 10911 ;;                  1    wreg      void 
 10912 ;; Registers used:
 10913 ;;		wreg
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10923 ;;Total ram usage:        1 bytes
 10924 ;; Hardware stack levels used:    1
 10925 ;; This function calls:
 10926 ;;		Nothing
 10927 ;; This function is called by:
 10928 ;;		_lcd_send_byte
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           	psect	text58
 10933  00391A                     __ptext58:
 10934                           	opt stack 0
 10935  00391A                     _Delay100TCYx:
 10936                           	opt stack 24
 10937                           
 10938                           ;incstack = 0
 10939                           ;Delay100TCYx@unit stored from wreg
 10940  00391A  6E01               	movwf	Delay100TCYx@unit,c
 10941  00391C                     l816:
 10942  00391C  0E21               	movlw	33
 10943  00391E                     u6027:
 10944  00391E  2EE8               	decfsz	wreg,f,c
 10945  003920  D7FE               	bra	u6027
 10946  003922  F000               	nop	
 10947  003924  2E01               	decfsz	Delay100TCYx@unit,f,c
 10948  003926  D7FA               	goto	l816
 10949  003928  0012               	return	
 10950  00392A                     __end_of_Delay100TCYx:
 10951                           	opt stack 0
 10952                           tblptru	equ	0xFF8
 10953                           tblptrh	equ	0xFF7
 10954                           tblptrl	equ	0xFF6
 10955                           tablat	equ	0xFF5
 10956                           prodh	equ	0xFF4
 10957                           prodl	equ	0xFF3
 10958                           intcon	equ	0xFF2
 10959                           indf0	equ	0xFEF
 10960                           postinc0	equ	0xFEE
 10961                           fsr0h	equ	0xFEA
 10962                           fsr0l	equ	0xFE9
 10963                           wreg	equ	0xFE8
 10964                           postinc1	equ	0xFE6
 10965                           postdec1	equ	0xFE5
 10966                           fsr1h	equ	0xFE2
 10967                           fsr1l	equ	0xFE1
 10968                           indf2	equ	0xFDF
 10969                           postinc2	equ	0xFDE
 10970                           postdec2	equ	0xFDD
 10971                           fsr2h	equ	0xFDA
 10972                           fsr2l	equ	0xFD9
 10973                           status	equ	0xFD8
 10974                           
 10975 ;; *************** function _Read_RTC *****************
 10976 ;; Defined at:
 10977 ;;		line 111 in file "../../headers\unmc_rtcc_01.h"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;		None
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;		None
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      void 
 10984 ;; Registers used:
 10985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10995 ;;Total ram usage:        0 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    1
 10998 ;; This function calls:
 10999 ;;		_RtccReadDate
 11000 ;;		_RtccReadTime
 11001 ;; This function is called by:
 11002 ;;		_ir_a_pantalla_edicion
 11003 ;;		_main
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           	psect	text59
 11008  001F8E                     __ptext59:
 11009                           	opt stack 0
 11010  001F8E                     _Read_RTC:
 11011                           	opt stack 25
 11012                           
 11013                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
 11014                           
 11015                           ;incstack = 0
 11016  001F8E  0EB9               	movlw	low _RtccTime
 11017  001F90  6E01               	movwf	RtccReadTime@pTm,c
 11018  001F92  0E00               	movlw	high _RtccTime
 11019  001F94  6E02               	movwf	RtccReadTime@pTm+1,c
 11020  001F96  ECE2  F019         	call	_RtccReadTime	;wreg free
 11021                           
 11022                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
 11023  001F9A  0100               	movlb	0	; () banked
 11024  001F9C  51BA               	movf	(_RtccTime+1)& (0+255),w,b
 11025  001F9E  0B0F               	andlw	15
 11026  001FA0  0100               	movlb	0	; () banked
 11027  001FA2  6FFC               	movwf	_segundo_u& (0+255),b
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
 11031  001FA4  0100               	movlb	0	; () banked
 11032  001FA6  39BA               	swapf	(_RtccTime+1)& (0+255),w,b
 11033  001FA8  0B0F               	andlw	15
 11034  001FAA  0B0F               	andlw	15
 11035  001FAC  0100               	movlb	0	; () banked
 11036  001FAE  6FFB               	movwf	_segundo_d& (0+255),b
 11037                           
 11038                           ; BSR set to: 0
 11039                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
 11040  001FB0  0100               	movlb	0	; () banked
 11041  001FB2  51BB               	movf	(_RtccTime+2)& (0+255),w,b
 11042  001FB4  0B0F               	andlw	15
 11043  001FB6  0100               	movlb	0	; () banked
 11044  001FB8  6FFA               	movwf	_minuto_u& (0+255),b
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
 11048  001FBA  0100               	movlb	0	; () banked
 11049  001FBC  39BB               	swapf	(_RtccTime+2)& (0+255),w,b
 11050  001FBE  0B0F               	andlw	15
 11051  001FC0  0B0F               	andlw	15
 11052  001FC2  0100               	movlb	0	; () banked
 11053  001FC4  6FF9               	movwf	_minuto_d& (0+255),b
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
 11057  001FC6  0100               	movlb	0	; () banked
 11058  001FC8  51BC               	movf	(_RtccTime+3)& (0+255),w,b
 11059  001FCA  0B0F               	andlw	15
 11060  001FCC  0100               	movlb	0	; () banked
 11061  001FCE  6FF8               	movwf	_hora_u& (0+255),b
 11062                           
 11063                           ; BSR set to: 0
 11064                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
 11065  001FD0  0100               	movlb	0	; () banked
 11066  001FD2  39BC               	swapf	(_RtccTime+3)& (0+255),w,b
 11067  001FD4  0B0F               	andlw	15
 11068  001FD6  0B0F               	andlw	15
 11069  001FD8  0100               	movlb	0	; () banked
 11070  001FDA  6FF7               	movwf	_hora_d& (0+255),b
 11071                           
 11072                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
 11073  001FDC  0EB5               	movlw	low _RtccDate
 11074  001FDE  6E01               	movwf	RtccReadDate@pDt,c
 11075  001FE0  0E00               	movlw	high _RtccDate
 11076  001FE2  6E02               	movwf	RtccReadDate@pDt+1,c
 11077  001FE4  EC23  F017         	call	_RtccReadDate	;wreg free
 11078                           
 11079                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
 11080  001FE8  0100               	movlb	0	; () banked
 11081  001FEA  51B6               	movf	(_RtccDate+1)& (0+255),w,b
 11082  001FEC  0B0F               	andlw	15
 11083  001FEE  0100               	movlb	0	; () banked
 11084  001FF0  6FF6               	movwf	_fecha_u& (0+255),b
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
 11088  001FF2  0100               	movlb	0	; () banked
 11089  001FF4  39B6               	swapf	(_RtccDate+1)& (0+255),w,b
 11090  001FF6  0B0F               	andlw	15
 11091  001FF8  0B0F               	andlw	15
 11092  001FFA  0100               	movlb	0	; () banked
 11093  001FFC  6FF5               	movwf	_fecha_d& (0+255),b
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
 11097  001FFE  0100               	movlb	0	; () banked
 11098  002000  51B7               	movf	(_RtccDate+2)& (0+255),w,b
 11099  002002  0B0F               	andlw	15
 11100  002004  0100               	movlb	0	; () banked
 11101  002006  6FF4               	movwf	_mes_u& (0+255),b
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
 11105  002008  0100               	movlb	0	; () banked
 11106  00200A  39B7               	swapf	(_RtccDate+2)& (0+255),w,b
 11107  00200C  0B0F               	andlw	15
 11108  00200E  0B0F               	andlw	15
 11109  002010  0100               	movlb	0	; () banked
 11110  002012  6FF3               	movwf	_mes_d& (0+255),b
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
 11114  002014  C0B5  F0F2         	movff	_RtccDate,_dia_semana
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
 11118  002018  0100               	movlb	0	; () banked
 11119  00201A  51B8               	movf	(_RtccDate+3)& (0+255),w,b
 11120  00201C  0B0F               	andlw	15
 11121  00201E  0100               	movlb	0	; () banked
 11122  002020  6FF1               	movwf	_anio_u& (0+255),b
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
 11126  002022  0100               	movlb	0	; () banked
 11127  002024  39B8               	swapf	(_RtccDate+3)& (0+255),w,b
 11128  002026  0B0F               	andlw	15
 11129  002028  0B0F               	andlw	15
 11130  00202A  0100               	movlb	0	; () banked
 11131  00202C  6FF0               	movwf	_anio_d& (0+255),b
 11132                           
 11133                           ; BSR set to: 0
 11134                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
 11135  00202E  0100               	movlb	0	; () banked
 11136  002030  51FB               	movf	_segundo_d& (0+255),w,b
 11137  002032  0D0A               	mullw	10
 11138  002034  0100               	movlb	0	; () banked
 11139  002036  51FC               	movf	_segundo_u& (0+255),w,b
 11140  002038  24F3               	addwf	prodl,w,c
 11141  00203A  0100               	movlb	0	; () banked
 11142  00203C  6F92               	movwf	_segundo& (0+255),b
 11143  00203E  0100               	movlb	0	; () banked
 11144  002040  0E00               	movlw	0
 11145  002042  20F4               	addwfc	prodh,w,c
 11146  002044  0100               	movlb	0	; () banked
 11147  002046  6F93               	movwf	(_segundo+1)& (0+255),b
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
 11151  002048  0100               	movlb	0	; () banked
 11152  00204A  51F9               	movf	_minuto_d& (0+255),w,b
 11153  00204C  0D0A               	mullw	10
 11154  00204E  0100               	movlb	0	; () banked
 11155  002050  51FA               	movf	_minuto_u& (0+255),w,b
 11156  002052  24F3               	addwf	prodl,w,c
 11157  002054  0100               	movlb	0	; () banked
 11158  002056  6FD1               	movwf	_minuto& (0+255),b
 11159  002058  0100               	movlb	0	; () banked
 11160  00205A  0E00               	movlw	0
 11161  00205C  20F4               	addwfc	prodh,w,c
 11162  00205E  0100               	movlb	0	; () banked
 11163  002060  6FD2               	movwf	(_minuto+1)& (0+255),b
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
 11167  002062  0100               	movlb	0	; () banked
 11168  002064  51F7               	movf	_hora_d& (0+255),w,b
 11169  002066  0D0A               	mullw	10
 11170  002068  0100               	movlb	0	; () banked
 11171  00206A  51F8               	movf	_hora_u& (0+255),w,b
 11172  00206C  24F3               	addwf	prodl,w,c
 11173  00206E  0100               	movlb	0	; () banked
 11174  002070  6FD3               	movwf	_hora& (0+255),b
 11175  002072  0100               	movlb	0	; () banked
 11176  002074  0E00               	movlw	0
 11177  002076  20F4               	addwfc	prodh,w,c
 11178  002078  0100               	movlb	0	; () banked
 11179  00207A  6FD4               	movwf	(_hora+1)& (0+255),b
 11180                           
 11181                           ; BSR set to: 0
 11182                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
 11183  00207C  0100               	movlb	0	; () banked
 11184  00207E  51F5               	movf	_fecha_d& (0+255),w,b
 11185  002080  0D0A               	mullw	10
 11186  002082  0100               	movlb	0	; () banked
 11187  002084  51F6               	movf	_fecha_u& (0+255),w,b
 11188  002086  24F3               	addwf	prodl,w,c
 11189  002088  0100               	movlb	0	; () banked
 11190  00208A  6FD5               	movwf	_dia& (0+255),b
 11191  00208C  0100               	movlb	0	; () banked
 11192  00208E  0E00               	movlw	0
 11193  002090  20F4               	addwfc	prodh,w,c
 11194  002092  0100               	movlb	0	; () banked
 11195  002094  6FD6               	movwf	(_dia+1)& (0+255),b
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
 11199  002096  C0F2  F0D7         	movff	_dia_semana,_diasem
 11200  00209A  0100               	movlb	0	; () banked
 11201  00209C  6BD8               	clrf	(_diasem+1)& (0+255),b
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
 11205  00209E  0100               	movlb	0	; () banked
 11206  0020A0  51F3               	movf	_mes_d& (0+255),w,b
 11207  0020A2  0D0A               	mullw	10
 11208  0020A4  0100               	movlb	0	; () banked
 11209  0020A6  51F4               	movf	_mes_u& (0+255),w,b
 11210  0020A8  24F3               	addwf	prodl,w,c
 11211  0020AA  0100               	movlb	0	; () banked
 11212  0020AC  6FD9               	movwf	_mes& (0+255),b
 11213  0020AE  0100               	movlb	0	; () banked
 11214  0020B0  0E00               	movlw	0
 11215  0020B2  20F4               	addwfc	prodh,w,c
 11216  0020B4  0100               	movlb	0	; () banked
 11217  0020B6  6FDA               	movwf	(_mes+1)& (0+255),b
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
 11221  0020B8  0100               	movlb	0	; () banked
 11222  0020BA  51F0               	movf	_anio_d& (0+255),w,b
 11223  0020BC  0D0A               	mullw	10
 11224  0020BE  0100               	movlb	0	; () banked
 11225  0020C0  51F1               	movf	_anio_u& (0+255),w,b
 11226  0020C2  24F3               	addwf	prodl,w,c
 11227  0020C4  0100               	movlb	0	; () banked
 11228  0020C6  6FDB               	movwf	_anio& (0+255),b
 11229  0020C8  0100               	movlb	0	; () banked
 11230  0020CA  0E00               	movlw	0
 11231  0020CC  20F4               	addwfc	prodh,w,c
 11232  0020CE  0100               	movlb	0	; () banked
 11233  0020D0  6FDC               	movwf	(_anio+1)& (0+255),b
 11234                           
 11235                           ; BSR set to: 0
 11236  0020D2  0012               	return		;funcret
 11237  0020D4                     __end_of_Read_RTC:
 11238                           	opt stack 0
 11239                           tblptru	equ	0xFF8
 11240                           tblptrh	equ	0xFF7
 11241                           tblptrl	equ	0xFF6
 11242                           tablat	equ	0xFF5
 11243                           prodh	equ	0xFF4
 11244                           prodl	equ	0xFF3
 11245                           intcon	equ	0xFF2
 11246                           indf0	equ	0xFEF
 11247                           postinc0	equ	0xFEE
 11248                           fsr0h	equ	0xFEA
 11249                           fsr0l	equ	0xFE9
 11250                           wreg	equ	0xFE8
 11251                           postinc1	equ	0xFE6
 11252                           postdec1	equ	0xFE5
 11253                           fsr1h	equ	0xFE2
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           fsr2h	equ	0xFDA
 11259                           fsr2l	equ	0xFD9
 11260                           status	equ	0xFD8
 11261                           
 11262 ;; *************** function _RtccReadTime *****************
 11263 ;; Defined at:
 11264 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadTime.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;  pTm             2    0[COMRAM] PTR struct .
 11267 ;;		 -> RtccTime(4), 
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;  rTD0            8   10[COMRAM] struct .
 11270 ;;  rTD1            8    2[COMRAM] struct .
 11271 ;; Return value:  Size  Location     Type
 11272 ;;                  1    wreg      void 
 11273 ;; Registers used:
 11274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11275 ;; Tracked objects:
 11276 ;;		On entry : 0/0
 11277 ;;		On exit  : 0/0
 11278 ;;		Unchanged: 0/0
 11279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11281 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11283 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11284 ;;Total ram usage:       18 bytes
 11285 ;; Hardware stack levels used:    1
 11286 ;; This function calls:
 11287 ;;		Nothing
 11288 ;; This function is called by:
 11289 ;;		_Read_RTC
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           	psect	text60
 11294  0033C4                     __ptext60:
 11295                           	opt stack 0
 11296  0033C4                     _RtccReadTime:
 11297                           	opt stack 25
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;incstack = 0
 11301  0033C4  0EFC               	movlw	252
 11302  0033C6  010F               	movlb	15	; () banked
 11303  0033C8  173F               	andwf	63,f,b	;volatile
 11304                           
 11305                           ; BSR set to: 15
 11306  0033CA  010F               	movlb	15	; () banked
 11307  0033CC  813F               	bsf	63,0,b	;volatile
 11308                           
 11309                           ; BSR set to: 15
 11310  0033CE  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
 11311                           
 11312                           ; BSR set to: 15
 11313  0033D2  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
 11314                           
 11315                           ; BSR set to: 15
 11316  0033D6  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
 11317                           
 11318                           ; BSR set to: 15
 11319  0033DA  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
 11320                           
 11321                           ; BSR set to: 15
 11322  0033DE  0EFC               	movlw	252
 11323  0033E0  010F               	movlb	15	; () banked
 11324  0033E2  173F               	andwf	63,f,b	;volatile
 11325  0033E4  010F               	movlb	15	; () banked
 11326  0033E6  813F               	bsf	63,0,b	;volatile
 11327                           
 11328                           ; BSR set to: 15
 11329  0033E8  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
 11330                           
 11331                           ; BSR set to: 15
 11332  0033EC  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
 11333                           
 11334                           ; BSR set to: 15
 11335  0033F0  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
 11336                           
 11337                           ; BSR set to: 15
 11338  0033F4  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
 11339                           
 11340                           ; BSR set to: 15
 11341  0033F8  5009               	movf	RtccReadTime@rTD1+6,w,c
 11342  0033FA  1811               	xorwf	RtccReadTime@rTD0+6,w,c
 11343  0033FC  A4D8               	btfss	status,2,c
 11344  0033FE  D7E2               	goto	_RtccReadTime
 11345                           
 11346                           ; BSR set to: 15
 11347                           
 11348                           ; BSR set to: 15
 11349  003400  EE20 F003          	lfsr	2,3
 11350  003404  5001               	movf	RtccReadTime@pTm,w,c
 11351  003406  26D9               	addwf	fsr2l,f,c
 11352  003408  5002               	movf	RtccReadTime@pTm+1,w,c
 11353  00340A  22DA               	addwfc	fsr2h,f,c
 11354  00340C  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
 11355  003410  EE20 F002          	lfsr	2,2
 11356  003414  5001               	movf	RtccReadTime@pTm,w,c
 11357  003416  26D9               	addwf	fsr2l,f,c
 11358  003418  5002               	movf	RtccReadTime@pTm+1,w,c
 11359  00341A  22DA               	addwfc	fsr2h,f,c
 11360  00341C  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
 11361  003420  EE20 F001          	lfsr	2,1
 11362  003424  5001               	movf	RtccReadTime@pTm,w,c
 11363  003426  26D9               	addwf	fsr2l,f,c
 11364  003428  5002               	movf	RtccReadTime@pTm+1,w,c
 11365  00342A  22DA               	addwfc	fsr2h,f,c
 11366  00342C  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
 11367                           
 11368                           ; BSR set to: 15
 11369  003430  0012               	return		;funcret
 11370  003432                     __end_of_RtccReadTime:
 11371                           	opt stack 0
 11372                           tblptru	equ	0xFF8
 11373                           tblptrh	equ	0xFF7
 11374                           tblptrl	equ	0xFF6
 11375                           tablat	equ	0xFF5
 11376                           prodh	equ	0xFF4
 11377                           prodl	equ	0xFF3
 11378                           intcon	equ	0xFF2
 11379                           indf0	equ	0xFEF
 11380                           postinc0	equ	0xFEE
 11381                           fsr0h	equ	0xFEA
 11382                           fsr0l	equ	0xFE9
 11383                           wreg	equ	0xFE8
 11384                           postinc1	equ	0xFE6
 11385                           postdec1	equ	0xFE5
 11386                           fsr1h	equ	0xFE2
 11387                           fsr1l	equ	0xFE1
 11388                           indf2	equ	0xFDF
 11389                           postinc2	equ	0xFDE
 11390                           postdec2	equ	0xFDD
 11391                           fsr2h	equ	0xFDA
 11392                           fsr2l	equ	0xFD9
 11393                           status	equ	0xFD8
 11394                           
 11395 ;; *************** function _RtccReadDate *****************
 11396 ;; Defined at:
 11397 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadDate.c"
 11398 ;; Parameters:    Size  Location     Type
 11399 ;;  pDt             2    0[COMRAM] PTR struct .
 11400 ;;		 -> RtccDate(4), 
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;  rTD0            8   10[COMRAM] struct .
 11403 ;;  rTD1            8    2[COMRAM] struct .
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  1    wreg      void 
 11406 ;; Registers used:
 11407 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11414 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11416 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11417 ;;Total ram usage:       18 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; This function calls:
 11420 ;;		Nothing
 11421 ;; This function is called by:
 11422 ;;		_Read_RTC
 11423 ;; This function uses a non-reentrant model
 11424 ;;
 11425                           
 11426                           	psect	text61
 11427  002E46                     __ptext61:
 11428                           	opt stack 0
 11429  002E46                     _RtccReadDate:
 11430                           	opt stack 25
 11431                           
 11432                           ; BSR set to: 15
 11433                           ;incstack = 0
 11434  002E46  0EFC               	movlw	252
 11435  002E48  010F               	movlb	15	; () banked
 11436  002E4A  173F               	andwf	63,f,b	;volatile
 11437  002E4C  0E03               	movlw	3
 11438  002E4E  010F               	movlb	15	; () banked
 11439  002E50  133F               	iorwf	63,f,b	;volatile
 11440                           
 11441                           ; BSR set to: 15
 11442  002E52  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 11443                           
 11444                           ; BSR set to: 15
 11445  002E56  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 11446                           
 11447                           ; BSR set to: 15
 11448  002E5A  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 11449                           
 11450                           ; BSR set to: 15
 11451  002E5E  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 11452                           
 11453                           ; BSR set to: 15
 11454  002E62  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 11455                           
 11456                           ; BSR set to: 15
 11457  002E66  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 11458  002E6A  0EFC               	movlw	252
 11459  002E6C  010F               	movlb	15	; () banked
 11460  002E6E  173F               	andwf	63,f,b	;volatile
 11461  002E70  0E03               	movlw	3
 11462  002E72  010F               	movlb	15	; () banked
 11463  002E74  133F               	iorwf	63,f,b	;volatile
 11464                           
 11465                           ; BSR set to: 15
 11466  002E76  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 11467                           
 11468                           ; BSR set to: 15
 11469  002E7A  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 11470                           
 11471                           ; BSR set to: 15
 11472  002E7E  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 11473                           
 11474                           ; BSR set to: 15
 11475  002E82  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 11476                           
 11477                           ; BSR set to: 15
 11478  002E86  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 11479                           
 11480                           ; BSR set to: 15
 11481  002E8A  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 11482  002E8E  5005               	movf	RtccReadDate@rTD1+2,w,c
 11483  002E90  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 11484  002E92  A4D8               	btfss	status,2,c
 11485  002E94  D7D8               	goto	_RtccReadDate
 11486                           
 11487                           ; BSR set to: 15
 11488                           
 11489                           ; BSR set to: 15
 11490  002E96  EE20 F001          	lfsr	2,1
 11491  002E9A  5001               	movf	RtccReadDate@pDt,w,c
 11492  002E9C  26D9               	addwf	fsr2l,f,c
 11493  002E9E  5002               	movf	RtccReadDate@pDt+1,w,c
 11494  002EA0  22DA               	addwfc	fsr2h,f,c
 11495  002EA2  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 11496  002EA6  EE20 F002          	lfsr	2,2
 11497  002EAA  5001               	movf	RtccReadDate@pDt,w,c
 11498  002EAC  26D9               	addwf	fsr2l,f,c
 11499  002EAE  5002               	movf	RtccReadDate@pDt+1,w,c
 11500  002EB0  22DA               	addwfc	fsr2h,f,c
 11501  002EB2  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 11502                           
 11503                           ; BSR set to: 15
 11504  002EB6  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 11505  002EBA  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 11506  002EBE  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 11507                           
 11508                           ; BSR set to: 15
 11509  002EC2  EE20 F003          	lfsr	2,3
 11510  002EC6  5001               	movf	RtccReadDate@pDt,w,c
 11511  002EC8  26D9               	addwf	fsr2l,f,c
 11512  002ECA  5002               	movf	RtccReadDate@pDt+1,w,c
 11513  002ECC  22DA               	addwfc	fsr2h,f,c
 11514  002ECE  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 11515                           
 11516                           ; BSR set to: 15
 11517  002ED2  0012               	return		;funcret
 11518  002ED4                     __end_of_RtccReadDate:
 11519                           	opt stack 0
 11520                           tblptru	equ	0xFF8
 11521                           tblptrh	equ	0xFF7
 11522                           tblptrl	equ	0xFF6
 11523                           tablat	equ	0xFF5
 11524                           prodh	equ	0xFF4
 11525                           prodl	equ	0xFF3
 11526                           intcon	equ	0xFF2
 11527                           indf0	equ	0xFEF
 11528                           postinc0	equ	0xFEE
 11529                           fsr0h	equ	0xFEA
 11530                           fsr0l	equ	0xFE9
 11531                           wreg	equ	0xFE8
 11532                           postinc1	equ	0xFE6
 11533                           postdec1	equ	0xFE5
 11534                           fsr1h	equ	0xFE2
 11535                           fsr1l	equ	0xFE1
 11536                           indf2	equ	0xFDF
 11537                           postinc2	equ	0xFDE
 11538                           postdec2	equ	0xFDD
 11539                           fsr2h	equ	0xFDA
 11540                           fsr2l	equ	0xFD9
 11541                           status	equ	0xFD8
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           intcon	equ	0xFF2
 11549                           indf0	equ	0xFEF
 11550                           postinc0	equ	0xFEE
 11551                           fsr0h	equ	0xFEA
 11552                           fsr0l	equ	0xFE9
 11553                           wreg	equ	0xFE8
 11554                           postinc1	equ	0xFE6
 11555                           postdec1	equ	0xFE5
 11556                           fsr1h	equ	0xFE2
 11557                           fsr1l	equ	0xFE1
 11558                           indf2	equ	0xFDF
 11559                           postinc2	equ	0xFDE
 11560                           postdec2	equ	0xFDD
 11561                           fsr2h	equ	0xFDA
 11562                           fsr2l	equ	0xFD9
 11563                           status	equ	0xFD8
 11564                           
 11565                           	psect	rparam
 11566  0000                     tblptru	equ	0xFF8
 11567                           tblptrh	equ	0xFF7
 11568                           tblptrl	equ	0xFF6
 11569                           tablat	equ	0xFF5
 11570                           prodh	equ	0xFF4
 11571                           prodl	equ	0xFF3
 11572                           intcon	equ	0xFF2
 11573                           indf0	equ	0xFEF
 11574                           postinc0	equ	0xFEE
 11575                           fsr0h	equ	0xFEA
 11576                           fsr0l	equ	0xFE9
 11577                           wreg	equ	0xFE8
 11578                           postinc1	equ	0xFE6
 11579                           postdec1	equ	0xFE5
 11580                           fsr1h	equ	0xFE2
 11581                           fsr1l	equ	0xFE1
 11582                           indf2	equ	0xFDF
 11583                           postinc2	equ	0xFDE
 11584                           postdec2	equ	0xFDD
 11585                           fsr2h	equ	0xFDA
 11586                           fsr2l	equ	0xFD9
 11587                           status	equ	0xFD8


Data Sizes:
    Strings     178
    Constant    71
    Data        32
    BSS         93
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     19     158
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_25(CODE[5]), STR_16(CODE[5]), STR_13(CODE[5]), STR_8(CODE[15]), 
		 -> STR_7(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_24(CODE[17]), STR_23(CODE[21]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[9]), STR_19(CODE[8]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_15(CODE[15]), STR_14(CODE[8]), STR_12(CODE[9]), STR_11(CODE[9]), 
		 -> STR_10(CODE[9]), STR_9(CODE[7]), buffer2(BANK0[20]), 

    guarda_numero_ingresado@num	PTR int  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    array_seleccionar	PTR unsigned char [6] size(2) Largest target is 5
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _lcd_init->_lcd_send_byte
    _titila_texto_insert_password->_lcd_putrs
    _resetear_pantalla_ingresar_contrasenia->_lcd_putrs
    _mostrar_presionar_a->_lcd_putrs
    _seleccionar_opcion->_editar_fecha_reloj_digital
    _seleccionar_opcion->_editar_hora_reloj_digital
    _ir_a_pantalla_editar_contrasenia->_ingreso_numero
    _editar_hora_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _setHoraMinutoSegundo->_sprintf
    _editar_fecha_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _setDiaMesAnio->_sprintf
    _Write_RTC->_RtccWriteDate
    _ingreso_numero->_guarda_numero_ingresado
    _guarda_numero_ingresado->_sprintf
    _covertir_valores_de_array_a_escala_decimal->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___awtoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___wmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _activar_alarma->_lcd_putrs
    _lcd_comand->_lcd_send_byte
    _cambiar_opcion->_sprintf
    _sprintf->___wmul
    ___wmul->___fttol
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    _seleccionar_opcion->_editar_fecha_reloj_digital
    _seleccionar_opcion->_editar_hora_reloj_digital
    _editar_hora_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _editar_fecha_reloj_digital->_covertir_valores_de_array_a_escala_decimal

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  370389
                                             18 BANK0      1     1      0
                           _Read_RTC
              _ir_a_pantalla_inicial
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   28628
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
                  _set_reloj_digital
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     925
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ir_a_pantalla_inicial                                0     0      0  340769
                  _set_reloj_digital
_si_apreta_numero_va_a_pantalla_cont
       _titila_texto_insert_password
 ---------------------------------------------------------------------------------
 (2) _titila_texto_insert_password                         1     1      0    6835
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _si_apreta_numero_va_a_pantalla_contrasenia           0     0      0  309430
 _ir_a_pantalla_ingresar_contrasenia
 ---------------------------------------------------------------------------------
 (3) _ir_a_pantalla_ingresar_contrasenia                   0     0      0  309430
                     _ingreso_numero
              _ir_a_pantalla_edicion
                         _lcd_gotoxy
                          _lcd_putrs
                _mostrar_presionar_a
_resetear_pantalla_ingresar_contrase
              _verificar_contrasenia
 ---------------------------------------------------------------------------------
 (4) _verificar_contrasenia                               10     8      2     115
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) _resetear_pantalla_ingresar_contrasenia               2     2      0    6903
                                             10 COMRAM     2     2      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _mostrar_presionar_a                                  0     0      0    6835
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _ir_a_pantalla_edicion                                0     0      0  278133
                           _Read_RTC
                     _cambiar_opcion
                         _lcd_gotoxy
                          _lcd_putrs
                 _seleccionar_opcion
                  _set_reloj_digital
 ---------------------------------------------------------------------------------
 (2) _set_reloj_digital                                    0     0      0   24504
                      _setDiaMesAnio
               _setHoraMinutoSegundo
 ---------------------------------------------------------------------------------
 (5) _seleccionar_opcion                                   0     0      0  236019
                     _activar_alarma
         _editar_fecha_reloj_digital
          _editar_hora_reloj_digital
   _ir_a_pantalla_editar_contrasenia
 ---------------------------------------------------------------------------------
 (6) _ir_a_pantalla_editar_contrasenia                     2     2      0   17534
                                             60 COMRAM     2     2      0
                     _ingreso_numero
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (6) _editar_hora_reloj_digital                            9     9      0  105460
                                             94 COMRAM     1     1      0
                                             10 BANK0      8     8      0
                          _Write_RTC
_covertir_valores_de_array_a_escala_
                     _ingreso_numero
               _setHoraMinutoSegundo
 ---------------------------------------------------------------------------------
 (3) _setHoraMinutoSegundo                                 0     0      0   12252
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _editar_fecha_reloj_digital                           9     9      0  105460
                                             94 COMRAM     1     1      0
                                             10 BANK0      8     8      0
                          _Write_RTC
_covertir_valores_de_array_a_escala_
                     _ingreso_numero
                      _setDiaMesAnio
 ---------------------------------------------------------------------------------
 (3) _setDiaMesAnio                                        0     0      0   12252
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2469
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     561
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     696
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (7) _ingreso_numero                                       2     2      0   10609
                                             58 COMRAM     2     2      0
            _guarda_numero_ingresado
 ---------------------------------------------------------------------------------
 (8) _guarda_numero_ingresado                              2     0      2   10609
                                             56 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (7) _covertir_valores_de_array_a_escala_decimal          14    12      2   79856
                                             90 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                           ___awtoft
                            ___fttol
                             ___wmul
                         _lcd_gotoxy
                          _lcd_putrs
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (8) _pow                                                 17    11      6   65683
                                             73 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (9) _log                                                  5     2      3   21400
                                             57 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _exp                                                  9     6      3   35628
                                             64 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (10) _ldexp                                               7     2      5     400
                                             57 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (10) _floor                                               8     5      3    9183
                                             45 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (10) _frexp                                               7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     556
                                             12 COMRAM    15    11      4
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftge                                              9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4    2758
                                             27 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (10) _eval_poly                                          12     5      7    9553
                                             45 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    3882
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftsub                                             6     0      6    4615
                                             45 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    4270
                                             33 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftneg                                             3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) ___ftdiv                                            15     9      6    3102
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___awtoft                                            4     1      3    2863
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             9     5      4    2689
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _activar_alarma                                       1     1      0    7565
                                             10 COMRAM     1     1      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     730
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _cambiar_opcion                                       1     1      0    9783
                                             56 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    22     10    2948
                                             33 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     767
                                             27 COMRAM     6     2      4
                           ___awtoft (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    4538
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    3049
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    2297
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     708
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Read_RTC                                             0     0      0     992
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (6) _RtccReadTime                                        18    16      2     449
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (6) _RtccReadDate                                        18    16      2     543
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _ir_a_pantalla_inicial
     _set_reloj_digital
       _setDiaMesAnio
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
       _setHoraMinutoSegundo
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
     _si_apreta_numero_va_a_pantalla_contrasenia
       _ir_a_pantalla_ingresar_contrasenia
         _ingreso_numero
           _guarda_numero_ingresado
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
             _sprintf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
               _isdigit
         _ir_a_pantalla_edicion
           _Read_RTC
             _RtccReadDate
             _RtccReadTime
           _cambiar_opcion
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
             _sprintf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
               _isdigit
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _seleccionar_opcion
             _activar_alarma
               _lcd_comand
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
             _editar_fecha_reloj_digital
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _covertir_valores_de_array_a_escala_decimal
                 ___awtoft
                   ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _pow
                   ___ftge
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                   ___lltoft
                     ___ftpack
                   _exp
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___ftpack
                     ___ftge
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg
                     ___ftsub
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _floor
                       ___altoft
                         ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftge
                       ___fttol
                         ___awtoft (ARG)
                           ___ftpack
                       _frexp
                     _ldexp
                       _eval_poly (ARG)
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                     _log (ARG)
                       ___awtoft
                         ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       _eval_poly
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                       _frexp
                   _log
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _frexp
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _setDiaMesAnio
                 _Write_RTC
                   _RtccWrOn
                   _RtccWriteDate
                     _RtccWrOn
                   _RtccWriteTime
                     _RtccWrOn
                   ___awdiv
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
             _editar_hora_reloj_digital
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _covertir_valores_de_array_a_escala_decimal
                 ___awtoft
                   ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _pow
                   ___ftge
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                   ___lltoft
                     ___ftpack
                   _exp
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___ftpack
                     ___ftge
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg
                     ___ftsub
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _floor
                       ___altoft
                         ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftge
                       ___fttol
                         ___awtoft (ARG)
                           ___ftpack
                       _frexp
                     _ldexp
                       _eval_poly (ARG)
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                     _log (ARG)
                       ___awtoft
                         ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       _eval_poly
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                       _frexp
                   _log
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _frexp
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _setHoraMinutoSegundo
                 _Write_RTC
                   _RtccWrOn
                   _RtccWriteDate
                     _RtccWrOn
                   _RtccWriteTime
                     _RtccWrOn
                   ___awdiv
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
             _ir_a_pantalla_editar_contrasenia
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
           _set_reloj_digital
             _setDiaMesAnio
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _sprintf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _isdigit
             _setHoraMinutoSegundo
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _sprintf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _mostrar_presionar_a
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _resetear_pantalla_ingresar_contrasenia
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _verificar_contrasenia
     _titila_texto_insert_password
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
     _set_reloj_digital
       _setDiaMesAnio
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
       _setHoraMinutoSegundo
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     13      9E       5       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FD       6        0.0%
DATA                 0      0      FD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Oct 25 13:35:12 2017

                                       ___altoft@exp 0024                                                    _a 009A  
                                                  _b 0098                                                    _c 0096  
                                                  _i 009E                                                    _j 009C  
                                                  _k 0094                                        ___altoft@sign 0025  
                                     ?_lcd_send_byte 0003                                         ___awdiv@sign 0006  
                         guarda_numero_ingresado@num 0039                                  ___wmul@multiplicand 001E  
                                        lcd_comand@d 0005                                         __CFG_CP0$OFF 000000  
                                       ___ftadd@exp1 002D                                         ___ftadd@exp2 002C  
                                       ___ftadd@sign 002B                                                  l200 10AA  
                                                l201 109A                                                  l212 1126  
                                                l213 1116                                                  l301 33BE  
                                                l230 11DC                                                  l206 10EC  
                                                l231 11CC                                                  l207 10DC  
                                                l224 11A2                                                  l400 17FA  
                                                l225 1192                                                  l242 125A  
                                                l218 1160                                                  l170 3134  
                                                l402 18CE                                                  l322 2F3A  
                                                l243 124A                                                  l219 1150  
                                                l315 2F18                                                  l500 1502  
                                                l236 1216                                                  l404 184C  
                                                l308 2EF6                                                  l261 2AB2  
                                                l237 1206                                                  l165 2F84  
                                                l502 1566                                                  l270 2AEA  
                                                l262 2AA2                                                  l182 3052  
                                                l166 2FA8                                                  l406 1896  
                                                l342 2CBE                                                  l511 15F4  
                                                l407 18A0                                                  l343 2CDA  
                                                l512 15FC                                                  l352 3192  
                                                l521 169E                                                  l513 1620  
                                                l345 2CF2                                                  l353 31E8  
                                                l177 2C34                                                  l417 383C  
                                                l450 388C                                                  l522 164C  
                                                l506 1560                                                  l194 1070  
                                                l602 246E                                                  l354 31CC  
                                                l507 1588                                                  l267 2AE0  
                                                l259 2A9A                                                  l195 1060  
                                                l371 13DC                                                  l443 3298  
                                                l460 368C                                                  l700 3214  
                                                l188 1036                                                  l380 1400  
                                                l364 132A                                                  l269 2AFA  
                                                l189 1026                                                  l613 2524  
                                                l373 134C                                                  l349 2D24  
                                                l445 32BA                                                  l438 37FC  
                                                l382 144A                                                  l366 129A  
                                                l390 1702                                                  l439 37FE  
                                                l455 3698                                                  l383 1454  
                                                l375 13A4                                                  l456 3668  
                                                l608 24C2                                                  l376 13AE  
                                                l368 12F2                                                  l392 174C  
                                                l609 251A                                                  l369 12FC  
                                                l393 1756                                                  l458 3674  
                                                l810 37BC                                                  l378 1482  
                                                l298 338C                                                  l459 3680  
                                                l491 14A6                                                  l395 1828  
                                                l299 33A8                                                  l476 350A  
                                                l492 14C0                                                  l580 21F6  
                                                l388 1784                                                  l477 34E2  
                                                l573 2134                                                  l397 17A6  
                                                l494 14D4                                                  l830 390C  
                                                l495 14CE                                                  l399 17F0  
                                                l816 391C                                                  l904 1BE6  
                                                l584 2200                                                  l905 1BDC  
                                                l850 2B5E                                                  l914 273E  
                                                l922 2DE6                                                  l851 2B54  
                                                l907 1C0A                                                  l931 2672  
                                                l923 2E16                                                  l579 2198  
                                                l916 2766                                                  l940 3872  
                                                l908 1C26                                                  l932 26A4  
                                                l853 2B92                                                  l917 27A4  
                                                l909 1C56                                                  l933 26B4  
                                                l854 2B7C                                                  l918 27CA  
                                                l950 255A                                                  l790 30E4  
                                                l782 308C                                                  l935 26CC  
                                                l791 30F2                                                  l783 309C  
                                                l856 2BBA                                                  l936 26DC  
                                                l952 25D0                                                  l857 2BB0  
                                                l881 1B22                                                  l929 264A  
                                                l961 2610                                                  l953 25C0  
                                                l785 30BA                                                  l890 1BB2  
                                                l946 3706                                                  l786 30B2  
                                                l699 3220                                                  l965 38D8  
                                                l885 1B4C                                                  l789 30DA  
                                                l958 25F4                                                  l895 1BA8  
                                                l959 25E8                                                  l896 1B9E  
                                                _dia 00D5                                                  _key 00A0  
                                                _mes 00D9                                                  _exp 18E8  
                                                _log 220A                                                  _pow 1E18  
                                                wreg 000FE8                            _editar_hora_reloj_digital 16CC  
                                    RtccReadDate@pDt 0001                                          lcd_gotoxy@x 0006  
                                        lcd_gotoxy@y 0005                                         ___ftdiv@cntr 0012  
                                       ___ftdiv@sign 0017                                                 l1012 3444  
                                               l1013 3438                                                 l1044 34AC  
                                               l1045 34A4                                                 l1054 36C4  
                                               l1055 36BC                                                 l1048 34CC  
                                               l1240 1A98                                                 l1080 1F80  
                                               l1049 34D6                                                 l1058 36DC  
                                               l1234 1900                                                 l1074 1E5E  
                                               l1059 36E6                                                 l1075 1E50  
                                               l1260 2A0A                                                 l1236 1938  
                                               l1245 2838                                                 l1237 1970  
                                               l1077 1E76                                                 l1254 2D4E  
                                               l1246 282A                                                 l1262 2A3A  
                                               l1238 199E                                                 l1078 1EFC  
                                               l1263 2A2E                                                 l1239 1AC2  
                                               l1079 1EDA                                                 l1248 2852  
                                               l1249 28CC                                                 l1258 29C4  
                                               l1284 2996                                                 l1276 2226  
                                               l1285 291A                                                 l1278 2248  
                                               l3171 2E42                                                 l4037 1A98  
                                               l4303 233C                                                 l4505 144A  
                                               l4601 18B6                                                 l4417 2CDA  
                                               l4419 2CE2                                                 l4509 146A  
                                               l4453 1312                                                 l4541 174C  
                                               l4481 13C4                                                 l4449 12F2  
                                               l4545 176C                                                 l4723 35A0  
                                               l4477 13A4                                                 l4573 1810  
                                               l3863 15A4                                                 l4569 17F0  
                                               ?_exp 0041                                                 l4597 1896  
                                               ?_log 003A                                                 l4759 31CC  
                                               l4779 33A8                                                 l4885 3290  
                                               l4899 32B2                                                 ?_pow 004A  
                                               STR_1 0FD7                                                 STR_2 0FF0  
                                               STR_3 0FEB                                                 STR_4 0FDC  
                                               STR_5 0FE6                                                 STR_6 0FE1  
                                               STR_7 0F90                                                 STR_8 0F9F  
                                               STR_9 0FD0                                                 u3000 2B46  
                                               u3101 1AE0                                                 u3111 1AF4  
                                               u3040 2BC4                                                 u3200 1B7C  
                                               u4100 1628                                                 u3140 1B14  
                                               u4110 1646                                                 u3311 2632  
                                               u4120 16A6                                                 u3240 1BBA  
                                               u4200 30BE                                                 u3401 253E  
                                               u4130 16BE                                                 u4050 15D0  
                                               u3170 1B3E                                                 u3331 265A  
                                               u4140 3502                                                 u3420 2578  
                                               u4300 197A                                                 u5020 137E  
                                               u4150 352A                                                 u3270 1BEE  
                                               u5030 1394                                                 u3521 2726  
                                               u3425 2570                                                 u3610 34B0  
                                               u4410 2F76                                                 u5130 173C  
                                               u4147 34F8                                                 u2900 32EC  
                                               u3460 25FA                                                 u4420 2F9A  
                                               u4157 3520                                                 u3541 274E  
                                               u4510 1078                                                 u4430 3112  
                                               u5230 1886                                                 u6007 2AA8  
                                               u2920 3304                                                 u3640 36C8  
                                               u3720 29E4                                                 u5080 143A  
                                               u6017 2AF0                                                 u3490 2D76  
                                               u4290 1978                                                 u6027 391E  
                                               u2940 331E                                                 u5340 2B02  
                                               u5180 17E0                                                 u5420 35C4  
                                               u2918 32EE                                                 u4390 1EC2  
                                               u4710 11AA                                                 u4630 112E  
                                               u4550 10B2                                                 u4470 103E  
                                               u5510 2EE4                                                 u2960 333A  
                                               u3680 2844                                                 u3728 29E6  
                                               u2938 3306                                                 u5290 2ABA  
                                               u3498 2D78                                                 u5450 31E8  
                                               u5610 2F14                                                 u5530 2EEC  
                                               u5460 33A2                                                 u2958 3320  
                                               u4750 11E4                                                 u4670 1168  
                                               u4590 10F4                                                 u5710 2F52  
                                               u5630 2F28                                                 u5550 2EF2  
                                               u4920 2CD4                                                 u2978 333C  
                                               u4850 23F6                                                 u5730 2F5A  
                                               u5650 2F30                                                 u5570 2F06  
                                               u4790 121E                                                 u5670 2F36  
                                               u5590 2F0E                                                 u5750 32A8  
                                               u5807 390E                                                 u5817 2C2C  
                                               u4970 12CC                                                 u5690 2F4A  
                                               u5907 1066                                                 u5827 2C7C  
                                               u4980 12E2                                                 u5917 10A0  
                                               u5837 177C                                                 u5927 10E2  
                                               u5847 1820                                                 u5937 111C  
                                               u5857 18C6                                                 u5947 1156  
                                               u5867 1322                                                 u5957 1198  
                                               u5877 13D4                                                 u5797 384E  
                                               u5967 11D2                                                 u5887 147A  
                                               u5977 120C                                                 u5897 102C  
                                               u5987 1250                                                 u5997 3658  
                                   ?_lcd_send_nibble 0001                                                 _anio 00DB  
                                               _flag 07E8                                                 _main 3838  
                                               _hora 00D3                                         ___ftpack@arg 0001  
                                       ___ftpack@exp 0004                                                 fsr0h 000FEA  
                                               fsr1h 000FE2                                                 indf0 000FEF  
                                               fsr2h 000FDA                                                 fsr0l 000FE9  
                                               indf2 000FDF                                                 fsr1l 000FE1  
                                               fsr2l 000FD9                                                 exp@x 0041  
                                               log@x 003A                                        __CFG_T1DIG$ON 000000  
                           ?_guarda_numero_ingresado 0039                                                 pow@x 004A  
                                               pow@y 004D                                                 prodh 000FF4  
                                               prodl 000FF3                                                 start 0000  
                                      __CFG_IESO$OFF 000000                                     RtccReadDate@rTD0 000B  
                                   RtccReadDate@rTD1 0003                                         ___ftmul@cntr 001A  
                                       ___param_bank 000000                                         ___ftmul@sign 001B  
                                    RtccReadTime@pTm 0001                                         ___fttol@exp1 001B  
                                              ??_exp 0044                                                ??_log 003D  
                                       ___fttol@lval 0017                                                ??_pow 0050  
                                        _Delay1KTCYx 390A                                        __CFG_PLLDIV$1 000000  
                                              ?_main 0001                                      __end_of___awdiv 30FC  
                                    __end_of___ftadd 1C7C                                                STR_10 0FAE  
                                              STR_11 0F65                                                STR_12 0F65  
                                              STR_20 0FB7                                                STR_13 0FF5  
                                              STR_21 0F7F                                                STR_22 0F5D  
                                              STR_14 0FC8                                                STR_15 0F5F  
                                              STR_23 0F48                                                STR_24 0F5D  
                                              STR_16 0FF5                                                STR_25 0F9A  
                                              STR_17 0F6E                                                STR_18 0F5D  
                                              STR_19 0FC0                                __size_of_Delay100TCYx 0010  
                                    __end_of___ftdiv 27FC                                      __end_of___ftneg 3880  
                                    __end_of___ftmul 2716                                      ___awdiv@divisor 0003  
                                    __end_of___ftsub 3730                                      __end_of___fttol 2622  
        covertir_valores_de_array_a_escala_decimal@i 00E5                                      __end_of___lwdiv 34E0  
                                    __end_of___lwmod 36F0                                      ___awdiv@counter 0005  
                                              _TRISA 000F92                                                _TRISB 000F93  
                                              _TRISC 000F94                                         ___lltoft@exp 0011  
                                     __CFG_FCMEN$OFF 000000                                        ___awtoft@sign 000C  
                       __size_of_mostrar_presionar_a 0018                                      __end_of_dpowers 0F0B  
                                              _floor 27FC                                                _ldexp 29AC  
                                              _frexp 2D26                                                _mes_d 00F3  
                                              _errno 0088                                                _mes_u 00F4  
                                    __end_of_isdigit 38E0                                        ___ftpack@sign 0005  
                                              _setup 35D0                                                tablat 000FF5  
                                              pow@yi 0057                                 _setHoraMinutoSegundo 30FC  
                                       lcd_putrs@ptr 0009                                                status 000FD8  
                                    __end_of_sprintf 16CC                            _motivo_ingreso_de_numeros 008E  
                                        exp@exponent 0047                              __CFG_DSWDTOSC$INTOSCREF 000000  
                                        ldexp@newexp 003D                                       _activar_alarma 361A  
                                    __initialization 376E                                          log@exponent 003D  
                                       _Delay100TCYx 391A                                         __end_of_main 385C  
                                    ??_lcd_send_byte 0004                                     RtccReadTime@rTD0 000B  
                                   RtccReadTime@rTD1 0003                                     __end_of_Read_RTC 20D4  
     __end_of_resetear_pantalla_ingresar_contrasenia 35D0      __size_of_resetear_pantalla_ingresar_contrasenia 004E  
           ??_resetear_pantalla_ingresar_contrasenia 000B              ?_resetear_pantalla_ingresar_contrasenia 0001  
             _resetear_pantalla_ingresar_contrasenia 3582                                               ??_main 00EF  
                                      ___fttol@sign1 0016                                        __activetblptr 000002  
                                   __end_of_RtccWrOn 390A                                               ?_floor 002E  
                                             ?_ldexp 003A                                               ?_frexp 0001  
                                   __end_of___altoft 326A                                               _EECON2 000FA7  
                                             _ANCON0 000F48                                               _ANCON1 000F49  
                                   ___awdiv@dividend 0001                                               ?_setup 0001  
                                   __end_of___awtoft 37E0              editar_fecha_reloj_digital@mes_ingresado 00E9  
                                   __end_of___ftpack 2BE4                           __end_of_seleccionar_opcion 3582  
                                   __end_of___lltoft 348E                       __size_of_verificar_contrasenia 007A  
                              ?_setHoraMinutoSegundo 0001                                       __CFG_WDTEN$OFF 000000  
                      __end_of_verificar_contrasenia 31F2                                     RtccWriteDate@pDt 0001  
                                             _RTCCFG 000F3F                                       __CFG_WPCFG$OFF 000000  
                                   ??_cambiar_opcion 0039                               __end_of_activar_alarma 3664  
                                  _set_reloj_digital 3946                                       __CFG_WPDIS$OFF 000000  
            resetear_pantalla_ingresar_contrasenia@i 000B                                       __CFG_XINST$OFF 000000  
                                 ?_set_reloj_digital 0001                                     __end_of_lcd_init 32E0  
                                   __end_of_lcd_putc 36AE                                               ___ftge 2DB6  
                                             ___wmul 3812                                            ??___awdiv 0005  
                                          ??___ftadd 0028                                       __CFG_STVREN$ON 000000  
                                          ??___ftdiv 000F                                            ??___ftneg 0004  
                                             _diasem 00D7                                            ??___ftmul 0013  
                                             _anio_d 00F0                                            ??___ftsub 0034  
                                          ??___fttol 0011                                               _anio_u 00F1  
                            ??_ir_a_pantalla_edicion 0060                                            ??___lwdiv 0005  
                                          ??___lwmod 000C                                               _hora_d 00F7  
                                             _hora_u 00F8                                               clear_0 3798  
                                ??_set_reloj_digital 0039                                     ___awdiv@quotient 0007  
                                             _minuto 00D1                              ??_ir_a_pantalla_inicial 0060  
                              __end_of_RtccWriteDate 220A                                __end_of_RtccWriteTime 252E  
                                             floor@i 0031                                               floor@x 002E  
                              ___ftmul@f3_as_product 0017                                     RtccWriteTime@pTm 0001  
                                          ??_isdigit 0001                    editar_hora_reloj_digital@posicion 00ED  
                                       __mediumconst 0000                                               tblptrh 000FF7  
                                             tblptrl 000FF6                                               tblptru 000FF8  
                                          ??_sprintf 002C                                     __end_ofexp@coeff 0F2D  
                                   __end_oflog@coeff 0F48                            __end_of_set_reloj_digital 3950  
                                         __accesstop 0060                              __end_of__initialization 379E  
                                         ___altoft@c 001C                   __size_of_editar_hora_reloj_digital 021C  
                                         ___ftadd@f1 0022                                           ___ftadd@f2 0025  
                                 __size_of_Write_RTC 019C                                           ___ftge@ff1 0001  
                                         ___ftge@ff2 0004                                      ?_activar_alarma 0001  
                                       eval_poly@res 0037                                        ___rparam_used 000001  
                                         ___ftdiv@f1 0009                                           ___ftdiv@f2 000C  
                                         ___ftdiv@f3 0013                                           ___ftneg@f1 0001  
                                         ___awtoft@c 0009                                           ___ftmul@f1 000D  
                                         ___ftmul@f2 0010                                           ___ftsub@f1 002E  
                                         ___ftsub@f2 0031                                           ___fttol@f1 000D  
                                     __pcstackCOMRAM 0001                                         __pidataBANK0 38A2  
                                         ___lltoft@c 0009                                        __end_of_floor 28DA  
                                      __end_of_ldexp 2A72                                        __end_of_frexp 2DB6  
               __end_of_titila_texto_insert_password 2C88                __size_of_titila_texto_insert_password 00A4  
                       _titila_texto_insert_password 2BE4                                        __end_of_setup 361A  
                                    __CFG_DSWDTPS$G2 000000                                      __CFG_OSC$INTOSC 000000  
         __end_of_ir_a_pantalla_ingresar_contrasenia 33C4          __size_of_ir_a_pantalla_ingresar_contrasenia 006E  
               ??_ir_a_pantalla_ingresar_contrasenia 0060                  ?_ir_a_pantalla_ingresar_contrasenia 0001  
                 _ir_a_pantalla_ingresar_contrasenia 3356                                    lcd_gotoxy@address 0007  
                                 __size_of_lcd_putrs 0052                                              ??_floor 0031  
                                            ??_ldexp 003F                                              ??_frexp 0006  
           __end_of_ir_a_pantalla_editar_contrasenia 2D26            __size_of_ir_a_pantalla_editar_contrasenia 009E  
                 ??_ir_a_pantalla_editar_contrasenia 003D                    ?_ir_a_pantalla_editar_contrasenia 0001  
                   _ir_a_pantalla_editar_contrasenia 2C88                               ??_setHoraMinutoSegundo 0039  
                                       sprintf@width 0036                                              ??_setup 0039  
                                         __pbssBANK0 0060                                   __size_of_eval_poly 00D2  
                                          ?_Read_RTC 0001                                           _dia_semana 00F2  
                          RtccWriteTime@tempHourWDay 000A                    __end_of_editar_hora_reloj_digital 18E8  
                                          ?_RtccWrOn 0001                                       lcd_send_byte@n 0003  
                                            ?___ftge 0001                                  _mostrar_presionar_a 38E0  
                                            ?___wmul 001C                                        ?_RtccReadDate 0001  
                                      ?_RtccReadTime 0001                  __size_of_editar_fecha_reloj_digital 0238  
                                       ?_Delay1KTCYx 0001                                            ?___altoft 001C  
                                          ?___awtoft 0009                               __size_of_setDiaMesAnio 008C  
                                          ?___ftpack 0001                     __size_of_guarda_numero_ingresado 008C  
                                          ?___lltoft 0009                        ?_titila_texto_insert_password 0001  
                                  __end_of_Write_RTC 1E18                                           _lcd_comand 3938  
                                         _lcd_gotoxy 3880                                 ?_mostrar_presionar_a 0001  
                                            _RTCVALH 000F99                                              _RTCVALL 000F98  
                             verificar_contrasenia@i 0009                                            ?_lcd_init 0001  
                                          ?_lcd_putc 0001                           __size_of_set_reloj_digital 000A  
                                         ??_Read_RTC 0013                                              __Hparam 0000  
            editar_fecha_reloj_digital@dia_ingresado 00E7                                              __Lparam 0000  
                           __size_of_lcd_send_nibble 0076                                           ??_RtccWrOn 0001  
                                     ??_RtccReadDate 0003                                      __size_of___ftge 0090  
                                     ??_RtccReadTime 0003                                              ___awdiv 3078  
                                            ___ftadd 1AD0                                    __end_of_lcd_putrs 3532  
                                            ___ftdiv 2716                                              ___ftneg 385C  
                                    __size_of___wmul 0026                                              ___ftmul 2622  
                                            ___ftsub 36F0                                              ___fttol 252E  
                                            ___lwdiv 348E                                              ___lwmod 36AE  
                            __size_of_ingreso_numero 0268                                         __psmallconst 0F00  
                                         ??___altoft 0020                                          _RtccTimeVal 0084  
                                            __pcinit 376E                                              _fecha_d 00F5  
                                            _fecha_u 00F6                                           ??___awtoft 000C  
                                         ??___ftpack 0006                                    __end_of_eval_poly 29AC  
                                            __ramtop 0F00                                           ??___lltoft 000D  
                                            __ptext0 3838                                              __ptext1 35D0  
                                            __ptext2 326A                                              __ptext3 390A  
                                            __ptext4 392A                                              __ptext5 2BE4  
                                            __ptext6 2ED4                                              __ptext7 3356  
                                            __ptext8 3178                                              __ptext9 3582  
                                            _buffer2 00A1                                            _T1CONbits 000FCD  
                                            _dpowers 0F01                                         __size_of_exp 01E8  
                                       __size_of_log 011E                                              _isdigit 38C2  
                                       __size_of_pow 0176                                   _numeros_ingresados 0090  
                                 _numeros_para_fecha 0080                                              _segundo 0092  
                              ??_mostrar_presionar_a 000B                                              _sprintf 149C  
                                         ??_lcd_init 0005                                           ??_lcd_putc 0008  
                               end_of_initialization 379E                                              exp@sign 0049  
                                      _setDiaMesAnio 2F60                                 lcd_send_byte@address 0004  
                                      __Lmediumconst 0000                          verificar_contrasenia@equals 0007  
                                            pow@sign 0056                                              postdec1 000FE5  
                                            postdec2 000FDD                                   _seleccionar_opcion 3532  
                                            postinc0 000FEE                                              postinc1 000FE6  
                                            postinc2 000FDE                                __end_of_lcd_send_byte 3812  
                     __size_of_ir_a_pantalla_edicion 003E                        __end_of_ir_a_pantalla_edicion 376E  
                                          _PORTAbits 000F80                                            _PORTCbits 000F82  
                                ?_seleccionar_opcion 0001                                     __CFG_DSBOREN$OFF 000000  
                     __size_of_ir_a_pantalla_inicial 000E                        __end_of_ir_a_pantalla_inicial 3938  
                 __end_of_editar_fecha_reloj_digital 149C                           _editar_fecha_reloj_digital 1264  
                                        ?_lcd_comand 0001                                     __CFG_CPUDIV$OSC1 000000  
                                          _TRISBbits 000F93                       ??_titila_texto_insert_password 000B  
                                        ?_lcd_gotoxy 0005                                      _LCD_INIT_STRING 0F0B  
                                   ??_activar_alarma 000B                                       ?_setDiaMesAnio 0001  
                               ??_seleccionar_opcion 0060                                          ___ftdiv@exp 0016  
                              _verificar_contrasenia 3178                                     __CFG_IOL1WAY$OFF 000000  
                          RtccWriteDate@tempDayMonth 000A                                  __CFG_MSSP7B_EN$MSK7 000000  
                                        ___ftmul@exp 0016           editar_hora_reloj_digital@segundo_ingresado 00EB  
                                   Delay100TCYx@unit 0001                                       __end_of___ftge 2E46  
                                     __end_of___wmul 3838                              _guarda_numero_ingresado 2FEC  
                          RtccWriteDate@tempHourWDay 000C              editar_hora_reloj_digital@hora_ingresada 00E7  
                                  ??_lcd_send_nibble 0001                                        __pbitbssBANK0 07E8  
                               __size_of_Delay1KTCYx 0010                                     __CFG_DSWDTEN$OFF 000000  
          editar_hora_reloj_digital@minuto_ingresado 00E9                                           floor@expon 0034  
                                start_initialization 376E                                           eval_poly@d 0031  
                                         eval_poly@n 0033                                           eval_poly@x 002E  
                                         ldexp@value 003A                                          __end_of_exp 1AD0  
                                        __end_of_log 2328                                          __end_of_pow 1F8E  
                               __end_of_RtccReadDate 2ED4                                 __end_of_RtccReadTime 3432  
 __end_of_covertir_valores_de_array_a_escala_decimal 2432  __size_of_covertir_valores_de_array_a_escala_decimal 010A  
       ??_covertir_valores_de_array_a_escala_decimal 005D          ?_covertir_valores_de_array_a_escala_decimal 005B  
         _covertir_valores_de_array_a_escala_decimal 2328                                           frexp@value 0001  
                               RtccWriteTime@wasAlrm 0006                                 RtccWriteTime@wasWrEn 0007  
                             __size_of_RtccWriteDate 0136                                      RtccWriteDate@di 0003  
                             __size_of_RtccWriteTime 00FC                                    __size_of_Read_RTC 0146  
                                __size_of_lcd_comand 000E                                             ??___ftge 0007  
                                __size_of_lcd_gotoxy 0022                                             ??___wmul 0020  
                                     _ingreso_numero 0FFC                                          __pdataBANK0 00BD  
                                  __size_of_RtccWrOn 0012                                      RtccWriteTime@di 0003  
                                   __CFG_LPT1OSC$OFF 000000                              __size_of_cambiar_opcion 00C4  
                                  __size_of___altoft 0078                                          _ALRMCFGbits 000F91  
                            __end_of_LCD_INIT_STRING 0F0F                                    __size_of___awtoft 0038  
                                  __size_of___ftpack 00AE                                    __size_of___lltoft 005C  
                                      __pcstackBANK0 00DD                                            _Write_RTC 1C7C  
                                    ??_setDiaMesAnio 0039                                         _isdigit$1969 0002  
                                    Delay1KTCYx@unit 0001                        __size_of_setHoraMinutoSegundo 007C  
                             ?_verificar_contrasenia 0001                                    __size_of_lcd_init 0076  
                                        sprintf@flag 0032                                    __size_of_lcd_putc 004A  
                                        sprintf@prec 0035                                    _array_contrasenia 00C9  
                                          __pnvBANK0 00F0                                     ___lwdiv@dividend 0001  
                         ?_editar_hora_reloj_digital 0001                               __end_of_ingreso_numero 1264  
                                      ?_Delay100TCYx 0001                            ??_guarda_numero_ingresado 003B  
                                           ?___awdiv 0001                                             ?___ftadd 0022  
                                           ?___ftdiv 0009                                             ?___ftneg 0001  
                                           ?___ftmul 000D                                             ?___ftsub 002E  
                                           ?___fttol 000D                                             ?___lwdiv 0001  
                                           ?___lwmod 0008                              RtccWriteTime@tempMinSec 0008  
                        _array_contrasenia_ingresada 0060                                            _lcd_putrs 34E0  
                                      _RtccWriteDate 20D4                                          __smallconst 0F00  
                                      _RtccWriteTime 2432                                             ?_isdigit 0001  
                                          _eval_poly 28DA                                 __CFG_RTCOSC$T1OSCREF 000000  
                                         ?_Write_RTC 0001                                     ___lwdiv@quotient 0005  
                                           ?_sprintf 0022                                       __size_of_floor 00DE  
                                     __size_of_ldexp 00C6                                       __size_of_frexp 0090  
                       ??_editar_fecha_reloj_digital 005F                                       __size_of_setup 004A  
                                   _RtccAlrmTimeDate 0070                                       ___wmul@product 0020  
                                           _LATAbits 000F89                                             _LATBbits 000F8A  
                                           _PIE3bits 000FA3                                            _segundo_d 00FB  
                                     ??_Delay100TCYx 0001                                            _segundo_u 00FC  
                                    ?_ingreso_numero 0001                                     __CFG_WDTPS$32768 000000  
                 editar_fecha_reloj_digital@posicion 00ED                                   RtccWriteDate@wasOn 0005  
                                 _Rtcc_read_TimeDate 0068                                       ?_RtccWriteDate 0001  
                        __end_of_mostrar_presionar_a 38F8                                           ?_lcd_putrs 0009  
                                  ___wmul@multiplier 001C                                       ?_RtccWriteTime 0001  
                                          lcd_init@i 0005                                __size_of_RtccReadDate 008E  
                                       ??_lcd_comand 0005                                           ?_eval_poly 002E  
                        ?_editar_fecha_reloj_digital 0001             editar_fecha_reloj_digital@anio_ingresado 00EB  
                                          lcd_putc@c 0008                                __size_of_RtccReadTime 006E  
                                       ??_lcd_gotoxy 0006                      __end_of_guarda_numero_ingresado 3078  
                                          copy_data0 3782                                             _Read_RTC 1F8E  
                                  _array_seleccionar 00BD                                            frexp@eptr 0004  
                                    _lcd_send_nibble 32E0                                             __Hrparam 0000  
                                           _RtccDate 00B5                                             __Lrparam 0000  
                                           _RtccTime 00B9                                             _RtccWrOn 38F8  
                                 __end_of_lcd_comand 3946                                   __end_of_lcd_gotoxy 38A2  
                                       _RtccReadDate 2E46                                       _cambiar_opcion 2A72  
                                   __size_of___awdiv 0084                                     __size_of___ftadd 01AC  
                                       _RtccReadTime 33C4                                     __size_of___ftdiv 00E6  
                                   __size_of___ftneg 0024                                             ___altoft 31F2  
                                   __size_of___ftmul 00F4                                     __size_of___ftsub 0040  
                                   __size_of___fttol 00F4                                     __size_of___lwdiv 0052  
                                   __size_of___lwmod 0042                                             ___awtoft 37A8  
                                           ___ftpack 2B36                                             ___lltoft 3432  
                  ir_a_pantalla_editar_contrasenia@i 003D                                         _RtccTimeDate 0078  
    _covertir_valores_de_array_a_escala_decimal$2440 00DD      _covertir_valores_de_array_a_escala_decimal$2441 00E0  
                                           _exp$2444 0044                                _ir_a_pantalla_edicion 3730  
                                         sprintf@val 0033                                     __size_of_isdigit 001E  
                                    ___lwdiv@divisor 0003                                _ir_a_pantalla_inicial 392A  
                                        ??_Write_RTC 000E                                      ___lwdiv@counter 0007  
                                           __ptext10 38E0                                             __ptext11 3730  
                                           __ptext20 3078                                             __ptext12 3946  
                                           __ptext21 2432                                             __ptext13 3532  
                                           __ptext30 29AC                                             __ptext22 20D4  
                                           __ptext14 2C88                                             __ptext31 27FC  
                                           __ptext23 38F8                                             __ptext15 16CC  
                                           __ptext40 385C                                             __ptext32 2D26  
                                           __ptext24 0FFC                                             __ptext16 30FC  
                                           __ptext41 2716                                             __ptext33 252E  
                                           __ptext25 2FEC                                             __ptext17 1264  
                                           __ptext50 3812                                             __ptext42 37A8  
                                           __ptext34 2DB6                                             __ptext26 2328  
                                           __ptext18 2F60                                             __ptext51 36AE  
                                           __ptext43 3432                                             __ptext35 31F2  
                                           __ptext27 1E18                                             __ptext19 1C7C  
                                           __ptext60 33C4                                             __ptext52 348E  
                                           __ptext44 2B36                                             __ptext36 28DA  
                                           __ptext28 220A                                             __ptext61 2E46  
                                           __ptext53 34E0                                             __ptext45 361A  
                                           __ptext37 2622                                             __ptext29 18E8  
                                           __ptext54 3664                                             __ptext46 3938  
                                           __ptext38 36F0                                             __ptext55 3880  
                                           __ptext47 2A72                                             __ptext39 1AD0  
                                           __ptext56 37E0                                             __ptext48 149C  
                                           __ptext57 32E0                                             __ptext49 38C2  
                                           __ptext58 391A                                             __ptext59 1F8E  
                                           _lcd_init 326A                                             _lcd_putc 3664  
                                    _txt_insert_pass 008A                                             _pow$2442 0050  
                                           _pow$2443 0053                                     __size_of_sprintf 0230  
                             __size_of_lcd_send_byte 0032                                        __size_of_main 0024  
                        __size_of_seleccionar_opcion 0050                                             _minuto_d 00F9  
                                           _minuto_u 00FA                               __end_of_cambiar_opcion 2B36  
                                      ??_Delay1KTCYx 0001                                      ??_RtccWriteDate 0004  
                                    ??_RtccWriteTime 0004                                          ??_lcd_putrs 000B  
                                           exp@coeff 0F0F                                             log@coeff 0F2D  
                                        _OSCTUNEbits 000F9B                                           _INTCONbits 000FF2  
 __end_of_si_apreta_numero_va_a_pantalla_contrasenia 2F60  __size_of_si_apreta_numero_va_a_pantalla_contrasenia 008C  
       ??_si_apreta_numero_va_a_pantalla_contrasenia 0060          ?_si_apreta_numero_va_a_pantalla_contrasenia 0001  
         _si_apreta_numero_va_a_pantalla_contrasenia 2ED4                                          ??_eval_poly 0035  
                                 RtccWriteTime@wasOn 0005                                 __end_of_Delay100TCYx 392A  
                                           isdigit@c 0003                              ??_verificar_contrasenia 0003  
                                          sprintf@ap 0030                              __end_of_lcd_send_nibble 3356  
                                          sprintf@sp 0022                                     ___lwmod@dividend 0008  
                                         _OSCCONbits 000FD3                          ??_editar_hora_reloj_digital 005F  
                            __size_of_activar_alarma 004A                                    _boton_seleccionar 008C  
                                    ?_cambiar_opcion 0001                                RtccWriteDate@tempYear 0007  
                       __end_of_setHoraMinutoSegundo 3178                                        _lcd_send_byte 37E0  
                                         _RTCCFGbits 000F3F                               ?_ir_a_pantalla_edicion 0001  
                                           sprintf@c 0038                                             sprintf@f 0024  
                                    ___lwmod@divisor 000A                                  __end_of_Delay1KTCYx 391A  
                                    ___lwmod@counter 000C                               ?_ir_a_pantalla_inicial 0001  
                               RtccWriteDate@wasAlrm 0006                                 RtccWriteDate@wasWrEn 0009  
                              __end_of_setDiaMesAnio 2FEC     covertir_valores_de_array_a_escala_decimal@numero 00E3  
                                   ??_ingreso_numero 003B                                lcd_send_nibble@nibble 0002  
