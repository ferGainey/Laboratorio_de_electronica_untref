

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Nov 10 20:28:40 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=2
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=2
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    85                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    86  0000                     
    87                           ; Version 1.43
    88                           ; Generated 25/07/2017 GMT
    89                           ; 
    90                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F26J50 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataBANK0
   123  00CF1A                     __pidataBANK0:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _array_contrasenia
   127  00CF1A  0001               	dw	1
   128  00CF1C  0002               	dw	2
   129  00CF1E  0003               	dw	3
   130  00CF20  0004               	dw	4
   131                           
   132                           ;initializer for _causa_reporte
   133  00CF22  CD                 	db	low STR_7
   134  00CF23  FF                 	db	high STR_7
   135                           
   136                           ;initializer for _minuto
   137  00CF24  001E               	dw	30
   138                           
   139                           ;initializer for _hora
   140  00CF26  0012               	dw	18
   141                           
   142                           ;initializer for _dia
   143  00CF28  0008               	dw	8
   144                           
   145                           ;initializer for _diasem
   146  00CF2A  0003               	dw	3
   147                           
   148                           ;initializer for _mes
   149  00CF2C  0009               	dw	9
   150                           
   151                           ;initializer for _anio
   152  00CF2E  000F               	dw	15
   153                           
   154                           	psect	idataBANK1
   155  00CEC0                     __pidataBANK1:
   156                           	opt stack 0
   157                           
   158                           ;initializer for _array_seleccionar
   159  00CEC0  D3                 	db	low STR_1
   160  00CEC1  FF                 	db	high STR_1
   161  00CEC2  EC                 	db	low STR_2
   162  00CEC3  FF                 	db	high STR_2
   163  00CEC4  E7                 	db	low STR_3
   164  00CEC5  FF                 	db	high STR_3
   165  00CEC6  D8                 	db	low STR_4
   166  00CEC7  FF                 	db	high STR_4
   167  00CEC8  E2                 	db	low STR_5
   168  00CEC9  FF                 	db	high STR_5
   169  00CECA  DD                 	db	low STR_6
   170  00CECB  FF                 	db	high STR_6
   171                           
   172                           	psect	mediumconst
   173  00FE82                     __pmediumconst:
   174                           	opt stack 0
   175  00FE82  00                 	db	0
   176  00FE83                     _dpowers:
   177                           	opt stack 0
   178  00FE83  0001               	dw	1
   179  00FE85  000A               	dw	10
   180  00FE87  0064               	dw	100
   181  00FE89  03E8               	dw	1000
   182  00FE8B  2710               	dw	10000
   183  00FE8D                     __end_of_dpowers:
   184                           	opt stack 0
   185  00FE8D                     _LCD_INIT_STRING:
   186                           	opt stack 0
   187  00FE8D  28                 	db	40
   188  00FE8E  0C                 	db	12
   189  00FE8F  01                 	db	1
   190  00FE90  06                 	db	6
   191  00FE91                     __end_of_LCD_INIT_STRING:
   192                           	opt stack 0
   193  00FE91                     exp@coeff:
   194                           	opt stack 0
   195  00FE91  00                 	db	0
   196  00FE92  80                 	db	128
   197  00FE93  3F                 	db	63
   198  00FE94  72                 	db	114
   199  00FE95  31                 	db	49
   200  00FE96  3F                 	db	63
   201  00FE97  FE                 	db	254
   202  00FE98  75                 	db	117
   203  00FE99  3E                 	db	62
   204  00FE9A  58                 	db	88
   205  00FE9B  63                 	db	99
   206  00FE9C  3D                 	db	61
   207  00FE9D  95                 	db	149
   208  00FE9E  1D                 	db	29
   209  00FE9F  3C                 	db	60
   210  00FEA0  C5                 	db	197
   211  00FEA1  AE                 	db	174
   212  00FEA2  3A                 	db	58
   213  00FEA3  79                 	db	121
   214  00FEA4  21                 	db	33
   215  00FEA5  39                 	db	57
   216  00FEA6  94                 	db	148
   217  00FEA7  80                 	db	128
   218  00FEA8  37                 	db	55
   219  00FEA9  93                 	db	147
   220  00FEAA  A7                 	db	167
   221  00FEAB  35                 	db	53
   222  00FEAC  56                 	db	86
   223  00FEAD  15                 	db	21
   224  00FEAE  34                 	db	52
   225  00FEAF                     __end_ofexp@coeff:
   226                           	opt stack 0
   227  00FEAF                     log@coeff:
   228                           	opt stack 0
   229  00FEAF  00                 	db	0
   230  00FEB0  00                 	db	0
   231  00FEB1  00                 	db	0
   232  00FEB2  00                 	db	0
   233  00FEB3  80                 	db	128
   234  00FEB4  3F                 	db	63
   235  00FEB5  F0                 	db	240
   236  00FEB6  FF                 	db	255
   237  00FEB7  BE                 	db	190
   238  00FEB8  E2                 	db	226
   239  00FEB9  A9                 	db	169
   240  00FEBA  3E                 	db	62
   241  00FEBB  83                 	db	131
   242  00FEBC  76                 	db	118
   243  00FEBD  BE                 	db	190
   244  00FEBE  AE                 	db	174
   245  00FEBF  2B                 	db	43
   246  00FEC0  3E                 	db	62
   247  00FEC1  3C                 	db	60
   248  00FEC2  C3                 	db	195
   249  00FEC3  BD                 	db	189
   250  00FEC4  D2                 	db	210
   251  00FEC5  13                 	db	19
   252  00FEC6  3D                 	db	61
   253  00FEC7  78                 	db	120
   254  00FEC8  D3                 	db	211
   255  00FEC9  BB                 	db	187
   256  00FECA                     __end_oflog@coeff:
   257                           	opt stack 0
   258  00FECA                     STR_26:
   259                           
   260                           ; BSR set to: 15
   261  00FECA  52                 	db	82	;'R'
   262  00FECB  65                 	db	101	;'e'
   263  00FECC  70                 	db	112	;'p'
   264  00FECD  6F                 	db	111	;'o'
   265  00FECE  72                 	db	114	;'r'
   266  00FECF  74                 	db	116	;'t'
   267  00FED0  65                 	db	101	;'e'
   268  00FED1  20                 	db	32
   269  00FED2  25                 	db	37
   270  00FED3  30                 	db	48	;'0'
   271  00FED4  32                 	db	50	;'2'
   272  00FED5  69                 	db	105	;'i'
   273  00FED6  2F                 	db	47
   274  00FED7  25                 	db	37
   275  00FED8  30                 	db	48	;'0'
   276  00FED9  32                 	db	50	;'2'
   277  00FEDA  69                 	db	105	;'i'
   278  00FEDB  2F                 	db	47
   279  00FEDC  25                 	db	37
   280  00FEDD  30                 	db	48	;'0'
   281  00FEDE  32                 	db	50	;'2'
   282  00FEDF  69                 	db	105	;'i'
   283  00FEE0  00                 	db	0
   284  00FEE1                     STR_41:
   285                           
   286                           ; BSR set to: 15
   287  00FEE1  49                 	db	73	;'I'
   288  00FEE2  6E                 	db	110	;'n'
   289  00FEE3  73                 	db	115	;'s'
   290  00FEE4  65                 	db	101	;'e'
   291  00FEE5  72                 	db	114	;'r'
   292  00FEE6  74                 	db	116	;'t'
   293  00FEE7  20                 	db	32
   294  00FEE8  6E                 	db	110	;'n'
   295  00FEE9  65                 	db	101	;'e'
   296  00FEEA  77                 	db	119	;'w'
   297  00FEEB  20                 	db	32
   298  00FEEC  50                 	db	80	;'P'
   299  00FEED  61                 	db	97	;'a'
   300  00FEEE  73                 	db	115	;'s'
   301  00FEEF  73                 	db	115	;'s'
   302  00FEF0  77                 	db	119	;'w'
   303  00FEF1  6F                 	db	111	;'o'
   304  00FEF2  72                 	db	114	;'r'
   305  00FEF3  64                 	db	100	;'d'
   306  00FEF4  20                 	db	32
   307  00FEF5  00                 	db	0
   308  00FEF6                     STR_27:
   309                           
   310                           ; BSR set to: 15
   311  00FEF6  25                 	db	37
   312  00FEF7  73                 	db	115	;'s'
   313  00FEF8  20                 	db	32
   314  00FEF9  25                 	db	37
   315  00FEFA  30                 	db	48	;'0'
   316  00FEFB  32                 	db	50	;'2'
   317  00FEFC  69                 	db	105	;'i'
   318  00FEFD  3A                 	db	58	;':'
   319  00FEFE  25                 	db	37
   320  00FEFF  30                 	db	48	;'0'
   321  00FF00  32                 	db	50	;'2'
   322  00FF01  69                 	db	105	;'i'
   323  00FF02  3A                 	db	58	;':'
   324  00FF03  25                 	db	37
   325  00FF04  30                 	db	48	;'0'
   326  00FF05  32                 	db	50	;'2'
   327  00FF06  69                 	db	105	;'i'
   328  00FF07  00                 	db	0
   329  00FF08                     STR_18:
   330                           
   331                           ; BSR set to: 15
   332  00FF08  20                 	db	32
   333  00FF09  20                 	db	32
   334  00FF0A  20                 	db	32
   335  00FF0B  20                 	db	32
   336  00FF0C  20                 	db	32
   337  00FF0D  20                 	db	32
   338  00FF0E  20                 	db	32
   339  00FF0F  20                 	db	32
   340  00FF10  20                 	db	32
   341  00FF11  20                 	db	32
   342  00FF12  20                 	db	32
   343  00FF13  20                 	db	32
   344  00FF14  20                 	db	32
   345  00FF15  20                 	db	32
   346  00FF16  20                 	db	32
   347  00FF17  20                 	db	32
   348  00FF18  00                 	db	0
   349  00FF19                     STR_17:
   350                           
   351                           ; BSR set to: 15
   352  00FF19  41                 	db	65	;'A'
   353  00FF1A  6C                 	db	108	;'l'
   354  00FF1B  61                 	db	97	;'a'
   355  00FF1C  72                 	db	114	;'r'
   356  00FF1D  6D                 	db	109	;'m'
   357  00FF1E  20                 	db	32
   358  00FF1F  61                 	db	97	;'a'
   359  00FF20  63                 	db	99	;'c'
   360  00FF21  74                 	db	116	;'t'
   361  00FF22  69                 	db	105	;'i'
   362  00FF23  76                 	db	118	;'v'
   363  00FF24  61                 	db	97	;'a'
   364  00FF25  74                 	db	116	;'t'
   365  00FF26  65                 	db	101	;'e'
   366  00FF27  64                 	db	100	;'d'
   367  00FF28  20                 	db	32
   368  00FF29  00                 	db	0
   369  00FF2A                     STR_38:
   370                           
   371                           ; BSR set to: 15
   372  00FF2A  49                 	db	73	;'I'
   373  00FF2B  6E                 	db	110	;'n'
   374  00FF2C  73                 	db	115	;'s'
   375  00FF2D  65                 	db	101	;'e'
   376  00FF2E  72                 	db	114	;'r'
   377  00FF2F  74                 	db	116	;'t'
   378  00FF30  20                 	db	32
   379  00FF31  50                 	db	80	;'P'
   380  00FF32  61                 	db	97	;'a'
   381  00FF33  73                 	db	115	;'s'
   382  00FF34  73                 	db	115	;'s'
   383  00FF35  77                 	db	119	;'w'
   384  00FF36  6F                 	db	111	;'o'
   385  00FF37  72                 	db	114	;'r'
   386  00FF38  64                 	db	100	;'d'
   387  00FF39  20                 	db	32
   388  00FF3A  00                 	db	0
   389  00FF3B                     STR_8:
   390                           
   391                           ; BSR set to: 15
   392  00FF3B  25                 	db	37
   393  00FF3C  30                 	db	48	;'0'
   394  00FF3D  32                 	db	50	;'2'
   395  00FF3E  75                 	db	117	;'u'
   396  00FF3F  2F                 	db	47
   397  00FF40  25                 	db	37
   398  00FF41  30                 	db	48	;'0'
   399  00FF42  32                 	db	50	;'2'
   400  00FF43  75                 	db	117	;'u'
   401  00FF44  2F                 	db	47
   402  00FF45  25                 	db	37
   403  00FF46  30                 	db	48	;'0'
   404  00FF47  32                 	db	50	;'2'
   405  00FF48  75                 	db	117	;'u'
   406  00FF49  00                 	db	0
   407  00FF4A                     STR_9:
   408                           
   409                           ; BSR set to: 15
   410  00FF4A  25                 	db	37
   411  00FF4B  30                 	db	48	;'0'
   412  00FF4C  32                 	db	50	;'2'
   413  00FF4D  75                 	db	117	;'u'
   414  00FF4E  3A                 	db	58	;':'
   415  00FF4F  25                 	db	37
   416  00FF50  30                 	db	48	;'0'
   417  00FF51  32                 	db	50	;'2'
   418  00FF52  75                 	db	117	;'u'
   419  00FF53  3A                 	db	58	;':'
   420  00FF54  25                 	db	37
   421  00FF55  30                 	db	48	;'0'
   422  00FF56  32                 	db	50	;'2'
   423  00FF57  75                 	db	117	;'u'
   424  00FF58  00                 	db	0
   425  00FF59                     STR_28:
   426                           
   427                           ; BSR set to: 15
   428  00FF59  41                 	db	65	;'A'
   429  00FF5A  63                 	db	99	;'c'
   430  00FF5B  74                 	db	116	;'t'
   431  00FF5C  69                 	db	105	;'i'
   432  00FF5D  76                 	db	118	;'v'
   433  00FF5E  65                 	db	101	;'e'
   434  00FF5F  20                 	db	32
   435  00FF60  20                 	db	32
   436  00FF61  00                 	db	0
   437  00FF62                     STR_33:
   438                           
   439                           ; BSR set to: 15
   440  00FF62  50                 	db	80	;'P'
   441  00FF63  72                 	db	114	;'r'
   442  00FF64  65                 	db	101	;'e'
   443  00FF65  73                 	db	115	;'s'
   444  00FF66  73                 	db	115	;'s'
   445  00FF67  20                 	db	32
   446  00FF68  41                 	db	65	;'A'
   447  00FF69  20                 	db	32
   448  00FF6A  00                 	db	0
   449  00FF6B                     STR_11:
   450                           
   451                           ; BSR set to: 15
   452  00FF6B  50                 	db	80	;'P'
   453  00FF6C  61                 	db	97	;'a'
   454  00FF6D  73                 	db	115	;'s'
   455  00FF6E  73                 	db	115	;'s'
   456  00FF6F  77                 	db	119	;'w'
   457  00FF70  6F                 	db	111	;'o'
   458  00FF71  72                 	db	114	;'r'
   459  00FF72  64                 	db	100	;'d'
   460  00FF73  00                 	db	0
   461  00FF74                     STR_32:
   462                           
   463                           ; BSR set to: 15
   464  00FF74  45                 	db	69	;'E'
   465  00FF75  64                 	db	100	;'d'
   466  00FF76  74                 	db	116	;'t'
   467  00FF77  20                 	db	32
   468  00FF78  44                 	db	68	;'D'
   469  00FF79  61                 	db	97	;'a'
   470  00FF7A  74                 	db	116	;'t'
   471  00FF7B  65                 	db	101	;'e'
   472  00FF7C  00                 	db	0
   473  00FF7D                     STR_34:
   474                           
   475                           ; BSR set to: 15
   476  00FF7D  45                 	db	69	;'E'
   477  00FF7E  64                 	db	100	;'d'
   478  00FF7F  74                 	db	116	;'t'
   479  00FF80  20                 	db	32
   480  00FF81  48                 	db	72	;'H'
   481  00FF82  6F                 	db	111	;'o'
   482  00FF83  75                 	db	117	;'u'
   483  00FF84  72                 	db	114	;'r'
   484  00FF85  00                 	db	0
   485  00FF86                     STR_29:
   486                           
   487                           ; BSR set to: 15
   488  00FF86  45                 	db	69	;'E'
   489  00FF87  64                 	db	100	;'d'
   490  00FF88  74                 	db	116	;'t'
   491  00FF89  20                 	db	32
   492  00FF8A  50                 	db	80	;'P'
   493  00FF8B  61                 	db	97	;'a'
   494  00FF8C  73                 	db	115	;'s'
   495  00FF8D  73                 	db	115	;'s'
   496  00FF8E  00                 	db	0
   497  00FF8F                     STR_36:
   498                           
   499                           ; BSR set to: 15
   500  00FF8F  41                 	db	65	;'A'
   501  00FF90  63                 	db	99	;'c'
   502  00FF91  74                 	db	116	;'t'
   503  00FF92  69                 	db	105	;'i'
   504  00FF93  76                 	db	118	;'v'
   505  00FF94  65                 	db	101	;'e'
   506  00FF95  20                 	db	32
   507  00FF96  00                 	db	0
   508  00FF97                     STR_23:
   509                           
   510                           ; BSR set to: 15
   511  00FF97  73                 	db	115	;'s'
   512  00FF98  65                 	db	101	;'e'
   513  00FF99  6E                 	db	110	;'n'
   514  00FF9A  73                 	db	115	;'s'
   515  00FF9B  6F                 	db	111	;'o'
   516  00FF9C  72                 	db	114	;'r'
   517  00FF9D  31                 	db	49	;'1'
   518  00FF9E  00                 	db	0
   519  00FF9F                     STR_24:
   520                           
   521                           ; BSR set to: 15
   522  00FF9F  73                 	db	115	;'s'
   523  00FFA0  65                 	db	101	;'e'
   524  00FFA1  6E                 	db	110	;'n'
   525  00FFA2  73                 	db	115	;'s'
   526  00FFA3  6F                 	db	111	;'o'
   527  00FFA4  72                 	db	114	;'r'
   528  00FFA5  32                 	db	50	;'2'
   529  00FFA6  00                 	db	0
   530  00FFA7                     STR_25:
   531                           
   532                           ; BSR set to: 15
   533  00FFA7  73                 	db	115	;'s'
   534  00FFA8  65                 	db	101	;'e'
   535  00FFA9  6E                 	db	110	;'n'
   536  00FFAA  73                 	db	115	;'s'
   537  00FFAB  6F                 	db	111	;'o'
   538  00FFAC  72                 	db	114	;'r'
   539  00FFAD  33                 	db	51	;'3'
   540  00FFAE  00                 	db	0
   541  00FFAF                     STR_15:
   542                           
   543                           ; BSR set to: 15
   544  00FFAF  50                 	db	80	;'P'
   545  00FFB0  72                 	db	114	;'r'
   546  00FFB1  65                 	db	101	;'e'
   547  00FFB2  73                 	db	115	;'s'
   548  00FFB3  73                 	db	115	;'s'
   549  00FFB4  20                 	db	32
   550  00FFB5  41                 	db	65	;'A'
   551  00FFB6  00                 	db	0
   552  00FFB7                     STR_22:
   553                           
   554                           ; BSR set to: 15
   555  00FFB7  33                 	db	51	;'3'
   556  00FFB8  20                 	db	32
   557  00FFB9  74                 	db	116	;'t'
   558  00FFBA  72                 	db	114	;'r'
   559  00FFBB  69                 	db	105	;'i'
   560  00FFBC  65                 	db	101	;'e'
   561  00FFBD  73                 	db	115	;'s'
   562  00FFBE  00                 	db	0
   563  00FFBF                     STR_43:
   564                           
   565                           ; BSR set to: 15
   566  00FFBF  28                 	db	40
   567  00FFC0  6E                 	db	110	;'n'
   568  00FFC1  75                 	db	117	;'u'
   569  00FFC2  6C                 	db	108	;'l'
   570  00FFC3  6C                 	db	108	;'l'
   571  00FFC4  29                 	db	41
   572  00FFC5  00                 	db	0
   573  00FFC6                     STR_10:
   574                           
   575                           ; BSR set to: 15
   576  00FFC6  49                 	db	73	;'I'
   577  00FFC7  6E                 	db	110	;'n'
   578  00FFC8  73                 	db	115	;'s'
   579  00FFC9  65                 	db	101	;'e'
   580  00FFCA  72                 	db	114	;'r'
   581  00FFCB  74                 	db	116	;'t'
   582  00FFCC  00                 	db	0
   583  00FFCD                     STR_7:
   584                           
   585                           ; BSR set to: 15
   586  00FFCD  63                 	db	99	;'c'
   587  00FFCE  61                 	db	97	;'a'
   588  00FFCF  75                 	db	117	;'u'
   589  00FFD0  73                 	db	115	;'s'
   590  00FFD1  61                 	db	97	;'a'
   591  00FFD2  00                 	db	0
   592  00FFD3                     STR_1:
   593                           
   594                           ; BSR set to: 15
   595  00FFD3  20                 	db	32
   596  00FFD4  44                 	db	68	;'D'
   597  00FFD5  69                 	db	105	;'i'
   598  00FFD6  61                 	db	97	;'a'
   599  00FFD7  00                 	db	0
   600  00FFD8                     STR_4:
   601                           
   602                           ; BSR set to: 15
   603  00FFD8  48                 	db	72	;'H'
   604  00FFD9  6F                 	db	111	;'o'
   605  00FFDA  72                 	db	114	;'r'
   606  00FFDB  61                 	db	97	;'a'
   607  00FFDC  00                 	db	0
   608  00FFDD                     STR_6:
   609                           
   610                           ; BSR set to: 15
   611  00FFDD  20                 	db	32
   612  00FFDE  53                 	db	83	;'S'
   613  00FFDF  65                 	db	101	;'e'
   614  00FFE0  67                 	db	103	;'g'
   615  00FFE1  00                 	db	0
   616  00FFE2                     STR_5:
   617                           
   618                           ; BSR set to: 15
   619  00FFE2  20                 	db	32
   620  00FFE3  4D                 	db	77	;'M'
   621  00FFE4  69                 	db	105	;'i'
   622  00FFE5  6E                 	db	110	;'n'
   623  00FFE6  00                 	db	0
   624  00FFE7                     STR_3:
   625                           
   626                           ; BSR set to: 15
   627  00FFE7  41                 	db	65	;'A'
   628  00FFE8  6E                 	db	110	;'n'
   629  00FFE9  69                 	db	105	;'i'
   630  00FFEA  6F                 	db	111	;'o'
   631  00FFEB  00                 	db	0
   632  00FFEC                     STR_2:
   633                           
   634                           ; BSR set to: 15
   635  00FFEC  20                 	db	32
   636  00FFED  4D                 	db	77	;'M'
   637  00FFEE  65                 	db	101	;'e'
   638  00FFEF  73                 	db	115	;'s'
   639  00FFF0  00                 	db	0
   640  00FFF1                     STR_14:
   641                           
   642                           ; BSR set to: 15
   643  00FFF1  25                 	db	37
   644  00FFF2  30                 	db	48	;'0'
   645  00FFF3  31                 	db	49	;'1'
   646  00FFF4  75                 	db	117	;'u'
   647  00FFF5  00                 	db	0
   648  0000                     
   649                           ; #config settings
   650  00FFF6  00                 	db	0	; dummy byte at the end
   651  0000                     
   652                           	psect	nvBANK0
   653  0000E9                     __pnvBANK0:
   654                           	opt stack 0
   655  0000E9                     _anio_d:
   656                           	opt stack 0
   657  0000E9                     	ds	1
   658  0000EA                     _anio_u:
   659                           	opt stack 0
   660  0000EA                     	ds	1
   661  0000EB                     _dia_semana:
   662                           	opt stack 0
   663  0000EB                     	ds	1
   664  0000EC                     _mes_d:
   665                           	opt stack 0
   666  0000EC                     	ds	1
   667  0000ED                     _mes_u:
   668                           	opt stack 0
   669  0000ED                     	ds	1
   670  0000EE                     _fecha_d:
   671                           	opt stack 0
   672  0000EE                     	ds	1
   673  0000EF                     _fecha_u:
   674                           	opt stack 0
   675  0000EF                     	ds	1
   676  0000F0                     _hora_d:
   677                           	opt stack 0
   678  0000F0                     	ds	1
   679  0000F1                     _hora_u:
   680                           	opt stack 0
   681  0000F1                     	ds	1
   682  0000F2                     _minuto_d:
   683                           	opt stack 0
   684  0000F2                     	ds	1
   685  0000F3                     _minuto_u:
   686                           	opt stack 0
   687  0000F3                     	ds	1
   688  0000F4                     _segundo_d:
   689                           	opt stack 0
   690  0000F4                     	ds	1
   691  0000F5                     _segundo_u:
   692                           	opt stack 0
   693  0000F5                     	ds	1
   694  0000                     _RTCCFG	set	3903
   695  0000                     _ANCON1	set	3913
   696  0000                     _ANCON0	set	3912
   697  0000                     _RTCCFGbits	set	3903
   698  0000                     _ALRMCFGbits	set	3985
   699  0000                     _EECON2	set	4007
   700  0000                     _INTCONbits	set	4082
   701  0000                     _RTCVALH	set	3993
   702  0000                     _RTCVALL	set	3992
   703  0000                     _TRISBbits	set	3987
   704  0000                     _T1CONbits	set	4045
   705  0000                     _TRISC	set	3988
   706  0000                     _TRISB	set	3987
   707  0000                     _TRISA	set	3986
   708  0000                     _OSCCONbits	set	4051
   709  0000                     _OSCTUNEbits	set	3995
   710  0000                     _LATBbits	set	3978
   711  0000                     _PORTCbits	set	3970
   712  0000                     _PORTAbits	set	3968
   713  0000                     _LATAbits	set	3977
   714  0000                     _PIE3bits	set	4003
   715                           
   716                           	psect	cinit
   717  00D346                     __pcinit:
   718                           	opt stack 0
   719  00D346                     start_initialization:
   720                           	opt stack 0
   721  00D346                     __initialization:
   722                           	opt stack 0
   723                           
   724                           ; Initialize objects allocated to BANK1 (12 bytes)
   725                           ; load TBLPTR registers with __pidataBANK1
   726  00D346  0EC0               	movlw	low __pidataBANK1
   727  00D348  6EF6               	movwf	tblptrl,c
   728  00D34A  0ECE               	movlw	high __pidataBANK1
   729  00D34C  6EF7               	movwf	tblptrh,c
   730  00D34E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   731  00D350  6EF8               	movwf	tblptru,c
   732  00D352  EE01  F028         	lfsr	0,__pdataBANK1
   733  00D356  EE10 F00C          	lfsr	1,12
   734  00D35A                     copy_data0:
   735  00D35A  0009               	tblrd		*+
   736  00D35C  CFF5 FFEE          	movff	tablat,postinc0
   737  00D360  50E5               	movf	postdec1,w,c
   738  00D362  50E1               	movf	fsr1l,w,c
   739  00D364  E1FA               	bnz	copy_data0
   740                           
   741                           ; Initialize objects allocated to BANK0 (22 bytes)
   742                           ; load TBLPTR registers with __pidataBANK0
   743  00D366  0E1A               	movlw	low __pidataBANK0
   744  00D368  6EF6               	movwf	tblptrl,c
   745  00D36A  0ECF               	movlw	high __pidataBANK0
   746  00D36C  6EF7               	movwf	tblptrh,c
   747  00D36E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   748  00D370  6EF8               	movwf	tblptru,c
   749  00D372  EE00  F0BD         	lfsr	0,__pdataBANK0
   750  00D376  EE10 F016          	lfsr	1,22
   751  00D37A                     copy_data1:
   752  00D37A  0009               	tblrd		*+
   753  00D37C  CFF5 FFEE          	movff	tablat,postinc0
   754  00D380  50E5               	movf	postdec1,w,c
   755  00D382  50E1               	movf	fsr1l,w,c
   756  00D384  E1FA               	bnz	copy_data1
   757                           
   758                           ; Clear objects allocated to BANK1 (40 bytes)
   759  00D386  EE01  F000         	lfsr	0,__pbssBANK1
   760  00D38A  0E28               	movlw	40
   761  00D38C                     clear_0:
   762  00D38C  6AEE               	clrf	postinc0,c
   763  00D38E  06E8               	decf	wreg,f,c
   764  00D390  E1FD               	bnz	clear_0
   765                           
   766                           ; Clear objects allocated to BITBANK0 (1 bytes)
   767  00D392  0100               	movlb	0
   768  00D394  6BF6               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   769                           
   770                           ; Clear objects allocated to BANK0 (93 bytes)
   771  00D396  EE00  F060         	lfsr	0,__pbssBANK0
   772  00D39A  0E5D               	movlw	93
   773  00D39C                     clear_1:
   774  00D39C  6AEE               	clrf	postinc0,c
   775  00D39E  06E8               	decf	wreg,f,c
   776  00D3A0  E1FD               	bnz	clear_1
   777  00D3A2                     end_of_initialization:
   778                           	opt stack 0
   779  00D3A2                     __end_of__initialization:
   780                           	opt stack 0
   781  00D3A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   782  00D3A4  6EF8               	movwf	tblptru,c
   783  00D3A6  0100               	movlb	0
   784  00D3A8  EFD6  F067         	goto	_main	;jump to C main() function
   785                           tblptru	equ	0xFF8
   786                           tblptrh	equ	0xFF7
   787                           tblptrl	equ	0xFF6
   788                           tablat	equ	0xFF5
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           postdec1	equ	0xFE5
   792                           fsr1l	equ	0xFE1
   793                           
   794                           	psect	bitbssBANK0
   795  0007B0                     __pbitbssBANK0:
   796                           	opt stack 0
   797  0007B0                     _flag:
   798                           	opt stack 0
   799  0007B0                     	ds	1
   800                           tblptru	equ	0xFF8
   801                           tblptrh	equ	0xFF7
   802                           tblptrl	equ	0xFF6
   803                           tablat	equ	0xFF5
   804                           postinc0	equ	0xFEE
   805                           wreg	equ	0xFE8
   806                           postdec1	equ	0xFE5
   807                           fsr1l	equ	0xFE1
   808                           
   809                           	psect	bssBANK0
   810  000060                     __pbssBANK0:
   811                           	opt stack 0
   812  000060                     _array_contrasenia_ingresada:
   813                           	opt stack 0
   814  000060                     	ds	8
   815  000068                     _Rtcc_read_TimeDate:
   816                           	opt stack 0
   817  000068                     	ds	8
   818  000070                     _RtccAlrmTimeDate:
   819                           	opt stack 0
   820  000070                     	ds	8
   821  000078                     _RtccTimeDate:
   822                           	opt stack 0
   823  000078                     	ds	8
   824  000080                     _numeros_para_fecha:
   825                           	opt stack 0
   826  000080                     	ds	4
   827  000084                     _RtccTimeVal:
   828                           	opt stack 0
   829  000084                     	ds	4
   830  000088                     _errno:
   831                           	opt stack 0
   832  000088                     	ds	2
   833  00008A                     _txt_pantalla_edicion:
   834                           	opt stack 0
   835  00008A                     	ds	2
   836  00008C                     _txt_alarma_activada:
   837                           	opt stack 0
   838  00008C                     	ds	2
   839  00008E                     _txt_insertar_contrasenia:
   840                           	opt stack 0
   841  00008E                     	ds	2
   842  000090                     _boton_seleccionar:
   843                           	opt stack 0
   844  000090                     	ds	2
   845  000092                     _segundos_ultimo_reporte:
   846                           	opt stack 0
   847  000092                     	ds	2
   848  000094                     _minutos_ultimo_reporte:
   849                           	opt stack 0
   850  000094                     	ds	2
   851  000096                     _hora_ultimo_reporte:
   852                           	opt stack 0
   853  000096                     	ds	2
   854  000098                     _anio_ultimo_reporte:
   855                           	opt stack 0
   856  000098                     	ds	2
   857  00009A                     _mes_ultimo_reporte:
   858                           	opt stack 0
   859  00009A                     	ds	2
   860  00009C                     _dia_ultimo_reporte:
   861                           	opt stack 0
   862  00009C                     	ds	2
   863  00009E                     _alarma_sonando:
   864                           	opt stack 0
   865  00009E                     	ds	2
   866  0000A0                     _alarma_activada:
   867                           	opt stack 0
   868  0000A0                     	ds	2
   869  0000A2                     _motivo_ingreso_de_numeros:
   870                           	opt stack 0
   871  0000A2                     	ds	2
   872  0000A4                     _numeros_ingresados:
   873                           	opt stack 0
   874  0000A4                     	ds	2
   875  0000A6                     _segundo:
   876                           	opt stack 0
   877  0000A6                     	ds	2
   878  0000A8                     _k:
   879                           	opt stack 0
   880  0000A8                     	ds	2
   881  0000AA                     _c:
   882                           	opt stack 0
   883  0000AA                     	ds	2
   884  0000AC                     _b:
   885                           	opt stack 0
   886  0000AC                     	ds	2
   887  0000AE                     _a:
   888                           	opt stack 0
   889  0000AE                     	ds	2
   890  0000B0                     _j:
   891                           	opt stack 0
   892  0000B0                     	ds	2
   893  0000B2                     _i:
   894                           	opt stack 0
   895  0000B2                     	ds	2
   896  0000B4                     _key:
   897                           	opt stack 0
   898  0000B4                     	ds	1
   899  0000B5                     _RtccDate:
   900                           	opt stack 0
   901  0000B5                     	ds	4
   902  0000B9                     _RtccTime:
   903                           	opt stack 0
   904  0000B9                     	ds	4
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           postdec1	equ	0xFE5
   912                           fsr1l	equ	0xFE1
   913                           
   914                           	psect	dataBANK0
   915  0000BD                     __pdataBANK0:
   916                           	opt stack 0
   917  0000BD                     _array_contrasenia:
   918                           	opt stack 0
   919  0000BD                     	ds	8
   920  0000C5                     _causa_reporte:
   921                           	opt stack 0
   922  0000C5                     	ds	2
   923  0000C7                     _minuto:
   924                           	opt stack 0
   925  0000C7                     	ds	2
   926  0000C9                     _hora:
   927                           	opt stack 0
   928  0000C9                     	ds	2
   929  0000CB                     _dia:
   930                           	opt stack 0
   931  0000CB                     	ds	2
   932  0000CD                     _diasem:
   933                           	opt stack 0
   934  0000CD                     	ds	2
   935  0000CF                     _mes:
   936                           	opt stack 0
   937  0000CF                     	ds	2
   938  0000D1                     _anio:
   939                           	opt stack 0
   940  0000D1                     	ds	2
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           postinc0	equ	0xFEE
   946                           wreg	equ	0xFE8
   947                           postdec1	equ	0xFE5
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK1
   951  000100                     __pbssBANK1:
   952                           	opt stack 0
   953  000100                     _buffer3:
   954                           	opt stack 0
   955  000100                     	ds	20
   956  000114                     _buffer2:
   957                           	opt stack 0
   958  000114                     	ds	20
   959                           tblptru	equ	0xFF8
   960                           tblptrh	equ	0xFF7
   961                           tblptrl	equ	0xFF6
   962                           tablat	equ	0xFF5
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postdec1	equ	0xFE5
   966                           fsr1l	equ	0xFE1
   967                           
   968                           	psect	dataBANK1
   969  000128                     __pdataBANK1:
   970                           	opt stack 0
   971  000128                     _array_seleccionar:
   972                           	opt stack 0
   973  000128                     	ds	12
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	cstackBANK0
   984  0000D3                     __pcstackBANK0:
   985                           	opt stack 0
   986  0000D3                     _covertir_valores_de_array_a_escala_decimal$2493:
   987                           	opt stack 0
   988                           
   989                           ; 3 bytes @ 0x0
   990  0000D3                     	ds	3
   991  0000D6                     _covertir_valores_de_array_a_escala_decimal$2494:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x3
   995  0000D6                     	ds	3
   996  0000D9                     covertir_valores_de_array_a_escala_decimal@numero:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x6
  1000  0000D9                     	ds	2
  1001  0000DB                     covertir_valores_de_array_a_escala_decimal@i:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x8
  1005  0000DB                     	ds	2
  1006  0000DD                     editar_fecha_reloj_digital@dia_ingresado:
  1007                           	opt stack 0
  1008  0000DD                     editar_hora_reloj_digital@hora_ingresada:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0xA
  1012  0000DD                     	ds	2
  1013  0000DF                     editar_fecha_reloj_digital@mes_ingresado:
  1014                           	opt stack 0
  1015  0000DF                     editar_hora_reloj_digital@minuto_ingresado:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0xC
  1019  0000DF                     	ds	2
  1020  0000E1                     editar_fecha_reloj_digital@anio_ingresado:
  1021                           	opt stack 0
  1022  0000E1                     editar_hora_reloj_digital@segundo_ingresado:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0xE
  1026  0000E1                     	ds	2
  1027  0000E3                     editar_fecha_reloj_digital@posicion:
  1028                           	opt stack 0
  1029  0000E3                     editar_hora_reloj_digital@posicion:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x10
  1033  0000E3                     	ds	2
  1034  0000E5                     ??_ir_a_pantalla_edicion:
  1035                           
  1036                           ; 1 bytes @ 0x12
  1037  0000E5                     	ds	1
  1038  0000E6                     ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x13
  1042  0000E6                     	ds	2
  1043  0000E8                     ??_main:
  1044                           
  1045                           ; 1 bytes @ 0x15
  1046  0000E8                     	ds	1
  1047                           tblptru	equ	0xFF8
  1048                           tblptrh	equ	0xFF7
  1049                           tblptrl	equ	0xFF6
  1050                           tablat	equ	0xFF5
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           postdec1	equ	0xFE5
  1054                           fsr1l	equ	0xFE1
  1055                           
  1056                           	psect	cstackCOMRAM
  1057  000001                     __pcstackCOMRAM:
  1058                           	opt stack 0
  1059  000001                     ??_isdigit:
  1060  000001                     ??_cambiar_opcion:
  1061  000001                     ??_lcd_send_nibble:
  1062  000001                     ?_verificar_contrasenia:
  1063                           	opt stack 0
  1064  000001                     ?___awdiv:
  1065                           	opt stack 0
  1066  000001                     ?___lwdiv:
  1067                           	opt stack 0
  1068  000001                     ?___ftpack:
  1069                           	opt stack 0
  1070  000001                     ?_frexp:
  1071                           	opt stack 0
  1072  000001                     ?___ftneg:
  1073                           	opt stack 0
  1074  000001                     Delay100TCYx@unit:
  1075                           	opt stack 0
  1076  000001                     Delay1KTCYx@unit:
  1077                           	opt stack 0
  1078  000001                     RtccReadDate@pDt:
  1079                           	opt stack 0
  1080  000001                     RtccReadTime@pTm:
  1081                           	opt stack 0
  1082  000001                     RtccWriteDate@pDt:
  1083                           	opt stack 0
  1084  000001                     RtccWriteTime@pTm:
  1085                           	opt stack 0
  1086  000001                     ___awdiv@dividend:
  1087                           	opt stack 0
  1088  000001                     ___lwdiv@dividend:
  1089                           	opt stack 0
  1090  000001                     ___ftpack@arg:
  1091                           	opt stack 0
  1092  000001                     ___ftge@ff1:
  1093                           	opt stack 0
  1094  000001                     ___ftneg@f1:
  1095                           	opt stack 0
  1096  000001                     frexp@value:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x0
  1100  000001                     	ds	1
  1101  000002                     lcd_send_nibble@nibble:
  1102                           	opt stack 0
  1103  000002                     _isdigit$2012:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x1
  1107  000002                     	ds	1
  1108  000003                     lcd_send_byte@n:
  1109                           	opt stack 0
  1110  000003                     RtccWriteDate@di:
  1111                           	opt stack 0
  1112  000003                     RtccWriteTime@di:
  1113                           	opt stack 0
  1114  000003                     isdigit@c:
  1115                           	opt stack 0
  1116  000003                     ___awdiv@divisor:
  1117                           	opt stack 0
  1118  000003                     ___lwdiv@divisor:
  1119                           	opt stack 0
  1120  000003                     RtccReadDate@rTD1:
  1121                           	opt stack 0
  1122  000003                     RtccReadTime@rTD1:
  1123                           	opt stack 0
  1124                           
  1125                           ; 8 bytes @ 0x2
  1126  000003                     	ds	1
  1127  000004                     lcd_send_byte@address:
  1128                           	opt stack 0
  1129  000004                     ___ftpack@exp:
  1130                           	opt stack 0
  1131  000004                     frexp@eptr:
  1132                           	opt stack 0
  1133  000004                     ___ftge@ff2:
  1134                           	opt stack 0
  1135                           
  1136                           ; 3 bytes @ 0x3
  1137  000004                     	ds	1
  1138  000005                     lcd_init@i:
  1139                           	opt stack 0
  1140  000005                     lcd_gotoxy@y:
  1141                           	opt stack 0
  1142  000005                     lcd_comand@d:
  1143                           	opt stack 0
  1144  000005                     RtccWriteDate@wasOn:
  1145                           	opt stack 0
  1146  000005                     RtccWriteTime@wasOn:
  1147                           	opt stack 0
  1148  000005                     ___awdiv@counter:
  1149                           	opt stack 0
  1150  000005                     ___ftpack@sign:
  1151                           	opt stack 0
  1152  000005                     ___lwdiv@quotient:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x4
  1156  000005                     	ds	1
  1157  000006                     ??___ftpack:
  1158  000006                     ??_frexp:
  1159  000006                     lcd_gotoxy@x:
  1160                           	opt stack 0
  1161  000006                     RtccWriteDate@wasAlrm:
  1162                           	opt stack 0
  1163  000006                     RtccWriteTime@wasAlrm:
  1164                           	opt stack 0
  1165  000006                     ___awdiv@sign:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x5
  1169  000006                     	ds	1
  1170  000007                     ??___ftge:
  1171  000007                     lcd_gotoxy@address:
  1172                           	opt stack 0
  1173  000007                     RtccWriteTime@wasWrEn:
  1174                           	opt stack 0
  1175  000007                     ___lwdiv@counter:
  1176                           	opt stack 0
  1177  000007                     verificar_contrasenia@equals:
  1178                           	opt stack 0
  1179  000007                     RtccWriteDate@tempYear:
  1180                           	opt stack 0
  1181  000007                     ___awdiv@quotient:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x6
  1185  000007                     	ds	1
  1186  000008                     ?___lwmod:
  1187                           	opt stack 0
  1188  000008                     lcd_putc@c:
  1189                           	opt stack 0
  1190  000008                     RtccWriteTime@tempMinSec:
  1191                           	opt stack 0
  1192  000008                     ___lwmod@dividend:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x7
  1196  000008                     	ds	1
  1197  000009                     ?___ftdiv:
  1198                           	opt stack 0
  1199  000009                     ?___awtoft:
  1200                           	opt stack 0
  1201  000009                     ?___lltoft:
  1202                           	opt stack 0
  1203  000009                     RtccWriteDate@wasWrEn:
  1204                           	opt stack 0
  1205  000009                     verificar_contrasenia@i:
  1206                           	opt stack 0
  1207  000009                     lcd_putrs@ptr:
  1208                           	opt stack 0
  1209  000009                     ___awtoft@c:
  1210                           	opt stack 0
  1211  000009                     ___ftdiv@f1:
  1212                           	opt stack 0
  1213  000009                     ___lltoft@c:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x8
  1217  000009                     	ds	1
  1218  00000A                     RtccWriteDate@tempDayMonth:
  1219                           	opt stack 0
  1220  00000A                     RtccWriteTime@tempHourWDay:
  1221                           	opt stack 0
  1222  00000A                     ___lwmod@divisor:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x9
  1226  00000A                     	ds	1
  1227  00000B                     ??_titila_texto_insert_password:
  1228  00000B                     ??_titila_alarma_activada:
  1229  00000B                     ??_titila_opcion:
  1230  00000B                     ??_selecciona_opcion_fecha_hora:
  1231  00000B                     resetear_pantalla_ingresar_contrasenia@i:
  1232                           	opt stack 0
  1233  00000B                     RtccReadDate@rTD0:
  1234                           	opt stack 0
  1235  00000B                     RtccReadTime@rTD0:
  1236                           	opt stack 0
  1237                           
  1238                           ; 8 bytes @ 0xA
  1239  00000B                     	ds	1
  1240  00000C                     ___awtoft@sign:
  1241                           	opt stack 0
  1242  00000C                     ___lwmod@counter:
  1243                           	opt stack 0
  1244  00000C                     RtccWriteDate@tempHourWDay:
  1245                           	opt stack 0
  1246  00000C                     ___ftdiv@f2:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0xB
  1250  00000C                     	ds	1
  1251  00000D                     ??___lltoft:
  1252  00000D                     ?___ftmul:
  1253                           	opt stack 0
  1254  00000D                     ?___fttol:
  1255                           	opt stack 0
  1256  00000D                     ___ftmul@f1:
  1257                           	opt stack 0
  1258  00000D                     ___fttol@f1:
  1259                           	opt stack 0
  1260                           
  1261                           ; 3 bytes @ 0xC
  1262  00000D                     	ds	1
  1263  00000E                     
  1264                           ; 1 bytes @ 0xD
  1265  00000E                     	ds	1
  1266  00000F                     ??___ftdiv:
  1267                           
  1268                           ; 1 bytes @ 0xE
  1269  00000F                     	ds	1
  1270  000010                     ___ftmul@f2:
  1271                           	opt stack 0
  1272                           
  1273                           ; 3 bytes @ 0xF
  1274  000010                     	ds	1
  1275  000011                     ??___fttol:
  1276  000011                     ___lltoft@exp:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x10
  1280  000011                     	ds	1
  1281  000012                     ___ftdiv@cntr:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x11
  1285  000012                     	ds	1
  1286  000013                     ??___ftmul:
  1287  000013                     ___ftdiv@f3:
  1288                           	opt stack 0
  1289                           
  1290                           ; 3 bytes @ 0x12
  1291  000013                     	ds	3
  1292  000016                     ___ftdiv@exp:
  1293                           	opt stack 0
  1294  000016                     ___ftmul@exp:
  1295                           	opt stack 0
  1296  000016                     ___fttol@sign1:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x15
  1300  000016                     	ds	1
  1301  000017                     ___ftdiv@sign:
  1302                           	opt stack 0
  1303  000017                     ___ftmul@f3_as_product:
  1304                           	opt stack 0
  1305  000017                     ___fttol@lval:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x16
  1309  000017                     	ds	3
  1310  00001A                     ___ftmul@cntr:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x19
  1314  00001A                     	ds	1
  1315  00001B                     ___ftmul@sign:
  1316                           	opt stack 0
  1317  00001B                     ___fttol@exp1:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x1A
  1321  00001B                     	ds	1
  1322  00001C                     ?___wmul:
  1323                           	opt stack 0
  1324  00001C                     ?___altoft:
  1325                           	opt stack 0
  1326  00001C                     ___wmul@multiplier:
  1327                           	opt stack 0
  1328  00001C                     ___altoft@c:
  1329                           	opt stack 0
  1330                           
  1331                           ; 4 bytes @ 0x1B
  1332  00001C                     	ds	2
  1333  00001E                     ___wmul@multiplicand:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x1D
  1337  00001E                     	ds	2
  1338  000020                     ??___altoft:
  1339  000020                     ___wmul@product:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x1F
  1343  000020                     	ds	2
  1344  000022                     ?_sprintf:
  1345                           	opt stack 0
  1346  000022                     ?___ftadd:
  1347                           	opt stack 0
  1348  000022                     sprintf@sp:
  1349                           	opt stack 0
  1350  000022                     ___ftadd@f1:
  1351                           	opt stack 0
  1352                           
  1353                           ; 3 bytes @ 0x21
  1354  000022                     	ds	2
  1355  000024                     ___altoft@exp:
  1356                           	opt stack 0
  1357  000024                     sprintf@f:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0x23
  1361  000024                     	ds	1
  1362  000025                     ___altoft@sign:
  1363                           	opt stack 0
  1364  000025                     ___ftadd@f2:
  1365                           	opt stack 0
  1366                           
  1367                           ; 3 bytes @ 0x24
  1368  000025                     	ds	3
  1369  000028                     ??___ftadd:
  1370                           
  1371                           ; 1 bytes @ 0x27
  1372  000028                     	ds	3
  1373  00002B                     ___ftadd@sign:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x2A
  1377  00002B                     	ds	1
  1378  00002C                     ___ftadd@exp2:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x2B
  1382  00002C                     	ds	1
  1383  00002D                     ___ftadd@exp1:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x2C
  1387  00002D                     	ds	1
  1388  00002E                     ??_sprintf:
  1389  00002E                     ?___ftsub:
  1390                           	opt stack 0
  1391  00002E                     ?_floor:
  1392                           	opt stack 0
  1393  00002E                     ?_eval_poly:
  1394                           	opt stack 0
  1395  00002E                     ___ftsub@f1:
  1396                           	opt stack 0
  1397  00002E                     floor@x:
  1398                           	opt stack 0
  1399  00002E                     eval_poly@x:
  1400                           	opt stack 0
  1401                           
  1402                           ; 3 bytes @ 0x2D
  1403  00002E                     	ds	3
  1404  000031                     eval_poly@d:
  1405                           	opt stack 0
  1406  000031                     ___ftsub@f2:
  1407                           	opt stack 0
  1408  000031                     floor@i:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x30
  1412  000031                     	ds	1
  1413  000032                     sprintf@prec:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x31
  1417  000032                     	ds	1
  1418  000033                     sprintf@cp:
  1419                           	opt stack 0
  1420  000033                     eval_poly@n:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x32
  1424  000033                     	ds	1
  1425  000034                     floor@expon:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x33
  1429  000034                     	ds	1
  1430  000035                     ??_eval_poly:
  1431  000035                     sprintf@ap:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x34
  1435  000035                     	ds	2
  1436  000037                     sprintf@len:
  1437                           	opt stack 0
  1438  000037                     eval_poly@res:
  1439                           	opt stack 0
  1440                           
  1441                           ; 3 bytes @ 0x36
  1442  000037                     	ds	2
  1443  000039                     sprintf@val:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x38
  1447  000039                     	ds	1
  1448  00003A                     ?_log:
  1449                           	opt stack 0
  1450  00003A                     ?_ldexp:
  1451                           	opt stack 0
  1452  00003A                     ldexp@value:
  1453                           	opt stack 0
  1454  00003A                     log@x:
  1455                           	opt stack 0
  1456                           
  1457                           ; 3 bytes @ 0x39
  1458  00003A                     	ds	1
  1459  00003B                     sprintf@flag:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x3A
  1463  00003B                     	ds	1
  1464  00003C                     sprintf@c:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x3B
  1468  00003C                     	ds	1
  1469  00003D                     sprintf@width:
  1470                           	opt stack 0
  1471  00003D                     ldexp@newexp:
  1472                           	opt stack 0
  1473  00003D                     log@exponent:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x3C
  1477  00003D                     	ds	2
  1478  00003F                     ??_ldexp:
  1479  00003F                     guarda_numero_ingresado@num:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x3E
  1483  00003F                     	ds	2
  1484  000041                     ??_ingreso_numero:
  1485  000041                     ?_exp:
  1486                           	opt stack 0
  1487  000041                     exp@x:
  1488                           	opt stack 0
  1489                           
  1490                           ; 3 bytes @ 0x40
  1491  000041                     	ds	2
  1492  000043                     ??_activar_alarma:
  1493  000043                     ir_a_pantalla_editar_contrasenia@i:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x42
  1497  000043                     	ds	1
  1498  000044                     activar_alarma@intentos_de_contrasenia:
  1499                           	opt stack 0
  1500  000044                     _exp$2497:
  1501                           	opt stack 0
  1502                           
  1503                           ; 3 bytes @ 0x43
  1504  000044                     	ds	3
  1505  000047                     exp@exponent:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x46
  1509  000047                     	ds	2
  1510  000049                     exp@sign:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x48
  1514  000049                     	ds	1
  1515  00004A                     ?_pow:
  1516                           	opt stack 0
  1517  00004A                     pow@x:
  1518                           	opt stack 0
  1519                           
  1520                           ; 3 bytes @ 0x49
  1521  00004A                     	ds	3
  1522  00004D                     pow@y:
  1523                           	opt stack 0
  1524                           
  1525                           ; 3 bytes @ 0x4C
  1526  00004D                     	ds	3
  1527  000050                     _pow$2495:
  1528                           	opt stack 0
  1529                           
  1530                           ; 3 bytes @ 0x4F
  1531  000050                     	ds	3
  1532  000053                     _pow$2496:
  1533                           	opt stack 0
  1534                           
  1535                           ; 3 bytes @ 0x52
  1536  000053                     	ds	3
  1537  000056                     pow@sign:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x55
  1541  000056                     	ds	1
  1542  000057                     pow@yi:
  1543                           	opt stack 0
  1544                           
  1545                           ; 4 bytes @ 0x56
  1546  000057                     	ds	4
  1547  00005B                     ?_covertir_valores_de_array_a_escala_decimal:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x5A
  1551  00005B                     	ds	2
  1552  00005D                     ??_covertir_valores_de_array_a_escala_decimal:
  1553                           
  1554                           ; 1 bytes @ 0x5C
  1555  00005D                     	ds	2
  1556  00005F                     ??_editar_fecha_reloj_digital:
  1557  00005F                     ??_editar_hora_reloj_digital:
  1558                           
  1559                           ; 1 bytes @ 0x5E
  1560  00005F                     	ds	1
  1561  000060                     tblptru	equ	0xFF8
  1562                           tblptrh	equ	0xFF7
  1563                           tblptrl	equ	0xFF6
  1564                           tablat	equ	0xFF5
  1565                           postinc0	equ	0xFEE
  1566                           wreg	equ	0xFE8
  1567                           postdec1	equ	0xFE5
  1568                           fsr1l	equ	0xFE1
  1569                           
  1570                           ; 1 bytes @ 0x5F
  1571 ;;
  1572 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1573 ;;
  1574 ;; *************** function _main *****************
  1575 ;; Defined at:
  1576 ;;		line 824 in file "main.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  2  489[None  ] int 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1593 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1594 ;;Total ram usage:        1 bytes
  1595 ;; Hardware stack levels required when called:   13
  1596 ;; This function calls:
  1597 ;;		_Read_RTC
  1598 ;;		_ir_a_pantalla_inicial
  1599 ;;		_setup
  1600 ;; This function is called by:
  1601 ;;		Startup code after reset
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           	psect	text0
  1606  00CFAC                     __ptext0:
  1607                           	opt stack 0
  1608  00CFAC                     _main:
  1609                           	opt stack 18
  1610                           
  1611                           ;main.c: 825: setup();
  1612                           
  1613                           ;incstack = 0
  1614  00CFAC  ECAF  F068         	call	_setup	;wreg free
  1615  00CFB0                     
  1616                           ;main.c: 829: Read_RTC();
  1617  00CFB0  EC07  F075         	call	_Read_RTC	;wreg free
  1618                           
  1619                           ;main.c: 831: ir_a_pantalla_inicial();
  1620  00CFB4  EC66  F067         	call	_ir_a_pantalla_inicial	;wreg free
  1621  00CFB8  D7FB               	goto	l490
  1622                           
  1623                           ;main.c: 832: }
  1624                           ;main.c: 834: _delay((unsigned long)((98)*(8000000/4000.0)));
  1625  00CFBA  0EFF               	movlw	255
  1626  00CFBC  0100               	movlb	0	; () banked
  1627  00CFBE  6FE8               	movwf	??_main& (0+255),b
  1628  00CFC0  0E8A               	movlw	138
  1629  00CFC2                     u6777:
  1630  00CFC2  2EE8               	decfsz	wreg,f,c
  1631  00CFC4  D7FE               	bra	u6777
  1632  00CFC6  2FE8               	decfsz	??_main& (0+255),f,b
  1633  00CFC8  D7FC               	bra	u6777
  1634  00CFCA  F000               	nop	
  1635                           
  1636                           ;main.c: 835: return 0;
  1637                           ;	Return value of _main is never used
  1638  00CFCC  EF00  F000         	goto	start
  1639  00CFD0                     __end_of_main:
  1640                           	opt stack 0
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           fsr1l	equ	0xFE1
  1649                           
  1650 ;; *************** function _setup *****************
  1651 ;; Defined at:
  1652 ;;		line 786 in file "main.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;		None
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1670 ;;Total ram usage:        0 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    7
  1673 ;; This function calls:
  1674 ;;		_Write_RTC
  1675 ;;		_lcd_comand
  1676 ;;		_lcd_init
  1677 ;;		_set_reloj_digital
  1678 ;; This function is called by:
  1679 ;;		_main
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text1
  1684  00D15E                     __ptext1:
  1685                           	opt stack 0
  1686  00D15E                     _setup:
  1687                           	opt stack 23
  1688                           
  1689                           ;main.c: 787: OSCTUNEbits.INTSRC = 1;
  1690                           
  1691                           ;incstack = 0
  1692  00D15E  8E9B               	bsf	3995,7,c	;volatile
  1693                           
  1694                           ;main.c: 788: OSCTUNEbits.PLLEN = 0;
  1695  00D160  9C9B               	bcf	3995,6,c	;volatile
  1696                           
  1697                           ;main.c: 789: OSCCONbits.IRCF0 = 1;
  1698  00D162  88D3               	bsf	4051,4,c	;volatile
  1699                           
  1700                           ;main.c: 790: OSCCONbits.IRCF1 = 1;
  1701  00D164  8AD3               	bsf	4051,5,c	;volatile
  1702                           
  1703                           ;main.c: 791: OSCCONbits.IRCF2 = 1;
  1704  00D166  8CD3               	bsf	4051,6,c	;volatile
  1705                           
  1706                           ;main.c: 792: OSCCONbits.SCS0 = 0;
  1707  00D168  90D3               	bcf	4051,0,c	;volatile
  1708                           
  1709                           ;main.c: 793: OSCCONbits.SCS1 = 0;
  1710  00D16A  92D3               	bcf	4051,1,c	;volatile
  1711                           
  1712                           ;main.c: 795: TRISA = 0b11110000;
  1713  00D16C  0EF0               	movlw	240
  1714  00D16E  6E92               	movwf	3986,c	;volatile
  1715                           
  1716                           ;main.c: 796: TRISB = 0;
  1717  00D170  0E00               	movlw	0
  1718  00D172  6E93               	movwf	3987,c	;volatile
  1719                           
  1720                           ;main.c: 797: TRISC = 0b11100111;
  1721  00D174  0EE7               	movlw	231
  1722  00D176  6E94               	movwf	3988,c	;volatile
  1723                           
  1724                           ;main.c: 805: ANCON0 = 0b11111111;
  1725  00D178  010F               	movlb	15	; () banked
  1726  00D17A  6948               	setf	72,b	;volatile
  1727                           
  1728                           ; BSR set to: 15
  1729                           ;main.c: 807: ANCON1 = 0b11111111;
  1730  00D17C  010F               	movlb	15	; () banked
  1731  00D17E  6949               	setf	73,b	;volatile
  1732                           
  1733                           ; BSR set to: 15
  1734                           ;main.c: 810: RTCCFGbits.RTCEN = 1;
  1735  00D180  010F               	movlb	15	; () banked
  1736  00D182  8F3F               	bsf	63,7,b	;volatile
  1737                           
  1738                           ; BSR set to: 15
  1739                           ;main.c: 811: RTCCFGbits.RTCWREN = 1;
  1740  00D184  010F               	movlb	15	; () banked
  1741  00D186  8B3F               	bsf	63,5,b	;volatile
  1742                           
  1743                           ; BSR set to: 15
  1744                           ;main.c: 812: T1CONbits.T1OSCEN = 1;
  1745  00D188  86CD               	bsf	4045,3,c	;volatile
  1746                           
  1747                           ; BSR set to: 15
  1748                           ;main.c: 813: Write_RTC();
  1749  00D18A  EC65  F076         	call	_Write_RTC	;wreg free
  1750                           
  1751                           ;main.c: 814: lcd_init();
  1752  00D18E  EC48  F06A         	call	_lcd_init	;wreg free
  1753                           
  1754                           ;main.c: 815: lcd_comand(0b00001100);
  1755  00D192  0E0C               	movlw	12
  1756  00D194  EC6D  F067         	call	_lcd_comand
  1757                           
  1758                           ;main.c: 816: LATBbits.LATB2 = 0;;
  1759  00D198  948A               	bcf	3978,2,c	;volatile
  1760                           
  1761                           ;main.c: 817: LATBbits.LATB1 = 0;;
  1762  00D19A  928A               	bcf	3978,1,c	;volatile
  1763                           
  1764                           ;main.c: 818: LATBbits.LATB0 = 0;;
  1765  00D19C  908A               	bcf	3978,0,c	;volatile
  1766                           
  1767                           ;main.c: 820: set_reloj_digital();
  1768  00D19E  EC5B  F067         	call	_set_reloj_digital	;wreg free
  1769                           
  1770                           ;main.c: 821: Write_RTC();
  1771  00D1A2  EC65  F076         	call	_Write_RTC	;wreg free
  1772  00D1A6  0012               	return		;funcret
  1773  00D1A8                     __end_of_setup:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784 ;; *************** function _lcd_init *****************
  1785 ;; Defined at:
  1786 ;;		line 119 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  i               1    4[COMRAM] unsigned char 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;Total ram usage:        1 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    2
  1807 ;; This function calls:
  1808 ;;		_Delay1KTCYx
  1809 ;;		_lcd_send_byte
  1810 ;;		_lcd_send_nibble
  1811 ;; This function is called by:
  1812 ;;		_setup
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text2
  1817  00D490                     __ptext2:
  1818                           	opt stack 0
  1819  00D490                     _lcd_init:
  1820                           	opt stack 27
  1821                           
  1822                           ;unmc_lcd_216.c: 120: int8 i;
  1823                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  1824                           
  1825                           ;incstack = 0
  1826  00D490  9693               	bcf	3987,3,c	;volatile
  1827                           
  1828                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  1829  00D492  9493               	bcf	3987,2,c	;volatile
  1830                           
  1831                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  1832  00D494  968A               	bcf	3978,3,c	;volatile
  1833                           
  1834                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  1835  00D496  948A               	bcf	3978,2,c	;volatile
  1836                           
  1837                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  1838  00D498  9893               	bcf	3987,4,c	;volatile
  1839                           
  1840                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  1841  00D49A  9A93               	bcf	3987,5,c	;volatile
  1842                           
  1843                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  1844  00D49C  9C93               	bcf	3987,6,c	;volatile
  1845                           
  1846                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  1847  00D49E  9E93               	bcf	3987,7,c	;volatile
  1848                           
  1849                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  1850  00D4A0  0E0A               	movlw	10
  1851  00D4A2  EC7C  F067         	call	_Delay1KTCYx
  1852                           
  1853                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  1854  00D4A6  0E0A               	movlw	10
  1855  00D4A8  EC7C  F067         	call	_Delay1KTCYx
  1856                           
  1857                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  1858  00D4AC  0E0A               	movlw	10
  1859  00D4AE  EC7C  F067         	call	_Delay1KTCYx
  1860                           
  1861                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  1862  00D4B2  0E00               	movlw	0
  1863  00D4B4  6E05               	movwf	lcd_init@i,c
  1864  00D4B6                     l5501:
  1865  00D4B6  0E02               	movlw	2
  1866  00D4B8  6405               	cpfsgt	lcd_init@i,c
  1867  00D4BA  D001               	goto	l516
  1868  00D4BC  D008               	goto	u6730
  1869  00D4BE                     l516:
  1870                           
  1871                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  1872  00D4BE  0E03               	movlw	3
  1873  00D4C0  EC0D  F06A         	call	_lcd_send_nibble
  1874                           
  1875                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  1876  00D4C4  0E0A               	movlw	10
  1877  00D4C6  EC7C  F067         	call	_Delay1KTCYx
  1878  00D4CA  2A05               	incf	lcd_init@i,f,c
  1879  00D4CC  D7F4               	goto	l5501
  1880  00D4CE                     u6730:
  1881                           
  1882                           ;unmc_lcd_216.c: 146: }
  1883                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  1884  00D4CE  0E02               	movlw	2
  1885  00D4D0  EC0D  F06A         	call	_lcd_send_nibble
  1886                           
  1887                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  1888  00D4D4  0E00               	movlw	0
  1889  00D4D6  6E05               	movwf	lcd_init@i,c
  1890  00D4D8                     l5515:
  1891  00D4D8  0E03               	movlw	3
  1892  00D4DA  6405               	cpfsgt	lcd_init@i,c
  1893  00D4DC  D001               	goto	l518
  1894  00D4DE  0012               	return	
  1895  00D4E0                     l518:
  1896                           
  1897                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  1898  00D4E0  5005               	movf	lcd_init@i,w,c
  1899  00D4E2  0D01               	mullw	1
  1900  00D4E4  0E8D               	movlw	low _LCD_INIT_STRING
  1901  00D4E6  24F3               	addwf	prodl,w,c
  1902  00D4E8  6EF6               	movwf	tblptrl,c
  1903  00D4EA  0EFE               	movlw	high _LCD_INIT_STRING
  1904  00D4EC  20F4               	addwfc	prodh,w,c
  1905  00D4EE  6EF7               	movwf	tblptrh,c
  1906  00D4F0                     	if	0	;There are less than 3 active tblptr bytes
  1907  00D4F0                     	endif
  1908  00D4F0  0008               	tblrd		*
  1909  00D4F2  CFF5 F003          	movff	tablat,lcd_send_byte@n
  1910  00D4F6  0E00               	movlw	0
  1911  00D4F8  ECFB  F067         	call	_lcd_send_byte
  1912                           
  1913                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  1914  00D4FC  0E0A               	movlw	10
  1915  00D4FE  EC7C  F067         	call	_Delay1KTCYx
  1916  00D502  2A05               	incf	lcd_init@i,f,c
  1917  00D504  D7E9               	goto	l5515
  1918  00D506                     __end_of_lcd_init:
  1919                           	opt stack 0
  1920                           tblptru	equ	0xFF8
  1921                           tblptrh	equ	0xFF7
  1922                           tblptrl	equ	0xFF6
  1923                           tablat	equ	0xFF5
  1924                           prodh	equ	0xFF4
  1925                           prodl	equ	0xFF3
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           postdec1	equ	0xFE5
  1929                           fsr1l	equ	0xFE1
  1930                           
  1931 ;; *************** function _Delay1KTCYx *****************
  1932 ;; Defined at:
  1933 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d1ktcyx.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  unit            1    wreg     unsigned char 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  unit            1    0[COMRAM] unsigned char 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1951 ;;Total ram usage:        1 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; This function calls:
  1954 ;;		Nothing
  1955 ;; This function is called by:
  1956 ;;		_lcd_init
  1957 ;;		_DelayPORXLCD
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text3
  1962  00CEF8                     __ptext3:
  1963                           	opt stack 0
  1964  00CEF8                     _Delay1KTCYx:
  1965                           	opt stack 28
  1966                           
  1967                           ;incstack = 0
  1968                           ;Delay1KTCYx@unit stored from wreg
  1969  00CEF8  6E01               	movwf	Delay1KTCYx@unit,c
  1970  00CEFA                     l924:
  1971  00CEFA  0EC8               	movlw	200
  1972  00CEFC                     u6787:
  1973  00CEFC  D000               	nop2	
  1974  00CEFE  2EE8               	decfsz	wreg,f,c
  1975  00CF00  D7FD               	bra	u6787
  1976  00CF02  2E01               	decfsz	Delay1KTCYx@unit,f,c
  1977  00CF04  D7FA               	goto	l924
  1978  00CF06  0012               	return	
  1979  00CF08                     __end_of_Delay1KTCYx:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           prodh	equ	0xFF4
  1986                           prodl	equ	0xFF3
  1987                           postinc0	equ	0xFEE
  1988                           wreg	equ	0xFE8
  1989                           postdec1	equ	0xFE5
  1990                           fsr1l	equ	0xFE1
  1991                           
  1992 ;; *************** function _lcd_comand *****************
  1993 ;; Defined at:
  1994 ;;		line 189 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  d               1    wreg     unsigned char 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  d               1    4[COMRAM] unsigned char 
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, status,2, status,0, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2012 ;;Total ram usage:        1 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    2
  2015 ;; This function calls:
  2016 ;;		_lcd_send_byte
  2017 ;; This function is called by:
  2018 ;;		_setup
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text4
  2023  00CEDA                     __ptext4:
  2024                           	opt stack 0
  2025  00CEDA                     _lcd_comand:
  2026                           	opt stack 27
  2027                           
  2028                           ;incstack = 0
  2029                           ;lcd_comand@d stored from wreg
  2030  00CEDA  6E05               	movwf	lcd_comand@d,c
  2031                           
  2032                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  2033  00CEDC  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  2034  00CEE0  0E00               	movlw	0
  2035  00CEE2  ECFB  F067         	call	_lcd_send_byte
  2036  00CEE6  0012               	return		;funcret
  2037  00CEE8                     __end_of_lcd_comand:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           prodh	equ	0xFF4
  2044                           prodl	equ	0xFF3
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           
  2050 ;; *************** function _ir_a_pantalla_inicial *****************
  2051 ;; Defined at:
  2052 ;;		line 588 in file "main.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2070 ;;Total ram usage:        0 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:   12
  2073 ;; This function calls:
  2074 ;;		_set_reloj_digital
  2075 ;;		_si_apreta_numero_va_a_pantalla_contrasenia
  2076 ;;		_titila_texto_insert_password
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text5
  2083  00CECC                     __ptext5:
  2084                           	opt stack 0
  2085  00CECC                     _ir_a_pantalla_inicial:
  2086                           	opt stack 18
  2087                           
  2088                           ;main.c: 589: set_reloj_digital();
  2089                           
  2090                           ;incstack = 0
  2091  00CECC  EC5B  F067         	call	_set_reloj_digital	;wreg free
  2092                           
  2093                           ;main.c: 590: titila_texto_insert_password();
  2094  00CED0  EC90  F06E         	call	_titila_texto_insert_password	;wreg free
  2095                           
  2096                           ;main.c: 591: si_apreta_numero_va_a_pantalla_contrasenia();
  2097  00CED4  EC89  F06C         	call	_si_apreta_numero_va_a_pantalla_contrasenia	;wreg free
  2098  00CED8  0012               	return		;funcret
  2099  00CEDA                     __end_of_ir_a_pantalla_inicial:
  2100                           	opt stack 0
  2101                           tblptru	equ	0xFF8
  2102                           tblptrh	equ	0xFF7
  2103                           tblptrl	equ	0xFF6
  2104                           tablat	equ	0xFF5
  2105                           prodh	equ	0xFF4
  2106                           prodl	equ	0xFF3
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           
  2112 ;; *************** function _titila_texto_insert_password *****************
  2113 ;; Defined at:
  2114 ;;		line 109 in file "main.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2132 ;;Total ram usage:        1 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    5
  2135 ;; This function calls:
  2136 ;;		_lcd_gotoxy
  2137 ;;		_lcd_putrs
  2138 ;; This function is called by:
  2139 ;;		_ir_a_pantalla_inicial
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text6
  2144  00DD20                     __ptext6:
  2145                           	opt stack 0
  2146  00DD20                     _titila_texto_insert_password:
  2147                           	opt stack 24
  2148                           
  2149                           ;main.c: 110: if (txt_insertar_contrasenia == 0) {
  2150                           
  2151                           ;incstack = 0
  2152  00DD20  0100               	movlb	0	; () banked
  2153  00DD22  518E               	movf	_txt_insertar_contrasenia& (0+255),w,b
  2154  00DD24  0100               	movlb	0	; () banked
  2155  00DD26  118F               	iorwf	(_txt_insertar_contrasenia+1)& (0+255),w,b
  2156  00DD28  A4D8               	btfss	status,2,c
  2157  00DD2A  D022               	goto	l201
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;main.c: 111: txt_insertar_contrasenia = 1;
  2161  00DD2C  0E00               	movlw	0
  2162  00DD2E  0100               	movlb	0	; () banked
  2163  00DD30  6F8F               	movwf	(_txt_insertar_contrasenia+1)& (0+255),b
  2164  00DD32  0E01               	movlw	1
  2165  00DD34  6F8E               	movwf	_txt_insertar_contrasenia& (0+255),b
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;main.c: 112: lcd_gotoxy(1, 1);
  2169  00DD36  0E01               	movlw	1
  2170  00DD38  6E05               	movwf	lcd_gotoxy@y,c
  2171  00DD3A  0E01               	movlw	1
  2172  00DD3C  ECB3  F067         	call	_lcd_gotoxy
  2173                           
  2174                           ;main.c: 113: lcd_putrs("Insert");
  2175  00DD40  0EC6               	movlw	low STR_10
  2176  00DD42  6E09               	movwf	lcd_putrs@ptr,c
  2177  00DD44  0EFF               	movlw	high STR_10
  2178  00DD46  6E0A               	movwf	lcd_putrs@ptr+1,c
  2179  00DD48  EC23  F069         	call	_lcd_putrs	;wreg free
  2180                           
  2181                           ;main.c: 114: lcd_gotoxy(1, 2);
  2182  00DD4C  0E02               	movlw	2
  2183  00DD4E  6E05               	movwf	lcd_gotoxy@y,c
  2184  00DD50  0E01               	movlw	1
  2185  00DD52  ECB3  F067         	call	_lcd_gotoxy
  2186                           
  2187                           ;main.c: 115: lcd_putrs("Password");
  2188  00DD56  0E6B               	movlw	low STR_11
  2189  00DD58  6E09               	movwf	lcd_putrs@ptr,c
  2190  00DD5A  0EFF               	movlw	high STR_11
  2191  00DD5C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2192  00DD5E  EC23  F069         	call	_lcd_putrs	;wreg free
  2193                           
  2194                           ;main.c: 116: _delay((unsigned long)((80)*(8000000/4000.0)));
  2195  00DD62  0ED0               	movlw	208
  2196  00DD64  6E0B               	movwf	??_titila_texto_insert_password& (0+255),c
  2197  00DD66  0ECA               	movlw	202
  2198  00DD68                     u6797:
  2199  00DD68  2EE8               	decfsz	wreg,f,c
  2200  00DD6A  D7FE               	bra	u6797
  2201  00DD6C  2E0B               	decfsz	??_titila_texto_insert_password& (0+255),f,c
  2202  00DD6E  D7FC               	bra	u6797
  2203  00DD70                     l201:
  2204                           
  2205                           ;main.c: 117: }
  2206                           ;main.c: 119: if (txt_insertar_contrasenia == 1) {
  2207  00DD70  0100               	movlb	0	; () banked
  2208  00DD72  058E               	decf	_txt_insertar_contrasenia& (0+255),w,b
  2209  00DD74  0100               	movlb	0	; () banked
  2210  00DD76  118F               	iorwf	(_txt_insertar_contrasenia+1)& (0+255),w,b
  2211  00DD78  A4D8               	btfss	status,2,c
  2212  00DD7A  0012               	return	
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;main.c: 120: txt_insertar_contrasenia = 0;
  2216  00DD7C  0E00               	movlw	0
  2217  00DD7E  0100               	movlb	0	; () banked
  2218  00DD80  6F8F               	movwf	(_txt_insertar_contrasenia+1)& (0+255),b
  2219  00DD82  0E00               	movlw	0
  2220  00DD84  6F8E               	movwf	_txt_insertar_contrasenia& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;main.c: 121: lcd_gotoxy(1, 1);
  2224  00DD86  0E01               	movlw	1
  2225  00DD88  6E05               	movwf	lcd_gotoxy@y,c
  2226  00DD8A  0E01               	movlw	1
  2227  00DD8C  ECB3  F067         	call	_lcd_gotoxy
  2228                           
  2229                           ;main.c: 122: lcd_putrs("        ");
  2230  00DD90  0E10               	movlw	low (STR_18+8)
  2231  00DD92  6E09               	movwf	lcd_putrs@ptr,c
  2232  00DD94  0EFF               	movlw	high (STR_18+8)
  2233  00DD96  6E0A               	movwf	lcd_putrs@ptr+1,c
  2234  00DD98  EC23  F069         	call	_lcd_putrs	;wreg free
  2235                           
  2236                           ;main.c: 123: lcd_gotoxy(1, 2);
  2237  00DD9C  0E02               	movlw	2
  2238  00DD9E  6E05               	movwf	lcd_gotoxy@y,c
  2239  00DDA0  0E01               	movlw	1
  2240  00DDA2  ECB3  F067         	call	_lcd_gotoxy
  2241                           
  2242                           ;main.c: 124: lcd_putrs("        ");
  2243  00DDA6  0E10               	movlw	low (STR_18+8)
  2244  00DDA8  6E09               	movwf	lcd_putrs@ptr,c
  2245  00DDAA  0EFF               	movlw	high (STR_18+8)
  2246  00DDAC  6E0A               	movwf	lcd_putrs@ptr+1,c
  2247  00DDAE  EC23  F069         	call	_lcd_putrs	;wreg free
  2248                           
  2249                           ;main.c: 125: _delay((unsigned long)((60)*(8000000/4000.0)));
  2250  00DDB2  0E9C               	movlw	156
  2251  00DDB4  6E0B               	movwf	??_titila_texto_insert_password& (0+255),c
  2252  00DDB6  0ED7               	movlw	215
  2253  00DDB8                     u6807:
  2254  00DDB8  2EE8               	decfsz	wreg,f,c
  2255  00DDBA  D7FE               	bra	u6807
  2256  00DDBC  2E0B               	decfsz	??_titila_texto_insert_password& (0+255),f,c
  2257  00DDBE  D7FC               	bra	u6807
  2258  00DDC0  F000               	nop	
  2259  00DDC2  0012               	return	
  2260  00DDC4                     __end_of_titila_texto_insert_password:
  2261                           	opt stack 0
  2262                           tblptru	equ	0xFF8
  2263                           tblptrh	equ	0xFF7
  2264                           tblptrl	equ	0xFF6
  2265                           tablat	equ	0xFF5
  2266                           prodh	equ	0xFF4
  2267                           prodl	equ	0xFF3
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           postdec1	equ	0xFE5
  2271                           fsr1l	equ	0xFE1
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _si_apreta_numero_va_a_pantalla_contrasenia *****************
  2275 ;; Defined at:
  2276 ;;		line 537 in file "main.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;		None
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;		None
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2294 ;;Total ram usage:        0 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:   11
  2297 ;; This function calls:
  2298 ;;		_ir_a_pantalla_ingresar_contrasenia
  2299 ;; This function is called by:
  2300 ;;		_ir_a_pantalla_inicial
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text7
  2305  00D912                     __ptext7:
  2306                           	opt stack 0
  2307  00D912                     _si_apreta_numero_va_a_pantalla_contrasenia:
  2308                           	opt stack 18
  2309                           
  2310                           ;main.c: 538: LATAbits.LATA0 = 1;
  2311                           
  2312                           ;incstack = 0
  2313  00D912  8089               	bsf	3977,0,c	;volatile
  2314                           
  2315                           ;main.c: 539: LATAbits.LATA1 = 0;
  2316  00D914  9289               	bcf	3977,1,c	;volatile
  2317                           
  2318                           ;main.c: 540: LATAbits.LATA2 = 0;
  2319  00D916  9489               	bcf	3977,2,c	;volatile
  2320                           
  2321                           ;main.c: 541: LATAbits.LATA3 = 0;
  2322  00D918  9689               	bcf	3977,3,c	;volatile
  2323                           
  2324                           ;main.c: 542: {
  2325                           ;main.c: 543: if ((PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) ||
  2326                           ;main.c: 544: (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) ||
  2327                           ;main.c: 545: (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1)) {
  2328  00D91A  AA80               	btfss	3968,5,c	;volatile
  2329  00D91C  D002               	goto	u6490
  2330  00D91E  B089               	btfsc	3977,0,c	;volatile
  2331  00D920  D007               	goto	u6530
  2332  00D922                     u6490:
  2333  00D922  AE80               	btfss	3968,7,c	;volatile
  2334  00D924  D002               	goto	u6510
  2335  00D926  B089               	btfsc	3977,0,c	;volatile
  2336  00D928  D003               	goto	u6530
  2337  00D92A                     u6510:
  2338  00D92A  BC80               	btfsc	3968,6,c	;volatile
  2339  00D92C  A089               	btfss	3977,0,c	;volatile
  2340  00D92E  D002               	goto	l381
  2341  00D930                     u6530:
  2342                           
  2343                           ;main.c: 547: ir_a_pantalla_ingresar_contrasenia();
  2344  00D930  EC8E  F06F         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2345  00D934                     l381:
  2346                           
  2347                           ;main.c: 548: }
  2348                           ;main.c: 549: }
  2349                           ;main.c: 550: LATAbits.LATA0 = 0;
  2350  00D934  9089               	bcf	3977,0,c	;volatile
  2351                           
  2352                           ;main.c: 551: LATAbits.LATA1 = 1;
  2353  00D936  8289               	bsf	3977,1,c	;volatile
  2354                           
  2355                           ;main.c: 552: LATAbits.LATA2 = 0;
  2356  00D938  9489               	bcf	3977,2,c	;volatile
  2357                           
  2358                           ;main.c: 553: LATAbits.LATA3 = 0;
  2359  00D93A  9689               	bcf	3977,3,c	;volatile
  2360                           
  2361                           ;main.c: 554: {
  2362                           ;main.c: 555: if ((PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) ||
  2363                           ;main.c: 556: (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) ||
  2364                           ;main.c: 557: (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1)) {
  2365  00D93C  AA80               	btfss	3968,5,c	;volatile
  2366  00D93E  D002               	goto	u6550
  2367  00D940  B289               	btfsc	3977,1,c	;volatile
  2368  00D942  D007               	goto	u6590
  2369  00D944                     u6550:
  2370  00D944  AE80               	btfss	3968,7,c	;volatile
  2371  00D946  D002               	goto	u6570
  2372  00D948  B289               	btfsc	3977,1,c	;volatile
  2373  00D94A  D003               	goto	u6590
  2374  00D94C                     u6570:
  2375  00D94C  BC80               	btfsc	3968,6,c	;volatile
  2376  00D94E  A289               	btfss	3977,1,c	;volatile
  2377  00D950  D002               	goto	l388
  2378  00D952                     u6590:
  2379                           
  2380                           ;main.c: 559: ir_a_pantalla_ingresar_contrasenia();
  2381  00D952  EC8E  F06F         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2382  00D956                     l388:
  2383                           
  2384                           ;main.c: 560: }
  2385                           ;main.c: 561: }
  2386                           ;main.c: 562: LATAbits.LATA0 = 0;
  2387  00D956  9089               	bcf	3977,0,c	;volatile
  2388                           
  2389                           ;main.c: 563: LATAbits.LATA1 = 0;
  2390  00D958  9289               	bcf	3977,1,c	;volatile
  2391                           
  2392                           ;main.c: 564: LATAbits.LATA2 = 1;
  2393  00D95A  8489               	bsf	3977,2,c	;volatile
  2394                           
  2395                           ;main.c: 565: LATAbits.LATA3 = 0;
  2396  00D95C  9689               	bcf	3977,3,c	;volatile
  2397                           
  2398                           ;main.c: 566: {
  2399                           ;main.c: 567: if ((PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) ||
  2400                           ;main.c: 568: (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) ||
  2401                           ;main.c: 569: (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1)) {
  2402  00D95E  AA80               	btfss	3968,5,c	;volatile
  2403  00D960  D002               	goto	u6610
  2404  00D962  B489               	btfsc	3977,2,c	;volatile
  2405  00D964  D007               	goto	u6650
  2406  00D966                     u6610:
  2407  00D966  AE80               	btfss	3968,7,c	;volatile
  2408  00D968  D002               	goto	u6630
  2409  00D96A  B489               	btfsc	3977,2,c	;volatile
  2410  00D96C  D003               	goto	u6650
  2411  00D96E                     u6630:
  2412  00D96E  BC80               	btfsc	3968,6,c	;volatile
  2413  00D970  A489               	btfss	3977,2,c	;volatile
  2414  00D972  D002               	goto	l395
  2415  00D974                     u6650:
  2416                           
  2417                           ;main.c: 571: ir_a_pantalla_ingresar_contrasenia();
  2418  00D974  EC8E  F06F         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2419  00D978                     l395:
  2420                           
  2421                           ;main.c: 572: }
  2422                           ;main.c: 573: }
  2423                           ;main.c: 574: LATAbits.LATA0 = 0;
  2424  00D978  9089               	bcf	3977,0,c	;volatile
  2425                           
  2426                           ;main.c: 575: LATAbits.LATA1 = 0;
  2427  00D97A  9289               	bcf	3977,1,c	;volatile
  2428                           
  2429                           ;main.c: 576: LATAbits.LATA2 = 0;
  2430  00D97C  9489               	bcf	3977,2,c	;volatile
  2431                           
  2432                           ;main.c: 577: LATAbits.LATA3 = 1;
  2433  00D97E  8689               	bsf	3977,3,c	;volatile
  2434                           
  2435                           ;main.c: 578: {
  2436                           ;main.c: 579: if ((PORTAbits.RA5 == 1 && LATAbits.LATA3 == 1) ||
  2437                           ;main.c: 580: (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) ||
  2438                           ;main.c: 581: (PORTAbits.RA6 == 1 && LATAbits.LATA3 == 1)) {
  2439  00D980  AA80               	btfss	3968,5,c	;volatile
  2440  00D982  D002               	goto	u6670
  2441  00D984  B689               	btfsc	3977,3,c	;volatile
  2442  00D986  D008               	goto	u6710
  2443  00D988                     u6670:
  2444  00D988  AE80               	btfss	3968,7,c	;volatile
  2445  00D98A  D002               	goto	u6690
  2446  00D98C  B689               	btfsc	3977,3,c	;volatile
  2447  00D98E  D004               	goto	u6710
  2448  00D990                     u6690:
  2449  00D990  AC80               	btfss	3968,6,c	;volatile
  2450  00D992  0012               	return	
  2451  00D994  A689               	btfss	3977,3,c	;volatile
  2452  00D996  0012               	return	
  2453  00D998                     u6710:
  2454                           
  2455                           ;main.c: 583: ir_a_pantalla_ingresar_contrasenia();
  2456  00D998  EC8E  F06F         	call	_ir_a_pantalla_ingresar_contrasenia	;wreg free
  2457  00D99C  0012               	return	
  2458  00D99E                     __end_of_si_apreta_numero_va_a_pantalla_contrasenia:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           postinc0	equ	0xFEE
  2467                           wreg	equ	0xFE8
  2468                           postdec1	equ	0xFE5
  2469                           fsr1l	equ	0xFE1
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _ir_a_pantalla_ingresar_contrasenia *****************
  2473 ;; Defined at:
  2474 ;;		line 507 in file "main.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  intentos_de_    2   19[BANK0 ] int 
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2492 ;;Total ram usage:        2 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:   10
  2495 ;; This function calls:
  2496 ;;		_activar_alarma
  2497 ;;		_ingreso_numero
  2498 ;;		_ir_a_pantalla_edicion
  2499 ;;		_lcd_gotoxy
  2500 ;;		_lcd_putrs
  2501 ;;		_mostrar_presionar_a
  2502 ;;		_resetear_pantalla_ingresar_contrasenia
  2503 ;;		_verificar_contrasenia
  2504 ;; This function is called by:
  2505 ;;		_si_apreta_numero_va_a_pantalla_contrasenia
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text8
  2510  00DF1C                     __ptext8:
  2511                           	opt stack 0
  2512  00DF1C                     _ir_a_pantalla_ingresar_contrasenia:
  2513                           	opt stack 18
  2514                           
  2515                           ;main.c: 509: int intentos_de_contrasenias = 0;
  2516                           
  2517                           ;incstack = 0
  2518  00DF1C  0E00               	movlw	0
  2519  00DF1E  0100               	movlb	0	; () banked
  2520  00DF20  6FE7               	movwf	(ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias+1)& (0+255),b
  2521  00DF22  0E00               	movlw	0
  2522  00DF24  6FE6               	movwf	ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias& (0+255),b
  2523                           
  2524                           ;main.c: 510: numeros_ingresados = 0;
  2525  00DF26  0E00               	movlw	0
  2526  00DF28  0100               	movlb	0	; () banked
  2527  00DF2A  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  2528  00DF2C  0E00               	movlw	0
  2529  00DF2E  6FA4               	movwf	_numeros_ingresados& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;main.c: 511: lcd_gotoxy(1, 1);
  2533  00DF30  0E01               	movlw	1
  2534  00DF32  6E05               	movwf	lcd_gotoxy@y,c
  2535  00DF34  0E01               	movlw	1
  2536  00DF36  ECB3  F067         	call	_lcd_gotoxy
  2537                           
  2538                           ;main.c: 512: lcd_putrs("Insert Password ");
  2539  00DF3A  0E2A               	movlw	low STR_38
  2540  00DF3C  6E09               	movwf	lcd_putrs@ptr,c
  2541  00DF3E  0EFF               	movlw	high STR_38
  2542  00DF40  6E0A               	movwf	lcd_putrs@ptr+1,c
  2543  00DF42  EC23  F069         	call	_lcd_putrs	;wreg free
  2544                           
  2545                           ;main.c: 513: lcd_gotoxy(1, 2);
  2546  00DF46  0E02               	movlw	2
  2547  00DF48  6E05               	movwf	lcd_gotoxy@y,c
  2548  00DF4A  0E01               	movlw	1
  2549  00DF4C  ECB3  F067         	call	_lcd_gotoxy
  2550                           
  2551                           ;main.c: 514: lcd_putrs("                ");
  2552  00DF50  0E08               	movlw	low STR_18
  2553  00DF52  6E09               	movwf	lcd_putrs@ptr,c
  2554  00DF54  0EFF               	movlw	high STR_18
  2555  00DF56  6E0A               	movwf	lcd_putrs@ptr+1,c
  2556  00DF58  EC23  F069         	call	_lcd_putrs	;wreg free
  2557  00DF5C                     
  2558                           ;main.c: 517: if (numeros_ingresados < 4) {
  2559  00DF5C  0100               	movlb	0	; () banked
  2560  00DF5E  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  2561  00DF60  D008               	goto	u6430
  2562  00DF62  0100               	movlb	0	; () banked
  2563  00DF64  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  2564  00DF66  E108               	bnz	l5383
  2565  00DF68  0E04               	movlw	4
  2566  00DF6A  0100               	movlb	0	; () banked
  2567  00DF6C  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  2568  00DF6E  B0D8               	btfsc	status,0,c
  2569  00DF70  D003               	goto	l371
  2570  00DF72                     u6430:
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 518: ingreso_numero();
  2574  00DF72  EC36  F07C         	call	_ingreso_numero	;wreg free
  2575                           
  2576                           ;main.c: 519: } else {
  2577  00DF76  D010               	goto	l375
  2578  00DF78                     l371:
  2579  00DF78                     l5383:
  2580                           
  2581                           ;main.c: 520: mostrar_presionar_a();
  2582  00DF78  EC98  F067         	call	_mostrar_presionar_a	;wreg free
  2583                           
  2584                           ;main.c: 521: if (verificar_contrasenia() == 1) {
  2585  00DF7C  EC39  F06B         	call	_verificar_contrasenia	;wreg free
  2586  00DF80  0401               	decf	?_verificar_contrasenia,w,c
  2587  00DF82  1002               	iorwf	?_verificar_contrasenia+1,w,c
  2588  00DF84  A4D8               	btfss	status,2,c
  2589  00DF86  D003               	goto	l373
  2590                           
  2591                           ;main.c: 522: ir_a_pantalla_edicion();
  2592  00DF88  ECE2  F06E         	call	_ir_a_pantalla_edicion	;wreg free
  2593                           
  2594                           ;main.c: 523: break;
  2595  00DF8C  0012               	return	
  2596  00DF8E                     l373:
  2597                           
  2598                           ;main.c: 525: intentos_de_contrasenias++;
  2599  00DF8E  0100               	movlb	0	; () banked
  2600  00DF90  4BE6               	infsnz	ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias& (0+255),f,b
  2601  00DF92  2BE7               	incf	(ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias+1)& (0+255),f,b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;main.c: 526: resetear_pantalla_ingresar_contrasenia();
  2605  00DF94  ECD4  F068         	call	_resetear_pantalla_ingresar_contrasenia	;wreg free
  2606  00DF98                     l375:
  2607                           
  2608                           ;main.c: 527: }
  2609                           ;main.c: 528: }
  2610                           ;main.c: 529: if (intentos_de_contrasenias >= 3) {
  2611  00DF98  0100               	movlb	0	; () banked
  2612  00DF9A  BFE7               	btfsc	(ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias+1)& (0+255),7,b
  2613  00DF9C  D7DF               	goto	l370
  2614  00DF9E  0100               	movlb	0	; () banked
  2615  00DFA0  51E7               	movf	(ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias+1)& (0+255),w,b
  2616  00DFA2  E105               	bnz	u6450
  2617  00DFA4  0E03               	movlw	3
  2618  00DFA6  0100               	movlb	0	; () banked
  2619  00DFA8  5DE6               	subwf	ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias& (0+255),w,b
  2620  00DFAA  A0D8               	btfss	status,0,c
  2621  00DFAC  D7D7               	goto	l370
  2622  00DFAE                     u6450:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;main.c: 530: alarma_sonando = 1;
  2626  00DFAE  0E00               	movlw	0
  2627  00DFB0  0100               	movlb	0	; () banked
  2628  00DFB2  6F9F               	movwf	(_alarma_sonando+1)& (0+255),b
  2629  00DFB4  0E01               	movlw	1
  2630  00DFB6  6F9E               	movwf	_alarma_sonando& (0+255),b
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;main.c: 531: causa_reporte = "3 tries";
  2634  00DFB8  0EB7               	movlw	low STR_22
  2635  00DFBA  0100               	movlb	0	; () banked
  2636  00DFBC  6FC5               	movwf	_causa_reporte& (0+255),b
  2637  00DFBE  0EFF               	movlw	high STR_22
  2638  00DFC0  0100               	movlb	0	; () banked
  2639  00DFC2  6FC6               	movwf	(_causa_reporte+1)& (0+255),b
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;main.c: 532: activar_alarma();
  2643  00DFC4  EC0B  F07A         	call	_activar_alarma	;wreg free
  2644  00DFC8  D7C9               	goto	l370
  2645  00DFCA                     __end_of_ir_a_pantalla_ingresar_contrasenia:
  2646                           	opt stack 0
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           prodh	equ	0xFF4
  2652                           prodl	equ	0xFF3
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           postdec1	equ	0xFE5
  2656                           fsr1l	equ	0xFE1
  2657                           status	equ	0xFD8
  2658                           
  2659 ;; *************** function _resetear_pantalla_ingresar_contrasenia *****************
  2660 ;; Defined at:
  2661 ;;		line 243 in file "main.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  i               2   10[COMRAM] int 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2679 ;;Total ram usage:        2 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    5
  2682 ;; This function calls:
  2683 ;;		_lcd_gotoxy
  2684 ;;		_lcd_putrs
  2685 ;; This function is called by:
  2686 ;;		_ir_a_pantalla_ingresar_contrasenia
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text9
  2691  00D1A8                     __ptext9:
  2692                           	opt stack 0
  2693  00D1A8                     _resetear_pantalla_ingresar_contrasenia:
  2694                           	opt stack 22
  2695                           
  2696                           ;main.c: 244: lcd_gotoxy(1, 2);
  2697                           
  2698                           ;incstack = 0
  2699  00D1A8  0E02               	movlw	2
  2700  00D1AA  6E05               	movwf	lcd_gotoxy@y,c
  2701  00D1AC  0E01               	movlw	1
  2702  00D1AE  ECB3  F067         	call	_lcd_gotoxy
  2703                           
  2704                           ;main.c: 245: lcd_putrs("              ");
  2705  00D1B2  0E0A               	movlw	low (STR_18+2)
  2706  00D1B4  6E09               	movwf	lcd_putrs@ptr,c
  2707  00D1B6  0EFF               	movlw	high (STR_18+2)
  2708  00D1B8  6E0A               	movwf	lcd_putrs@ptr+1,c
  2709  00D1BA  EC23  F069         	call	_lcd_putrs	;wreg free
  2710                           
  2711                           ;main.c: 247: for (int i = 0; i < 0; i++) {
  2712  00D1BE  0E00               	movlw	0
  2713  00D1C0  6E0C               	movwf	resetear_pantalla_ingresar_contrasenia@i+1,c
  2714  00D1C2  0E00               	movlw	0
  2715  00D1C4  6E0B               	movwf	resetear_pantalla_ingresar_contrasenia@i,c
  2716  00D1C6                     l5309:
  2717  00D1C6  AE0C               	btfss	resetear_pantalla_ingresar_contrasenia@i+1,7,c
  2718  00D1C8  D010               	goto	u6350
  2719                           
  2720                           ;main.c: 248: array_contrasenia_ingresada[i] = 0;
  2721  00D1CA  90D8               	bcf	status,0,c
  2722  00D1CC  340B               	rlcf	resetear_pantalla_ingresar_contrasenia@i,w,c
  2723  00D1CE  6ED9               	movwf	fsr2l,c
  2724  00D1D0  340C               	rlcf	resetear_pantalla_ingresar_contrasenia@i+1,w,c
  2725  00D1D2  6EDA               	movwf	fsr2h,c
  2726  00D1D4  0E60               	movlw	low _array_contrasenia_ingresada
  2727  00D1D6  26D9               	addwf	fsr2l,f,c
  2728  00D1D8  0E00               	movlw	high _array_contrasenia_ingresada
  2729  00D1DA  22DA               	addwfc	fsr2h,f,c
  2730  00D1DC  0E00               	movlw	0
  2731  00D1DE  6EDE               	movwf	postinc2,c
  2732  00D1E0  0E00               	movlw	0
  2733  00D1E2  6EDD               	movwf	postdec2,c
  2734  00D1E4  4A0B               	infsnz	resetear_pantalla_ingresar_contrasenia@i,f,c
  2735  00D1E6  2A0C               	incf	resetear_pantalla_ingresar_contrasenia@i+1,f,c
  2736  00D1E8  D7EE               	goto	l5309
  2737  00D1EA                     u6350:
  2738                           
  2739                           ;main.c: 249: }
  2740                           ;main.c: 251: numeros_ingresados = 0;
  2741  00D1EA  0E00               	movlw	0
  2742  00D1EC  0100               	movlb	0	; () banked
  2743  00D1EE  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  2744  00D1F0  0E00               	movlw	0
  2745  00D1F2  6FA4               	movwf	_numeros_ingresados& (0+255),b
  2746                           
  2747                           ; BSR set to: 0
  2748  00D1F4  0012               	return		;funcret
  2749  00D1F6                     __end_of_resetear_pantalla_ingresar_contrasenia:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           tblptrh	equ	0xFF7
  2753                           tblptrl	equ	0xFF6
  2754                           tablat	equ	0xFF5
  2755                           prodh	equ	0xFF4
  2756                           prodl	equ	0xFF3
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           postdec1	equ	0xFE5
  2760                           fsr1l	equ	0xFE1
  2761                           postinc2	equ	0xFDE
  2762                           postdec2	equ	0xFDD
  2763                           fsr2h	equ	0xFDA
  2764                           fsr2l	equ	0xFD9
  2765                           status	equ	0xFD8
  2766                           
  2767 ;; *************** function _mostrar_presionar_a *****************
  2768 ;; Defined at:
  2769 ;;		line 238 in file "main.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;		None
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2787 ;;Total ram usage:        0 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    5
  2790 ;; This function calls:
  2791 ;;		_lcd_gotoxy
  2792 ;;		_lcd_putrs
  2793 ;; This function is called by:
  2794 ;;		_ir_a_pantalla_ingresar_contrasenia
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text10
  2799  00CF30                     __ptext10:
  2800                           	opt stack 0
  2801  00CF30                     _mostrar_presionar_a:
  2802                           	opt stack 22
  2803                           
  2804                           ;main.c: 239: lcd_gotoxy(7, 2);
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;incstack = 0
  2808  00CF30  0E02               	movlw	2
  2809  00CF32  6E05               	movwf	lcd_gotoxy@y,c
  2810  00CF34  0E07               	movlw	7
  2811  00CF36  ECB3  F067         	call	_lcd_gotoxy
  2812                           
  2813                           ;main.c: 240: lcd_putrs("Press A");
  2814  00CF3A  0EAF               	movlw	low STR_15
  2815  00CF3C  6E09               	movwf	lcd_putrs@ptr,c
  2816  00CF3E  0EFF               	movlw	high STR_15
  2817  00CF40  6E0A               	movwf	lcd_putrs@ptr+1,c
  2818  00CF42  EC23  F069         	call	_lcd_putrs	;wreg free
  2819  00CF46  0012               	return		;funcret
  2820  00CF48                     __end_of_mostrar_presionar_a:
  2821                           	opt stack 0
  2822                           tblptru	equ	0xFF8
  2823                           tblptrh	equ	0xFF7
  2824                           tblptrl	equ	0xFF6
  2825                           tablat	equ	0xFF5
  2826                           prodh	equ	0xFF4
  2827                           prodl	equ	0xFF3
  2828                           postinc0	equ	0xFEE
  2829                           wreg	equ	0xFE8
  2830                           postdec1	equ	0xFE5
  2831                           fsr1l	equ	0xFE1
  2832                           postinc2	equ	0xFDE
  2833                           postdec2	equ	0xFDD
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _ir_a_pantalla_edicion *****************
  2839 ;; Defined at:
  2840 ;;		line 471 in file "main.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2857 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2858 ;;Total ram usage:        1 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    9
  2861 ;; This function calls:
  2862 ;;		_Read_RTC
  2863 ;;		_cambiar_opcion
  2864 ;;		_imprimir_reporte
  2865 ;;		_lcd_gotoxy
  2866 ;;		_lcd_putrs
  2867 ;;		_selecciona_opcion_fecha_hora
  2868 ;;		_seleccionar_opcion
  2869 ;;		_set_reloj_digital
  2870 ;;		_titila_opcion
  2871 ;; This function is called by:
  2872 ;;		_ir_a_pantalla_ingresar_contrasenia
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text11
  2877  00DDC4                     __ptext11:
  2878                           	opt stack 0
  2879  00DDC4                     _ir_a_pantalla_edicion:
  2880                           	opt stack 18
  2881                           
  2882                           ;main.c: 472: lcd_gotoxy(1, 1);
  2883                           
  2884                           ;incstack = 0
  2885  00DDC4  0E01               	movlw	1
  2886  00DDC6  6E05               	movwf	lcd_gotoxy@y,c
  2887  00DDC8  0E01               	movlw	1
  2888  00DDCA  ECB3  F067         	call	_lcd_gotoxy
  2889                           
  2890                           ;main.c: 473: lcd_putrs("Active ");
  2891  00DDCE  0E8F               	movlw	low STR_36
  2892  00DDD0  6E09               	movwf	lcd_putrs@ptr,c
  2893  00DDD2  0EFF               	movlw	high STR_36
  2894  00DDD4  6E0A               	movwf	lcd_putrs@ptr+1,c
  2895  00DDD6  EC23  F069         	call	_lcd_putrs	;wreg free
  2896                           
  2897                           ;main.c: 474: lcd_gotoxy(1, 2);
  2898  00DDDA  0E02               	movlw	2
  2899  00DDDC  6E05               	movwf	lcd_gotoxy@y,c
  2900  00DDDE  0E01               	movlw	1
  2901  00DDE0  ECB3  F067         	call	_lcd_gotoxy
  2902                           
  2903                           ;main.c: 475: lcd_putrs("Edt Pass");
  2904  00DDE4  0E86               	movlw	low STR_29
  2905  00DDE6  6E09               	movwf	lcd_putrs@ptr,c
  2906  00DDE8  0EFF               	movlw	high STR_29
  2907  00DDEA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2908  00DDEC  EC23  F069         	call	_lcd_putrs	;wreg free
  2909  00DDF0                     
  2910                           ;main.c: 478: Read_RTC();
  2911  00DDF0  EC07  F075         	call	_Read_RTC	;wreg free
  2912                           
  2913                           ;main.c: 480: set_reloj_digital();
  2914  00DDF4  EC5B  F067         	call	_set_reloj_digital	;wreg free
  2915                           
  2916                           ;main.c: 481: if (boton_seleccionar == 0 || boton_seleccionar == 1) {
  2917  00DDF8  0100               	movlb	0	; () banked
  2918  00DDFA  5190               	movf	_boton_seleccionar& (0+255),w,b
  2919  00DDFC  0100               	movlb	0	; () banked
  2920  00DDFE  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2921  00DE00  B4D8               	btfsc	status,2,c
  2922  00DE02  D005               	goto	u6370
  2923                           
  2924                           ; BSR set to: 0
  2925  00DE04  0100               	movlb	0	; () banked
  2926  00DE06  0590               	decf	_boton_seleccionar& (0+255),w,b
  2927  00DE08  0100               	movlb	0	; () banked
  2928  00DE0A  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2929  00DE0C  B4D8               	btfsc	status,2,c
  2930  00DE0E                     u6370:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 482: titila_opcion();
  2934                           
  2935                           ; BSR set to: 0
  2936  00DE0E  EC1D  F071         	call	_titila_opcion	;wreg free
  2937                           
  2938                           ;main.c: 483: }
  2939                           ;main.c: 484: if (boton_seleccionar == 2 || boton_seleccionar == 3) {
  2940  00DE12  0E02               	movlw	2
  2941  00DE14  0100               	movlb	0	; () banked
  2942  00DE16  1990               	xorwf	_boton_seleccionar& (0+255),w,b
  2943  00DE18  0100               	movlb	0	; () banked
  2944  00DE1A  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2945  00DE1C  B4D8               	btfsc	status,2,c
  2946  00DE1E  D006               	goto	u6390
  2947                           
  2948                           ; BSR set to: 0
  2949  00DE20  0E03               	movlw	3
  2950  00DE22  0100               	movlb	0	; () banked
  2951  00DE24  1990               	xorwf	_boton_seleccionar& (0+255),w,b
  2952  00DE26  0100               	movlb	0	; () banked
  2953  00DE28  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2954  00DE2A  B4D8               	btfsc	status,2,c
  2955  00DE2C                     u6390:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;main.c: 485: selecciona_opcion_fecha_hora();
  2959                           
  2960                           ; BSR set to: 0
  2961  00DE2C  ECBA  F06B         	call	_selecciona_opcion_fecha_hora	;wreg free
  2962                           
  2963                           ;main.c: 486: }
  2964                           ;main.c: 487: if(boton_seleccionar == 4) {
  2965  00DE30  0E04               	movlw	4
  2966  00DE32  0100               	movlb	0	; () banked
  2967  00DE34  1990               	xorwf	_boton_seleccionar& (0+255),w,b
  2968  00DE36  0100               	movlb	0	; () banked
  2969  00DE38  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  2970  00DE3A  B4D8               	btfsc	status,2,c
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;main.c: 488: imprimir_reporte();
  2974  00DE3C  EC3F  F06E         	call	_imprimir_reporte	;wreg free
  2975                           
  2976                           ;main.c: 489: }
  2977                           ;main.c: 490: cambiar_opcion();
  2978  00DE40  ECA6  F06D         	call	_cambiar_opcion	;wreg free
  2979                           
  2980                           ;main.c: 491: seleccionar_opcion();
  2981  00DE44  ECFB  F068         	call	_seleccionar_opcion	;wreg free
  2982                           
  2983                           ;main.c: 494: LATAbits.LATA0 = 0;
  2984  00DE48  9089               	bcf	3977,0,c	;volatile
  2985                           
  2986                           ;main.c: 495: LATAbits.LATA1 = 1;
  2987  00DE4A  8289               	bsf	3977,1,c	;volatile
  2988                           
  2989                           ;main.c: 496: LATAbits.LATA2 = 0;
  2990  00DE4C  9489               	bcf	3977,2,c	;volatile
  2991                           
  2992                           ;main.c: 497: LATAbits.LATA3 = 0;
  2993  00DE4E  9689               	bcf	3977,3,c	;volatile
  2994                           
  2995                           ;main.c: 498: if (PORTCbits.RC2 == 1) {
  2996  00DE50  B482               	btfsc	3970,2,c	;volatile
  2997  00DE52  0012               	return	
  2998  00DE54  D7CD               	goto	l353
  2999  00DE56                     
  3000                           ;main.c: 501: _delay((unsigned long)((98)*(8000000/4000.0)));
  3001  00DE56  0EFF               	movlw	255
  3002  00DE58  0100               	movlb	0	; () banked
  3003  00DE5A  6FE5               	movwf	??_ir_a_pantalla_edicion& (0+255),b
  3004  00DE5C  0E8A               	movlw	138
  3005  00DE5E                     u6817:
  3006  00DE5E  2EE8               	decfsz	wreg,f,c
  3007  00DE60  D7FE               	bra	u6817
  3008  00DE62  2FE5               	decfsz	??_ir_a_pantalla_edicion& (0+255),f,b
  3009  00DE64  D7FC               	bra	u6817
  3010  00DE66  F000               	nop	
  3011  00DE68  A482               	btfss	3970,2,c	;volatile
  3012  00DE6A  D7C2               	goto	l353
  3013  00DE6C  D7F4               	goto	l364
  3014  00DE6E                     __end_of_ir_a_pantalla_edicion:
  3015                           	opt stack 0
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           postinc0	equ	0xFEE
  3023                           wreg	equ	0xFE8
  3024                           postdec1	equ	0xFE5
  3025                           fsr1l	equ	0xFE1
  3026                           postinc2	equ	0xFDE
  3027                           postdec2	equ	0xFDD
  3028                           fsr2h	equ	0xFDA
  3029                           fsr2l	equ	0xFD9
  3030                           status	equ	0xFD8
  3031                           
  3032 ;; *************** function _titila_opcion *****************
  3033 ;; Defined at:
  3034 ;;		line 427 in file "main.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;Total ram usage:        1 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    5
  3055 ;; This function calls:
  3056 ;;		_lcd_gotoxy
  3057 ;;		_lcd_putrs
  3058 ;; This function is called by:
  3059 ;;		_ir_a_pantalla_edicion
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text12
  3064  00E23A                     __ptext12:
  3065                           	opt stack 0
  3066  00E23A                     _titila_opcion:
  3067                           	opt stack 21
  3068                           
  3069                           ;main.c: 428: if (txt_pantalla_edicion == 0) {
  3070                           
  3071                           ;incstack = 0
  3072  00E23A  0100               	movlb	0	; () banked
  3073  00E23C  518A               	movf	_txt_pantalla_edicion& (0+255),w,b
  3074  00E23E  0100               	movlb	0	; () banked
  3075  00E240  118B               	iorwf	(_txt_pantalla_edicion+1)& (0+255),w,b
  3076  00E242  A4D8               	btfss	status,2,c
  3077  00E244  D030               	goto	l341
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;main.c: 429: txt_pantalla_edicion = 1;
  3081  00E246  0E00               	movlw	0
  3082  00E248  0100               	movlb	0	; () banked
  3083  00E24A  6F8B               	movwf	(_txt_pantalla_edicion+1)& (0+255),b
  3084  00E24C  0E01               	movlw	1
  3085  00E24E  6F8A               	movwf	_txt_pantalla_edicion& (0+255),b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;main.c: 430: lcd_gotoxy(1, 1);
  3089  00E250  0E01               	movlw	1
  3090  00E252  6E05               	movwf	lcd_gotoxy@y,c
  3091  00E254  0E01               	movlw	1
  3092  00E256  ECB3  F067         	call	_lcd_gotoxy
  3093                           
  3094                           ;main.c: 431: lcd_putrs("Active  ");
  3095  00E25A  0E59               	movlw	low STR_28
  3096  00E25C  6E09               	movwf	lcd_putrs@ptr,c
  3097  00E25E  0EFF               	movlw	high STR_28
  3098  00E260  6E0A               	movwf	lcd_putrs@ptr+1,c
  3099  00E262  EC23  F069         	call	_lcd_putrs	;wreg free
  3100                           
  3101                           ;main.c: 432: lcd_gotoxy(1, 2);
  3102  00E266  0E02               	movlw	2
  3103  00E268  6E05               	movwf	lcd_gotoxy@y,c
  3104  00E26A  0E01               	movlw	1
  3105  00E26C  ECB3  F067         	call	_lcd_gotoxy
  3106                           
  3107                           ;main.c: 433: lcd_putrs("Edt Pass");
  3108  00E270  0E86               	movlw	low STR_29
  3109  00E272  6E09               	movwf	lcd_putrs@ptr,c
  3110  00E274  0EFF               	movlw	high STR_29
  3111  00E276  6E0A               	movwf	lcd_putrs@ptr+1,c
  3112  00E278  EC23  F069         	call	_lcd_putrs	;wreg free
  3113                           
  3114                           ;main.c: 434: _delay((unsigned long)((80)*(8000000/4000.0)));
  3115  00E27C  0ED0               	movlw	208
  3116  00E27E  6E0B               	movwf	??_titila_opcion& (0+255),c
  3117  00E280  0ECA               	movlw	202
  3118  00E282                     u6827:
  3119  00E282  2EE8               	decfsz	wreg,f,c
  3120  00E284  D7FE               	bra	u6827
  3121  00E286  2E0B               	decfsz	??_titila_opcion& (0+255),f,c
  3122  00E288  D7FC               	bra	u6827
  3123                           
  3124                           ;main.c: 435: _delay((unsigned long)((80)*(8000000/4000.0)));
  3125  00E28A  0ED0               	movlw	208
  3126  00E28C  6E0B               	movwf	??_titila_opcion& (0+255),c
  3127  00E28E  0ECA               	movlw	202
  3128  00E290                     u6837:
  3129  00E290  2EE8               	decfsz	wreg,f,c
  3130  00E292  D7FE               	bra	u6837
  3131  00E294  2E0B               	decfsz	??_titila_opcion& (0+255),f,c
  3132  00E296  D7FC               	bra	u6837
  3133                           
  3134                           ;main.c: 436: _delay((unsigned long)((80)*(8000000/4000.0)));
  3135  00E298  0ED0               	movlw	208
  3136  00E29A  6E0B               	movwf	??_titila_opcion& (0+255),c
  3137  00E29C  0ECA               	movlw	202
  3138  00E29E                     u6847:
  3139  00E29E  2EE8               	decfsz	wreg,f,c
  3140  00E2A0  D7FE               	bra	u6847
  3141  00E2A2  2E0B               	decfsz	??_titila_opcion& (0+255),f,c
  3142  00E2A4  D7FC               	bra	u6847
  3143  00E2A6                     l341:
  3144                           
  3145                           ;main.c: 437: }
  3146                           ;main.c: 439: if (txt_pantalla_edicion == 1) {
  3147  00E2A6  0100               	movlb	0	; () banked
  3148  00E2A8  058A               	decf	_txt_pantalla_edicion& (0+255),w,b
  3149  00E2AA  0100               	movlb	0	; () banked
  3150  00E2AC  118B               	iorwf	(_txt_pantalla_edicion+1)& (0+255),w,b
  3151  00E2AE  A4D8               	btfss	status,2,c
  3152  00E2B0  0012               	return	
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;main.c: 440: txt_pantalla_edicion = 0;
  3156  00E2B2  0E00               	movlw	0
  3157  00E2B4  0100               	movlb	0	; () banked
  3158  00E2B6  6F8B               	movwf	(_txt_pantalla_edicion+1)& (0+255),b
  3159  00E2B8  0E00               	movlw	0
  3160  00E2BA  6F8A               	movwf	_txt_pantalla_edicion& (0+255),b
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;main.c: 442: if (boton_seleccionar == 0) {
  3164  00E2BC  0100               	movlb	0	; () banked
  3165  00E2BE  5190               	movf	_boton_seleccionar& (0+255),w,b
  3166  00E2C0  0100               	movlb	0	; () banked
  3167  00E2C2  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  3168  00E2C4  A4D8               	btfss	status,2,c
  3169  00E2C6  D00B               	goto	l343
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;main.c: 443: lcd_gotoxy(1, 1);
  3173  00E2C8  0E01               	movlw	1
  3174  00E2CA  6E05               	movwf	lcd_gotoxy@y,c
  3175  00E2CC  0E01               	movlw	1
  3176  00E2CE  ECB3  F067         	call	_lcd_gotoxy
  3177                           
  3178                           ;main.c: 444: lcd_putrs("       ");
  3179  00E2D2  0E11               	movlw	low (STR_18+9)
  3180  00E2D4  6E09               	movwf	lcd_putrs@ptr,c
  3181  00E2D6  0EFF               	movlw	high (STR_18+9)
  3182  00E2D8  6E0A               	movwf	lcd_putrs@ptr+1,c
  3183  00E2DA  EC23  F069         	call	_lcd_putrs	;wreg free
  3184  00E2DE                     l343:
  3185                           
  3186                           ;main.c: 445: }
  3187                           ;main.c: 446: if (boton_seleccionar == 1) {
  3188  00E2DE  0100               	movlb	0	; () banked
  3189  00E2E0  0590               	decf	_boton_seleccionar& (0+255),w,b
  3190  00E2E2  0100               	movlb	0	; () banked
  3191  00E2E4  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  3192  00E2E6  A4D8               	btfss	status,2,c
  3193  00E2E8  D00B               	goto	l344
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;main.c: 447: lcd_gotoxy(1, 2);
  3197  00E2EA  0E02               	movlw	2
  3198  00E2EC  6E05               	movwf	lcd_gotoxy@y,c
  3199  00E2EE  0E01               	movlw	1
  3200  00E2F0  ECB3  F067         	call	_lcd_gotoxy
  3201                           
  3202                           ;main.c: 448: lcd_putrs("        ");
  3203  00E2F4  0E10               	movlw	low (STR_18+8)
  3204  00E2F6  6E09               	movwf	lcd_putrs@ptr,c
  3205  00E2F8  0EFF               	movlw	high (STR_18+8)
  3206  00E2FA  6E0A               	movwf	lcd_putrs@ptr+1,c
  3207  00E2FC  EC23  F069         	call	_lcd_putrs	;wreg free
  3208  00E300                     l344:
  3209                           
  3210                           ;main.c: 449: }
  3211                           ;main.c: 450: _delay((unsigned long)((60)*(8000000/4000.0)));
  3212  00E300  0E9C               	movlw	156
  3213  00E302  6E0B               	movwf	??_titila_opcion& (0+255),c
  3214  00E304  0ED7               	movlw	215
  3215  00E306                     u6857:
  3216  00E306  2EE8               	decfsz	wreg,f,c
  3217  00E308  D7FE               	bra	u6857
  3218  00E30A  2E0B               	decfsz	??_titila_opcion& (0+255),f,c
  3219  00E30C  D7FC               	bra	u6857
  3220  00E30E  F000               	nop	
  3221  00E310  0012               	return	
  3222  00E312                     __end_of_titila_opcion:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postdec1	equ	0xFE5
  3233                           fsr1l	equ	0xFE1
  3234                           postinc2	equ	0xFDE
  3235                           postdec2	equ	0xFDD
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _set_reloj_digital *****************
  3241 ;; Defined at:
  3242 ;;		line 104 in file "main.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3260 ;;Total ram usage:        0 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    6
  3263 ;; This function calls:
  3264 ;;		_setDiaMesAnio
  3265 ;;		_setHoraMinutoSegundo
  3266 ;; This function is called by:
  3267 ;;		_ir_a_pantalla_edicion
  3268 ;;		_ir_a_pantalla_inicial
  3269 ;;		_setup
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text13
  3274  00CEB6                     __ptext13:
  3275                           	opt stack 0
  3276  00CEB6                     _set_reloj_digital:
  3277                           	opt stack 23
  3278                           
  3279                           ;main.c: 105: setDiaMesAnio();
  3280                           
  3281                           ;incstack = 0
  3282  00CEB6  EC43  F06C         	call	_setDiaMesAnio	;wreg free
  3283                           
  3284                           ;main.c: 106: setHoraMinutoSegundo();
  3285  00CEBA  ECFB  F06A         	call	_setHoraMinutoSegundo	;wreg free
  3286  00CEBE  0012               	return		;funcret
  3287  00CEC0                     __end_of_set_reloj_digital:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           postinc0	equ	0xFEE
  3296                           wreg	equ	0xFE8
  3297                           postdec1	equ	0xFE5
  3298                           fsr1l	equ	0xFE1
  3299                           postinc2	equ	0xFDE
  3300                           postdec2	equ	0xFDD
  3301                           fsr2h	equ	0xFDA
  3302                           fsr2l	equ	0xFD9
  3303                           status	equ	0xFD8
  3304                           
  3305 ;; *************** function _seleccionar_opcion *****************
  3306 ;; Defined at:
  3307 ;;		line 406 in file "main.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3325 ;;Total ram usage:        0 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    8
  3328 ;; This function calls:
  3329 ;;		_activar_alarma
  3330 ;;		_editar_fecha_reloj_digital
  3331 ;;		_editar_hora_reloj_digital
  3332 ;;		_ir_a_pantalla_editar_contrasenia
  3333 ;; This function is called by:
  3334 ;;		_ir_a_pantalla_edicion
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text14
  3339  00D1F6                     __ptext14:
  3340                           	opt stack 0
  3341  00D1F6                     _seleccionar_opcion:
  3342                           	opt stack 18
  3343                           
  3344                           ;main.c: 407: LATAbits.LATA0 = 1;
  3345                           
  3346                           ;incstack = 0
  3347  00D1F6  8089               	bsf	3977,0,c	;volatile
  3348                           
  3349                           ;main.c: 408: LATAbits.LATA1 = 0;
  3350  00D1F8  9289               	bcf	3977,1,c	;volatile
  3351                           
  3352                           ;main.c: 409: LATAbits.LATA2 = 0;
  3353  00D1FA  9489               	bcf	3977,2,c	;volatile
  3354                           
  3355                           ;main.c: 410: LATAbits.LATA3 = 0;
  3356  00D1FC  9689               	bcf	3977,3,c	;volatile
  3357                           
  3358                           ;main.c: 411: if (PORTCbits.RC2 == 1 && LATAbits.LATA0 == 1) {
  3359  00D1FE  A482               	btfss	3970,2,c	;volatile
  3360  00D200  0012               	return	
  3361  00D202  A089               	btfss	3977,0,c	;volatile
  3362  00D204  0012               	return	
  3363                           
  3364                           ;main.c: 412: if (boton_seleccionar == 0) {
  3365  00D206  0100               	movlb	0	; () banked
  3366  00D208  5190               	movf	_boton_seleccionar& (0+255),w,b
  3367  00D20A  0100               	movlb	0	; () banked
  3368  00D20C  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  3369  00D20E  B4D8               	btfsc	status,2,c
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 413: activar_alarma();
  3373  00D210  EC0B  F07A         	call	_activar_alarma	;wreg free
  3374                           
  3375                           ;main.c: 414: }
  3376                           ;main.c: 415: if (boton_seleccionar == 1) {
  3377  00D214  0100               	movlb	0	; () banked
  3378  00D216  0590               	decf	_boton_seleccionar& (0+255),w,b
  3379  00D218  0100               	movlb	0	; () banked
  3380  00D21A  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  3381  00D21C  B4D8               	btfsc	status,2,c
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 416: ir_a_pantalla_editar_contrasenia();
  3385  00D21E  ECF0  F06D         	call	_ir_a_pantalla_editar_contrasenia	;wreg free
  3386                           
  3387                           ;main.c: 417: }
  3388                           ;main.c: 418: if (boton_seleccionar == 2) {
  3389  00D222  0E02               	movlw	2
  3390  00D224  0100               	movlb	0	; () banked
  3391  00D226  1990               	xorwf	_boton_seleccionar& (0+255),w,b
  3392  00D228  0100               	movlb	0	; () banked
  3393  00D22A  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  3394  00D22C  B4D8               	btfsc	status,2,c
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;main.c: 419: editar_fecha_reloj_digital();
  3398  00D22E  EC1A  F07B         	call	_editar_fecha_reloj_digital	;wreg free
  3399                           
  3400                           ;main.c: 420: }
  3401                           ;main.c: 421: if (boton_seleccionar == 3) {
  3402  00D232  0E03               	movlw	3
  3403  00D234  0100               	movlb	0	; () banked
  3404  00D236  1990               	xorwf	_boton_seleccionar& (0+255),w,b
  3405  00D238  0100               	movlb	0	; () banked
  3406  00D23A  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
  3407  00D23C  A4D8               	btfss	status,2,c
  3408  00D23E  0012               	return	
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;main.c: 422: editar_hora_reloj_digital();
  3412  00D240  ECFD  F078         	call	_editar_hora_reloj_digital	;wreg free
  3413  00D244  0012               	return	
  3414  00D246                     __end_of_seleccionar_opcion:
  3415                           	opt stack 0
  3416                           tblptru	equ	0xFF8
  3417                           tblptrh	equ	0xFF7
  3418                           tblptrl	equ	0xFF6
  3419                           tablat	equ	0xFF5
  3420                           prodh	equ	0xFF4
  3421                           prodl	equ	0xFF3
  3422                           postinc0	equ	0xFEE
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           fsr1l	equ	0xFE1
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _ir_a_pantalla_editar_contrasenia *****************
  3433 ;; Defined at:
  3434 ;;		line 594 in file "main.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  i               2   66[COMRAM] int 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3451 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3452 ;;Total ram usage:        2 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    7
  3455 ;; This function calls:
  3456 ;;		_ingreso_numero
  3457 ;;		_lcd_gotoxy
  3458 ;;		_lcd_putrs
  3459 ;; This function is called by:
  3460 ;;		_seleccionar_opcion
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text15
  3465  00DBE0                     __ptext15:
  3466                           	opt stack 0
  3467  00DBE0                     _ir_a_pantalla_editar_contrasenia:
  3468                           	opt stack 18
  3469                           
  3470                           ;main.c: 595: numeros_ingresados = 0;
  3471                           
  3472                           ;incstack = 0
  3473  00DBE0  0E00               	movlw	0
  3474  00DBE2  0100               	movlb	0	; () banked
  3475  00DBE4  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  3476  00DBE6  0E00               	movlw	0
  3477  00DBE8  6FA4               	movwf	_numeros_ingresados& (0+255),b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;main.c: 596: lcd_gotoxy(1, 1);
  3481  00DBEA  0E01               	movlw	1
  3482  00DBEC  6E05               	movwf	lcd_gotoxy@y,c
  3483  00DBEE  0E01               	movlw	1
  3484  00DBF0  ECB3  F067         	call	_lcd_gotoxy
  3485                           
  3486                           ;main.c: 597: lcd_putrs("Insert new Password ");
  3487  00DBF4  0EE1               	movlw	low STR_41
  3488  00DBF6  6E09               	movwf	lcd_putrs@ptr,c
  3489  00DBF8  0EFE               	movlw	high STR_41
  3490  00DBFA  6E0A               	movwf	lcd_putrs@ptr+1,c
  3491  00DBFC  EC23  F069         	call	_lcd_putrs	;wreg free
  3492                           
  3493                           ;main.c: 598: lcd_gotoxy(1, 2);
  3494  00DC00  0E02               	movlw	2
  3495  00DC02  6E05               	movwf	lcd_gotoxy@y,c
  3496  00DC04  0E01               	movlw	1
  3497  00DC06  ECB3  F067         	call	_lcd_gotoxy
  3498                           
  3499                           ;main.c: 599: lcd_putrs("                ");
  3500  00DC0A  0E08               	movlw	low STR_18
  3501  00DC0C  6E09               	movwf	lcd_putrs@ptr,c
  3502  00DC0E  0EFF               	movlw	high STR_18
  3503  00DC10  6E0A               	movwf	lcd_putrs@ptr+1,c
  3504  00DC12  EC23  F069         	call	_lcd_putrs	;wreg free
  3505  00DC16                     
  3506                           ;main.c: 601: if (numeros_ingresados < 4) {
  3507  00DC16  0100               	movlb	0	; () banked
  3508  00DC18  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3509  00DC1A  D008               	goto	u5880
  3510  00DC1C  0100               	movlb	0	; () banked
  3511  00DC1E  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3512  00DC20  E108               	bnz	l4971
  3513  00DC22  0E04               	movlw	4
  3514  00DC24  0100               	movlb	0	; () banked
  3515  00DC26  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  3516  00DC28  B0D8               	btfsc	status,0,c
  3517  00DC2A  D003               	goto	l416
  3518  00DC2C                     u5880:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;main.c: 602: ingreso_numero();
  3522  00DC2C  EC36  F07C         	call	_ingreso_numero	;wreg free
  3523                           
  3524                           ;main.c: 603: } else {
  3525  00DC30  D7F2               	goto	l415
  3526  00DC32                     l416:
  3527  00DC32                     l4971:
  3528                           
  3529                           ;main.c: 604: for (int i = 0; i < 4; i++) {
  3530  00DC32  0E00               	movlw	0
  3531  00DC34  6E44               	movwf	ir_a_pantalla_editar_contrasenia@i+1,c
  3532  00DC36  0E00               	movlw	0
  3533  00DC38  6E43               	movwf	ir_a_pantalla_editar_contrasenia@i,c
  3534  00DC3A                     l4973:
  3535  00DC3A  BE44               	btfsc	ir_a_pantalla_editar_contrasenia@i+1,7,c
  3536  00DC3C  D006               	goto	l418
  3537  00DC3E  5044               	movf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  3538  00DC40  E11D               	bnz	l422
  3539  00DC42  0E04               	movlw	4
  3540  00DC44  5C43               	subwf	ir_a_pantalla_editar_contrasenia@i,w,c
  3541  00DC46  B0D8               	btfsc	status,0,c
  3542  00DC48  0012               	return	
  3543  00DC4A                     l418:
  3544                           
  3545                           ;main.c: 605: array_contrasenia[i] = array_contrasenia_ingresada[i];
  3546  00DC4A  90D8               	bcf	status,0,c
  3547  00DC4C  3443               	rlcf	ir_a_pantalla_editar_contrasenia@i,w,c
  3548  00DC4E  6ED9               	movwf	fsr2l,c
  3549  00DC50  3444               	rlcf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  3550  00DC52  6EDA               	movwf	fsr2h,c
  3551  00DC54  0E60               	movlw	low _array_contrasenia_ingresada
  3552  00DC56  26D9               	addwf	fsr2l,f,c
  3553  00DC58  0E00               	movlw	high _array_contrasenia_ingresada
  3554  00DC5A  22DA               	addwfc	fsr2h,f,c
  3555  00DC5C  90D8               	bcf	status,0,c
  3556  00DC5E  3443               	rlcf	ir_a_pantalla_editar_contrasenia@i,w,c
  3557  00DC60  6EE1               	movwf	fsr1l,c
  3558  00DC62  3444               	rlcf	ir_a_pantalla_editar_contrasenia@i+1,w,c
  3559  00DC64  6EE2               	movwf	fsr1h,c
  3560  00DC66  0EBD               	movlw	low _array_contrasenia
  3561  00DC68  26E1               	addwf	fsr1l,f,c
  3562  00DC6A  0E00               	movlw	high _array_contrasenia
  3563  00DC6C  22E2               	addwfc	fsr1h,f,c
  3564  00DC6E  CFDE FFE6          	movff	postinc2,postinc1
  3565  00DC72  CFDD FFE5          	movff	postdec2,postdec1
  3566  00DC76  4A43               	infsnz	ir_a_pantalla_editar_contrasenia@i,f,c
  3567  00DC78  2A44               	incf	ir_a_pantalla_editar_contrasenia@i+1,f,c
  3568  00DC7A  D7DF               	goto	l4973
  3569  00DC7C                     l422:
  3570  00DC7C  0012               	return		;funcret
  3571  00DC7E                     __end_of_ir_a_pantalla_editar_contrasenia:
  3572                           	opt stack 0
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           postinc0	equ	0xFEE
  3580                           wreg	equ	0xFE8
  3581                           postinc1	equ	0xFE6
  3582                           postdec1	equ	0xFE5
  3583                           fsr1h	equ	0xFE2
  3584                           fsr1l	equ	0xFE1
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _editar_hora_reloj_digital *****************
  3592 ;; Defined at:
  3593 ;;		line 713 in file "main.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  segundo_ingr    2   14[BANK0 ] int 
  3598 ;;  minuto_ingre    2   12[BANK0 ] int 
  3599 ;;  hora_ingresa    2   10[BANK0 ] int 
  3600 ;;  posicion        2   16[BANK0 ] int 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3611 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3613 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3614 ;;Total ram usage:        9 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    7
  3617 ;; This function calls:
  3618 ;;		_Write_RTC
  3619 ;;		_covertir_valores_de_array_a_escala_decimal
  3620 ;;		_ingreso_numero
  3621 ;;		_setHoraMinutoSegundo
  3622 ;; This function is called by:
  3623 ;;		_seleccionar_opcion
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text16
  3628  00F1FA                     __ptext16:
  3629                           	opt stack 0
  3630  00F1FA                     _editar_hora_reloj_digital:
  3631                           	opt stack 18
  3632                           
  3633                           ;main.c: 714: int posicion = 0;
  3634                           
  3635                           ;incstack = 0
  3636  00F1FA  0E00               	movlw	0
  3637  00F1FC  0100               	movlb	0	; () banked
  3638  00F1FE  6FE4               	movwf	(editar_hora_reloj_digital@posicion+1)& (0+255),b
  3639  00F200  0E00               	movlw	0
  3640  00F202  6FE3               	movwf	editar_hora_reloj_digital@posicion& (0+255),b
  3641                           
  3642                           ;main.c: 715: motivo_ingreso_de_numeros = 1;
  3643  00F204  0E00               	movlw	0
  3644  00F206  0100               	movlb	0	; () banked
  3645  00F208  6FA3               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  3646  00F20A  0E01               	movlw	1
  3647  00F20C  6FA2               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;main.c: 717: if (posicion == 0) {
  3651  00F20E  0100               	movlb	0	; () banked
  3652  00F210  51E3               	movf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3653  00F212  0100               	movlb	0	; () banked
  3654  00F214  11E4               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3655  00F216  A4D8               	btfss	status,2,c
  3656  00F218  D04C               	goto	l461
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;main.c: 718: numeros_ingresados = 0;
  3660  00F21A  0E00               	movlw	0
  3661  00F21C  0100               	movlb	0	; () banked
  3662  00F21E  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  3663  00F220  0E00               	movlw	0
  3664  00F222  6FA4               	movwf	_numeros_ingresados& (0+255),b
  3665                           
  3666                           ;main.c: 719: int hora_ingresada = 0;
  3667  00F224  0E00               	movlw	0
  3668  00F226  0100               	movlb	0	; () banked
  3669  00F228  6FDE               	movwf	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),b
  3670  00F22A  0E00               	movlw	0
  3671  00F22C  6FDD               	movwf	editar_hora_reloj_digital@hora_ingresada& (0+255),b
  3672                           
  3673                           ;main.c: 720: while (numeros_ingresados < 3) {
  3674  00F22E  D02A               	goto	l466
  3675  00F230                     
  3676                           ; BSR set to: 0
  3677                           ;main.c: 721: ingreso_numero();
  3678                           
  3679                           ; BSR set to: 0
  3680  00F230  EC36  F07C         	call	_ingreso_numero	;wreg free
  3681                           
  3682                           ;main.c: 722: if (numeros_ingresados == 2) {
  3683  00F234  0E02               	movlw	2
  3684  00F236  0100               	movlb	0	; () banked
  3685  00F238  19A4               	xorwf	_numeros_ingresados& (0+255),w,b
  3686  00F23A  0100               	movlb	0	; () banked
  3687  00F23C  11A5               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3688  00F23E  A4D8               	btfss	status,2,c
  3689  00F240  D021               	goto	l466
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;main.c: 723: hora_ingresada = covertir_valores_de_array_a_escala_decimal();
  3693  00F242  ECB1  F070         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3694  00F246  C05B  F0DD         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@hora_ingre
      +                          sada
  3695  00F24A  C05C  F0DE         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@hora_ing
      +                          resada+1
  3696                           
  3697                           ;main.c: 724: if ((0 <= hora_ingresada) && (hora_ingresada <= 23)) {
  3698  00F24E  0100               	movlb	0	; () banked
  3699  00F250  BFDE               	btfsc	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),7,b
  3700  00F252  D013               	goto	l465
  3701                           
  3702                           ; BSR set to: 0
  3703  00F254  0100               	movlb	0	; () banked
  3704  00F256  BFDE               	btfsc	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),7,b
  3705  00F258  D008               	goto	u6090
  3706  00F25A  0100               	movlb	0	; () banked
  3707  00F25C  51DE               	movf	(editar_hora_reloj_digital@hora_ingresada+1)& (0+255),w,b
  3708  00F25E  E10D               	bnz	l5095
  3709  00F260  0E18               	movlw	24
  3710  00F262  0100               	movlb	0	; () banked
  3711  00F264  5DDD               	subwf	editar_hora_reloj_digital@hora_ingresada& (0+255),w,b
  3712  00F266  B0D8               	btfsc	status,0,c
  3713  00F268  D008               	goto	l465
  3714  00F26A                     u6090:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;main.c: 725: hora = hora_ingresada;
  3718  00F26A  C0DD  F0C9         	movff	editar_hora_reloj_digital@hora_ingresada,_hora
  3719  00F26E  C0DE  F0CA         	movff	editar_hora_reloj_digital@hora_ingresada+1,_hora+1
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;main.c: 726: numeros_ingresados++;
  3723  00F272  0100               	movlb	0	; () banked
  3724  00F274  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
  3725  00F276  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3726                           
  3727                           ;main.c: 727: } else {
  3728  00F278  D005               	goto	l466
  3729  00F27A                     l465:
  3730  00F27A                     l5095:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;main.c: 728: numeros_ingresados = 0;
  3734  00F27A  0E00               	movlw	0
  3735  00F27C  0100               	movlb	0	; () banked
  3736  00F27E  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  3737  00F280  0E00               	movlw	0
  3738  00F282  6FA4               	movwf	_numeros_ingresados& (0+255),b
  3739  00F284                     l466:
  3740                           
  3741                           ; BSR set to: 0
  3742                           
  3743                           ; BSR set to: 0
  3744                           
  3745                           ; BSR set to: 0
  3746                           
  3747                           ; BSR set to: 0
  3748  00F284  0100               	movlb	0	; () banked
  3749  00F286  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3750  00F288  D7D3               	goto	l463
  3751  00F28A  0100               	movlb	0	; () banked
  3752  00F28C  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3753  00F28E  E105               	bnz	l5099
  3754  00F290  0E03               	movlw	3
  3755  00F292  0100               	movlb	0	; () banked
  3756  00F294  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  3757  00F296  A0D8               	btfss	status,0,c
  3758  00F298  D7CB               	goto	l463
  3759  00F29A                     l5099:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;main.c: 729: }
  3763                           ;main.c: 730: }
  3764                           ;main.c: 731: }
  3765                           ;main.c: 733: setHoraMinutoSegundo();
  3766  00F29A  ECFB  F06A         	call	_setHoraMinutoSegundo	;wreg free
  3767                           
  3768                           ;main.c: 734: posicion++;
  3769  00F29E  0100               	movlb	0	; () banked
  3770  00F2A0  4BE3               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3771  00F2A2  2BE4               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;main.c: 735: _delay((unsigned long)((50)*(8000000/4000.0)));
  3775  00F2A4  0E82               	movlw	130
  3776  00F2A6  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3777  00F2A8  0EDE               	movlw	222
  3778  00F2AA                     u6867:
  3779  00F2AA  2EE8               	decfsz	wreg,f,c
  3780  00F2AC  D7FE               	bra	u6867
  3781  00F2AE  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3782  00F2B0  D7FC               	bra	u6867
  3783  00F2B2                     l461:
  3784                           
  3785                           ;main.c: 736: }
  3786                           ;main.c: 739: if (posicion == 1) {
  3787  00F2B2  0100               	movlb	0	; () banked
  3788  00F2B4  05E3               	decf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3789  00F2B6  0100               	movlb	0	; () banked
  3790  00F2B8  11E4               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3791  00F2BA  A4D8               	btfss	status,2,c
  3792  00F2BC  D04C               	goto	l468
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;main.c: 740: numeros_ingresados = 0;
  3796  00F2BE  0E00               	movlw	0
  3797  00F2C0  0100               	movlb	0	; () banked
  3798  00F2C2  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  3799  00F2C4  0E00               	movlw	0
  3800  00F2C6  6FA4               	movwf	_numeros_ingresados& (0+255),b
  3801                           
  3802                           ;main.c: 741: int minuto_ingresado = 0;
  3803  00F2C8  0E00               	movlw	0
  3804  00F2CA  0100               	movlb	0	; () banked
  3805  00F2CC  6FE0               	movwf	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),b
  3806  00F2CE  0E00               	movlw	0
  3807  00F2D0  6FDF               	movwf	editar_hora_reloj_digital@minuto_ingresado& (0+255),b
  3808                           
  3809                           ;main.c: 742: while (numeros_ingresados < 3) {
  3810  00F2D2  D02A               	goto	l473
  3811  00F2D4                     
  3812                           ; BSR set to: 0
  3813                           ;main.c: 743: ingreso_numero();
  3814                           
  3815                           ; BSR set to: 0
  3816  00F2D4  EC36  F07C         	call	_ingreso_numero	;wreg free
  3817                           
  3818                           ;main.c: 744: if (numeros_ingresados == 2) {
  3819  00F2D8  0E02               	movlw	2
  3820  00F2DA  0100               	movlb	0	; () banked
  3821  00F2DC  19A4               	xorwf	_numeros_ingresados& (0+255),w,b
  3822  00F2DE  0100               	movlb	0	; () banked
  3823  00F2E0  11A5               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3824  00F2E2  A4D8               	btfss	status,2,c
  3825  00F2E4  D021               	goto	l473
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;main.c: 745: minuto_ingresado = covertir_valores_de_array_a_escala_decimal();
  3829  00F2E6  ECB1  F070         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3830  00F2EA  C05B  F0DF         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@minuto_ing
      +                          resado
  3831  00F2EE  C05C  F0E0         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@minuto_i
      +                          ngresado+1
  3832                           
  3833                           ;main.c: 746: if ((0 <= minuto_ingresado) && (minuto_ingresado <= 59)) {
  3834  00F2F2  0100               	movlb	0	; () banked
  3835  00F2F4  BFE0               	btfsc	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),7,b
  3836  00F2F6  D013               	goto	l472
  3837                           
  3838                           ; BSR set to: 0
  3839  00F2F8  0100               	movlb	0	; () banked
  3840  00F2FA  BFE0               	btfsc	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),7,b
  3841  00F2FC  D008               	goto	u6140
  3842  00F2FE  0100               	movlb	0	; () banked
  3843  00F300  51E0               	movf	(editar_hora_reloj_digital@minuto_ingresado+1)& (0+255),w,b
  3844  00F302  E10D               	bnz	l5123
  3845  00F304  0E3C               	movlw	60
  3846  00F306  0100               	movlb	0	; () banked
  3847  00F308  5DDF               	subwf	editar_hora_reloj_digital@minuto_ingresado& (0+255),w,b
  3848  00F30A  B0D8               	btfsc	status,0,c
  3849  00F30C  D008               	goto	l472
  3850  00F30E                     u6140:
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;main.c: 747: minuto = minuto_ingresado;
  3854  00F30E  C0DF  F0C7         	movff	editar_hora_reloj_digital@minuto_ingresado,_minuto
  3855  00F312  C0E0  F0C8         	movff	editar_hora_reloj_digital@minuto_ingresado+1,_minuto+1
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;main.c: 748: numeros_ingresados++;
  3859  00F316  0100               	movlb	0	; () banked
  3860  00F318  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
  3861  00F31A  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3862                           
  3863                           ;main.c: 749: } else {
  3864  00F31C  D005               	goto	l473
  3865  00F31E                     l472:
  3866  00F31E                     l5123:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;main.c: 750: numeros_ingresados = 0;
  3870  00F31E  0E00               	movlw	0
  3871  00F320  0100               	movlb	0	; () banked
  3872  00F322  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  3873  00F324  0E00               	movlw	0
  3874  00F326  6FA4               	movwf	_numeros_ingresados& (0+255),b
  3875  00F328                     l473:
  3876                           
  3877                           ; BSR set to: 0
  3878                           
  3879                           ; BSR set to: 0
  3880                           
  3881                           ; BSR set to: 0
  3882                           
  3883                           ; BSR set to: 0
  3884  00F328  0100               	movlb	0	; () banked
  3885  00F32A  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  3886  00F32C  D7D3               	goto	l470
  3887  00F32E  0100               	movlb	0	; () banked
  3888  00F330  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  3889  00F332  E105               	bnz	l5127
  3890  00F334  0E03               	movlw	3
  3891  00F336  0100               	movlb	0	; () banked
  3892  00F338  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  3893  00F33A  A0D8               	btfss	status,0,c
  3894  00F33C  D7CB               	goto	l470
  3895  00F33E                     l5127:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;main.c: 751: }
  3899                           ;main.c: 752: }
  3900                           ;main.c: 753: }
  3901                           ;main.c: 755: setHoraMinutoSegundo();
  3902  00F33E  ECFB  F06A         	call	_setHoraMinutoSegundo	;wreg free
  3903                           
  3904                           ;main.c: 756: posicion++;
  3905  00F342  0100               	movlb	0	; () banked
  3906  00F344  4BE3               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  3907  00F346  2BE4               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;main.c: 757: _delay((unsigned long)((50)*(8000000/4000.0)));
  3911  00F348  0E82               	movlw	130
  3912  00F34A  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  3913  00F34C  0EDE               	movlw	222
  3914  00F34E                     u6877:
  3915  00F34E  2EE8               	decfsz	wreg,f,c
  3916  00F350  D7FE               	bra	u6877
  3917  00F352  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  3918  00F354  D7FC               	bra	u6877
  3919  00F356                     l468:
  3920                           
  3921                           ;main.c: 758: }
  3922                           ;main.c: 761: if (posicion == 2) {
  3923  00F356  0E02               	movlw	2
  3924  00F358  0100               	movlb	0	; () banked
  3925  00F35A  19E3               	xorwf	editar_hora_reloj_digital@posicion& (0+255),w,b
  3926  00F35C  0100               	movlb	0	; () banked
  3927  00F35E  11E4               	iorwf	(editar_hora_reloj_digital@posicion+1)& (0+255),w,b
  3928  00F360  A4D8               	btfss	status,2,c
  3929  00F362  D04C               	goto	l475
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;main.c: 762: numeros_ingresados = 0;
  3933  00F364  0E00               	movlw	0
  3934  00F366  0100               	movlb	0	; () banked
  3935  00F368  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  3936  00F36A  0E00               	movlw	0
  3937  00F36C  6FA4               	movwf	_numeros_ingresados& (0+255),b
  3938                           
  3939                           ;main.c: 763: int segundo_ingresado = 0;
  3940  00F36E  0E00               	movlw	0
  3941  00F370  0100               	movlb	0	; () banked
  3942  00F372  6FE2               	movwf	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),b
  3943  00F374  0E00               	movlw	0
  3944  00F376  6FE1               	movwf	editar_hora_reloj_digital@segundo_ingresado& (0+255),b
  3945                           
  3946                           ;main.c: 764: while (numeros_ingresados < 3) {
  3947  00F378  D02A               	goto	l480
  3948  00F37A                     
  3949                           ; BSR set to: 0
  3950                           ;main.c: 765: ingreso_numero();
  3951                           
  3952                           ; BSR set to: 0
  3953  00F37A  EC36  F07C         	call	_ingreso_numero	;wreg free
  3954                           
  3955                           ;main.c: 766: if (numeros_ingresados == 2) {
  3956  00F37E  0E02               	movlw	2
  3957  00F380  0100               	movlb	0	; () banked
  3958  00F382  19A4               	xorwf	_numeros_ingresados& (0+255),w,b
  3959  00F384  0100               	movlb	0	; () banked
  3960  00F386  11A5               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  3961  00F388  A4D8               	btfss	status,2,c
  3962  00F38A  D021               	goto	l480
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;main.c: 767: segundo_ingresado = covertir_valores_de_array_a_escala_decimal();
  3966  00F38C  ECB1  F070         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  3967  00F390  C05B  F0E1         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_hora_reloj_digital@segundo_in
      +                          gresado
  3968  00F394  C05C  F0E2         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_hora_reloj_digital@segundo_
      +                          ingresado+1
  3969                           
  3970                           ;main.c: 768: if ((0 <= segundo_ingresado) && (segundo_ingresado <= 59)) {
  3971  00F398  0100               	movlb	0	; () banked
  3972  00F39A  BFE2               	btfsc	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),7,b
  3973  00F39C  D013               	goto	l479
  3974                           
  3975                           ; BSR set to: 0
  3976  00F39E  0100               	movlb	0	; () banked
  3977  00F3A0  BFE2               	btfsc	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),7,b
  3978  00F3A2  D008               	goto	u6190
  3979  00F3A4  0100               	movlb	0	; () banked
  3980  00F3A6  51E2               	movf	(editar_hora_reloj_digital@segundo_ingresado+1)& (0+255),w,b
  3981  00F3A8  E10D               	bnz	l5151
  3982  00F3AA  0E3C               	movlw	60
  3983  00F3AC  0100               	movlb	0	; () banked
  3984  00F3AE  5DE1               	subwf	editar_hora_reloj_digital@segundo_ingresado& (0+255),w,b
  3985  00F3B0  B0D8               	btfsc	status,0,c
  3986  00F3B2  D008               	goto	l479
  3987  00F3B4                     u6190:
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;main.c: 769: segundo = segundo_ingresado;
  3991  00F3B4  C0E1  F0A6         	movff	editar_hora_reloj_digital@segundo_ingresado,_segundo
  3992  00F3B8  C0E2  F0A7         	movff	editar_hora_reloj_digital@segundo_ingresado+1,_segundo+1
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;main.c: 770: numeros_ingresados++;
  3996  00F3BC  0100               	movlb	0	; () banked
  3997  00F3BE  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
  3998  00F3C0  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
  3999                           
  4000                           ;main.c: 771: } else {
  4001  00F3C2  D005               	goto	l480
  4002  00F3C4                     l479:
  4003  00F3C4                     l5151:
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;main.c: 772: numeros_ingresados = 0;
  4007  00F3C4  0E00               	movlw	0
  4008  00F3C6  0100               	movlb	0	; () banked
  4009  00F3C8  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4010  00F3CA  0E00               	movlw	0
  4011  00F3CC  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4012  00F3CE                     l480:
  4013                           
  4014                           ; BSR set to: 0
  4015                           
  4016                           ; BSR set to: 0
  4017                           
  4018                           ; BSR set to: 0
  4019                           
  4020                           ; BSR set to: 0
  4021  00F3CE  0100               	movlb	0	; () banked
  4022  00F3D0  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  4023  00F3D2  D7D3               	goto	l477
  4024  00F3D4  0100               	movlb	0	; () banked
  4025  00F3D6  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  4026  00F3D8  E105               	bnz	l5155
  4027  00F3DA  0E03               	movlw	3
  4028  00F3DC  0100               	movlb	0	; () banked
  4029  00F3DE  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  4030  00F3E0  A0D8               	btfss	status,0,c
  4031  00F3E2  D7CB               	goto	l477
  4032  00F3E4                     l5155:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;main.c: 773: }
  4036                           ;main.c: 774: }
  4037                           ;main.c: 775: }
  4038                           ;main.c: 777: setHoraMinutoSegundo();
  4039  00F3E4  ECFB  F06A         	call	_setHoraMinutoSegundo	;wreg free
  4040                           
  4041                           ;main.c: 778: posicion++;
  4042  00F3E8  0100               	movlb	0	; () banked
  4043  00F3EA  4BE3               	infsnz	editar_hora_reloj_digital@posicion& (0+255),f,b
  4044  00F3EC  2BE4               	incf	(editar_hora_reloj_digital@posicion+1)& (0+255),f,b
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;main.c: 779: _delay((unsigned long)((50)*(8000000/4000.0)));
  4048  00F3EE  0E82               	movlw	130
  4049  00F3F0  6E5F               	movwf	??_editar_hora_reloj_digital& (0+255),c
  4050  00F3F2  0EDE               	movlw	222
  4051  00F3F4                     u6887:
  4052  00F3F4  2EE8               	decfsz	wreg,f,c
  4053  00F3F6  D7FE               	bra	u6887
  4054  00F3F8  2E5F               	decfsz	??_editar_hora_reloj_digital& (0+255),f,c
  4055  00F3FA  D7FC               	bra	u6887
  4056  00F3FC                     l475:
  4057                           
  4058                           ;main.c: 780: }
  4059                           ;main.c: 781: Write_RTC();
  4060  00F3FC  EC65  F076         	call	_Write_RTC	;wreg free
  4061                           
  4062                           ;main.c: 782: motivo_ingreso_de_numeros = 0;
  4063  00F400  0E00               	movlw	0
  4064  00F402  0100               	movlb	0	; () banked
  4065  00F404  6FA3               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  4066  00F406  0E00               	movlw	0
  4067  00F408  6FA2               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;main.c: 783: numeros_ingresados = 0;
  4071  00F40A  0E00               	movlw	0
  4072  00F40C  0100               	movlb	0	; () banked
  4073  00F40E  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4074  00F410  0E00               	movlw	0
  4075  00F412  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4076                           
  4077                           ; BSR set to: 0
  4078  00F414  0012               	return		;funcret
  4079  00F416                     __end_of_editar_hora_reloj_digital:
  4080                           	opt stack 0
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           postinc0	equ	0xFEE
  4088                           wreg	equ	0xFE8
  4089                           postinc1	equ	0xFE6
  4090                           postdec1	equ	0xFE5
  4091                           fsr1h	equ	0xFE2
  4092                           fsr1l	equ	0xFE1
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _setHoraMinutoSegundo *****************
  4100 ;; Defined at:
  4101 ;;		line 91 in file "main.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      void 
  4108 ;; Registers used:
  4109 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    5
  4122 ;; This function calls:
  4123 ;;		_Write_RTC
  4124 ;;		_lcd_gotoxy
  4125 ;;		_lcd_putrs
  4126 ;;		_sprintf
  4127 ;; This function is called by:
  4128 ;;		_set_reloj_digital
  4129 ;;		_editar_hora_reloj_digital
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text17
  4134  00D5F6                     __ptext17:
  4135                           	opt stack 0
  4136  00D5F6                     _setHoraMinutoSegundo:
  4137                           	opt stack 23
  4138                           
  4139                           ;main.c: 92: if (hora >= 24) {
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;incstack = 0
  4143  00D5F6  0100               	movlb	0	; () banked
  4144  00D5F8  BFCA               	btfsc	(_hora+1)& (0+255),7,b
  4145  00D5FA  D019               	goto	l194
  4146  00D5FC  0100               	movlb	0	; () banked
  4147  00D5FE  51CA               	movf	(_hora+1)& (0+255),w,b
  4148  00D600  E105               	bnz	u5050
  4149  00D602  0E18               	movlw	24
  4150  00D604  0100               	movlb	0	; () banked
  4151  00D606  5DC9               	subwf	_hora& (0+255),w,b
  4152  00D608  A0D8               	btfss	status,0,c
  4153  00D60A  D011               	goto	l194
  4154  00D60C                     u5050:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;main.c: 93: hora = 0;
  4158  00D60C  0E00               	movlw	0
  4159  00D60E  0100               	movlb	0	; () banked
  4160  00D610  6FCA               	movwf	(_hora+1)& (0+255),b
  4161  00D612  0E00               	movlw	0
  4162  00D614  6FC9               	movwf	_hora& (0+255),b
  4163                           
  4164                           ;main.c: 94: minuto = 0;
  4165  00D616  0E00               	movlw	0
  4166  00D618  0100               	movlb	0	; () banked
  4167  00D61A  6FC8               	movwf	(_minuto+1)& (0+255),b
  4168  00D61C  0E00               	movlw	0
  4169  00D61E  6FC7               	movwf	_minuto& (0+255),b
  4170                           
  4171                           ;main.c: 95: segundo = 0;
  4172  00D620  0E00               	movlw	0
  4173  00D622  0100               	movlb	0	; () banked
  4174  00D624  6FA7               	movwf	(_segundo+1)& (0+255),b
  4175  00D626  0E00               	movlw	0
  4176  00D628  6FA6               	movwf	_segundo& (0+255),b
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;main.c: 96: Write_RTC();
  4180  00D62A  EC65  F076         	call	_Write_RTC	;wreg free
  4181  00D62E                     l194:
  4182                           
  4183                           ;main.c: 97: }
  4184                           ;main.c: 99: sprintf(buffer2, "%02u:%02u:%02u", hora, minuto, segundo);
  4185  00D62E  0E14               	movlw	low _buffer2
  4186  00D630  6E22               	movwf	sprintf@sp,c
  4187  00D632  0E01               	movlw	high _buffer2
  4188  00D634  6E23               	movwf	sprintf@sp+1,c
  4189  00D636  0E4A               	movlw	low STR_9
  4190  00D638  6E24               	movwf	sprintf@f,c
  4191  00D63A  0EFF               	movlw	high STR_9
  4192  00D63C  6E25               	movwf	sprintf@f+1,c
  4193  00D63E  C0C9  F026         	movff	_hora,?_sprintf+4
  4194  00D642  C0CA  F027         	movff	_hora+1,?_sprintf+5
  4195  00D646  C0C7  F028         	movff	_minuto,?_sprintf+6
  4196  00D64A  C0C8  F029         	movff	_minuto+1,?_sprintf+7
  4197  00D64E  C0A6  F02A         	movff	_segundo,?_sprintf+8
  4198  00D652  C0A7  F02B         	movff	_segundo+1,?_sprintf+9
  4199  00D656  EC6A  F07D         	call	_sprintf	;wreg free
  4200                           
  4201                           ;main.c: 100: lcd_gotoxy(9, 2);
  4202  00D65A  0E02               	movlw	2
  4203  00D65C  6E05               	movwf	lcd_gotoxy@y,c
  4204  00D65E  0E09               	movlw	9
  4205  00D660  ECB3  F067         	call	_lcd_gotoxy
  4206                           
  4207                           ;main.c: 101: lcd_putrs(buffer2);
  4208  00D664  0E14               	movlw	low _buffer2
  4209  00D666  6E09               	movwf	lcd_putrs@ptr,c
  4210  00D668  0E01               	movlw	high _buffer2
  4211  00D66A  6E0A               	movwf	lcd_putrs@ptr+1,c
  4212  00D66C  EC23  F069         	call	_lcd_putrs	;wreg free
  4213  00D670  0012               	return		;funcret
  4214  00D672                     __end_of_setHoraMinutoSegundo:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           postinc1	equ	0xFE6
  4225                           postdec1	equ	0xFE5
  4226                           fsr1h	equ	0xFE2
  4227                           fsr1l	equ	0xFE1
  4228                           postinc2	equ	0xFDE
  4229                           postdec2	equ	0xFDD
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function _editar_fecha_reloj_digital *****************
  4235 ;; Defined at:
  4236 ;;		line 636 in file "main.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;		None
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  anio_ingresa    2   14[BANK0 ] int 
  4241 ;;  mes_ingresad    2   12[BANK0 ] int 
  4242 ;;  dia_ingresad    2   10[BANK0 ] int 
  4243 ;;  posicion        2   16[BANK0 ] int 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4254 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4255 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4256 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4257 ;;Total ram usage:        9 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    7
  4260 ;; This function calls:
  4261 ;;		_Write_RTC
  4262 ;;		_covertir_valores_de_array_a_escala_decimal
  4263 ;;		_ingreso_numero
  4264 ;;		_setDiaMesAnio
  4265 ;; This function is called by:
  4266 ;;		_seleccionar_opcion
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text18
  4271  00F634                     __ptext18:
  4272                           	opt stack 0
  4273  00F634                     _editar_fecha_reloj_digital:
  4274                           	opt stack 18
  4275                           
  4276                           ;main.c: 637: int posicion = 0;
  4277                           
  4278                           ;incstack = 0
  4279  00F634  0E00               	movlw	0
  4280  00F636  0100               	movlb	0	; () banked
  4281  00F638  6FE4               	movwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),b
  4282  00F63A  0E00               	movlw	0
  4283  00F63C  6FE3               	movwf	editar_fecha_reloj_digital@posicion& (0+255),b
  4284                           
  4285                           ;main.c: 639: motivo_ingreso_de_numeros = 1;
  4286  00F63E  0E00               	movlw	0
  4287  00F640  0100               	movlb	0	; () banked
  4288  00F642  6FA3               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  4289  00F644  0E01               	movlw	1
  4290  00F646  6FA2               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;main.c: 642: if (posicion == 0) {
  4294  00F648  0100               	movlb	0	; () banked
  4295  00F64A  51E3               	movf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  4296  00F64C  0100               	movlb	0	; () banked
  4297  00F64E  11E4               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  4298  00F650  A4D8               	btfss	status,2,c
  4299  00F652  D053               	goto	l437
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;main.c: 643: numeros_ingresados = 0;
  4303  00F654  0E00               	movlw	0
  4304  00F656  0100               	movlb	0	; () banked
  4305  00F658  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4306  00F65A  0E00               	movlw	0
  4307  00F65C  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4308                           
  4309                           ;main.c: 644: int dia_ingresado = 0;
  4310  00F65E  0E00               	movlw	0
  4311  00F660  0100               	movlb	0	; () banked
  4312  00F662  6FDE               	movwf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),b
  4313  00F664  0E00               	movlw	0
  4314  00F666  6FDD               	movwf	editar_fecha_reloj_digital@dia_ingresado& (0+255),b
  4315                           
  4316                           ;main.c: 645: while (numeros_ingresados < 3) {
  4317  00F668  D031               	goto	l442
  4318  00F66A                     
  4319                           ; BSR set to: 0
  4320                           ;main.c: 647: ingreso_numero();
  4321                           
  4322                           ; BSR set to: 0
  4323  00F66A  EC36  F07C         	call	_ingreso_numero	;wreg free
  4324                           
  4325                           ;main.c: 649: if (numeros_ingresados == 2) {
  4326  00F66E  0E02               	movlw	2
  4327  00F670  0100               	movlb	0	; () banked
  4328  00F672  19A4               	xorwf	_numeros_ingresados& (0+255),w,b
  4329  00F674  0100               	movlb	0	; () banked
  4330  00F676  11A5               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  4331  00F678  A4D8               	btfss	status,2,c
  4332  00F67A  D028               	goto	l442
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;main.c: 650: dia_ingresado = covertir_valores_de_array_a_escala_decimal();
  4336  00F67C  ECB1  F070         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  4337  00F680  C05B  F0DD         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@dia_ingre
      +                          sado
  4338  00F684  C05C  F0DE         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@dia_ing
      +                          resado+1
  4339                           
  4340                           ;main.c: 651: if ((0 < dia_ingresado) && (dia_ingresado <= 31)) {
  4341  00F688  0100               	movlb	0	; () banked
  4342  00F68A  BFDE               	btfsc	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),7,b
  4343  00F68C  D01A               	goto	l441
  4344  00F68E  0100               	movlb	0	; () banked
  4345  00F690  51DE               	movf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),w,b
  4346  00F692  E104               	bnz	u5930
  4347  00F694  0100               	movlb	0	; () banked
  4348  00F696  05DD               	decf	editar_fecha_reloj_digital@dia_ingresado& (0+255),w,b
  4349  00F698  A0D8               	btfss	status,0,c
  4350  00F69A  D013               	goto	l441
  4351  00F69C                     u5930:
  4352                           
  4353                           ; BSR set to: 0
  4354  00F69C  0100               	movlb	0	; () banked
  4355  00F69E  BFDE               	btfsc	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),7,b
  4356  00F6A0  D008               	goto	u5940
  4357  00F6A2  0100               	movlb	0	; () banked
  4358  00F6A4  51DE               	movf	(editar_fecha_reloj_digital@dia_ingresado+1)& (0+255),w,b
  4359  00F6A6  E10D               	bnz	l5003
  4360  00F6A8  0E20               	movlw	32
  4361  00F6AA  0100               	movlb	0	; () banked
  4362  00F6AC  5DDD               	subwf	editar_fecha_reloj_digital@dia_ingresado& (0+255),w,b
  4363  00F6AE  B0D8               	btfsc	status,0,c
  4364  00F6B0  D008               	goto	l441
  4365  00F6B2                     u5940:
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;main.c: 652: dia = dia_ingresado;
  4369  00F6B2  C0DD  F0CB         	movff	editar_fecha_reloj_digital@dia_ingresado,_dia
  4370  00F6B6  C0DE  F0CC         	movff	editar_fecha_reloj_digital@dia_ingresado+1,_dia+1
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;main.c: 653: numeros_ingresados++;
  4374  00F6BA  0100               	movlb	0	; () banked
  4375  00F6BC  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
  4376  00F6BE  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
  4377                           
  4378                           ;main.c: 654: } else {
  4379  00F6C0  D005               	goto	l442
  4380  00F6C2                     l441:
  4381  00F6C2                     l5003:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;main.c: 655: numeros_ingresados = 0;
  4385  00F6C2  0E00               	movlw	0
  4386  00F6C4  0100               	movlb	0	; () banked
  4387  00F6C6  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4388  00F6C8  0E00               	movlw	0
  4389  00F6CA  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4390  00F6CC                     l442:
  4391                           
  4392                           ; BSR set to: 0
  4393                           
  4394                           ; BSR set to: 0
  4395                           
  4396                           ; BSR set to: 0
  4397                           
  4398                           ; BSR set to: 0
  4399  00F6CC  0100               	movlb	0	; () banked
  4400  00F6CE  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  4401  00F6D0  D7CC               	goto	l439
  4402  00F6D2  0100               	movlb	0	; () banked
  4403  00F6D4  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  4404  00F6D6  E105               	bnz	l5007
  4405  00F6D8  0E03               	movlw	3
  4406  00F6DA  0100               	movlb	0	; () banked
  4407  00F6DC  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  4408  00F6DE  A0D8               	btfss	status,0,c
  4409  00F6E0  D7C4               	goto	l439
  4410  00F6E2                     l5007:
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;main.c: 656: }
  4414                           ;main.c: 657: }
  4415                           ;main.c: 658: }
  4416                           ;main.c: 660: setDiaMesAnio();
  4417  00F6E2  EC43  F06C         	call	_setDiaMesAnio	;wreg free
  4418                           
  4419                           ;main.c: 661: posicion++;
  4420  00F6E6  0100               	movlb	0	; () banked
  4421  00F6E8  4BE3               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  4422  00F6EA  2BE4               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;main.c: 662: _delay((unsigned long)((50)*(8000000/4000.0)));
  4426  00F6EC  0E82               	movlw	130
  4427  00F6EE  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  4428  00F6F0  0EDE               	movlw	222
  4429  00F6F2                     u6897:
  4430  00F6F2  2EE8               	decfsz	wreg,f,c
  4431  00F6F4  D7FE               	bra	u6897
  4432  00F6F6  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  4433  00F6F8  D7FC               	bra	u6897
  4434  00F6FA                     l437:
  4435                           
  4436                           ;main.c: 663: }
  4437                           ;main.c: 666: if (posicion == 1) {
  4438  00F6FA  0100               	movlb	0	; () banked
  4439  00F6FC  05E3               	decf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  4440  00F6FE  0100               	movlb	0	; () banked
  4441  00F700  11E4               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  4442  00F702  A4D8               	btfss	status,2,c
  4443  00F704  D053               	goto	l444
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;main.c: 667: numeros_ingresados = 0;
  4447  00F706  0E00               	movlw	0
  4448  00F708  0100               	movlb	0	; () banked
  4449  00F70A  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4450  00F70C  0E00               	movlw	0
  4451  00F70E  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4452                           
  4453                           ;main.c: 668: int mes_ingresado = 0;
  4454  00F710  0E00               	movlw	0
  4455  00F712  0100               	movlb	0	; () banked
  4456  00F714  6FE0               	movwf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),b
  4457  00F716  0E00               	movlw	0
  4458  00F718  6FDF               	movwf	editar_fecha_reloj_digital@mes_ingresado& (0+255),b
  4459                           
  4460                           ;main.c: 669: while (numeros_ingresados < 3) {
  4461  00F71A  D031               	goto	l449
  4462  00F71C                     
  4463                           ; BSR set to: 0
  4464                           ;main.c: 670: ingreso_numero();
  4465                           
  4466                           ; BSR set to: 0
  4467  00F71C  EC36  F07C         	call	_ingreso_numero	;wreg free
  4468                           
  4469                           ;main.c: 671: if (numeros_ingresados == 2) {
  4470  00F720  0E02               	movlw	2
  4471  00F722  0100               	movlb	0	; () banked
  4472  00F724  19A4               	xorwf	_numeros_ingresados& (0+255),w,b
  4473  00F726  0100               	movlb	0	; () banked
  4474  00F728  11A5               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  4475  00F72A  A4D8               	btfss	status,2,c
  4476  00F72C  D028               	goto	l449
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;main.c: 672: mes_ingresado = covertir_valores_de_array_a_escala_decimal();
  4480  00F72E  ECB1  F070         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  4481  00F732  C05B  F0DF         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@mes_ingre
      +                          sado
  4482  00F736  C05C  F0E0         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@mes_ing
      +                          resado+1
  4483                           
  4484                           ;main.c: 673: if ((0 < mes_ingresado) && (mes_ingresado <= 12)) {
  4485  00F73A  0100               	movlb	0	; () banked
  4486  00F73C  BFE0               	btfsc	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),7,b
  4487  00F73E  D01A               	goto	l448
  4488  00F740  0100               	movlb	0	; () banked
  4489  00F742  51E0               	movf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),w,b
  4490  00F744  E104               	bnz	u5980
  4491  00F746  0100               	movlb	0	; () banked
  4492  00F748  05DF               	decf	editar_fecha_reloj_digital@mes_ingresado& (0+255),w,b
  4493  00F74A  A0D8               	btfss	status,0,c
  4494  00F74C  D013               	goto	l448
  4495  00F74E                     u5980:
  4496                           
  4497                           ; BSR set to: 0
  4498  00F74E  0100               	movlb	0	; () banked
  4499  00F750  BFE0               	btfsc	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),7,b
  4500  00F752  D008               	goto	u5990
  4501  00F754  0100               	movlb	0	; () banked
  4502  00F756  51E0               	movf	(editar_fecha_reloj_digital@mes_ingresado+1)& (0+255),w,b
  4503  00F758  E10D               	bnz	l5031
  4504  00F75A  0E0D               	movlw	13
  4505  00F75C  0100               	movlb	0	; () banked
  4506  00F75E  5DDF               	subwf	editar_fecha_reloj_digital@mes_ingresado& (0+255),w,b
  4507  00F760  B0D8               	btfsc	status,0,c
  4508  00F762  D008               	goto	l448
  4509  00F764                     u5990:
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;main.c: 674: mes = mes_ingresado;
  4513  00F764  C0DF  F0CF         	movff	editar_fecha_reloj_digital@mes_ingresado,_mes
  4514  00F768  C0E0  F0D0         	movff	editar_fecha_reloj_digital@mes_ingresado+1,_mes+1
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;main.c: 675: numeros_ingresados++;
  4518  00F76C  0100               	movlb	0	; () banked
  4519  00F76E  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
  4520  00F770  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
  4521                           
  4522                           ;main.c: 676: } else {
  4523  00F772  D005               	goto	l449
  4524  00F774                     l448:
  4525  00F774                     l5031:
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;main.c: 677: numeros_ingresados = 0;
  4529  00F774  0E00               	movlw	0
  4530  00F776  0100               	movlb	0	; () banked
  4531  00F778  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4532  00F77A  0E00               	movlw	0
  4533  00F77C  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4534  00F77E                     l449:
  4535                           
  4536                           ; BSR set to: 0
  4537                           
  4538                           ; BSR set to: 0
  4539                           
  4540                           ; BSR set to: 0
  4541                           
  4542                           ; BSR set to: 0
  4543  00F77E  0100               	movlb	0	; () banked
  4544  00F780  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  4545  00F782  D7CC               	goto	l446
  4546  00F784  0100               	movlb	0	; () banked
  4547  00F786  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  4548  00F788  E105               	bnz	l5035
  4549  00F78A  0E03               	movlw	3
  4550  00F78C  0100               	movlb	0	; () banked
  4551  00F78E  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  4552  00F790  A0D8               	btfss	status,0,c
  4553  00F792  D7C4               	goto	l446
  4554  00F794                     l5035:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;main.c: 678: }
  4558                           ;main.c: 679: }
  4559                           ;main.c: 680: }
  4560                           ;main.c: 682: setDiaMesAnio();
  4561  00F794  EC43  F06C         	call	_setDiaMesAnio	;wreg free
  4562                           
  4563                           ;main.c: 683: posicion++;
  4564  00F798  0100               	movlb	0	; () banked
  4565  00F79A  4BE3               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  4566  00F79C  2BE4               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;main.c: 684: _delay((unsigned long)((50)*(8000000/4000.0)));
  4570  00F79E  0E82               	movlw	130
  4571  00F7A0  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  4572  00F7A2  0EDE               	movlw	222
  4573  00F7A4                     u6907:
  4574  00F7A4  2EE8               	decfsz	wreg,f,c
  4575  00F7A6  D7FE               	bra	u6907
  4576  00F7A8  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  4577  00F7AA  D7FC               	bra	u6907
  4578  00F7AC                     l444:
  4579                           
  4580                           ;main.c: 685: }
  4581                           ;main.c: 688: if (posicion == 2) {
  4582  00F7AC  0E02               	movlw	2
  4583  00F7AE  0100               	movlb	0	; () banked
  4584  00F7B0  19E3               	xorwf	editar_fecha_reloj_digital@posicion& (0+255),w,b
  4585  00F7B2  0100               	movlb	0	; () banked
  4586  00F7B4  11E4               	iorwf	(editar_fecha_reloj_digital@posicion+1)& (0+255),w,b
  4587  00F7B6  A4D8               	btfss	status,2,c
  4588  00F7B8  D04C               	goto	l451
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;main.c: 689: numeros_ingresados = 0;
  4592  00F7BA  0E00               	movlw	0
  4593  00F7BC  0100               	movlb	0	; () banked
  4594  00F7BE  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4595  00F7C0  0E00               	movlw	0
  4596  00F7C2  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4597                           
  4598                           ;main.c: 690: int anio_ingresado = 0;
  4599  00F7C4  0E00               	movlw	0
  4600  00F7C6  0100               	movlb	0	; () banked
  4601  00F7C8  6FE2               	movwf	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),b
  4602  00F7CA  0E00               	movlw	0
  4603  00F7CC  6FE1               	movwf	editar_fecha_reloj_digital@anio_ingresado& (0+255),b
  4604                           
  4605                           ;main.c: 691: while (numeros_ingresados < 3) {
  4606  00F7CE  D02A               	goto	l456
  4607  00F7D0                     
  4608                           ; BSR set to: 0
  4609                           ;main.c: 692: ingreso_numero();
  4610                           
  4611                           ; BSR set to: 0
  4612  00F7D0  EC36  F07C         	call	_ingreso_numero	;wreg free
  4613                           
  4614                           ;main.c: 693: if (numeros_ingresados == 2) {
  4615  00F7D4  0E02               	movlw	2
  4616  00F7D6  0100               	movlb	0	; () banked
  4617  00F7D8  19A4               	xorwf	_numeros_ingresados& (0+255),w,b
  4618  00F7DA  0100               	movlb	0	; () banked
  4619  00F7DC  11A5               	iorwf	(_numeros_ingresados+1)& (0+255),w,b
  4620  00F7DE  A4D8               	btfss	status,2,c
  4621  00F7E0  D021               	goto	l456
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;main.c: 694: anio_ingresado = covertir_valores_de_array_a_escala_decimal();
  4625  00F7E2  ECB1  F070         	call	_covertir_valores_de_array_a_escala_decimal	;wreg free
  4626  00F7E6  C05B  F0E1         	movff	?_covertir_valores_de_array_a_escala_decimal,editar_fecha_reloj_digital@anio_ingr
      +                          esado
  4627  00F7EA  C05C  F0E2         	movff	?_covertir_valores_de_array_a_escala_decimal+1,editar_fecha_reloj_digital@anio_in
      +                          gresado+1
  4628                           
  4629                           ;main.c: 695: if ((0 <= anio_ingresado) && (anio_ingresado <= 99)) {
  4630  00F7EE  0100               	movlb	0	; () banked
  4631  00F7F0  BFE2               	btfsc	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),7,b
  4632  00F7F2  D013               	goto	l455
  4633                           
  4634                           ; BSR set to: 0
  4635  00F7F4  0100               	movlb	0	; () banked
  4636  00F7F6  BFE2               	btfsc	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),7,b
  4637  00F7F8  D008               	goto	u6040
  4638  00F7FA  0100               	movlb	0	; () banked
  4639  00F7FC  51E2               	movf	(editar_fecha_reloj_digital@anio_ingresado+1)& (0+255),w,b
  4640  00F7FE  E10D               	bnz	l5059
  4641  00F800  0E64               	movlw	100
  4642  00F802  0100               	movlb	0	; () banked
  4643  00F804  5DE1               	subwf	editar_fecha_reloj_digital@anio_ingresado& (0+255),w,b
  4644  00F806  B0D8               	btfsc	status,0,c
  4645  00F808  D008               	goto	l455
  4646  00F80A                     u6040:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;main.c: 696: anio = anio_ingresado;
  4650  00F80A  C0E1  F0D1         	movff	editar_fecha_reloj_digital@anio_ingresado,_anio
  4651  00F80E  C0E2  F0D2         	movff	editar_fecha_reloj_digital@anio_ingresado+1,_anio+1
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;main.c: 697: numeros_ingresados++;
  4655  00F812  0100               	movlb	0	; () banked
  4656  00F814  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
  4657  00F816  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
  4658                           
  4659                           ;main.c: 698: } else {
  4660  00F818  D005               	goto	l456
  4661  00F81A                     l455:
  4662  00F81A                     l5059:
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;main.c: 699: numeros_ingresados = 0;
  4666  00F81A  0E00               	movlw	0
  4667  00F81C  0100               	movlb	0	; () banked
  4668  00F81E  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4669  00F820  0E00               	movlw	0
  4670  00F822  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4671  00F824                     l456:
  4672                           
  4673                           ; BSR set to: 0
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678                           
  4679                           ; BSR set to: 0
  4680  00F824  0100               	movlb	0	; () banked
  4681  00F826  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  4682  00F828  D7D3               	goto	l453
  4683  00F82A  0100               	movlb	0	; () banked
  4684  00F82C  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  4685  00F82E  E105               	bnz	l5063
  4686  00F830  0E03               	movlw	3
  4687  00F832  0100               	movlb	0	; () banked
  4688  00F834  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  4689  00F836  A0D8               	btfss	status,0,c
  4690  00F838  D7CB               	goto	l453
  4691  00F83A                     l5063:
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;main.c: 700: }
  4695                           ;main.c: 701: }
  4696                           ;main.c: 702: }
  4697                           ;main.c: 704: setDiaMesAnio();
  4698  00F83A  EC43  F06C         	call	_setDiaMesAnio	;wreg free
  4699                           
  4700                           ;main.c: 705: posicion++;
  4701  00F83E  0100               	movlb	0	; () banked
  4702  00F840  4BE3               	infsnz	editar_fecha_reloj_digital@posicion& (0+255),f,b
  4703  00F842  2BE4               	incf	(editar_fecha_reloj_digital@posicion+1)& (0+255),f,b
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;main.c: 706: _delay((unsigned long)((50)*(8000000/4000.0)));
  4707  00F844  0E82               	movlw	130
  4708  00F846  6E5F               	movwf	??_editar_fecha_reloj_digital& (0+255),c
  4709  00F848  0EDE               	movlw	222
  4710  00F84A                     u6917:
  4711  00F84A  2EE8               	decfsz	wreg,f,c
  4712  00F84C  D7FE               	bra	u6917
  4713  00F84E  2E5F               	decfsz	??_editar_fecha_reloj_digital& (0+255),f,c
  4714  00F850  D7FC               	bra	u6917
  4715  00F852                     l451:
  4716                           
  4717                           ;main.c: 707: }
  4718                           ;main.c: 708: Write_RTC();
  4719  00F852  EC65  F076         	call	_Write_RTC	;wreg free
  4720                           
  4721                           ;main.c: 709: motivo_ingreso_de_numeros = 0;
  4722  00F856  0E00               	movlw	0
  4723  00F858  0100               	movlb	0	; () banked
  4724  00F85A  6FA3               	movwf	(_motivo_ingreso_de_numeros+1)& (0+255),b
  4725  00F85C  0E00               	movlw	0
  4726  00F85E  6FA2               	movwf	_motivo_ingreso_de_numeros& (0+255),b
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;main.c: 710: numeros_ingresados = 0;
  4730  00F860  0E00               	movlw	0
  4731  00F862  0100               	movlb	0	; () banked
  4732  00F864  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  4733  00F866  0E00               	movlw	0
  4734  00F868  6FA4               	movwf	_numeros_ingresados& (0+255),b
  4735                           
  4736                           ; BSR set to: 0
  4737  00F86A  0012               	return		;funcret
  4738  00F86C                     __end_of_editar_fecha_reloj_digital:
  4739                           	opt stack 0
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           postinc1	equ	0xFE6
  4749                           postdec1	equ	0xFE5
  4750                           fsr1h	equ	0xFE2
  4751                           fsr1l	equ	0xFE1
  4752                           postinc2	equ	0xFDE
  4753                           postdec2	equ	0xFDD
  4754                           fsr2h	equ	0xFDA
  4755                           fsr2l	equ	0xFD9
  4756                           status	equ	0xFD8
  4757                           
  4758 ;; *************** function _setDiaMesAnio *****************
  4759 ;; Defined at:
  4760 ;;		line 75 in file "main.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;		None
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;		None
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  1    wreg      void 
  4767 ;; Registers used:
  4768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4778 ;;Total ram usage:        0 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    5
  4781 ;; This function calls:
  4782 ;;		_Write_RTC
  4783 ;;		_lcd_gotoxy
  4784 ;;		_lcd_putrs
  4785 ;;		_sprintf
  4786 ;; This function is called by:
  4787 ;;		_set_reloj_digital
  4788 ;;		_editar_fecha_reloj_digital
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text19
  4793  00D886                     __ptext19:
  4794                           	opt stack 0
  4795  00D886                     _setDiaMesAnio:
  4796                           	opt stack 23
  4797                           
  4798                           ;main.c: 76: if (dia > 31) {
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;incstack = 0
  4802  00D886  0100               	movlb	0	; () banked
  4803  00D888  BFCC               	btfsc	(_dia+1)& (0+255),7,b
  4804  00D88A  D00F               	goto	l189
  4805  00D88C  0100               	movlb	0	; () banked
  4806  00D88E  51CC               	movf	(_dia+1)& (0+255),w,b
  4807  00D890  E105               	bnz	u5030
  4808  00D892  0E20               	movlw	32
  4809  00D894  0100               	movlb	0	; () banked
  4810  00D896  5DCB               	subwf	_dia& (0+255),w,b
  4811  00D898  A0D8               	btfss	status,0,c
  4812  00D89A  D007               	goto	l189
  4813  00D89C                     u5030:
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;main.c: 77: dia = 1;
  4817  00D89C  0E00               	movlw	0
  4818  00D89E  0100               	movlb	0	; () banked
  4819  00D8A0  6FCC               	movwf	(_dia+1)& (0+255),b
  4820  00D8A2  0E01               	movlw	1
  4821  00D8A4  6FCB               	movwf	_dia& (0+255),b
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;main.c: 78: Write_RTC();
  4825  00D8A6  EC65  F076         	call	_Write_RTC	;wreg free
  4826  00D8AA                     l189:
  4827                           
  4828                           ;main.c: 79: }
  4829                           ;main.c: 81: if (mes > 12) {
  4830  00D8AA  0100               	movlb	0	; () banked
  4831  00D8AC  BFD0               	btfsc	(_mes+1)& (0+255),7,b
  4832  00D8AE  D00F               	goto	l190
  4833  00D8B0  0100               	movlb	0	; () banked
  4834  00D8B2  51D0               	movf	(_mes+1)& (0+255),w,b
  4835  00D8B4  E105               	bnz	u5040
  4836  00D8B6  0E0D               	movlw	13
  4837  00D8B8  0100               	movlb	0	; () banked
  4838  00D8BA  5DCF               	subwf	_mes& (0+255),w,b
  4839  00D8BC  A0D8               	btfss	status,0,c
  4840  00D8BE  D007               	goto	l190
  4841  00D8C0                     u5040:
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;main.c: 82: mes = 1;
  4845  00D8C0  0E00               	movlw	0
  4846  00D8C2  0100               	movlb	0	; () banked
  4847  00D8C4  6FD0               	movwf	(_mes+1)& (0+255),b
  4848  00D8C6  0E01               	movlw	1
  4849  00D8C8  6FCF               	movwf	_mes& (0+255),b
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;main.c: 83: Write_RTC();
  4853  00D8CA  EC65  F076         	call	_Write_RTC	;wreg free
  4854  00D8CE                     l190:
  4855                           
  4856                           ;main.c: 84: }
  4857                           ;main.c: 86: sprintf(buffer2, "%02u/%02u/%02u", dia, mes, anio);
  4858  00D8CE  0E14               	movlw	low _buffer2
  4859  00D8D0  6E22               	movwf	sprintf@sp,c
  4860  00D8D2  0E01               	movlw	high _buffer2
  4861  00D8D4  6E23               	movwf	sprintf@sp+1,c
  4862  00D8D6  0E3B               	movlw	low STR_8
  4863  00D8D8  6E24               	movwf	sprintf@f,c
  4864  00D8DA  0EFF               	movlw	high STR_8
  4865  00D8DC  6E25               	movwf	sprintf@f+1,c
  4866  00D8DE  C0CB  F026         	movff	_dia,?_sprintf+4
  4867  00D8E2  C0CC  F027         	movff	_dia+1,?_sprintf+5
  4868  00D8E6  C0CF  F028         	movff	_mes,?_sprintf+6
  4869  00D8EA  C0D0  F029         	movff	_mes+1,?_sprintf+7
  4870  00D8EE  C0D1  F02A         	movff	_anio,?_sprintf+8
  4871  00D8F2  C0D2  F02B         	movff	_anio+1,?_sprintf+9
  4872  00D8F6  EC6A  F07D         	call	_sprintf	;wreg free
  4873                           
  4874                           ;main.c: 87: lcd_gotoxy(9, 1);
  4875  00D8FA  0E01               	movlw	1
  4876  00D8FC  6E05               	movwf	lcd_gotoxy@y,c
  4877  00D8FE  0E09               	movlw	9
  4878  00D900  ECB3  F067         	call	_lcd_gotoxy
  4879                           
  4880                           ;main.c: 88: lcd_putrs(buffer2);
  4881  00D904  0E14               	movlw	low _buffer2
  4882  00D906  6E09               	movwf	lcd_putrs@ptr,c
  4883  00D908  0E01               	movlw	high _buffer2
  4884  00D90A  6E0A               	movwf	lcd_putrs@ptr+1,c
  4885  00D90C  EC23  F069         	call	_lcd_putrs	;wreg free
  4886  00D910  0012               	return		;funcret
  4887  00D912                     __end_of_setDiaMesAnio:
  4888                           	opt stack 0
  4889                           tblptru	equ	0xFF8
  4890                           tblptrh	equ	0xFF7
  4891                           tblptrl	equ	0xFF6
  4892                           tablat	equ	0xFF5
  4893                           prodh	equ	0xFF4
  4894                           prodl	equ	0xFF3
  4895                           postinc0	equ	0xFEE
  4896                           wreg	equ	0xFE8
  4897                           postinc1	equ	0xFE6
  4898                           postdec1	equ	0xFE5
  4899                           fsr1h	equ	0xFE2
  4900                           fsr1l	equ	0xFE1
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _Write_RTC *****************
  4908 ;; Defined at:
  4909 ;;		line 75 in file "../../headers\unmc_rtcc_01.h"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    2
  4930 ;; This function calls:
  4931 ;;		_RtccWrOn
  4932 ;;		_RtccWriteDate
  4933 ;;		_RtccWriteTime
  4934 ;;		___awdiv
  4935 ;; This function is called by:
  4936 ;;		_setDiaMesAnio
  4937 ;;		_setHoraMinutoSegundo
  4938 ;;		_editar_fecha_reloj_digital
  4939 ;;		_editar_hora_reloj_digital
  4940 ;;		_setup
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text20
  4945  00ECCA                     __ptext20:
  4946                           	opt stack 0
  4947  00ECCA                     _Write_RTC:
  4948                           	opt stack 25
  4949                           
  4950                           ;headers\unmc_rtcc_01.h: 77: RtccWrOn();
  4951                           
  4952                           ;incstack = 0
  4953  00ECCA  EC84  F067         	call	_RtccWrOn	;wreg free
  4954                           
  4955                           ;headers\unmc_rtcc_01.h: 79: PIE3bits.RTCCIE=1;
  4956  00ECCE  80A3               	bsf	4003,0,c	;volatile
  4957                           
  4958                           ;headers\unmc_rtcc_01.h: 80: segundo_d=segundo/10;
  4959  00ECD0  C0A6  F001         	movff	_segundo,___awdiv@dividend
  4960  00ECD4  C0A7  F002         	movff	_segundo+1,___awdiv@dividend+1
  4961  00ECD8  0E00               	movlw	0
  4962  00ECDA  6E04               	movwf	___awdiv@divisor+1,c
  4963  00ECDC  0E0A               	movlw	10
  4964  00ECDE  6E03               	movwf	___awdiv@divisor,c
  4965  00ECE0  EC78  F06B         	call	___awdiv	;wreg free
  4966  00ECE4  5001               	movf	?___awdiv,w,c
  4967  00ECE6  0100               	movlb	0	; () banked
  4968  00ECE8  6FF4               	movwf	_segundo_d& (0+255),b
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;headers\unmc_rtcc_01.h: 81: segundo_u=segundo-segundo_d*10;
  4972  00ECEA  0100               	movlb	0	; () banked
  4973  00ECEC  51F4               	movf	_segundo_d& (0+255),w,b
  4974  00ECEE  0D0A               	mullw	10
  4975  00ECF0  50F3               	movf	prodl,w,c
  4976  00ECF2  0800               	sublw	0
  4977  00ECF4  0100               	movlb	0	; () banked
  4978  00ECF6  25A6               	addwf	_segundo& (0+255),w,b
  4979  00ECF8  0100               	movlb	0	; () banked
  4980  00ECFA  6FF5               	movwf	_segundo_u& (0+255),b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;headers\unmc_rtcc_01.h: 82: RtccTime.f.sec =segundo_d*16+segundo_u;
  4984  00ECFC  0100               	movlb	0	; () banked
  4985  00ECFE  51F4               	movf	_segundo_d& (0+255),w,b
  4986  00ED00  0D10               	mullw	16
  4987  00ED02  50F3               	movf	prodl,w,c
  4988  00ED04  0100               	movlb	0	; () banked
  4989  00ED06  25F5               	addwf	_segundo_u& (0+255),w,b
  4990  00ED08  0100               	movlb	0	; () banked
  4991  00ED0A  6FBA               	movwf	(_RtccTime+1)& (0+255),b
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;headers\unmc_rtcc_01.h: 83: minuto_d=minuto/10;
  4995  00ED0C  C0C7  F001         	movff	_minuto,___awdiv@dividend
  4996  00ED10  C0C8  F002         	movff	_minuto+1,___awdiv@dividend+1
  4997  00ED14  0E00               	movlw	0
  4998  00ED16  6E04               	movwf	___awdiv@divisor+1,c
  4999  00ED18  0E0A               	movlw	10
  5000  00ED1A  6E03               	movwf	___awdiv@divisor,c
  5001  00ED1C  EC78  F06B         	call	___awdiv	;wreg free
  5002  00ED20  5001               	movf	?___awdiv,w,c
  5003  00ED22  0100               	movlb	0	; () banked
  5004  00ED24  6FF2               	movwf	_minuto_d& (0+255),b
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;headers\unmc_rtcc_01.h: 84: minuto_u=minuto-minuto_d*10;
  5008  00ED26  0100               	movlb	0	; () banked
  5009  00ED28  51F2               	movf	_minuto_d& (0+255),w,b
  5010  00ED2A  0D0A               	mullw	10
  5011  00ED2C  50F3               	movf	prodl,w,c
  5012  00ED2E  0800               	sublw	0
  5013  00ED30  0100               	movlb	0	; () banked
  5014  00ED32  25C7               	addwf	_minuto& (0+255),w,b
  5015  00ED34  0100               	movlb	0	; () banked
  5016  00ED36  6FF3               	movwf	_minuto_u& (0+255),b
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;headers\unmc_rtcc_01.h: 85: RtccTime.f.min =minuto_d*16+minuto_u;
  5020  00ED38  0100               	movlb	0	; () banked
  5021  00ED3A  51F2               	movf	_minuto_d& (0+255),w,b
  5022  00ED3C  0D10               	mullw	16
  5023  00ED3E  50F3               	movf	prodl,w,c
  5024  00ED40  0100               	movlb	0	; () banked
  5025  00ED42  25F3               	addwf	_minuto_u& (0+255),w,b
  5026  00ED44  0100               	movlb	0	; () banked
  5027  00ED46  6FBB               	movwf	(_RtccTime+2)& (0+255),b
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;headers\unmc_rtcc_01.h: 86: hora_d=hora/10;
  5031  00ED48  C0C9  F001         	movff	_hora,___awdiv@dividend
  5032  00ED4C  C0CA  F002         	movff	_hora+1,___awdiv@dividend+1
  5033  00ED50  0E00               	movlw	0
  5034  00ED52  6E04               	movwf	___awdiv@divisor+1,c
  5035  00ED54  0E0A               	movlw	10
  5036  00ED56  6E03               	movwf	___awdiv@divisor,c
  5037  00ED58  EC78  F06B         	call	___awdiv	;wreg free
  5038  00ED5C  5001               	movf	?___awdiv,w,c
  5039  00ED5E  0100               	movlb	0	; () banked
  5040  00ED60  6FF0               	movwf	_hora_d& (0+255),b
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;headers\unmc_rtcc_01.h: 87: hora_u=hora-hora_d*10;
  5044  00ED62  0100               	movlb	0	; () banked
  5045  00ED64  51F0               	movf	_hora_d& (0+255),w,b
  5046  00ED66  0D0A               	mullw	10
  5047  00ED68  50F3               	movf	prodl,w,c
  5048  00ED6A  0800               	sublw	0
  5049  00ED6C  0100               	movlb	0	; () banked
  5050  00ED6E  25C9               	addwf	_hora& (0+255),w,b
  5051  00ED70  0100               	movlb	0	; () banked
  5052  00ED72  6FF1               	movwf	_hora_u& (0+255),b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;headers\unmc_rtcc_01.h: 88: RtccTime.f.hour=hora_d*16+hora_u;
  5056  00ED74  0100               	movlb	0	; () banked
  5057  00ED76  51F0               	movf	_hora_d& (0+255),w,b
  5058  00ED78  0D10               	mullw	16
  5059  00ED7A  50F3               	movf	prodl,w,c
  5060  00ED7C  0100               	movlb	0	; () banked
  5061  00ED7E  25F1               	addwf	_hora_u& (0+255),w,b
  5062  00ED80  0100               	movlb	0	; () banked
  5063  00ED82  6FBC               	movwf	(_RtccTime+3)& (0+255),b
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;headers\unmc_rtcc_01.h: 89: anio_d=anio/10;
  5067  00ED84  C0D1  F001         	movff	_anio,___awdiv@dividend
  5068  00ED88  C0D2  F002         	movff	_anio+1,___awdiv@dividend+1
  5069  00ED8C  0E00               	movlw	0
  5070  00ED8E  6E04               	movwf	___awdiv@divisor+1,c
  5071  00ED90  0E0A               	movlw	10
  5072  00ED92  6E03               	movwf	___awdiv@divisor,c
  5073  00ED94  EC78  F06B         	call	___awdiv	;wreg free
  5074  00ED98  5001               	movf	?___awdiv,w,c
  5075  00ED9A  0100               	movlb	0	; () banked
  5076  00ED9C  6FE9               	movwf	_anio_d& (0+255),b
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;headers\unmc_rtcc_01.h: 90: anio_u=anio-anio_d*10;
  5080  00ED9E  0100               	movlb	0	; () banked
  5081  00EDA0  51E9               	movf	_anio_d& (0+255),w,b
  5082  00EDA2  0D0A               	mullw	10
  5083  00EDA4  50F3               	movf	prodl,w,c
  5084  00EDA6  0800               	sublw	0
  5085  00EDA8  0100               	movlb	0	; () banked
  5086  00EDAA  25D1               	addwf	_anio& (0+255),w,b
  5087  00EDAC  0100               	movlb	0	; () banked
  5088  00EDAE  6FEA               	movwf	_anio_u& (0+255),b
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;headers\unmc_rtcc_01.h: 91: RtccDate.f.year=anio_d*16+anio_u;
  5092  00EDB0  0100               	movlb	0	; () banked
  5093  00EDB2  51E9               	movf	_anio_d& (0+255),w,b
  5094  00EDB4  0D10               	mullw	16
  5095  00EDB6  50F3               	movf	prodl,w,c
  5096  00EDB8  0100               	movlb	0	; () banked
  5097  00EDBA  25EA               	addwf	_anio_u& (0+255),w,b
  5098  00EDBC  0100               	movlb	0	; () banked
  5099  00EDBE  6FB8               	movwf	(_RtccDate+3)& (0+255),b
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;headers\unmc_rtcc_01.h: 92: mes_d=mes/10;
  5103  00EDC0  C0CF  F001         	movff	_mes,___awdiv@dividend
  5104  00EDC4  C0D0  F002         	movff	_mes+1,___awdiv@dividend+1
  5105  00EDC8  0E00               	movlw	0
  5106  00EDCA  6E04               	movwf	___awdiv@divisor+1,c
  5107  00EDCC  0E0A               	movlw	10
  5108  00EDCE  6E03               	movwf	___awdiv@divisor,c
  5109  00EDD0  EC78  F06B         	call	___awdiv	;wreg free
  5110  00EDD4  5001               	movf	?___awdiv,w,c
  5111  00EDD6  0100               	movlb	0	; () banked
  5112  00EDD8  6FEC               	movwf	_mes_d& (0+255),b
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;headers\unmc_rtcc_01.h: 93: mes_u=mes-mes_d*10;
  5116  00EDDA  0100               	movlb	0	; () banked
  5117  00EDDC  51EC               	movf	_mes_d& (0+255),w,b
  5118  00EDDE  0D0A               	mullw	10
  5119  00EDE0  50F3               	movf	prodl,w,c
  5120  00EDE2  0800               	sublw	0
  5121  00EDE4  0100               	movlb	0	; () banked
  5122  00EDE6  25CF               	addwf	_mes& (0+255),w,b
  5123  00EDE8  0100               	movlb	0	; () banked
  5124  00EDEA  6FED               	movwf	_mes_u& (0+255),b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;headers\unmc_rtcc_01.h: 94: RtccDate.f.mon=mes_d*16+mes_u;
  5128  00EDEC  0100               	movlb	0	; () banked
  5129  00EDEE  51EC               	movf	_mes_d& (0+255),w,b
  5130  00EDF0  0D10               	mullw	16
  5131  00EDF2  50F3               	movf	prodl,w,c
  5132  00EDF4  0100               	movlb	0	; () banked
  5133  00EDF6  25ED               	addwf	_mes_u& (0+255),w,b
  5134  00EDF8  0100               	movlb	0	; () banked
  5135  00EDFA  6FB7               	movwf	(_RtccDate+2)& (0+255),b
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;headers\unmc_rtcc_01.h: 95: fecha_d=dia/10;
  5139  00EDFC  C0CB  F001         	movff	_dia,___awdiv@dividend
  5140  00EE00  C0CC  F002         	movff	_dia+1,___awdiv@dividend+1
  5141  00EE04  0E00               	movlw	0
  5142  00EE06  6E04               	movwf	___awdiv@divisor+1,c
  5143  00EE08  0E0A               	movlw	10
  5144  00EE0A  6E03               	movwf	___awdiv@divisor,c
  5145  00EE0C  EC78  F06B         	call	___awdiv	;wreg free
  5146  00EE10  5001               	movf	?___awdiv,w,c
  5147  00EE12  0100               	movlb	0	; () banked
  5148  00EE14  6FEE               	movwf	_fecha_d& (0+255),b
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;headers\unmc_rtcc_01.h: 96: fecha_u=dia-fecha_d*10;
  5152  00EE16  0100               	movlb	0	; () banked
  5153  00EE18  51EE               	movf	_fecha_d& (0+255),w,b
  5154  00EE1A  0D0A               	mullw	10
  5155  00EE1C  50F3               	movf	prodl,w,c
  5156  00EE1E  0800               	sublw	0
  5157  00EE20  0100               	movlb	0	; () banked
  5158  00EE22  25CB               	addwf	_dia& (0+255),w,b
  5159  00EE24  0100               	movlb	0	; () banked
  5160  00EE26  6FEF               	movwf	_fecha_u& (0+255),b
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;headers\unmc_rtcc_01.h: 97: RtccDate.f.mday=fecha_d*16+fecha_u;
  5164  00EE28  0100               	movlb	0	; () banked
  5165  00EE2A  51EE               	movf	_fecha_d& (0+255),w,b
  5166  00EE2C  0D10               	mullw	16
  5167  00EE2E  50F3               	movf	prodl,w,c
  5168  00EE30  0100               	movlb	0	; () banked
  5169  00EE32  25EF               	addwf	_fecha_u& (0+255),w,b
  5170  00EE34  0100               	movlb	0	; () banked
  5171  00EE36  6FB6               	movwf	(_RtccDate+1)& (0+255),b
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;headers\unmc_rtcc_01.h: 98: dia_semana=diasem;
  5175  00EE38  C0CD  F0EB         	movff	_diasem,_dia_semana
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;headers\unmc_rtcc_01.h: 99: RtccDate.f.wday =diasem;
  5179  00EE3C  C0CD  F0B5         	movff	_diasem,_RtccDate
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;headers\unmc_rtcc_01.h: 100: RtccWriteTime(&RtccTime,1);
  5183  00EE40  0EB9               	movlw	low _RtccTime
  5184  00EE42  6E01               	movwf	RtccWriteTime@pTm,c
  5185  00EE44  0E00               	movlw	high _RtccTime
  5186  00EE46  6E02               	movwf	RtccWriteTime@pTm+1,c
  5187  00EE48  0E01               	movlw	1
  5188  00EE4A  6E03               	movwf	RtccWriteTime@di,c
  5189  00EE4C  EC5F  F073         	call	_RtccWriteTime	;wreg free
  5190                           
  5191                           ;headers\unmc_rtcc_01.h: 101: RtccWriteDate(&RtccDate,1);
  5192  00EE50  0EB5               	movlw	low _RtccDate
  5193  00EE52  6E01               	movwf	RtccWriteDate@pDt,c
  5194  00EE54  0E00               	movlw	high _RtccDate
  5195  00EE56  6E02               	movwf	RtccWriteDate@pDt+1,c
  5196  00EE58  0E01               	movlw	1
  5197  00EE5A  6E03               	movwf	RtccWriteDate@di,c
  5198  00EE5C  EC6C  F074         	call	_RtccWriteDate	;wreg free
  5199                           
  5200                           ;headers\unmc_rtcc_01.h: 102: (RTCCFGbits.RTCEN=1);
  5201  00EE60  010F               	movlb	15	; () banked
  5202  00EE62  8F3F               	bsf	63,7,b	;volatile
  5203                           
  5204                           ; BSR set to: 15
  5205  00EE64  0012               	return		;funcret
  5206  00EE66                     __end_of_Write_RTC:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           postinc1	equ	0xFE6
  5217                           postdec1	equ	0xFE5
  5218                           fsr1h	equ	0xFE2
  5219                           fsr1l	equ	0xFE1
  5220                           postinc2	equ	0xFDE
  5221                           postdec2	equ	0xFDD
  5222                           fsr2h	equ	0xFDA
  5223                           fsr2l	equ	0xFD9
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function ___awdiv *****************
  5227 ;; Defined at:
  5228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  dividend        2    0[COMRAM] int 
  5231 ;;  divisor         2    2[COMRAM] int 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  quotient        2    6[COMRAM] int 
  5234 ;;  sign            1    5[COMRAM] unsigned char 
  5235 ;;  counter         1    4[COMRAM] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  2    0[COMRAM] int 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5246 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5248 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5249 ;;Total ram usage:        8 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_Write_RTC
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text21
  5259  00D6F0                     __ptext21:
  5260                           	opt stack 0
  5261  00D6F0                     ___awdiv:
  5262                           	opt stack 26
  5263                           
  5264                           ; BSR set to: 15
  5265                           ;incstack = 0
  5266  00D6F0  0E00               	movlw	0
  5267  00D6F2  6E06               	movwf	___awdiv@sign,c
  5268  00D6F4  AE04               	btfss	___awdiv@divisor+1,7,c
  5269  00D6F6  D006               	goto	l876
  5270  00D6F8  6C03               	negf	___awdiv@divisor,c
  5271  00D6FA  1E04               	comf	___awdiv@divisor+1,f,c
  5272  00D6FC  B0D8               	btfsc	status,0,c
  5273  00D6FE  2A04               	incf	___awdiv@divisor+1,f,c
  5274  00D700  0E01               	movlw	1
  5275  00D702  6E06               	movwf	___awdiv@sign,c
  5276  00D704                     l876:
  5277  00D704  AE02               	btfss	___awdiv@dividend+1,7,c
  5278  00D706  D006               	goto	l877
  5279  00D708  6C01               	negf	___awdiv@dividend,c
  5280  00D70A  1E02               	comf	___awdiv@dividend+1,f,c
  5281  00D70C  B0D8               	btfsc	status,0,c
  5282  00D70E  2A02               	incf	___awdiv@dividend+1,f,c
  5283  00D710  0E01               	movlw	1
  5284  00D712  1A06               	xorwf	___awdiv@sign,f,c
  5285  00D714                     l877:
  5286  00D714  0E00               	movlw	0
  5287  00D716  6E08               	movwf	___awdiv@quotient+1,c
  5288  00D718  0E00               	movlw	0
  5289  00D71A  6E07               	movwf	___awdiv@quotient,c
  5290  00D71C  5003               	movf	___awdiv@divisor,w,c
  5291  00D71E  1004               	iorwf	___awdiv@divisor+1,w,c
  5292  00D720  B4D8               	btfsc	status,2,c
  5293  00D722  D01C               	goto	l884
  5294  00D724  0E01               	movlw	1
  5295  00D726  6E05               	movwf	___awdiv@counter,c
  5296  00D728  D004               	goto	l879
  5297  00D72A  90D8               	bcf	status,0,c
  5298  00D72C  3603               	rlcf	___awdiv@divisor,f,c
  5299  00D72E  3604               	rlcf	___awdiv@divisor+1,f,c
  5300  00D730  2A05               	incf	___awdiv@counter,f,c
  5301  00D732                     l879:
  5302  00D732  AE04               	btfss	___awdiv@divisor+1,7,c
  5303  00D734  D7FA               	goto	l880
  5304  00D736                     u4820:
  5305  00D736  90D8               	bcf	status,0,c
  5306  00D738  3607               	rlcf	___awdiv@quotient,f,c
  5307  00D73A  3608               	rlcf	___awdiv@quotient+1,f,c
  5308  00D73C  5003               	movf	___awdiv@divisor,w,c
  5309  00D73E  5C01               	subwf	___awdiv@dividend,w,c
  5310  00D740  5004               	movf	___awdiv@divisor+1,w,c
  5311  00D742  5802               	subwfb	___awdiv@dividend+1,w,c
  5312  00D744  A0D8               	btfss	status,0,c
  5313  00D746  D005               	goto	l883
  5314  00D748  5003               	movf	___awdiv@divisor,w,c
  5315  00D74A  5E01               	subwf	___awdiv@dividend,f,c
  5316  00D74C  5004               	movf	___awdiv@divisor+1,w,c
  5317  00D74E  5A02               	subwfb	___awdiv@dividend+1,f,c
  5318  00D750  8007               	bsf	___awdiv@quotient,0,c
  5319  00D752                     l883:
  5320  00D752  90D8               	bcf	status,0,c
  5321  00D754  3204               	rrcf	___awdiv@divisor+1,f,c
  5322  00D756  3203               	rrcf	___awdiv@divisor,f,c
  5323  00D758  2E05               	decfsz	___awdiv@counter,f,c
  5324  00D75A  D7ED               	goto	u4820
  5325  00D75C                     l884:
  5326  00D75C  5006               	movf	___awdiv@sign,w,c
  5327  00D75E  B4D8               	btfsc	status,2,c
  5328  00D760  D004               	goto	l885
  5329  00D762  6C07               	negf	___awdiv@quotient,c
  5330  00D764  1E08               	comf	___awdiv@quotient+1,f,c
  5331  00D766  B0D8               	btfsc	status,0,c
  5332  00D768  2A08               	incf	___awdiv@quotient+1,f,c
  5333  00D76A                     l885:
  5334  00D76A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5335  00D76E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5336  00D772  0012               	return	
  5337  00D774                     __end_of___awdiv:
  5338                           	opt stack 0
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           postinc0	equ	0xFEE
  5346                           wreg	equ	0xFE8
  5347                           postinc1	equ	0xFE6
  5348                           postdec1	equ	0xFE5
  5349                           fsr1h	equ	0xFE2
  5350                           fsr1l	equ	0xFE1
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _RtccWriteTime *****************
  5358 ;; Defined at:
  5359 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteTime.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  pTm             2    0[COMRAM] PTR const struct .
  5362 ;;		 -> RtccTime(4), 
  5363 ;;  di              1    2[COMRAM] enum E7121
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  tempHourWDay    2    9[COMRAM] struct .
  5366 ;;  tempMinSec      2    7[COMRAM] struct .
  5367 ;;  wasWrEn         1    6[COMRAM] enum E7121
  5368 ;;  wasAlrm         1    5[COMRAM] enum E7121
  5369 ;;  wasOn           1    4[COMRAM] enum E7121
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      enum E6550
  5372 ;; Registers used:
  5373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5379 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5380 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5382 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5383 ;;Total ram usage:       11 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    1
  5386 ;; This function calls:
  5387 ;;		_RtccWrOn
  5388 ;; This function is called by:
  5389 ;;		_Write_RTC
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text22
  5394  00E6BE                     __ptext22:
  5395                           	opt stack 0
  5396  00E6BE                     _RtccWriteTime:
  5397                           	opt stack 25
  5398                           
  5399                           ;incstack = 0
  5400  00E6BE  0E00               	movlw	0
  5401  00E6C0  6E06               	movwf	RtccWriteTime@wasAlrm,c
  5402  00E6C2  EE20 F002          	lfsr	2,2
  5403  00E6C6  5001               	movf	RtccWriteTime@pTm,w,c
  5404  00E6C8  26D9               	addwf	fsr2l,f,c
  5405  00E6CA  5002               	movf	RtccWriteTime@pTm+1,w,c
  5406  00E6CC  22DA               	addwfc	fsr2h,f,c
  5407  00E6CE  0E5A               	movlw	90
  5408  00E6D0  60DF               	cpfslt	indf2,c
  5409  00E6D2  0012               	return	
  5410  00E6D4  EE20 F001          	lfsr	2,1
  5411  00E6D8  5001               	movf	RtccWriteTime@pTm,w,c
  5412  00E6DA  26D9               	addwf	fsr2l,f,c
  5413  00E6DC  5002               	movf	RtccWriteTime@pTm+1,w,c
  5414  00E6DE  22DA               	addwfc	fsr2h,f,c
  5415  00E6E0  0E5A               	movlw	90
  5416  00E6E2  60DF               	cpfslt	indf2,c
  5417  00E6E4  0012               	return	
  5418  00E6E6  EE20 F003          	lfsr	2,3
  5419  00E6EA  5001               	movf	RtccWriteTime@pTm,w,c
  5420  00E6EC  26D9               	addwf	fsr2l,f,c
  5421  00E6EE  5002               	movf	RtccWriteTime@pTm+1,w,c
  5422  00E6F0  22DA               	addwfc	fsr2h,f,c
  5423  00E6F2  0E24               	movlw	36
  5424  00E6F4  64DF               	cpfsgt	indf2,c
  5425  00E6F6  D001               	goto	l696
  5426  00E6F8  0012               	return	
  5427  00E6FA                     l696:
  5428  00E6FA  EE20 F002          	lfsr	2,2
  5429  00E6FE  5001               	movf	RtccWriteTime@pTm,w,c
  5430  00E700  26D9               	addwf	fsr2l,f,c
  5431  00E702  5002               	movf	RtccWriteTime@pTm+1,w,c
  5432  00E704  22DA               	addwfc	fsr2h,f,c
  5433  00E706  50DF               	movf	indf2,w,c
  5434  00E708  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  5435  00E70A  EE20 F001          	lfsr	2,1
  5436  00E70E  5001               	movf	RtccWriteTime@pTm,w,c
  5437  00E710  26D9               	addwf	fsr2l,f,c
  5438  00E712  5002               	movf	RtccWriteTime@pTm+1,w,c
  5439  00E714  22DA               	addwfc	fsr2h,f,c
  5440  00E716  50DF               	movf	indf2,w,c
  5441  00E718  6E08               	movwf	RtccWriteTime@tempMinSec,c
  5442  00E71A  5003               	movf	RtccWriteTime@di,w,c
  5443  00E71C  A4D8               	btfss	status,2,c
  5444  00E71E  9CF2               	bcf	intcon,6,c	;volatile
  5445  00E720  010F               	movlb	15	; () banked
  5446  00E722  0E00               	movlw	0
  5447  00E724  BB3F               	btfsc	63,5,b	;volatile
  5448  00E726  0E01               	movlw	1
  5449  00E728  6E07               	movwf	RtccWriteTime@wasWrEn,c
  5450  00E72A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5451  00E72C  B4D8               	btfsc	status,2,c
  5452                           
  5453                           ; BSR set to: 15
  5454  00E72E  EC84  F067         	call	_RtccWrOn	;wreg free
  5455  00E732  010F               	movlb	15	; () banked
  5456  00E734  0E00               	movlw	0
  5457  00E736  BF3F               	btfsc	63,7,b	;volatile
  5458  00E738  0E01               	movlw	1
  5459  00E73A  6E05               	movwf	RtccWriteTime@wasOn,c
  5460  00E73C  5005               	movf	RtccWriteTime@wasOn,w,c
  5461  00E73E  B4D8               	btfsc	status,2,c
  5462  00E740  D006               	goto	l702
  5463                           
  5464                           ; BSR set to: 15
  5465  00E742  0E00               	movlw	0
  5466  00E744  BE91               	btfsc	3985,7,c	;volatile
  5467  00E746  0E01               	movlw	1
  5468  00E748  6E06               	movwf	RtccWriteTime@wasAlrm,c
  5469                           
  5470                           ; BSR set to: 15
  5471  00E74A  010F               	movlb	15	; () banked
  5472  00E74C  9F3F               	bcf	63,7,b	;volatile
  5473  00E74E                     l702:
  5474                           
  5475                           ; BSR set to: 15
  5476                           
  5477                           ; BSR set to: 15
  5478  00E74E  0EFC               	movlw	252
  5479  00E750  010F               	movlb	15	; () banked
  5480  00E752  173F               	andwf	63,f,b	;volatile
  5481  00E754  010F               	movlb	15	; () banked
  5482  00E756  813F               	bsf	63,0,b	;volatile
  5483                           
  5484                           ; BSR set to: 15
  5485  00E758  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  5486                           
  5487                           ; BSR set to: 15
  5488  00E75C  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  5489                           
  5490                           ; BSR set to: 15
  5491  00E760  EE20 F003          	lfsr	2,3
  5492  00E764  5001               	movf	RtccWriteTime@pTm,w,c
  5493  00E766  26D9               	addwf	fsr2l,f,c
  5494  00E768  5002               	movf	RtccWriteTime@pTm+1,w,c
  5495  00E76A  22DA               	addwfc	fsr2h,f,c
  5496  00E76C  50DF               	movf	indf2,w,c
  5497  00E76E  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  5498                           
  5499                           ; BSR set to: 15
  5500  00E770  0EFC               	movlw	252
  5501  00E772  010F               	movlb	15	; () banked
  5502  00E774  173F               	andwf	63,f,b	;volatile
  5503                           
  5504                           ; BSR set to: 15
  5505  00E776  010F               	movlb	15	; () banked
  5506  00E778  813F               	bsf	63,0,b	;volatile
  5507                           
  5508                           ; BSR set to: 15
  5509  00E77A  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  5510                           
  5511                           ; BSR set to: 15
  5512  00E77E  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  5513                           
  5514                           ; BSR set to: 15
  5515  00E782  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  5516                           
  5517                           ; BSR set to: 15
  5518  00E786  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  5519                           
  5520                           ; BSR set to: 15
  5521  00E78A  5005               	movf	RtccWriteTime@wasOn,w,c
  5522  00E78C  B4D8               	btfsc	status,2,c
  5523  00E78E  D00B               	goto	l703
  5524                           
  5525                           ; BSR set to: 15
  5526  00E790  010F               	movlb	15	; () banked
  5527  00E792  8F3F               	bsf	63,7,b	;volatile
  5528                           
  5529                           ; BSR set to: 15
  5530  00E794  5006               	movf	RtccWriteTime@wasAlrm,w,c
  5531  00E796  A4D8               	btfss	status,2,c
  5532                           
  5533                           ; BSR set to: 15
  5534  00E798  8E91               	bsf	3985,7,c	;volatile
  5535                           
  5536                           ; BSR set to: 15
  5537                           
  5538                           ; BSR set to: 15
  5539  00E79A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5540  00E79C  B4D8               	btfsc	status,2,c
  5541  00E79E  D008               	goto	l707
  5542                           
  5543                           ; BSR set to: 15
  5544  00E7A0  EC84  F067         	call	_RtccWrOn	;wreg free
  5545  00E7A4  D005               	goto	l707
  5546  00E7A6                     l703:
  5547  00E7A6  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5548  00E7A8  A4D8               	btfss	status,2,c
  5549  00E7AA  D002               	goto	l707
  5550  00E7AC  010F               	movlb	15	; () banked
  5551  00E7AE  9B3F               	bcf	63,5,b	;volatile
  5552  00E7B0                     l707:
  5553                           
  5554                           ; BSR set to: 15
  5555                           
  5556                           ; BSR set to: 15
  5557  00E7B0  5003               	movf	RtccWriteTime@di,w,c
  5558  00E7B2  B4D8               	btfsc	status,2,c
  5559  00E7B4  0012               	return	
  5560  00E7B6  8CF2               	bsf	intcon,6,c	;volatile
  5561  00E7B8  0012               	return	
  5562  00E7BA                     __end_of_RtccWriteTime:
  5563                           	opt stack 0
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodh	equ	0xFF4
  5569                           prodl	equ	0xFF3
  5570                           intcon	equ	0xFF2
  5571                           postinc0	equ	0xFEE
  5572                           wreg	equ	0xFE8
  5573                           postinc1	equ	0xFE6
  5574                           postdec1	equ	0xFE5
  5575                           fsr1h	equ	0xFE2
  5576                           fsr1l	equ	0xFE1
  5577                           indf2	equ	0xFDF
  5578                           postinc2	equ	0xFDE
  5579                           postdec2	equ	0xFDD
  5580                           fsr2h	equ	0xFDA
  5581                           fsr2l	equ	0xFD9
  5582                           status	equ	0xFD8
  5583                           
  5584 ;; *************** function _RtccWriteDate *****************
  5585 ;; Defined at:
  5586 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteDate.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  pDt             2    0[COMRAM] PTR const struct .
  5589 ;;		 -> RtccDate(4), 
  5590 ;;  di              1    2[COMRAM] enum E7121
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;  tempHourWDay    2   11[COMRAM] struct .
  5593 ;;  tempDayMonth    2    9[COMRAM] struct .
  5594 ;;  tempYear        2    6[COMRAM] struct .
  5595 ;;  wasWrEn         1    8[COMRAM] enum E7121
  5596 ;;  wasAlrm         1    5[COMRAM] enum E7121
  5597 ;;  wasOn           1    4[COMRAM] enum E7121
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      enum E6550
  5600 ;; Registers used:
  5601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5607 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5608 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5610 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5611 ;;Total ram usage:       13 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    1
  5614 ;; This function calls:
  5615 ;;		_RtccWrOn
  5616 ;; This function is called by:
  5617 ;;		_Write_RTC
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text23
  5622  00E8D8                     __ptext23:
  5623                           	opt stack 0
  5624  00E8D8                     _RtccWriteDate:
  5625                           	opt stack 25
  5626                           
  5627                           ;incstack = 0
  5628  00E8D8  0E00               	movlw	0
  5629  00E8DA  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5630  00E8DC  EE20 F002          	lfsr	2,2
  5631  00E8E0  5001               	movf	RtccWriteDate@pDt,w,c
  5632  00E8E2  26D9               	addwf	fsr2l,f,c
  5633  00E8E4  5002               	movf	RtccWriteDate@pDt+1,w,c
  5634  00E8E6  22DA               	addwfc	fsr2h,f,c
  5635  00E8E8  0E13               	movlw	19
  5636  00E8EA  60DF               	cpfslt	indf2,c
  5637  00E8EC  0012               	return	
  5638  00E8EE  EE20 F002          	lfsr	2,2
  5639  00E8F2  5001               	movf	RtccWriteDate@pDt,w,c
  5640  00E8F4  26D9               	addwf	fsr2l,f,c
  5641  00E8F6  5002               	movf	RtccWriteDate@pDt+1,w,c
  5642  00E8F8  22DA               	addwfc	fsr2h,f,c
  5643  00E8FA  50DF               	movf	indf2,w,c
  5644  00E8FC  B4D8               	btfsc	status,2,c
  5645  00E8FE  0012               	return	
  5646  00E900  EE20 F001          	lfsr	2,1
  5647  00E904  5001               	movf	RtccWriteDate@pDt,w,c
  5648  00E906  26D9               	addwf	fsr2l,f,c
  5649  00E908  5002               	movf	RtccWriteDate@pDt+1,w,c
  5650  00E90A  22DA               	addwfc	fsr2h,f,c
  5651  00E90C  0E32               	movlw	50
  5652  00E90E  60DF               	cpfslt	indf2,c
  5653  00E910  0012               	return	
  5654  00E912  EE20 F001          	lfsr	2,1
  5655  00E916  5001               	movf	RtccWriteDate@pDt,w,c
  5656  00E918  26D9               	addwf	fsr2l,f,c
  5657  00E91A  5002               	movf	RtccWriteDate@pDt+1,w,c
  5658  00E91C  22DA               	addwfc	fsr2h,f,c
  5659  00E91E  50DF               	movf	indf2,w,c
  5660  00E920  B4D8               	btfsc	status,2,c
  5661  00E922  0012               	return	
  5662  00E924  EE20 F003          	lfsr	2,3
  5663  00E928  5001               	movf	RtccWriteDate@pDt,w,c
  5664  00E92A  26D9               	addwf	fsr2l,f,c
  5665  00E92C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5666  00E92E  22DA               	addwfc	fsr2h,f,c
  5667  00E930  0E99               	movlw	153
  5668  00E932  64DF               	cpfsgt	indf2,c
  5669  00E934  D001               	goto	l667
  5670  00E936  0012               	return	
  5671  00E938                     l667:
  5672  00E938  EE20 F003          	lfsr	2,3
  5673  00E93C  5001               	movf	RtccWriteDate@pDt,w,c
  5674  00E93E  26D9               	addwf	fsr2l,f,c
  5675  00E940  5002               	movf	RtccWriteDate@pDt+1,w,c
  5676  00E942  22DA               	addwfc	fsr2h,f,c
  5677  00E944  50DF               	movf	indf2,w,c
  5678  00E946  6E07               	movwf	RtccWriteDate@tempYear,c
  5679  00E948  EE20 F001          	lfsr	2,1
  5680  00E94C  5001               	movf	RtccWriteDate@pDt,w,c
  5681  00E94E  26D9               	addwf	fsr2l,f,c
  5682  00E950  5002               	movf	RtccWriteDate@pDt+1,w,c
  5683  00E952  22DA               	addwfc	fsr2h,f,c
  5684  00E954  50DF               	movf	indf2,w,c
  5685  00E956  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  5686  00E958  EE20 F002          	lfsr	2,2
  5687  00E95C  5001               	movf	RtccWriteDate@pDt,w,c
  5688  00E95E  26D9               	addwf	fsr2l,f,c
  5689  00E960  5002               	movf	RtccWriteDate@pDt+1,w,c
  5690  00E962  22DA               	addwfc	fsr2h,f,c
  5691  00E964  50DF               	movf	indf2,w,c
  5692  00E966  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  5693  00E968  5003               	movf	RtccWriteDate@di,w,c
  5694  00E96A  A4D8               	btfss	status,2,c
  5695  00E96C  9CF2               	bcf	intcon,6,c	;volatile
  5696  00E96E  010F               	movlb	15	; () banked
  5697  00E970  0E00               	movlw	0
  5698  00E972  BB3F               	btfsc	63,5,b	;volatile
  5699  00E974  0E01               	movlw	1
  5700  00E976  6E09               	movwf	RtccWriteDate@wasWrEn,c
  5701  00E978  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5702  00E97A  B4D8               	btfsc	status,2,c
  5703                           
  5704                           ; BSR set to: 15
  5705  00E97C  EC84  F067         	call	_RtccWrOn	;wreg free
  5706  00E980  010F               	movlb	15	; () banked
  5707  00E982  0E00               	movlw	0
  5708  00E984  BF3F               	btfsc	63,7,b	;volatile
  5709  00E986  0E01               	movlw	1
  5710  00E988  6E05               	movwf	RtccWriteDate@wasOn,c
  5711  00E98A  5005               	movf	RtccWriteDate@wasOn,w,c
  5712  00E98C  B4D8               	btfsc	status,2,c
  5713  00E98E  D006               	goto	l673
  5714                           
  5715                           ; BSR set to: 15
  5716  00E990  0E00               	movlw	0
  5717  00E992  BE91               	btfsc	3985,7,c	;volatile
  5718  00E994  0E01               	movlw	1
  5719  00E996  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5720                           
  5721                           ; BSR set to: 15
  5722  00E998  010F               	movlb	15	; () banked
  5723  00E99A  9F3F               	bcf	63,7,b	;volatile
  5724  00E99C                     l673:
  5725                           
  5726                           ; BSR set to: 15
  5727                           
  5728                           ; BSR set to: 15
  5729  00E99C  0EFC               	movlw	252
  5730  00E99E  010F               	movlb	15	; () banked
  5731  00E9A0  173F               	andwf	63,f,b	;volatile
  5732  00E9A2  010F               	movlb	15	; () banked
  5733  00E9A4  813F               	bsf	63,0,b	;volatile
  5734                           
  5735                           ; BSR set to: 15
  5736  00E9A6  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  5737                           
  5738                           ; BSR set to: 15
  5739  00E9AA  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  5740                           
  5741                           ; BSR set to: 15
  5742  00E9AE  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  5743  00E9B2  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  5744  00E9B6  50DF               	movf	indf2,w,c
  5745  00E9B8  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  5746                           
  5747                           ; BSR set to: 15
  5748  00E9BA  0EFC               	movlw	252
  5749  00E9BC  010F               	movlb	15	; () banked
  5750  00E9BE  173F               	andwf	63,f,b	;volatile
  5751                           
  5752                           ; BSR set to: 15
  5753  00E9C0  0E03               	movlw	3
  5754  00E9C2  010F               	movlb	15	; () banked
  5755  00E9C4  133F               	iorwf	63,f,b	;volatile
  5756                           
  5757                           ; BSR set to: 15
  5758  00E9C6  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  5759                           
  5760                           ; BSR set to: 15
  5761  00E9CA  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  5762                           
  5763                           ; BSR set to: 15
  5764  00E9CE  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  5765                           
  5766                           ; BSR set to: 15
  5767  00E9D2  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  5768                           
  5769                           ; BSR set to: 15
  5770  00E9D6  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  5771                           
  5772                           ; BSR set to: 15
  5773  00E9DA  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  5774                           
  5775                           ; BSR set to: 15
  5776  00E9DE  5005               	movf	RtccWriteDate@wasOn,w,c
  5777  00E9E0  B4D8               	btfsc	status,2,c
  5778  00E9E2  D00B               	goto	l674
  5779                           
  5780                           ; BSR set to: 15
  5781  00E9E4  010F               	movlb	15	; () banked
  5782  00E9E6  8F3F               	bsf	63,7,b	;volatile
  5783                           
  5784                           ; BSR set to: 15
  5785  00E9E8  5006               	movf	RtccWriteDate@wasAlrm,w,c
  5786  00E9EA  A4D8               	btfss	status,2,c
  5787                           
  5788                           ; BSR set to: 15
  5789  00E9EC  8E91               	bsf	3985,7,c	;volatile
  5790                           
  5791                           ; BSR set to: 15
  5792                           
  5793                           ; BSR set to: 15
  5794  00E9EE  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5795  00E9F0  B4D8               	btfsc	status,2,c
  5796  00E9F2  D008               	goto	l678
  5797                           
  5798                           ; BSR set to: 15
  5799  00E9F4  EC84  F067         	call	_RtccWrOn	;wreg free
  5800  00E9F8  D005               	goto	l678
  5801  00E9FA                     l674:
  5802  00E9FA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5803  00E9FC  A4D8               	btfss	status,2,c
  5804  00E9FE  D002               	goto	l678
  5805  00EA00  010F               	movlb	15	; () banked
  5806  00EA02  9B3F               	bcf	63,5,b	;volatile
  5807  00EA04                     l678:
  5808                           
  5809                           ; BSR set to: 15
  5810                           
  5811                           ; BSR set to: 15
  5812  00EA04  5003               	movf	RtccWriteDate@di,w,c
  5813  00EA06  B4D8               	btfsc	status,2,c
  5814  00EA08  0012               	return	
  5815  00EA0A  9CF2               	bcf	intcon,6,c	;volatile
  5816  00EA0C  0012               	return	
  5817  00EA0E                     __end_of_RtccWriteDate:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           postinc0	equ	0xFEE
  5827                           wreg	equ	0xFE8
  5828                           postinc1	equ	0xFE6
  5829                           postdec1	equ	0xFE5
  5830                           fsr1h	equ	0xFE2
  5831                           fsr1l	equ	0xFE1
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           fsr2h	equ	0xFDA
  5836                           fsr2l	equ	0xFD9
  5837                           status	equ	0xFD8
  5838                           
  5839 ;; *************** function _RtccWrOn *****************
  5840 ;; Defined at:
  5841 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWrOn.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  data            2    0        unsigned int 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      void 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; This function calls:
  5862 ;;		Nothing
  5863 ;; This function is called by:
  5864 ;;		_Write_RTC
  5865 ;;		_RtccWriteDate
  5866 ;;		_RtccWriteTime
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           	psect	text24
  5871  00CF08                     __ptext24:
  5872                           	opt stack 0
  5873  00CF08                     _RtccWrOn:
  5874                           	opt stack 25
  5875                           
  5876                           ;incstack = 0
  5877  00CF08  9CF2               	bcf	intcon,6,c	;volatile
  5878  00CF0A  0E55               	movlw	85
  5879  00CF0C  6EA7               	movwf	4007,c	;volatile
  5880  00CF0E  0EAA               	movlw	170
  5881  00CF10  6EA7               	movwf	4007,c	;volatile
  5882  00CF12  010F               	movlb	15	; () banked
  5883  00CF14  8B3F               	bsf	63,5,b	;volatile
  5884                           
  5885                           ; BSR set to: 15
  5886  00CF16  8CF2               	bsf	intcon,6,c	;volatile
  5887                           
  5888                           ; BSR set to: 15
  5889  00CF18  0012               	return		;funcret
  5890  00CF1A                     __end_of_RtccWrOn:
  5891                           	opt stack 0
  5892                           tblptru	equ	0xFF8
  5893                           tblptrh	equ	0xFF7
  5894                           tblptrl	equ	0xFF6
  5895                           tablat	equ	0xFF5
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon	equ	0xFF2
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           postinc1	equ	0xFE6
  5902                           postdec1	equ	0xFE5
  5903                           fsr1h	equ	0xFE2
  5904                           fsr1l	equ	0xFE1
  5905                           indf2	equ	0xFDF
  5906                           postinc2	equ	0xFDE
  5907                           postdec2	equ	0xFDD
  5908                           fsr2h	equ	0xFDA
  5909                           fsr2l	equ	0xFD9
  5910                           status	equ	0xFD8
  5911                           
  5912 ;; *************** function _covertir_valores_de_array_a_escala_decimal *****************
  5913 ;; Defined at:
  5914 ;;		line 625 in file "main.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;		None
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  i               2    8[BANK0 ] int 
  5919 ;;  numero          2    6[BANK0 ] int 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  2   90[COMRAM] int 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5929 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5930 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5931 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5932 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5933 ;;Total ram usage:       14 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    5
  5936 ;; This function calls:
  5937 ;;		___awtoft
  5938 ;;		___fttol
  5939 ;;		___wmul
  5940 ;;		_pow
  5941 ;; This function is called by:
  5942 ;;		_editar_fecha_reloj_digital
  5943 ;;		_editar_hora_reloj_digital
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           	psect	text25
  5948  00E162                     __ptext25:
  5949                           	opt stack 0
  5950  00E162                     _covertir_valores_de_array_a_escala_decimal:
  5951                           	opt stack 19
  5952                           
  5953                           ;main.c: 626: int numero = 0;
  5954                           
  5955                           ; BSR set to: 15
  5956                           ;incstack = 0
  5957  00E162  0E00               	movlw	0
  5958  00E164  0100               	movlb	0	; () banked
  5959  00E166  6FDA               	movwf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),b
  5960  00E168  0E00               	movlw	0
  5961  00E16A  6FD9               	movwf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),b
  5962                           
  5963                           ;main.c: 627: for (int i = 2 - 1; i >= 0; i--) {
  5964  00E16C  0E00               	movlw	0
  5965  00E16E  0100               	movlb	0	; () banked
  5966  00E170  6FDC               	movwf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),b
  5967  00E172  0E01               	movlw	1
  5968  00E174  6FDB               	movwf	covertir_valores_de_array_a_escala_decimal@i& (0+255),b
  5969  00E176                     l4759:
  5970                           
  5971                           ; BSR set to: 0
  5972  00E176  0100               	movlb	0	; () banked
  5973  00E178  BFDC               	btfsc	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),7,b
  5974  00E17A  D05A               	goto	u5520
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;main.c: 628: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  5978                           
  5979                           ; BSR set to: 0
  5980                           
  5981                           ; BSR set to: 0
  5982  00E17C  0E01               	movlw	1
  5983  00E17E  0100               	movlb	0	; () banked
  5984  00E180  25DB               	addwf	covertir_valores_de_array_a_escala_decimal@i& (0+255),w,b
  5985  00E182  6E5D               	movwf	??_covertir_valores_de_array_a_escala_decimal& (0+255),c
  5986  00E184  0E00               	movlw	0
  5987  00E186  0100               	movlb	0	; () banked
  5988  00E188  21DC               	addwfc	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),w,b
  5989  00E18A  6E5E               	movwf	(??_covertir_valores_de_array_a_escala_decimal+1)& (0+255),c
  5990  00E18C  1E5D               	comf	??_covertir_valores_de_array_a_escala_decimal,f,c
  5991  00E18E  1E5E               	comf	??_covertir_valores_de_array_a_escala_decimal+1,f,c
  5992  00E190  4A5D               	infsnz	??_covertir_valores_de_array_a_escala_decimal,f,c
  5993  00E192  2A5E               	incf	??_covertir_valores_de_array_a_escala_decimal+1,f,c
  5994  00E194  0E02               	movlw	2
  5995  00E196  245D               	addwf	??_covertir_valores_de_array_a_escala_decimal,w,c
  5996  00E198  6E09               	movwf	___awtoft@c,c
  5997  00E19A  0E00               	movlw	0
  5998  00E19C  205E               	addwfc	??_covertir_valores_de_array_a_escala_decimal+1,w,c
  5999  00E19E  6E0A               	movwf	___awtoft@c+1,c
  6000  00E1A0  EC2D  F068         	call	___awtoft	;wreg free
  6001  00E1A4  C009  F0D3         	movff	?___awtoft,_covertir_valores_de_array_a_escala_decimal$2493
  6002  00E1A8  C00A  F0D4         	movff	?___awtoft+1,_covertir_valores_de_array_a_escala_decimal$2493+1
  6003  00E1AC  C00B  F0D5         	movff	?___awtoft+2,_covertir_valores_de_array_a_escala_decimal$2493+2
  6004                           
  6005                           ;main.c: 628: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  6006  00E1B0  C0D3  F04D         	movff	_covertir_valores_de_array_a_escala_decimal$2493,pow@y
  6007  00E1B4  C0D4  F04E         	movff	_covertir_valores_de_array_a_escala_decimal$2493+1,pow@y+1
  6008  00E1B8  C0D5  F04F         	movff	_covertir_valores_de_array_a_escala_decimal$2493+2,pow@y+2
  6009  00E1BC  0E00               	movlw	0
  6010  00E1BE  6E4A               	movwf	pow@x,c
  6011  00E1C0  0E20               	movlw	32
  6012  00E1C2  6E4B               	movwf	pow@x+1,c
  6013  00E1C4  0E41               	movlw	65
  6014  00E1C6  6E4C               	movwf	pow@x+2,c
  6015  00E1C8  ECAA  F075         	call	_pow	;wreg free
  6016  00E1CC  C04A  F0D6         	movff	?_pow,_covertir_valores_de_array_a_escala_decimal$2494
  6017  00E1D0  C04B  F0D7         	movff	?_pow+1,_covertir_valores_de_array_a_escala_decimal$2494+1
  6018  00E1D4  C04C  F0D8         	movff	?_pow+2,_covertir_valores_de_array_a_escala_decimal$2494+2
  6019                           
  6020                           ;main.c: 628: numero = numero + numeros_para_fecha[i] * (int) pow(10, (2 - 1) - i);
  6021  00E1D8  C0D6  F00D         	movff	_covertir_valores_de_array_a_escala_decimal$2494,___fttol@f1
  6022  00E1DC  C0D7  F00E         	movff	_covertir_valores_de_array_a_escala_decimal$2494+1,___fttol@f1+1
  6023  00E1E0  C0D8  F00F         	movff	_covertir_valores_de_array_a_escala_decimal$2494+2,___fttol@f1+2
  6024  00E1E4  ECE5  F072         	call	___fttol	;wreg free
  6025  00E1E8  C00D  F01C         	movff	?___fttol,___wmul@multiplier
  6026  00E1EC  C00E  F01D         	movff	?___fttol+1,___wmul@multiplier+1
  6027  00E1F0  90D8               	bcf	status,0,c
  6028  00E1F2  0100               	movlb	0	; () banked
  6029  00E1F4  35DB               	rlcf	covertir_valores_de_array_a_escala_decimal@i& (0+255),w,b
  6030  00E1F6  6ED9               	movwf	fsr2l,c
  6031  00E1F8  0100               	movlb	0	; () banked
  6032  00E1FA  35DC               	rlcf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),w,b
  6033  00E1FC  6EDA               	movwf	fsr2h,c
  6034  00E1FE  0E80               	movlw	low _numeros_para_fecha
  6035  00E200  26D9               	addwf	fsr2l,f,c
  6036  00E202  0E00               	movlw	high _numeros_para_fecha
  6037  00E204  22DA               	addwfc	fsr2h,f,c
  6038  00E206  CFDE F01E          	movff	postinc2,___wmul@multiplicand
  6039  00E20A  CFDD F01F          	movff	postdec2,___wmul@multiplicand+1
  6040  00E20E  ECE8  F067         	call	___wmul	;wreg free
  6041  00E212  0100               	movlb	0	; () banked
  6042  00E214  51D9               	movf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),w,b
  6043  00E216  241C               	addwf	?___wmul,w,c
  6044  00E218  0100               	movlb	0	; () banked
  6045  00E21A  6FD9               	movwf	covertir_valores_de_array_a_escala_decimal@numero& (0+255),b
  6046  00E21C  0100               	movlb	0	; () banked
  6047  00E21E  51DA               	movf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),w,b
  6048  00E220  201D               	addwfc	?___wmul+1,w,c
  6049  00E222  0100               	movlb	0	; () banked
  6050  00E224  6FDA               	movwf	(covertir_valores_de_array_a_escala_decimal@numero+1)& (0+255),b
  6051                           
  6052                           ; BSR set to: 0
  6053  00E226  0100               	movlb	0	; () banked
  6054  00E228  07DB               	decf	covertir_valores_de_array_a_escala_decimal@i& (0+255),f,b
  6055  00E22A  A0D8               	btfss	status,0,c
  6056  00E22C  07DC               	decf	(covertir_valores_de_array_a_escala_decimal@i+1)& (0+255),f,b
  6057  00E22E  D7A3               	goto	l4759
  6058  00E230                     u5520:
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;main.c: 629: };
  6062                           ;main.c: 633: return numero;
  6063  00E230  C0D9  F05B         	movff	covertir_valores_de_array_a_escala_decimal@numero,?_covertir_valores_de_array_a_e
      +                          scala_decimal
  6064  00E234  C0DA  F05C         	movff	covertir_valores_de_array_a_escala_decimal@numero+1,?_covertir_valores_de_array_a
      +                          _escala_decimal+1
  6065                           
  6066                           ; BSR set to: 0
  6067  00E238  0012               	return		;funcret
  6068  00E23A                     __end_of_covertir_valores_de_array_a_escala_decimal:
  6069                           	opt stack 0
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           intcon	equ	0xFF2
  6077                           postinc0	equ	0xFEE
  6078                           wreg	equ	0xFE8
  6079                           postinc1	equ	0xFE6
  6080                           postdec1	equ	0xFE5
  6081                           fsr1h	equ	0xFE2
  6082                           fsr1l	equ	0xFE1
  6083                           indf2	equ	0xFDF
  6084                           postinc2	equ	0xFDE
  6085                           postdec2	equ	0xFDD
  6086                           fsr2h	equ	0xFDA
  6087                           fsr2l	equ	0xFD9
  6088                           status	equ	0xFD8
  6089                           
  6090 ;; *************** function _pow *****************
  6091 ;; Defined at:
  6092 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;  x               3   73[COMRAM] int 
  6095 ;;  y               3   76[COMRAM] int 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  yi              4   86[COMRAM] unsigned long 
  6098 ;;  sign            1   85[COMRAM] unsigned char 
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  3   73[COMRAM] unsigned char 
  6101 ;; Registers used:
  6102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6108 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6109 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6111 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6112 ;;Total ram usage:       17 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:    4
  6115 ;; This function calls:
  6116 ;;		___ftge
  6117 ;;		___ftmul
  6118 ;;		___ftneg
  6119 ;;		___fttol
  6120 ;;		___lltoft
  6121 ;;		_exp
  6122 ;;		_log
  6123 ;; This function is called by:
  6124 ;;		_covertir_valores_de_array_a_escala_decimal
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text26
  6129  00EB54                     __ptext26:
  6130                           	opt stack 0
  6131  00EB54                     _pow:
  6132                           	opt stack 19
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;incstack = 0
  6136  00EB54  0E00               	movlw	0
  6137  00EB56  6E56               	movwf	pow@sign,c
  6138  00EB58  504A               	movf	pow@x,w,c
  6139  00EB5A  104B               	iorwf	pow@x+1,w,c
  6140  00EB5C  104C               	iorwf	pow@x+2,w,c
  6141  00EB5E  A4D8               	btfss	status,2,c
  6142  00EB60  D01C               	goto	l1168
  6143  00EB62  0E00               	movlw	0
  6144  00EB64  6E01               	movwf	___ftge@ff1,c
  6145  00EB66  0E00               	movlw	0
  6146  00EB68  6E02               	movwf	___ftge@ff1+1,c
  6147  00EB6A  0E00               	movlw	0
  6148  00EB6C  6E03               	movwf	___ftge@ff1+2,c
  6149  00EB6E  C04D  F004         	movff	pow@y,___ftge@ff2
  6150  00EB72  C04E  F005         	movff	pow@y+1,___ftge@ff2+1
  6151  00EB76  C04F  F006         	movff	pow@y+2,___ftge@ff2+2
  6152  00EB7A  EC16  F06D         	call	___ftge	;wreg free
  6153  00EB7E  A0D8               	btfss	status,0,c
  6154  00EB80  D005               	goto	l1169
  6155  00EB82  0E00               	movlw	0
  6156  00EB84  0100               	movlb	0	; () banked
  6157  00EB86  6F89               	movwf	(_errno+1)& (0+255),b
  6158  00EB88  0E21               	movlw	33
  6159  00EB8A  6F88               	movwf	_errno& (0+255),b
  6160  00EB8C                     l1169:
  6161  00EB8C  0E00               	movlw	0
  6162  00EB8E  6E4A               	movwf	?_pow,c
  6163  00EB90  0E00               	movlw	0
  6164  00EB92  6E4B               	movwf	?_pow+1,c
  6165  00EB94  0E00               	movlw	0
  6166  00EB96  6E4C               	movwf	?_pow+2,c
  6167  00EB98  0012               	return	
  6168  00EB9A                     l1168:
  6169  00EB9A  504D               	movf	pow@y,w,c
  6170  00EB9C  104E               	iorwf	pow@y+1,w,c
  6171  00EB9E  104F               	iorwf	pow@y+2,w,c
  6172  00EBA0  A4D8               	btfss	status,2,c
  6173  00EBA2  D007               	goto	l1171
  6174  00EBA4  0E00               	movlw	0
  6175  00EBA6  6E4A               	movwf	?_pow,c
  6176  00EBA8  0E80               	movlw	128
  6177  00EBAA  6E4B               	movwf	?_pow+1,c
  6178  00EBAC  0E3F               	movlw	63
  6179  00EBAE  6E4C               	movwf	?_pow+2,c
  6180  00EBB0  0012               	return	
  6181  00EBB2                     l1171:
  6182  00EBB2  AE4C               	btfss	pow@x+2,7,c
  6183  00EBB4  D041               	goto	l1172
  6184  00EBB6  C04D  F00D         	movff	pow@y,___fttol@f1
  6185  00EBBA  C04E  F00E         	movff	pow@y+1,___fttol@f1+1
  6186  00EBBE  C04F  F00F         	movff	pow@y+2,___fttol@f1+2
  6187  00EBC2  ECE5  F072         	call	___fttol	;wreg free
  6188  00EBC6  C00D  F057         	movff	?___fttol,pow@yi
  6189  00EBCA  C00E  F058         	movff	?___fttol+1,pow@yi+1
  6190  00EBCE  C00F  F059         	movff	?___fttol+2,pow@yi+2
  6191  00EBD2  C010  F05A         	movff	?___fttol+3,pow@yi+3
  6192  00EBD6  C057  F009         	movff	pow@yi,___lltoft@c
  6193  00EBDA  C058  F00A         	movff	pow@yi+1,___lltoft@c+1
  6194  00EBDE  C059  F00B         	movff	pow@yi+2,___lltoft@c+2
  6195  00EBE2  C05A  F00C         	movff	pow@yi+3,___lltoft@c+3
  6196  00EBE6  EC75  F069         	call	___lltoft	;wreg free
  6197  00EBEA  504D               	movf	pow@y,w,c
  6198  00EBEC  1809               	xorwf	?___lltoft,w,c
  6199  00EBEE  E107               	bnz	u5010
  6200  00EBF0  504E               	movf	pow@y+1,w,c
  6201  00EBF2  180A               	xorwf	?___lltoft+1,w,c
  6202  00EBF4  E104               	bnz	u5010
  6203  00EBF6  504F               	movf	pow@y+2,w,c
  6204  00EBF8  180B               	xorwf	?___lltoft+2,w,c
  6205  00EBFA  B4D8               	btfsc	status,2,c
  6206  00EBFC  D00C               	goto	l1173
  6207  00EBFE                     u5010:
  6208  00EBFE  0E00               	movlw	0
  6209  00EC00  0100               	movlb	0	; () banked
  6210  00EC02  6F89               	movwf	(_errno+1)& (0+255),b
  6211  00EC04  0E21               	movlw	33
  6212  00EC06  6F88               	movwf	_errno& (0+255),b
  6213  00EC08  0E00               	movlw	0
  6214  00EC0A  6E4A               	movwf	?_pow,c
  6215  00EC0C  0E00               	movlw	0
  6216  00EC0E  6E4B               	movwf	?_pow+1,c
  6217  00EC10  0E00               	movlw	0
  6218  00EC12  6E4C               	movwf	?_pow+2,c
  6219                           
  6220                           ; BSR set to: 0
  6221  00EC14  0012               	return	
  6222  00EC16                     l1173:
  6223                           
  6224                           ; BSR set to: 0
  6225  00EC16  5057               	movf	pow@yi,w,c
  6226  00EC18  0B01               	andlw	1
  6227  00EC1A  6E56               	movwf	pow@sign,c
  6228  00EC1C  C04A  F001         	movff	pow@x,___ftneg@f1
  6229  00EC20  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  6230  00EC24  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  6231  00EC28  ECC4  F067         	call	___ftneg	;wreg free
  6232  00EC2C  C001  F04A         	movff	?___ftneg,pow@x
  6233  00EC30  C002  F04B         	movff	?___ftneg+1,pow@x+1
  6234  00EC34  C003  F04C         	movff	?___ftneg+2,pow@x+2
  6235  00EC38                     l1172:
  6236  00EC38  C04A  F03A         	movff	pow@x,log@x
  6237  00EC3C  C04B  F03B         	movff	pow@x+1,log@x+1
  6238  00EC40  C04C  F03C         	movff	pow@x+2,log@x+2
  6239  00EC44  ECDD  F073         	call	_log	;wreg free
  6240  00EC48  C03A  F050         	movff	?_log,_pow$2495
  6241  00EC4C  C03B  F051         	movff	?_log+1,_pow$2495+1
  6242  00EC50  C03C  F052         	movff	?_log+2,_pow$2495+2
  6243  00EC54  C050  F00D         	movff	_pow$2495,___ftmul@f1
  6244  00EC58  C051  F00E         	movff	_pow$2495+1,___ftmul@f1+1
  6245  00EC5C  C052  F00F         	movff	_pow$2495+2,___ftmul@f1+2
  6246  00EC60  C04D  F010         	movff	pow@y,___ftmul@f2
  6247  00EC64  C04E  F011         	movff	pow@y+1,___ftmul@f2+1
  6248  00EC68  C04F  F012         	movff	pow@y+2,___ftmul@f2+2
  6249  00EC6C  EC6B  F072         	call	___ftmul	;wreg free
  6250  00EC70  C00D  F053         	movff	?___ftmul,_pow$2496
  6251  00EC74  C00E  F054         	movff	?___ftmul+1,_pow$2496+1
  6252  00EC78  C00F  F055         	movff	?___ftmul+2,_pow$2496+2
  6253  00EC7C  C053  F041         	movff	_pow$2496,exp@x
  6254  00EC80  C054  F042         	movff	_pow$2496+1,exp@x+1
  6255  00EC84  C055  F043         	movff	_pow$2496+2,exp@x+2
  6256  00EC88  EC09  F078         	call	_exp	;wreg free
  6257  00EC8C  C041  F04A         	movff	?_exp,pow@x
  6258  00EC90  C042  F04B         	movff	?_exp+1,pow@x+1
  6259  00EC94  C043  F04C         	movff	?_exp+2,pow@x+2
  6260  00EC98  5056               	movf	pow@sign,w,c
  6261  00EC9A  B4D8               	btfsc	status,2,c
  6262  00EC9C  D00F               	goto	l1174
  6263  00EC9E  C04A  F001         	movff	pow@x,___ftneg@f1
  6264  00ECA2  C04B  F002         	movff	pow@x+1,___ftneg@f1+1
  6265  00ECA6  C04C  F003         	movff	pow@x+2,___ftneg@f1+2
  6266  00ECAA  ECC4  F067         	call	___ftneg	;wreg free
  6267  00ECAE  C001  F04A         	movff	?___ftneg,?_pow
  6268  00ECB2  C002  F04B         	movff	?___ftneg+1,?_pow+1
  6269  00ECB6  C003  F04C         	movff	?___ftneg+2,?_pow+2
  6270  00ECBA  0012               	return	
  6271  00ECBC                     l1174:
  6272  00ECBC  C04A  F04A         	movff	pow@x,?_pow
  6273  00ECC0  C04B  F04B         	movff	pow@x+1,?_pow+1
  6274  00ECC4  C04C  F04C         	movff	pow@x+2,?_pow+2
  6275  00ECC8  0012               	return		;funcret
  6276  00ECCA                     __end_of_pow:
  6277                           	opt stack 0
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           intcon	equ	0xFF2
  6285                           postinc0	equ	0xFEE
  6286                           wreg	equ	0xFE8
  6287                           postinc1	equ	0xFE6
  6288                           postdec1	equ	0xFE5
  6289                           fsr1h	equ	0xFE2
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _log *****************
  6299 ;; Defined at:
  6300 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  x               3   57[COMRAM] unsigned char 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  exponent        2   60[COMRAM] int 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  3   57[COMRAM] int 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6314 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6315 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6317 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6318 ;;Total ram usage:        5 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    3
  6321 ;; This function calls:
  6322 ;;		___awtoft
  6323 ;;		___ftadd
  6324 ;;		___ftmul
  6325 ;;		_eval_poly
  6326 ;;		_frexp
  6327 ;; This function is called by:
  6328 ;;		_pow
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           	psect	text27
  6333  00E7BA                     __ptext27:
  6334                           	opt stack 0
  6335  00E7BA                     _log:
  6336                           	opt stack 19
  6337                           
  6338                           ;incstack = 0
  6339  00E7BA  AE3C               	btfss	log@x+2,7,c
  6340  00E7BC  D00C               	goto	l1370
  6341  00E7BE  0E00               	movlw	0
  6342  00E7C0  0100               	movlb	0	; () banked
  6343  00E7C2  6F89               	movwf	(_errno+1)& (0+255),b
  6344  00E7C4  0E21               	movlw	33
  6345  00E7C6  6F88               	movwf	_errno& (0+255),b
  6346  00E7C8  0E00               	movlw	0
  6347  00E7CA  6E3A               	movwf	?_log,c
  6348  00E7CC  0E00               	movlw	0
  6349  00E7CE  6E3B               	movwf	?_log+1,c
  6350  00E7D0  0E00               	movlw	0
  6351  00E7D2  6E3C               	movwf	?_log+2,c
  6352                           
  6353                           ; BSR set to: 0
  6354  00E7D4  0012               	return	
  6355  00E7D6                     l1370:
  6356                           
  6357                           ; BSR set to: 0
  6358  00E7D6  503A               	movf	log@x,w,c
  6359  00E7D8  103B               	iorwf	log@x+1,w,c
  6360  00E7DA  103C               	iorwf	log@x+2,w,c
  6361  00E7DC  A4D8               	btfss	status,2,c
  6362  00E7DE  D00C               	goto	l1372
  6363  00E7E0  0E00               	movlw	0
  6364  00E7E2  0100               	movlb	0	; () banked
  6365  00E7E4  6F89               	movwf	(_errno+1)& (0+255),b
  6366  00E7E6  0E22               	movlw	34
  6367  00E7E8  6F88               	movwf	_errno& (0+255),b
  6368  00E7EA  0E00               	movlw	0
  6369  00E7EC  6E3A               	movwf	?_log,c
  6370  00E7EE  0E00               	movlw	0
  6371  00E7F0  6E3B               	movwf	?_log+1,c
  6372  00E7F2  0E00               	movlw	0
  6373  00E7F4  6E3C               	movwf	?_log+2,c
  6374                           
  6375                           ; BSR set to: 0
  6376  00E7F6  0012               	return	
  6377  00E7F8                     l1372:
  6378                           
  6379                           ; BSR set to: 0
  6380  00E7F8  0E00               	movlw	0
  6381  00E7FA  6E10               	movwf	___ftmul@f2,c
  6382  00E7FC  0E00               	movlw	0
  6383  00E7FE  6E11               	movwf	___ftmul@f2+1,c
  6384  00E800  0E40               	movlw	64
  6385  00E802  6E12               	movwf	___ftmul@f2+2,c
  6386  00E804  0E3D               	movlw	low log@exponent
  6387  00E806  6E04               	movwf	frexp@eptr,c
  6388  00E808  0E00               	movlw	high log@exponent
  6389  00E80A  6E05               	movwf	frexp@eptr+1,c
  6390  00E80C  C03A  F001         	movff	log@x,frexp@value
  6391  00E810  C03B  F002         	movff	log@x+1,frexp@value+1
  6392  00E814  C03C  F003         	movff	log@x+2,frexp@value+2
  6393  00E818  EC5E  F06D         	call	_frexp	;wreg free
  6394  00E81C  C001  F00D         	movff	?_frexp,___ftmul@f1
  6395  00E820  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  6396  00E824  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  6397  00E828  EC6B  F072         	call	___ftmul	;wreg free
  6398  00E82C  C00D  F022         	movff	?___ftmul,___ftadd@f1
  6399  00E830  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  6400  00E834  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  6401  00E838  0E00               	movlw	0
  6402  00E83A  6E25               	movwf	___ftadd@f2,c
  6403  00E83C  0E80               	movlw	128
  6404  00E83E  6E26               	movwf	___ftadd@f2+1,c
  6405  00E840  0EBF               	movlw	191
  6406  00E842  6E27               	movwf	___ftadd@f2+2,c
  6407  00E844  EC33  F077         	call	___ftadd	;wreg free
  6408  00E848  C022  F03A         	movff	?___ftadd,log@x
  6409  00E84C  C023  F03B         	movff	?___ftadd+1,log@x+1
  6410  00E850  C024  F03C         	movff	?___ftadd+2,log@x+2
  6411  00E854  063D               	decf	log@exponent,f,c
  6412  00E856  A0D8               	btfss	status,0,c
  6413  00E858  063E               	decf	log@exponent+1,f,c
  6414  00E85A  C03A  F02E         	movff	log@x,eval_poly@x
  6415  00E85E  C03B  F02F         	movff	log@x+1,eval_poly@x+1
  6416  00E862  C03C  F030         	movff	log@x+2,eval_poly@x+2
  6417  00E866  0EAF               	movlw	low log@coeff
  6418  00E868  6E31               	movwf	eval_poly@d,c
  6419  00E86A  0EFE               	movlw	high log@coeff
  6420  00E86C  6E32               	movwf	eval_poly@d+1,c
  6421  00E86E  0E00               	movlw	0
  6422  00E870  6E34               	movwf	eval_poly@n+1,c
  6423  00E872  0E08               	movlw	8
  6424  00E874  6E33               	movwf	eval_poly@n,c
  6425  00E876  EC48  F070         	call	_eval_poly	;wreg free
  6426  00E87A  C02E  F03A         	movff	?_eval_poly,log@x
  6427  00E87E  C02F  F03B         	movff	?_eval_poly+1,log@x+1
  6428  00E882  C030  F03C         	movff	?_eval_poly+2,log@x+2
  6429  00E886  0E72               	movlw	114
  6430  00E888  6E10               	movwf	___ftmul@f2,c
  6431  00E88A  0E31               	movlw	49
  6432  00E88C  6E11               	movwf	___ftmul@f2+1,c
  6433  00E88E  0E3F               	movlw	63
  6434  00E890  6E12               	movwf	___ftmul@f2+2,c
  6435  00E892  C03D  F009         	movff	log@exponent,___awtoft@c
  6436  00E896  C03E  F00A         	movff	log@exponent+1,___awtoft@c+1
  6437  00E89A  EC2D  F068         	call	___awtoft	;wreg free
  6438  00E89E  C009  F00D         	movff	?___awtoft,___ftmul@f1
  6439  00E8A2  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  6440  00E8A6  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  6441  00E8AA  EC6B  F072         	call	___ftmul	;wreg free
  6442  00E8AE  C00D  F022         	movff	?___ftmul,___ftadd@f1
  6443  00E8B2  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  6444  00E8B6  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  6445  00E8BA  C03A  F025         	movff	log@x,___ftadd@f2
  6446  00E8BE  C03B  F026         	movff	log@x+1,___ftadd@f2+1
  6447  00E8C2  C03C  F027         	movff	log@x+2,___ftadd@f2+2
  6448  00E8C6  EC33  F077         	call	___ftadd	;wreg free
  6449  00E8CA  C022  F03A         	movff	?___ftadd,?_log
  6450  00E8CE  C023  F03B         	movff	?___ftadd+1,?_log+1
  6451  00E8D2  C024  F03C         	movff	?___ftadd+2,?_log+2
  6452  00E8D6  0012               	return	
  6453  00E8D8                     __end_of_log:
  6454                           	opt stack 0
  6455                           tblptru	equ	0xFF8
  6456                           tblptrh	equ	0xFF7
  6457                           tblptrl	equ	0xFF6
  6458                           tablat	equ	0xFF5
  6459                           prodh	equ	0xFF4
  6460                           prodl	equ	0xFF3
  6461                           intcon	equ	0xFF2
  6462                           postinc0	equ	0xFEE
  6463                           wreg	equ	0xFE8
  6464                           postinc1	equ	0xFE6
  6465                           postdec1	equ	0xFE5
  6466                           fsr1h	equ	0xFE2
  6467                           fsr1l	equ	0xFE1
  6468                           indf2	equ	0xFDF
  6469                           postinc2	equ	0xFDE
  6470                           postdec2	equ	0xFDD
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _exp *****************
  6476 ;; Defined at:
  6477 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  x               3   64[COMRAM] int 
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  exponent        2   70[COMRAM] int 
  6482 ;;  sign            1   72[COMRAM] unsigned char 
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  3   64[COMRAM] unsigned char 
  6485 ;; Registers used:
  6486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6492 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6493 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6495 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6496 ;;Total ram usage:        9 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    3
  6499 ;; This function calls:
  6500 ;;		___awtoft
  6501 ;;		___ftdiv
  6502 ;;		___ftge
  6503 ;;		___ftmul
  6504 ;;		___ftneg
  6505 ;;		___ftsub
  6506 ;;		___fttol
  6507 ;;		_eval_poly
  6508 ;;		_floor
  6509 ;;		_ldexp
  6510 ;; This function is called by:
  6511 ;;		_pow
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text28
  6516  00F012                     __ptext28:
  6517                           	opt stack 0
  6518  00F012                     _exp:
  6519                           	opt stack 19
  6520                           
  6521                           ;incstack = 0
  6522  00F012  5041               	movf	exp@x,w,c
  6523  00F014  1042               	iorwf	exp@x+1,w,c
  6524  00F016  1043               	iorwf	exp@x+2,w,c
  6525  00F018  A4D8               	btfss	status,2,c
  6526  00F01A  D007               	goto	l1328
  6527  00F01C  0E00               	movlw	0
  6528  00F01E  6E41               	movwf	?_exp,c
  6529  00F020  0E80               	movlw	128
  6530  00F022  6E42               	movwf	?_exp+1,c
  6531  00F024  0E3F               	movlw	63
  6532  00F026  6E43               	movwf	?_exp+2,c
  6533  00F028  0012               	return	
  6534  00F02A                     l1328:
  6535  00F02A  0E72               	movlw	114
  6536  00F02C  6E01               	movwf	___ftge@ff1,c
  6537  00F02E  0E31               	movlw	49
  6538  00F030  6E02               	movwf	___ftge@ff1+1,c
  6539  00F032  0E44               	movlw	68
  6540  00F034  6E03               	movwf	___ftge@ff1+2,c
  6541  00F036  C041  F004         	movff	exp@x,___ftge@ff2
  6542  00F03A  C042  F005         	movff	exp@x+1,___ftge@ff2+1
  6543  00F03E  C043  F006         	movff	exp@x+2,___ftge@ff2+2
  6544  00F042  EC16  F06D         	call	___ftge	;wreg free
  6545  00F046  B0D8               	btfsc	status,0,c
  6546  00F048  D00C               	goto	l1330
  6547  00F04A  0E00               	movlw	0
  6548  00F04C  0100               	movlb	0	; () banked
  6549  00F04E  6F89               	movwf	(_errno+1)& (0+255),b
  6550  00F050  0E22               	movlw	34
  6551  00F052  6F88               	movwf	_errno& (0+255),b
  6552  00F054  0EFF               	movlw	255
  6553  00F056  6E41               	movwf	?_exp,c
  6554  00F058  0E7F               	movlw	127
  6555  00F05A  6E42               	movwf	?_exp+1,c
  6556  00F05C  0E7F               	movlw	127
  6557  00F05E  6E43               	movwf	?_exp+2,c
  6558                           
  6559                           ; BSR set to: 0
  6560  00F060  0012               	return	
  6561  00F062                     l1330:
  6562                           
  6563                           ; BSR set to: 0
  6564  00F062  C041  F001         	movff	exp@x,___ftge@ff1
  6565  00F066  C042  F002         	movff	exp@x+1,___ftge@ff1+1
  6566  00F06A  C043  F003         	movff	exp@x+2,___ftge@ff1+2
  6567  00F06E  0E49               	movlw	73
  6568  00F070  6E04               	movwf	___ftge@ff2,c
  6569  00F072  0E3A               	movlw	58
  6570  00F074  6E05               	movwf	___ftge@ff2+1,c
  6571  00F076  0EC4               	movlw	196
  6572  00F078  6E06               	movwf	___ftge@ff2+2,c
  6573  00F07A  EC16  F06D         	call	___ftge	;wreg free
  6574  00F07E  B0D8               	btfsc	status,0,c
  6575  00F080  D00C               	goto	l1331
  6576  00F082  0E00               	movlw	0
  6577  00F084  0100               	movlb	0	; () banked
  6578  00F086  6F89               	movwf	(_errno+1)& (0+255),b
  6579  00F088  0E22               	movlw	34
  6580  00F08A  6F88               	movwf	_errno& (0+255),b
  6581  00F08C  0E00               	movlw	0
  6582  00F08E  6E41               	movwf	?_exp,c
  6583  00F090  0E00               	movlw	0
  6584  00F092  6E42               	movwf	?_exp+1,c
  6585  00F094  0E00               	movlw	0
  6586  00F096  6E43               	movwf	?_exp+2,c
  6587                           
  6588                           ; BSR set to: 0
  6589  00F098  0012               	return	
  6590  00F09A                     l1331:
  6591                           
  6592                           ; BSR set to: 0
  6593  00F09A  AE43               	btfss	exp@x+2,7,c
  6594  00F09C  D002               	goto	u4910
  6595  00F09E  0E01               	movlw	1
  6596  00F0A0  D001               	goto	u4920
  6597  00F0A2                     u4910:
  6598  00F0A2  0E00               	movlw	0
  6599  00F0A4                     u4920:
  6600  00F0A4  6E49               	movwf	exp@sign,c
  6601  00F0A6  5049               	movf	exp@sign,w,c
  6602  00F0A8  B4D8               	btfsc	status,2,c
  6603  00F0AA  D00E               	goto	l1332
  6604  00F0AC  C041  F001         	movff	exp@x,___ftneg@f1
  6605  00F0B0  C042  F002         	movff	exp@x+1,___ftneg@f1+1
  6606  00F0B4  C043  F003         	movff	exp@x+2,___ftneg@f1+2
  6607  00F0B8  ECC4  F067         	call	___ftneg	;wreg free
  6608  00F0BC  C001  F041         	movff	?___ftneg,exp@x
  6609  00F0C0  C002  F042         	movff	?___ftneg+1,exp@x+1
  6610  00F0C4  C003  F043         	movff	?___ftneg+2,exp@x+2
  6611  00F0C8                     l1332:
  6612  00F0C8  C041  F00D         	movff	exp@x,___ftmul@f1
  6613  00F0CC  C042  F00E         	movff	exp@x+1,___ftmul@f1+1
  6614  00F0D0  C043  F00F         	movff	exp@x+2,___ftmul@f1+2
  6615  00F0D4  0EAA               	movlw	170
  6616  00F0D6  6E10               	movwf	___ftmul@f2,c
  6617  00F0D8  0EB8               	movlw	184
  6618  00F0DA  6E11               	movwf	___ftmul@f2+1,c
  6619  00F0DC  0E3F               	movlw	63
  6620  00F0DE  6E12               	movwf	___ftmul@f2+2,c
  6621  00F0E0  EC6B  F072         	call	___ftmul	;wreg free
  6622  00F0E4  C00D  F041         	movff	?___ftmul,exp@x
  6623  00F0E8  C00E  F042         	movff	?___ftmul+1,exp@x+1
  6624  00F0EC  C00F  F043         	movff	?___ftmul+2,exp@x+2
  6625  00F0F0  C041  F02E         	movff	exp@x,floor@x
  6626  00F0F4  C042  F02F         	movff	exp@x+1,floor@x+1
  6627  00F0F8  C043  F030         	movff	exp@x+2,floor@x+2
  6628  00F0FC  EC89  F071         	call	_floor	;wreg free
  6629  00F100  C02E  F044         	movff	?_floor,_exp$2497
  6630  00F104  C02F  F045         	movff	?_floor+1,_exp$2497+1
  6631  00F108  C030  F046         	movff	?_floor+2,_exp$2497+2
  6632  00F10C  C044  F00D         	movff	_exp$2497,___fttol@f1
  6633  00F110  C045  F00E         	movff	_exp$2497+1,___fttol@f1+1
  6634  00F114  C046  F00F         	movff	_exp$2497+2,___fttol@f1+2
  6635  00F118  ECE5  F072         	call	___fttol	;wreg free
  6636  00F11C  C00D  F047         	movff	?___fttol,exp@exponent
  6637  00F120  C00E  F048         	movff	?___fttol+1,exp@exponent+1
  6638  00F124  C041  F02E         	movff	exp@x,___ftsub@f1
  6639  00F128  C042  F02F         	movff	exp@x+1,___ftsub@f1+1
  6640  00F12C  C043  F030         	movff	exp@x+2,___ftsub@f1+2
  6641  00F130  C047  F009         	movff	exp@exponent,___awtoft@c
  6642  00F134  C048  F00A         	movff	exp@exponent+1,___awtoft@c+1
  6643  00F138  EC2D  F068         	call	___awtoft	;wreg free
  6644  00F13C  C009  F031         	movff	?___awtoft,___ftsub@f2
  6645  00F140  C00A  F032         	movff	?___awtoft+1,___ftsub@f2+1
  6646  00F144  C00B  F033         	movff	?___awtoft+2,___ftsub@f2+2
  6647  00F148  EC49  F068         	call	___ftsub	;wreg free
  6648  00F14C  C02E  F041         	movff	?___ftsub,exp@x
  6649  00F150  C02F  F042         	movff	?___ftsub+1,exp@x+1
  6650  00F154  C030  F043         	movff	?___ftsub+2,exp@x+2
  6651  00F158  C041  F02E         	movff	exp@x,eval_poly@x
  6652  00F15C  C042  F02F         	movff	exp@x+1,eval_poly@x+1
  6653  00F160  C043  F030         	movff	exp@x+2,eval_poly@x+2
  6654  00F164  0E91               	movlw	low exp@coeff
  6655  00F166  6E31               	movwf	eval_poly@d,c
  6656  00F168  0EFE               	movlw	high exp@coeff
  6657  00F16A  6E32               	movwf	eval_poly@d+1,c
  6658  00F16C  0E00               	movlw	0
  6659  00F16E  6E34               	movwf	eval_poly@n+1,c
  6660  00F170  0E09               	movlw	9
  6661  00F172  6E33               	movwf	eval_poly@n,c
  6662  00F174  EC48  F070         	call	_eval_poly	;wreg free
  6663  00F178  C02E  F03A         	movff	?_eval_poly,ldexp@value
  6664  00F17C  C02F  F03B         	movff	?_eval_poly+1,ldexp@value+1
  6665  00F180  C030  F03C         	movff	?_eval_poly+2,ldexp@value+2
  6666  00F184  C047  F03D         	movff	exp@exponent,ldexp@newexp
  6667  00F188  C048  F03E         	movff	exp@exponent+1,ldexp@newexp+1
  6668  00F18C  ECE5  F06F         	call	_ldexp	;wreg free
  6669  00F190  C03A  F041         	movff	?_ldexp,exp@x
  6670  00F194  C03B  F042         	movff	?_ldexp+1,exp@x+1
  6671  00F198  C03C  F043         	movff	?_ldexp+2,exp@x+2
  6672  00F19C  5049               	movf	exp@sign,w,c
  6673  00F19E  B4D8               	btfsc	status,2,c
  6674  00F1A0  D025               	goto	l1333
  6675  00F1A2  2841               	incf	exp@x,w,c
  6676  00F1A4  E10E               	bnz	l4457
  6677  00F1A6  0E7F               	movlw	127
  6678  00F1A8  1842               	xorwf	exp@x+1,w,c
  6679  00F1AA  E10B               	bnz	l4457
  6680  00F1AC  0E7F               	movlw	127
  6681  00F1AE  1843               	xorwf	exp@x+2,w,c
  6682  00F1B0  A4D8               	btfss	status,2,c
  6683  00F1B2  D007               	goto	l1334
  6684  00F1B4  0E00               	movlw	0
  6685  00F1B6  6E41               	movwf	?_exp,c
  6686  00F1B8  0E00               	movlw	0
  6687  00F1BA  6E42               	movwf	?_exp+1,c
  6688  00F1BC  0E00               	movlw	0
  6689  00F1BE  6E43               	movwf	?_exp+2,c
  6690  00F1C0  0012               	return	
  6691  00F1C2                     l1334:
  6692  00F1C2                     l4457:
  6693  00F1C2  0E00               	movlw	0
  6694  00F1C4  6E09               	movwf	___ftdiv@f1,c
  6695  00F1C6  0E80               	movlw	128
  6696  00F1C8  6E0A               	movwf	___ftdiv@f1+1,c
  6697  00F1CA  0E3F               	movlw	63
  6698  00F1CC  6E0B               	movwf	___ftdiv@f1+2,c
  6699  00F1CE  C041  F00C         	movff	exp@x,___ftdiv@f2
  6700  00F1D2  C042  F00D         	movff	exp@x+1,___ftdiv@f2+1
  6701  00F1D6  C043  F00E         	movff	exp@x+2,___ftdiv@f2+2
  6702  00F1DA  ECF8  F071         	call	___ftdiv	;wreg free
  6703  00F1DE  C009  F041         	movff	?___ftdiv,?_exp
  6704  00F1E2  C00A  F042         	movff	?___ftdiv+1,?_exp+1
  6705  00F1E6  C00B  F043         	movff	?___ftdiv+2,?_exp+2
  6706  00F1EA  0012               	return	
  6707  00F1EC                     l1333:
  6708  00F1EC  C041  F041         	movff	exp@x,?_exp
  6709  00F1F0  C042  F042         	movff	exp@x+1,?_exp+1
  6710  00F1F4  C043  F043         	movff	exp@x+2,?_exp+2
  6711  00F1F8  0012               	return		;funcret
  6712  00F1FA                     __end_of_exp:
  6713                           	opt stack 0
  6714                           tblptru	equ	0xFF8
  6715                           tblptrh	equ	0xFF7
  6716                           tblptrl	equ	0xFF6
  6717                           tablat	equ	0xFF5
  6718                           prodh	equ	0xFF4
  6719                           prodl	equ	0xFF3
  6720                           intcon	equ	0xFF2
  6721                           postinc0	equ	0xFEE
  6722                           wreg	equ	0xFE8
  6723                           postinc1	equ	0xFE6
  6724                           postdec1	equ	0xFE5
  6725                           fsr1h	equ	0xFE2
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           fsr2h	equ	0xFDA
  6731                           fsr2l	equ	0xFD9
  6732                           status	equ	0xFD8
  6733                           
  6734 ;; *************** function _ldexp *****************
  6735 ;; Defined at:
  6736 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;  value           3   57[COMRAM] unsigned char 
  6739 ;;  newexp          2   60[COMRAM] int 
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  3   57[COMRAM] int 
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, status,0
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6751 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6753 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6754 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6755 ;;Total ram usage:        7 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_exp
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text29
  6765  00DFCA                     __ptext29:
  6766                           	opt stack 0
  6767  00DFCA                     _ldexp:
  6768                           	opt stack 21
  6769                           
  6770                           ;incstack = 0
  6771  00DFCA  503A               	movf	ldexp@value,w,c
  6772  00DFCC  103B               	iorwf	ldexp@value+1,w,c
  6773  00DFCE  103C               	iorwf	ldexp@value+2,w,c
  6774  00DFD0  A4D8               	btfss	status,2,c
  6775  00DFD2  D007               	goto	l1352
  6776  00DFD4  0E00               	movlw	0
  6777  00DFD6  6E3A               	movwf	?_ldexp,c
  6778  00DFD8  0E00               	movlw	0
  6779  00DFDA  6E3B               	movwf	?_ldexp+1,c
  6780  00DFDC  0E00               	movlw	0
  6781  00DFDE  6E3C               	movwf	?_ldexp+2,c
  6782  00DFE0  0012               	return	
  6783  00DFE2                     l1352:
  6784  00DFE2  503C               	movf	ldexp@value+2,w,c
  6785  00DFE4  0B7F               	andlw	127
  6786  00DFE6  6E3F               	movwf	??_ldexp& (0+255),c
  6787  00DFE8  6A40               	clrf	(??_ldexp+1)& (0+255),c
  6788  00DFEA  90D8               	bcf	status,0,c
  6789  00DFEC  363F               	rlcf	??_ldexp,f,c
  6790  00DFEE  3640               	rlcf	??_ldexp+1,f,c
  6791  00DFF0  503F               	movf	??_ldexp,w,c
  6792  00DFF2  263D               	addwf	ldexp@newexp,f,c
  6793  00DFF4  5040               	movf	??_ldexp+1,w,c
  6794  00DFF6  223E               	addwfc	ldexp@newexp+1,f,c
  6795  00DFF8  AE3B               	btfss	ldexp@value+1,7,c
  6796  00DFFA  D003               	goto	u4210
  6797  00DFFC  6A3F               	clrf	??_ldexp& (0+255),c
  6798  00DFFE  2A3F               	incf	??_ldexp& (0+255),f,c
  6799  00E000  D001               	goto	u4218
  6800  00E002                     u4210:
  6801  00E002  6A3F               	clrf	??_ldexp& (0+255),c
  6802  00E004                     u4218:
  6803  00E004  503F               	movf	??_ldexp,w,c
  6804  00E006  263D               	addwf	ldexp@newexp,f,c
  6805  00E008  0E00               	movlw	0
  6806  00E00A  223E               	addwfc	ldexp@newexp+1,f,c
  6807  00E00C  AE3E               	btfss	ldexp@newexp+1,7,c
  6808  00E00E  D00C               	goto	l1354
  6809  00E010  0E00               	movlw	0
  6810  00E012  0100               	movlb	0	; () banked
  6811  00E014  6F89               	movwf	(_errno+1)& (0+255),b
  6812  00E016  0E22               	movlw	34
  6813  00E018  6F88               	movwf	_errno& (0+255),b
  6814  00E01A  0E00               	movlw	0
  6815  00E01C  6E3A               	movwf	?_ldexp,c
  6816  00E01E  0E00               	movlw	0
  6817  00E020  6E3B               	movwf	?_ldexp+1,c
  6818  00E022  0E00               	movlw	0
  6819  00E024                     L1:
  6820  00E024  6E3C               	movwf	?_ldexp+2,c
  6821                           
  6822                           ; BSR set to: 0
  6823  00E026  0012               	return	
  6824  00E028                     l1354:
  6825                           
  6826                           ; BSR set to: 0
  6827  00E028  BE3E               	btfsc	ldexp@newexp+1,7,c
  6828  00E02A  D016               	goto	l1356
  6829  00E02C  043E               	decf	ldexp@newexp+1,w,c
  6830  00E02E  A0D8               	btfss	status,0,c
  6831  00E030  D013               	goto	l1356
  6832  00E032  0E00               	movlw	0
  6833  00E034  0100               	movlb	0	; () banked
  6834  00E036  6F89               	movwf	(_errno+1)& (0+255),b
  6835  00E038  0E22               	movlw	34
  6836  00E03A  6F88               	movwf	_errno& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839  00E03C  AE3C               	btfss	ldexp@value+2,7,c
  6840  00E03E  D006               	goto	l1357
  6841                           
  6842                           ; BSR set to: 0
  6843  00E040  0EFF               	movlw	255
  6844  00E042  6E3A               	movwf	?_ldexp,c
  6845  00E044  0E7F               	movlw	127
  6846  00E046  6E3B               	movwf	?_ldexp+1,c
  6847  00E048  0EFF               	movlw	255
  6848  00E04A  D7EC               	goto	L1
  6849  00E04C                     l1357:
  6850                           
  6851                           ; BSR set to: 0
  6852                           
  6853                           ; BSR set to: 0
  6854  00E04C  0EFF               	movlw	255
  6855  00E04E  6E3A               	movwf	?_ldexp,c
  6856  00E050  0E7F               	movlw	127
  6857  00E052  6E3B               	movwf	?_ldexp+1,c
  6858  00E054  0E7F               	movlw	127
  6859  00E056  D7E6               	goto	L1
  6860  00E058                     l1356:
  6861                           
  6862                           ; BSR set to: 0
  6863  00E058  343E               	rlcf	ldexp@newexp+1,w,c
  6864  00E05A  303E               	rrcf	ldexp@newexp+1,w,c
  6865  00E05C  6E40               	movwf	(??_ldexp+1)& (0+255),c
  6866  00E05E  303D               	rrcf	ldexp@newexp,w,c
  6867  00E060  6E3F               	movwf	??_ldexp& (0+255),c
  6868  00E062  503C               	movf	ldexp@value+2,w,c
  6869  00E064  183F               	xorwf	??_ldexp,w,c
  6870  00E066  0B80               	andlw	-128
  6871  00E068  183F               	xorwf	??_ldexp,w,c
  6872  00E06A  6E3C               	movwf	ldexp@value+2,c
  6873  00E06C  C03D  F03F         	movff	ldexp@newexp,??_ldexp
  6874  00E070  0E01               	movlw	1
  6875  00E072  163F               	andwf	??_ldexp,f,c
  6876  00E074  323F               	rrcf	??_ldexp,f,c
  6877  00E076  323F               	rrcf	??_ldexp,f,c
  6878  00E078  503B               	movf	ldexp@value+1,w,c
  6879  00E07A  183F               	xorwf	??_ldexp,w,c
  6880  00E07C  0B7F               	andlw	-129
  6881  00E07E  183F               	xorwf	??_ldexp,w,c
  6882  00E080  6E3B               	movwf	ldexp@value+1,c
  6883  00E082  C03A  F03A         	movff	ldexp@value,?_ldexp
  6884  00E086  C03B  F03B         	movff	ldexp@value+1,?_ldexp+1
  6885  00E08A  C03C  F03C         	movff	ldexp@value+2,?_ldexp+2
  6886  00E08E  0012               	return	
  6887  00E090                     __end_of_ldexp:
  6888                           	opt stack 0
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           intcon	equ	0xFF2
  6896                           postinc0	equ	0xFEE
  6897                           wreg	equ	0xFE8
  6898                           postinc1	equ	0xFE6
  6899                           postdec1	equ	0xFE5
  6900                           fsr1h	equ	0xFE2
  6901                           fsr1l	equ	0xFE1
  6902                           indf2	equ	0xFDF
  6903                           postinc2	equ	0xFDE
  6904                           postdec2	equ	0xFDD
  6905                           fsr2h	equ	0xFDA
  6906                           fsr2l	equ	0xFD9
  6907                           status	equ	0xFD8
  6908                           
  6909 ;; *************** function _floor *****************
  6910 ;; Defined at:
  6911 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  x               3   45[COMRAM] int 
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;  i               3   48[COMRAM] int 
  6916 ;;  expon           2   51[COMRAM] int 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  3   45[COMRAM] int 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6926 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6927 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6929 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6930 ;;Total ram usage:        8 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    2
  6933 ;; This function calls:
  6934 ;;		___altoft
  6935 ;;		___ftadd
  6936 ;;		___ftge
  6937 ;;		___fttol
  6938 ;;		_frexp
  6939 ;; This function is called by:
  6940 ;;		_exp
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text30
  6945  00E312                     __ptext30:
  6946                           	opt stack 0
  6947  00E312                     _floor:
  6948                           	opt stack 19
  6949                           
  6950                           ;incstack = 0
  6951  00E312  C02E  F001         	movff	floor@x,frexp@value
  6952  00E316  C02F  F002         	movff	floor@x+1,frexp@value+1
  6953  00E31A  C030  F003         	movff	floor@x+2,frexp@value+2
  6954  00E31E  0E34               	movlw	low floor@expon
  6955  00E320  6E04               	movwf	frexp@eptr,c
  6956  00E322  0E00               	movlw	high floor@expon
  6957  00E324  6E05               	movwf	frexp@eptr+1,c
  6958  00E326  EC5E  F06D         	call	_frexp	;wreg free
  6959  00E32A  AE35               	btfss	floor@expon+1,7,c
  6960  00E32C  D010               	goto	l1339
  6961  00E32E  AE30               	btfss	floor@x+2,7,c
  6962  00E330  D007               	goto	l1340
  6963  00E332  0E00               	movlw	0
  6964  00E334  6E2E               	movwf	?_floor,c
  6965  00E336  0E80               	movlw	128
  6966  00E338  6E2F               	movwf	?_floor+1,c
  6967  00E33A  0EBF               	movlw	191
  6968  00E33C  6E30               	movwf	?_floor+2,c
  6969  00E33E  0012               	return	
  6970  00E340                     l1340:
  6971  00E340  0E00               	movlw	0
  6972  00E342  6E2E               	movwf	?_floor,c
  6973  00E344  0E00               	movlw	0
  6974  00E346  6E2F               	movwf	?_floor+1,c
  6975  00E348  0E00               	movlw	0
  6976  00E34A  6E30               	movwf	?_floor+2,c
  6977  00E34C  0012               	return	
  6978  00E34E                     l1339:
  6979  00E34E  5035               	movf	floor@expon+1,w,c
  6980  00E350  E104               	bnz	u4170
  6981  00E352  0E15               	movlw	21
  6982  00E354  5C34               	subwf	floor@expon,w,c
  6983  00E356  A0D8               	btfss	status,0,c
  6984  00E358  D007               	goto	l1342
  6985  00E35A                     u4170:
  6986  00E35A  C02E  F02E         	movff	floor@x,?_floor
  6987  00E35E  C02F  F02F         	movff	floor@x+1,?_floor+1
  6988  00E362  C030  F030         	movff	floor@x+2,?_floor+2
  6989  00E366  0012               	return	
  6990  00E368                     l1342:
  6991  00E368  C02E  F00D         	movff	floor@x,___fttol@f1
  6992  00E36C  C02F  F00E         	movff	floor@x+1,___fttol@f1+1
  6993  00E370  C030  F00F         	movff	floor@x+2,___fttol@f1+2
  6994  00E374  ECE5  F072         	call	___fttol	;wreg free
  6995  00E378  C00D  F01C         	movff	?___fttol,___altoft@c
  6996  00E37C  C00E  F01D         	movff	?___fttol+1,___altoft@c+1
  6997  00E380  C00F  F01E         	movff	?___fttol+2,___altoft@c+2
  6998  00E384  C010  F01F         	movff	?___fttol+3,___altoft@c+3
  6999  00E388  ECBF  F06A         	call	___altoft	;wreg free
  7000  00E38C  C01C  F031         	movff	?___altoft,floor@i
  7001  00E390  C01D  F032         	movff	?___altoft+1,floor@i+1
  7002  00E394  C01E  F033         	movff	?___altoft+2,floor@i+2
  7003  00E398  C02E  F001         	movff	floor@x,___ftge@ff1
  7004  00E39C  C02F  F002         	movff	floor@x+1,___ftge@ff1+1
  7005  00E3A0  C030  F003         	movff	floor@x+2,___ftge@ff1+2
  7006  00E3A4  C031  F004         	movff	floor@i,___ftge@ff2
  7007  00E3A8  C032  F005         	movff	floor@i+1,___ftge@ff2+1
  7008  00E3AC  C033  F006         	movff	floor@i+2,___ftge@ff2+2
  7009  00E3B0  EC16  F06D         	call	___ftge	;wreg free
  7010  00E3B4  B0D8               	btfsc	status,0,c
  7011  00E3B6  D015               	goto	l1343
  7012  00E3B8  C031  F022         	movff	floor@i,___ftadd@f1
  7013  00E3BC  C032  F023         	movff	floor@i+1,___ftadd@f1+1
  7014  00E3C0  C033  F024         	movff	floor@i+2,___ftadd@f1+2
  7015  00E3C4  0E00               	movlw	0
  7016  00E3C6  6E25               	movwf	___ftadd@f2,c
  7017  00E3C8  0E80               	movlw	128
  7018  00E3CA  6E26               	movwf	___ftadd@f2+1,c
  7019  00E3CC  0EBF               	movlw	191
  7020  00E3CE  6E27               	movwf	___ftadd@f2+2,c
  7021  00E3D0  EC33  F077         	call	___ftadd	;wreg free
  7022  00E3D4  C022  F02E         	movff	?___ftadd,?_floor
  7023  00E3D8  C023  F02F         	movff	?___ftadd+1,?_floor+1
  7024  00E3DC  C024  F030         	movff	?___ftadd+2,?_floor+2
  7025  00E3E0  0012               	return	
  7026  00E3E2                     l1343:
  7027  00E3E2  C031  F02E         	movff	floor@i,?_floor
  7028  00E3E6  C032  F02F         	movff	floor@i+1,?_floor+1
  7029  00E3EA  C033  F030         	movff	floor@i+2,?_floor+2
  7030  00E3EE  0012               	return		;funcret
  7031  00E3F0                     __end_of_floor:
  7032                           	opt stack 0
  7033                           tblptru	equ	0xFF8
  7034                           tblptrh	equ	0xFF7
  7035                           tblptrl	equ	0xFF6
  7036                           tablat	equ	0xFF5
  7037                           prodh	equ	0xFF4
  7038                           prodl	equ	0xFF3
  7039                           intcon	equ	0xFF2
  7040                           postinc0	equ	0xFEE
  7041                           wreg	equ	0xFE8
  7042                           postinc1	equ	0xFE6
  7043                           postdec1	equ	0xFE5
  7044                           fsr1h	equ	0xFE2
  7045                           fsr1l	equ	0xFE1
  7046                           indf2	equ	0xFDF
  7047                           postinc2	equ	0xFDE
  7048                           postdec2	equ	0xFDD
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function _frexp *****************
  7054 ;; Defined at:
  7055 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  value           3    0[COMRAM] int 
  7058 ;;  eptr            2    3[COMRAM] PTR int 
  7059 ;;		 -> log@exponent(2), floor@expon(2), 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  3    0[COMRAM] PTR int 
  7064 ;; Registers used:
  7065 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7071 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7073 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7074 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7075 ;;Total ram usage:        7 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_floor
  7081 ;;		_log
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text31
  7086  00DABC                     __ptext31:
  7087                           	opt stack 0
  7088  00DABC                     _frexp:
  7089                           	opt stack 21
  7090                           
  7091                           ;incstack = 0
  7092  00DABC  5001               	movf	frexp@value,w,c
  7093  00DABE  1002               	iorwf	frexp@value+1,w,c
  7094  00DAC0  1003               	iorwf	frexp@value+2,w,c
  7095  00DAC2  A4D8               	btfss	status,2,c
  7096  00DAC4  D00F               	goto	l1348
  7097  00DAC6  C004  FFD9         	movff	frexp@eptr,fsr2l
  7098  00DACA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7099  00DACE  0E00               	movlw	0
  7100  00DAD0  6EDE               	movwf	postinc2,c
  7101  00DAD2  0E00               	movlw	0
  7102  00DAD4  6EDD               	movwf	postdec2,c
  7103  00DAD6  0E00               	movlw	0
  7104  00DAD8  6E01               	movwf	?_frexp,c
  7105  00DADA  0E00               	movlw	0
  7106  00DADC  6E02               	movwf	?_frexp+1,c
  7107  00DADE  0E00               	movlw	0
  7108  00DAE0  6E03               	movwf	?_frexp+2,c
  7109  00DAE2  0012               	return	
  7110  00DAE4                     l1348:
  7111  00DAE4  5003               	movf	frexp@value+2,w,c
  7112  00DAE6  0B7F               	andlw	127
  7113  00DAE8  6E06               	movwf	??_frexp& (0+255),c
  7114  00DAEA  6A07               	clrf	(??_frexp+1)& (0+255),c
  7115  00DAEC  90D8               	bcf	status,0,c
  7116  00DAEE  3606               	rlcf	??_frexp,f,c
  7117  00DAF0  3607               	rlcf	??_frexp+1,f,c
  7118  00DAF2  C004  FFD9         	movff	frexp@eptr,fsr2l
  7119  00DAF6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7120  00DAFA  C006  FFDE         	movff	??_frexp,postinc2
  7121  00DAFE  C007  FFDD         	movff	??_frexp+1,postdec2
  7122  00DB02  AE02               	btfss	frexp@value+1,7,c
  7123  00DB04  D003               	goto	u3980
  7124  00DB06  6A06               	clrf	??_frexp& (0+255),c
  7125  00DB08  2A06               	incf	??_frexp& (0+255),f,c
  7126  00DB0A  D001               	goto	u3988
  7127  00DB0C                     u3980:
  7128  00DB0C  6A06               	clrf	??_frexp& (0+255),c
  7129  00DB0E                     u3988:
  7130  00DB0E  5006               	movf	??_frexp,w,c
  7131  00DB10  C004  FFD9         	movff	frexp@eptr,fsr2l
  7132  00DB14  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7133  00DB18  12DE               	iorwf	postinc2,f,c
  7134  00DB1A  0E00               	movlw	0
  7135  00DB1C  12DD               	iorwf	postdec2,f,c
  7136  00DB1E  C004  FFD9         	movff	frexp@eptr,fsr2l
  7137  00DB22  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  7138  00DB26  0E82               	movlw	130
  7139  00DB28  26DE               	addwf	postinc2,f,c
  7140  00DB2A  0EFF               	movlw	255
  7141  00DB2C  22DD               	addwfc	postdec2,f,c
  7142  00DB2E  8003               	bsf	frexp@value+2,0,c
  7143  00DB30  8203               	bsf	frexp@value+2,1,c
  7144  00DB32  8403               	bsf	frexp@value+2,2,c
  7145  00DB34  8603               	bsf	frexp@value+2,3,c
  7146  00DB36  8803               	bsf	frexp@value+2,4,c
  7147  00DB38  8A03               	bsf	frexp@value+2,5,c
  7148  00DB3A  9C03               	bcf	frexp@value+2,6,c
  7149  00DB3C  9E02               	bcf	frexp@value+1,7,c
  7150  00DB3E  C001  F001         	movff	frexp@value,?_frexp
  7151  00DB42  C002  F002         	movff	frexp@value+1,?_frexp+1
  7152  00DB46  C003  F003         	movff	frexp@value+2,?_frexp+2
  7153  00DB4A  0012               	return	
  7154  00DB4C                     __end_of_frexp:
  7155                           	opt stack 0
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           prodh	equ	0xFF4
  7161                           prodl	equ	0xFF3
  7162                           intcon	equ	0xFF2
  7163                           postinc0	equ	0xFEE
  7164                           wreg	equ	0xFE8
  7165                           postinc1	equ	0xFE6
  7166                           postdec1	equ	0xFE5
  7167                           fsr1h	equ	0xFE2
  7168                           fsr1l	equ	0xFE1
  7169                           indf2	equ	0xFDF
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176 ;; *************** function ___fttol *****************
  7177 ;; Defined at:
  7178 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  f1              3   12[COMRAM] float 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;  lval            4   22[COMRAM] unsigned long 
  7183 ;;  exp1            1   26[COMRAM] unsigned char 
  7184 ;;  sign1           1   21[COMRAM] unsigned char 
  7185 ;; Return value:  Size  Location     Type
  7186 ;;                  4   12[COMRAM] long 
  7187 ;; Registers used:
  7188 ;;		wreg, status,2, status,0
  7189 ;; Tracked objects:
  7190 ;;		On entry : 0/0
  7191 ;;		On exit  : 0/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7195 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7196 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7197 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7198 ;;Total ram usage:       15 bytes
  7199 ;; Hardware stack levels used:    1
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_covertir_valores_de_array_a_escala_decimal
  7204 ;;		_pow
  7205 ;;		_exp
  7206 ;;		_floor
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text32
  7211  00E5CA                     __ptext32:
  7212                           	opt stack 0
  7213  00E5CA                     ___fttol:
  7214                           	opt stack 20
  7215                           
  7216                           ;incstack = 0
  7217  00E5CA  C00F  F011         	movff	___fttol@f1+2,??___fttol
  7218  00E5CE  6A12               	clrf	(??___fttol+1)& (0+255),c
  7219  00E5D0  6A13               	clrf	(??___fttol+2)& (0+255),c
  7220  00E5D2  340E               	rlcf	___fttol@f1+1,w,c
  7221  00E5D4  3611               	rlcf	??___fttol& (0+255),f,c
  7222  00E5D6  E301               	bnc	u3891
  7223  00E5D8  8012               	bsf	(??___fttol+1)& (0+255),0,c
  7224  00E5DA                     u3891:
  7225  00E5DA  5011               	movf	??___fttol,w,c
  7226  00E5DC  6E1B               	movwf	___fttol@exp1,c
  7227  00E5DE  501B               	movf	___fttol@exp1,w,c
  7228  00E5E0  A4D8               	btfss	status,2,c
  7229  00E5E2  D009               	goto	l1044
  7230  00E5E4  0E00               	movlw	0
  7231  00E5E6  6E0D               	movwf	?___fttol,c
  7232  00E5E8  0E00               	movlw	0
  7233  00E5EA  6E0E               	movwf	?___fttol+1,c
  7234  00E5EC  0E00               	movlw	0
  7235  00E5EE  6E0F               	movwf	?___fttol+2,c
  7236  00E5F0  0E00               	movlw	0
  7237  00E5F2  6E10               	movwf	?___fttol+3,c
  7238  00E5F4  0012               	return	
  7239  00E5F6                     l1044:
  7240  00E5F6  0E17               	movlw	23
  7241  00E5F8  6E11               	movwf	??___fttol& (0+255),c
  7242  00E5FA  C00D  F012         	movff	___fttol@f1,??___fttol+1
  7243  00E5FE  C00E  F013         	movff	___fttol@f1+1,??___fttol+2
  7244  00E602  C00F  F014         	movff	___fttol@f1+2,??___fttol+3
  7245  00E606  2811               	incf	??___fttol,w,c
  7246  00E608  6E15               	movwf	(??___fttol+4)& (0+255),c
  7247  00E60A  D004               	goto	u3910
  7248  00E60C                     u3915:
  7249  00E60C  90D8               	bcf	status,0,c
  7250  00E60E  3214               	rrcf	??___fttol+3,f,c
  7251  00E610  3213               	rrcf	??___fttol+2,f,c
  7252  00E612  3212               	rrcf	??___fttol+1,f,c
  7253  00E614                     u3910:
  7254  00E614  2E15               	decfsz	(??___fttol+4)& (0+255),f,c
  7255  00E616  D7FA               	goto	u3915
  7256  00E618  5012               	movf	??___fttol+1,w,c
  7257  00E61A  6E16               	movwf	___fttol@sign1,c
  7258  00E61C  8E0E               	bsf	___fttol@f1+1,7,c
  7259  00E61E  0EFF               	movlw	255
  7260  00E620  160D               	andwf	___fttol@f1,f,c
  7261  00E622  0EFF               	movlw	255
  7262  00E624  160E               	andwf	___fttol@f1+1,f,c
  7263  00E626  0E00               	movlw	0
  7264  00E628  160F               	andwf	___fttol@f1+2,f,c
  7265  00E62A  500D               	movf	___fttol@f1,w,c
  7266  00E62C  6E17               	movwf	___fttol@lval,c
  7267  00E62E  500E               	movf	___fttol@f1+1,w,c
  7268  00E630  6E18               	movwf	___fttol@lval+1,c
  7269  00E632  500F               	movf	___fttol@f1+2,w,c
  7270  00E634  6E19               	movwf	___fttol@lval+2,c
  7271  00E636  6A1A               	clrf	___fttol@lval+3,c
  7272  00E638  0E8E               	movlw	142
  7273  00E63A  5E1B               	subwf	___fttol@exp1,f,c
  7274  00E63C  AE1B               	btfss	___fttol@exp1,7,c
  7275  00E63E  D016               	goto	l1046
  7276  00E640  501B               	movf	___fttol@exp1,w,c
  7277  00E642  0A80               	xorlw	128
  7278  00E644  0F8F               	addlw	143
  7279  00E646  B0D8               	btfsc	status,0,c
  7280  00E648  D009               	goto	l1047
  7281  00E64A  0E00               	movlw	0
  7282  00E64C  6E0D               	movwf	?___fttol,c
  7283  00E64E  0E00               	movlw	0
  7284  00E650  6E0E               	movwf	?___fttol+1,c
  7285  00E652  0E00               	movlw	0
  7286  00E654  6E0F               	movwf	?___fttol+2,c
  7287  00E656  0E00               	movlw	0
  7288  00E658  6E10               	movwf	?___fttol+3,c
  7289  00E65A  0012               	return	
  7290  00E65C                     l1047:
  7291  00E65C  90D8               	bcf	status,0,c
  7292  00E65E  321A               	rrcf	___fttol@lval+3,f,c
  7293  00E660  3219               	rrcf	___fttol@lval+2,f,c
  7294  00E662  3218               	rrcf	___fttol@lval+1,f,c
  7295  00E664  3217               	rrcf	___fttol@lval,f,c
  7296  00E666  3E1B               	incfsz	___fttol@exp1,f,c
  7297  00E668  D7F9               	goto	l1047
  7298  00E66A  D015               	goto	u3950
  7299  00E66C                     l1046:
  7300  00E66C  0E17               	movlw	23
  7301  00E66E  641B               	cpfsgt	___fttol@exp1,c
  7302  00E670  D00F               	goto	l1052
  7303  00E672  0E00               	movlw	0
  7304  00E674  6E0D               	movwf	?___fttol,c
  7305  00E676  0E00               	movlw	0
  7306  00E678  6E0E               	movwf	?___fttol+1,c
  7307  00E67A  0E00               	movlw	0
  7308  00E67C  6E0F               	movwf	?___fttol+2,c
  7309  00E67E  0E00               	movlw	0
  7310  00E680  6E10               	movwf	?___fttol+3,c
  7311  00E682  0012               	return	
  7312  00E684  90D8               	bcf	status,0,c
  7313  00E686  3617               	rlcf	___fttol@lval,f,c
  7314  00E688  3618               	rlcf	___fttol@lval+1,f,c
  7315  00E68A  3619               	rlcf	___fttol@lval+2,f,c
  7316  00E68C  361A               	rlcf	___fttol@lval+3,f,c
  7317  00E68E  061B               	decf	___fttol@exp1,f,c
  7318  00E690                     l1052:
  7319  00E690  501B               	movf	___fttol@exp1,w,c
  7320  00E692  A4D8               	btfss	status,2,c
  7321  00E694  D7F7               	goto	l1053
  7322  00E696                     u3950:
  7323  00E696  5016               	movf	___fttol@sign1,w,c
  7324  00E698  B4D8               	btfsc	status,2,c
  7325  00E69A  D008               	goto	l1055
  7326  00E69C  1E1A               	comf	___fttol@lval+3,f,c
  7327  00E69E  1E19               	comf	___fttol@lval+2,f,c
  7328  00E6A0  1E18               	comf	___fttol@lval+1,f,c
  7329  00E6A2  6C17               	negf	___fttol@lval,c
  7330  00E6A4  0E00               	movlw	0
  7331  00E6A6  2218               	addwfc	___fttol@lval+1,f,c
  7332  00E6A8  2219               	addwfc	___fttol@lval+2,f,c
  7333  00E6AA  221A               	addwfc	___fttol@lval+3,f,c
  7334  00E6AC                     l1055:
  7335  00E6AC  C017  F00D         	movff	___fttol@lval,?___fttol
  7336  00E6B0  C018  F00E         	movff	___fttol@lval+1,?___fttol+1
  7337  00E6B4  C019  F00F         	movff	___fttol@lval+2,?___fttol+2
  7338  00E6B8  C01A  F010         	movff	___fttol@lval+3,?___fttol+3
  7339  00E6BC  0012               	return	
  7340  00E6BE                     __end_of___fttol:
  7341                           	opt stack 0
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           intcon	equ	0xFF2
  7349                           postinc0	equ	0xFEE
  7350                           wreg	equ	0xFE8
  7351                           postinc1	equ	0xFE6
  7352                           postdec1	equ	0xFE5
  7353                           fsr1h	equ	0xFE2
  7354                           fsr1l	equ	0xFE1
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function ___ftge *****************
  7363 ;; Defined at:
  7364 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  ff1             3    0[COMRAM] float 
  7367 ;;  ff2             3    3[COMRAM] float 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;		None
  7370 ;; Return value:  Size  Location     Type
  7371 ;;		None               void
  7372 ;; Registers used:
  7373 ;;		wreg, status,2, status,0
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7379 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7381 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7382 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7383 ;;Total ram usage:        9 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; This function calls:
  7386 ;;		Nothing
  7387 ;; This function is called by:
  7388 ;;		_pow
  7389 ;;		_exp
  7390 ;;		_floor
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           	psect	text33
  7395  00DA2C                     __ptext33:
  7396                           	opt stack 0
  7397  00DA2C                     ___ftge:
  7398                           	opt stack 20
  7399                           
  7400                           ;incstack = 0
  7401  00DA2C  AE03               	btfss	___ftge@ff1+2,7,c
  7402  00DA2E  D016               	goto	l1016
  7403  00DA30  C001  F007         	movff	___ftge@ff1,??___ftge
  7404  00DA34  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7405  00DA38  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7406  00DA3C  1E07               	comf	??___ftge,f,c
  7407  00DA3E  1E08               	comf	??___ftge+1,f,c
  7408  00DA40  1E09               	comf	??___ftge+2,f,c
  7409  00DA42  2A07               	incf	??___ftge,f,c
  7410  00DA44  0E00               	movlw	0
  7411  00DA46  2208               	addwfc	??___ftge+1,f,c
  7412  00DA48  2209               	addwfc	??___ftge+2,f,c
  7413  00DA4A  0E00               	movlw	0
  7414  00DA4C  2407               	addwf	??___ftge,w,c
  7415  00DA4E  6E01               	movwf	___ftge@ff1,c
  7416  00DA50  0E00               	movlw	0
  7417  00DA52  2008               	addwfc	??___ftge+1,w,c
  7418  00DA54  6E02               	movwf	___ftge@ff1+1,c
  7419  00DA56  0E80               	movlw	128
  7420  00DA58  2009               	addwfc	??___ftge+2,w,c
  7421  00DA5A  6E03               	movwf	___ftge@ff1+2,c
  7422  00DA5C                     l1016:
  7423  00DA5C  AE06               	btfss	___ftge@ff2+2,7,c
  7424  00DA5E  D016               	goto	l1017
  7425  00DA60  C004  F007         	movff	___ftge@ff2,??___ftge
  7426  00DA64  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7427  00DA68  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7428  00DA6C  1E07               	comf	??___ftge,f,c
  7429  00DA6E  1E08               	comf	??___ftge+1,f,c
  7430  00DA70  1E09               	comf	??___ftge+2,f,c
  7431  00DA72  2A07               	incf	??___ftge,f,c
  7432  00DA74  0E00               	movlw	0
  7433  00DA76  2208               	addwfc	??___ftge+1,f,c
  7434  00DA78  2209               	addwfc	??___ftge+2,f,c
  7435  00DA7A  0E00               	movlw	0
  7436  00DA7C  2407               	addwf	??___ftge,w,c
  7437  00DA7E  6E04               	movwf	___ftge@ff2,c
  7438  00DA80  0E00               	movlw	0
  7439  00DA82  2008               	addwfc	??___ftge+1,w,c
  7440  00DA84  6E05               	movwf	___ftge@ff2+1,c
  7441  00DA86  0E80               	movlw	128
  7442  00DA88  2009               	addwfc	??___ftge+2,w,c
  7443  00DA8A  6E06               	movwf	___ftge@ff2+2,c
  7444  00DA8C                     l1017:
  7445  00DA8C  0E00               	movlw	0
  7446  00DA8E  1A01               	xorwf	___ftge@ff1,f,c
  7447  00DA90  0E00               	movlw	0
  7448  00DA92  1A02               	xorwf	___ftge@ff1+1,f,c
  7449  00DA94  0E80               	movlw	128
  7450  00DA96  1A03               	xorwf	___ftge@ff1+2,f,c
  7451  00DA98  0E00               	movlw	0
  7452  00DA9A  1A04               	xorwf	___ftge@ff2,f,c
  7453  00DA9C  0E00               	movlw	0
  7454  00DA9E  1A05               	xorwf	___ftge@ff2+1,f,c
  7455  00DAA0  0E80               	movlw	128
  7456  00DAA2  1A06               	xorwf	___ftge@ff2+2,f,c
  7457  00DAA4  5004               	movf	___ftge@ff2,w,c
  7458  00DAA6  5C01               	subwf	___ftge@ff1,w,c
  7459  00DAA8  5005               	movf	___ftge@ff2+1,w,c
  7460  00DAAA  5802               	subwfb	___ftge@ff1+1,w,c
  7461  00DAAC  5006               	movf	___ftge@ff2+2,w,c
  7462  00DAAE  5803               	subwfb	___ftge@ff1+2,w,c
  7463  00DAB0  B0D8               	btfsc	status,0,c
  7464  00DAB2  D002               	goto	l3527
  7465  00DAB4  90D8               	bcf	status,0,c
  7466  00DAB6  0012               	return	
  7467  00DAB8                     l3527:
  7468  00DAB8  80D8               	bsf	status,0,c
  7469  00DABA  0012               	return	
  7470  00DABC                     __end_of___ftge:
  7471                           	opt stack 0
  7472                           tblptru	equ	0xFF8
  7473                           tblptrh	equ	0xFF7
  7474                           tblptrl	equ	0xFF6
  7475                           tablat	equ	0xFF5
  7476                           prodh	equ	0xFF4
  7477                           prodl	equ	0xFF3
  7478                           intcon	equ	0xFF2
  7479                           postinc0	equ	0xFEE
  7480                           wreg	equ	0xFE8
  7481                           postinc1	equ	0xFE6
  7482                           postdec1	equ	0xFE5
  7483                           fsr1h	equ	0xFE2
  7484                           fsr1l	equ	0xFE1
  7485                           indf2	equ	0xFDF
  7486                           postinc2	equ	0xFDE
  7487                           postdec2	equ	0xFDD
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function ___altoft *****************
  7493 ;; Defined at:
  7494 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\altoft.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  c               4   27[COMRAM] long 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  sign            1   36[COMRAM] unsigned char 
  7499 ;;  exp             1   35[COMRAM] unsigned char 
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  3   27[COMRAM] float 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7511 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7512 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7513 ;;Total ram usage:       10 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    1
  7516 ;; This function calls:
  7517 ;;		___ftpack
  7518 ;; This function is called by:
  7519 ;;		_floor
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text34
  7524  00D57E                     __ptext34:
  7525                           	opt stack 0
  7526  00D57E                     ___altoft:
  7527                           	opt stack 19
  7528                           
  7529                           ;incstack = 0
  7530  00D57E  0E00               	movlw	0
  7531  00D580  6E25               	movwf	___altoft@sign,c
  7532  00D582  0E8E               	movlw	142
  7533  00D584  6E24               	movwf	___altoft@exp,c
  7534  00D586  AE1F               	btfss	___altoft@c+3,7,c
  7535  00D588  D011               	goto	l793
  7536  00D58A  1E1F               	comf	___altoft@c+3,f,c
  7537  00D58C  1E1E               	comf	___altoft@c+2,f,c
  7538  00D58E  1E1D               	comf	___altoft@c+1,f,c
  7539  00D590  6C1C               	negf	___altoft@c,c
  7540  00D592  0E00               	movlw	0
  7541  00D594  221D               	addwfc	___altoft@c+1,f,c
  7542  00D596  221E               	addwfc	___altoft@c+2,f,c
  7543  00D598  221F               	addwfc	___altoft@c+3,f,c
  7544  00D59A  0E01               	movlw	1
  7545  00D59C  6E25               	movwf	___altoft@sign,c
  7546  00D59E  D006               	goto	l793
  7547  00D5A0  90D8               	bcf	status,0,c
  7548  00D5A2  321F               	rrcf	___altoft@c+3,f,c
  7549  00D5A4  321E               	rrcf	___altoft@c+2,f,c
  7550  00D5A6  321D               	rrcf	___altoft@c+1,f,c
  7551  00D5A8  321C               	rrcf	___altoft@c,f,c
  7552  00D5AA  2A24               	incf	___altoft@exp,f,c
  7553  00D5AC                     l793:
  7554  00D5AC  0E00               	movlw	0
  7555  00D5AE  141C               	andwf	___altoft@c,w,c
  7556  00D5B0  6E20               	movwf	??___altoft& (0+255),c
  7557  00D5B2  0E00               	movlw	0
  7558  00D5B4  141D               	andwf	___altoft@c+1,w,c
  7559  00D5B6  6E21               	movwf	(??___altoft+1)& (0+255),c
  7560  00D5B8  0E00               	movlw	0
  7561  00D5BA  141E               	andwf	___altoft@c+2,w,c
  7562  00D5BC  6E22               	movwf	(??___altoft+2)& (0+255),c
  7563  00D5BE  0EFF               	movlw	255
  7564  00D5C0  141F               	andwf	___altoft@c+3,w,c
  7565  00D5C2  6E23               	movwf	(??___altoft+3)& (0+255),c
  7566  00D5C4  5020               	movf	??___altoft,w,c
  7567  00D5C6  1021               	iorwf	??___altoft+1,w,c
  7568  00D5C8  1022               	iorwf	??___altoft+2,w,c
  7569  00D5CA  1023               	iorwf	??___altoft+3,w,c
  7570  00D5CC  A4D8               	btfss	status,2,c
  7571  00D5CE  D7E8               	goto	l794
  7572  00D5D0  C01C  F001         	movff	___altoft@c,___ftpack@arg
  7573  00D5D4  C01D  F002         	movff	___altoft@c+1,___ftpack@arg+1
  7574  00D5D8  C01E  F003         	movff	___altoft@c+2,___ftpack@arg+2
  7575  00D5DC  C024  F004         	movff	___altoft@exp,___ftpack@exp
  7576  00D5E0  C025  F005         	movff	___altoft@sign,___ftpack@sign
  7577  00D5E4  EC37  F06F         	call	___ftpack	;wreg free
  7578  00D5E8  C001  F01C         	movff	?___ftpack,?___altoft
  7579  00D5EC  C002  F01D         	movff	?___ftpack+1,?___altoft+1
  7580  00D5F0  C003  F01E         	movff	?___ftpack+2,?___altoft+2
  7581  00D5F4  0012               	return	
  7582  00D5F6                     __end_of___altoft:
  7583                           	opt stack 0
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           postinc0	equ	0xFEE
  7592                           wreg	equ	0xFE8
  7593                           postinc1	equ	0xFE6
  7594                           postdec1	equ	0xFE5
  7595                           fsr1h	equ	0xFE2
  7596                           fsr1l	equ	0xFE1
  7597                           indf2	equ	0xFDF
  7598                           postinc2	equ	0xFDE
  7599                           postdec2	equ	0xFDD
  7600                           fsr2h	equ	0xFDA
  7601                           fsr2l	equ	0xFD9
  7602                           status	equ	0xFD8
  7603                           
  7604 ;; *************** function _eval_poly *****************
  7605 ;; Defined at:
  7606 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  x               3   45[COMRAM] float 
  7609 ;;  d               2   48[COMRAM] PTR const 
  7610 ;;		 -> log@coeff(27), exp@coeff(30), 
  7611 ;;  n               2   50[COMRAM] int 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  res             3   54[COMRAM] int 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  3   45[COMRAM] int 
  7616 ;; Registers used:
  7617 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7623 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7624 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7626 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7627 ;;Total ram usage:       12 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    2
  7630 ;; This function calls:
  7631 ;;		___ftadd
  7632 ;;		___ftmul
  7633 ;;		___wmul
  7634 ;; This function is called by:
  7635 ;;		_exp
  7636 ;;		_log
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text35
  7641  00E090                     __ptext35:
  7642                           	opt stack 0
  7643  00E090                     _eval_poly:
  7644                           	opt stack 19
  7645                           
  7646                           ;incstack = 0
  7647  00E090  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  7648  00E094  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  7649  00E098  0E00               	movlw	0
  7650  00E09A  6E1F               	movwf	___wmul@multiplicand+1,c
  7651  00E09C  0E03               	movlw	3
  7652  00E09E  6E1E               	movwf	___wmul@multiplicand,c
  7653  00E0A0  ECE8  F067         	call	___wmul	;wreg free
  7654  00E0A4  C031  F035         	movff	eval_poly@d,??_eval_poly
  7655  00E0A8  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  7656  00E0AC  501C               	movf	?___wmul,w,c
  7657  00E0AE  2635               	addwf	??_eval_poly,f,c
  7658  00E0B0  501D               	movf	?___wmul+1,w,c
  7659  00E0B2  2236               	addwfc	??_eval_poly+1,f,c
  7660  00E0B4  C035  FFF6         	movff	??_eval_poly,tblptrl
  7661  00E0B8  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  7662  00E0BC                     	if	0	;tblptru may be non-zero
  7663  00E0BC                     	endif
  7664  00E0BC                     	if	0	;tblptru may be non-zero
  7665  00E0BC                     	endif
  7666  00E0BC  0009               	tblrd		*+
  7667  00E0BE  CFF5 F037          	movff	tablat,eval_poly@res
  7668  00E0C2  0009               	tblrd		*+
  7669  00E0C4  CFF5 F038          	movff	tablat,eval_poly@res+1
  7670  00E0C8  000A               	tblrd		*-
  7671  00E0CA  CFF5 F039          	movff	tablat,eval_poly@res+2
  7672  00E0CE  D03E               	goto	l1378
  7673  00E0D0  C037  F010         	movff	eval_poly@res,___ftmul@f2
  7674  00E0D4  C038  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  7675  00E0D8  C039  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  7676  00E0DC  C02E  F00D         	movff	eval_poly@x,___ftmul@f1
  7677  00E0E0  C02F  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  7678  00E0E4  C030  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  7679  00E0E8  EC6B  F072         	call	___ftmul	;wreg free
  7680  00E0EC  C00D  F022         	movff	?___ftmul,___ftadd@f1
  7681  00E0F0  C00E  F023         	movff	?___ftmul+1,___ftadd@f1+1
  7682  00E0F4  C00F  F024         	movff	?___ftmul+2,___ftadd@f1+2
  7683  00E0F8  0E00               	movlw	0
  7684  00E0FA  6E1F               	movwf	___wmul@multiplicand+1,c
  7685  00E0FC  0E03               	movlw	3
  7686  00E0FE  6E1E               	movwf	___wmul@multiplicand,c
  7687  00E100  0633               	decf	eval_poly@n,f,c
  7688  00E102  A0D8               	btfss	status,0,c
  7689  00E104  0634               	decf	eval_poly@n+1,f,c
  7690  00E106  C033  F01C         	movff	eval_poly@n,___wmul@multiplier
  7691  00E10A  C034  F01D         	movff	eval_poly@n+1,___wmul@multiplier+1
  7692  00E10E  ECE8  F067         	call	___wmul	;wreg free
  7693  00E112  C031  F035         	movff	eval_poly@d,??_eval_poly
  7694  00E116  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  7695  00E11A  501C               	movf	?___wmul,w,c
  7696  00E11C  2635               	addwf	??_eval_poly,f,c
  7697  00E11E  501D               	movf	?___wmul+1,w,c
  7698  00E120  2236               	addwfc	??_eval_poly+1,f,c
  7699  00E122  C035  FFF6         	movff	??_eval_poly,tblptrl
  7700  00E126  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  7701  00E12A                     	if	0	;tblptru may be non-zero
  7702  00E12A                     	endif
  7703  00E12A                     	if	0	;tblptru may be non-zero
  7704  00E12A                     	endif
  7705  00E12A  0009               	tblrd		*+
  7706  00E12C  CFF5 F025          	movff	tablat,___ftadd@f2
  7707  00E130  0009               	tblrd		*+
  7708  00E132  CFF5 F026          	movff	tablat,___ftadd@f2+1
  7709  00E136  000A               	tblrd		*-
  7710  00E138  CFF5 F027          	movff	tablat,___ftadd@f2+2
  7711  00E13C  EC33  F077         	call	___ftadd	;wreg free
  7712  00E140  C022  F037         	movff	?___ftadd,eval_poly@res
  7713  00E144  C023  F038         	movff	?___ftadd+1,eval_poly@res+1
  7714  00E148  C024  F039         	movff	?___ftadd+2,eval_poly@res+2
  7715  00E14C                     l1378:
  7716  00E14C  5033               	movf	eval_poly@n,w,c
  7717  00E14E  1034               	iorwf	eval_poly@n+1,w,c
  7718  00E150  A4D8               	btfss	status,2,c
  7719  00E152  D7BE               	goto	l1379
  7720  00E154  C037  F02E         	movff	eval_poly@res,?_eval_poly
  7721  00E158  C038  F02F         	movff	eval_poly@res+1,?_eval_poly+1
  7722  00E15C  C039  F030         	movff	eval_poly@res+2,?_eval_poly+2
  7723  00E160  0012               	return		;funcret
  7724  00E162                     __end_of_eval_poly:
  7725                           	opt stack 0
  7726                           tblptru	equ	0xFF8
  7727                           tblptrh	equ	0xFF7
  7728                           tblptrl	equ	0xFF6
  7729                           tablat	equ	0xFF5
  7730                           prodh	equ	0xFF4
  7731                           prodl	equ	0xFF3
  7732                           intcon	equ	0xFF2
  7733                           postinc0	equ	0xFEE
  7734                           wreg	equ	0xFE8
  7735                           postinc1	equ	0xFE6
  7736                           postdec1	equ	0xFE5
  7737                           fsr1h	equ	0xFE2
  7738                           fsr1l	equ	0xFE1
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function ___ftmul *****************
  7747 ;; Defined at:
  7748 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  f1              3   12[COMRAM] float 
  7751 ;;  f2              3   15[COMRAM] float 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  7754 ;;  sign            1   26[COMRAM] unsigned char 
  7755 ;;  cntr            1   25[COMRAM] unsigned char 
  7756 ;;  exp             1   21[COMRAM] unsigned char 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  3   12[COMRAM] float 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7766 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7767 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7768 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7769 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7770 ;;Total ram usage:       15 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    1
  7773 ;; This function calls:
  7774 ;;		___ftpack
  7775 ;; This function is called by:
  7776 ;;		_pow
  7777 ;;		_exp
  7778 ;;		_log
  7779 ;;		_eval_poly
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           	psect	text36
  7784  00E4D6                     __ptext36:
  7785                           	opt stack 0
  7786  00E4D6                     ___ftmul:
  7787                           	opt stack 19
  7788                           
  7789                           ;incstack = 0
  7790  00E4D6  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  7791  00E4DA  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7792  00E4DC  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7793  00E4DE  340E               	rlcf	___ftmul@f1+1,w,c
  7794  00E4E0  3613               	rlcf	??___ftmul& (0+255),f,c
  7795  00E4E2  E301               	bnc	u3801
  7796  00E4E4  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7797  00E4E6                     u3801:
  7798  00E4E6  5013               	movf	??___ftmul,w,c
  7799  00E4E8  6E16               	movwf	___ftmul@exp,c
  7800  00E4EA  5016               	movf	___ftmul@exp,w,c
  7801  00E4EC  A4D8               	btfss	status,2,c
  7802  00E4EE  D007               	goto	l1023
  7803  00E4F0  0E00               	movlw	0
  7804  00E4F2  6E0D               	movwf	?___ftmul,c
  7805  00E4F4  0E00               	movlw	0
  7806  00E4F6  6E0E               	movwf	?___ftmul+1,c
  7807  00E4F8  0E00               	movlw	0
  7808  00E4FA  6E0F               	movwf	?___ftmul+2,c
  7809  00E4FC  0012               	return	
  7810  00E4FE                     l1023:
  7811  00E4FE  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  7812  00E502  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7813  00E504  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7814  00E506  3411               	rlcf	___ftmul@f2+1,w,c
  7815  00E508  3613               	rlcf	??___ftmul& (0+255),f,c
  7816  00E50A  E301               	bnc	u3821
  7817  00E50C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7818  00E50E                     u3821:
  7819  00E50E  5013               	movf	??___ftmul,w,c
  7820  00E510  6E1B               	movwf	___ftmul@sign,c
  7821  00E512  501B               	movf	___ftmul@sign,w,c
  7822  00E514  A4D8               	btfss	status,2,c
  7823  00E516  D007               	goto	l1025
  7824  00E518  0E00               	movlw	0
  7825  00E51A  6E0D               	movwf	?___ftmul,c
  7826  00E51C  0E00               	movlw	0
  7827  00E51E  6E0E               	movwf	?___ftmul+1,c
  7828  00E520  0E00               	movlw	0
  7829  00E522  6E0F               	movwf	?___ftmul+2,c
  7830  00E524  0012               	return	
  7831  00E526                     l1025:
  7832  00E526  501B               	movf	___ftmul@sign,w,c
  7833  00E528  0F7B               	addlw	123
  7834  00E52A  2616               	addwf	___ftmul@exp,f,c
  7835  00E52C  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  7836  00E530  5012               	movf	___ftmul@f2+2,w,c
  7837  00E532  1A1B               	xorwf	___ftmul@sign,f,c
  7838  00E534  0E80               	movlw	128
  7839  00E536  161B               	andwf	___ftmul@sign,f,c
  7840  00E538  8E0E               	bsf	___ftmul@f1+1,7,c
  7841  00E53A  8E11               	bsf	___ftmul@f2+1,7,c
  7842  00E53C  0EFF               	movlw	255
  7843  00E53E  1610               	andwf	___ftmul@f2,f,c
  7844  00E540  0EFF               	movlw	255
  7845  00E542  1611               	andwf	___ftmul@f2+1,f,c
  7846  00E544  0E00               	movlw	0
  7847  00E546  1612               	andwf	___ftmul@f2+2,f,c
  7848  00E548  0E00               	movlw	0
  7849  00E54A  6E17               	movwf	___ftmul@f3_as_product,c
  7850  00E54C  0E00               	movlw	0
  7851  00E54E  6E18               	movwf	___ftmul@f3_as_product+1,c
  7852  00E550  0E00               	movlw	0
  7853  00E552  6E19               	movwf	___ftmul@f3_as_product+2,c
  7854  00E554  0E07               	movlw	7
  7855  00E556  6E1A               	movwf	___ftmul@cntr,c
  7856  00E558  A00D               	btfss	___ftmul@f1,0,c
  7857  00E55A  D006               	goto	l1027
  7858  00E55C  5010               	movf	___ftmul@f2,w,c
  7859  00E55E  2617               	addwf	___ftmul@f3_as_product,f,c
  7860  00E560  5011               	movf	___ftmul@f2+1,w,c
  7861  00E562  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7862  00E564  5012               	movf	___ftmul@f2+2,w,c
  7863  00E566  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7864  00E568                     l1027:
  7865  00E568  90D8               	bcf	status,0,c
  7866  00E56A  320F               	rrcf	___ftmul@f1+2,f,c
  7867  00E56C  320E               	rrcf	___ftmul@f1+1,f,c
  7868  00E56E  320D               	rrcf	___ftmul@f1,f,c
  7869  00E570  90D8               	bcf	status,0,c
  7870  00E572  3610               	rlcf	___ftmul@f2,f,c
  7871  00E574  3611               	rlcf	___ftmul@f2+1,f,c
  7872  00E576  3612               	rlcf	___ftmul@f2+2,f,c
  7873  00E578  2E1A               	decfsz	___ftmul@cntr,f,c
  7874  00E57A  D7EE               	goto	l1026
  7875  00E57C  0E09               	movlw	9
  7876  00E57E  6E1A               	movwf	___ftmul@cntr,c
  7877  00E580  A00D               	btfss	___ftmul@f1,0,c
  7878  00E582  D006               	goto	l1030
  7879  00E584  5010               	movf	___ftmul@f2,w,c
  7880  00E586  2617               	addwf	___ftmul@f3_as_product,f,c
  7881  00E588  5011               	movf	___ftmul@f2+1,w,c
  7882  00E58A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7883  00E58C  5012               	movf	___ftmul@f2+2,w,c
  7884  00E58E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7885  00E590                     l1030:
  7886  00E590  90D8               	bcf	status,0,c
  7887  00E592  320F               	rrcf	___ftmul@f1+2,f,c
  7888  00E594  320E               	rrcf	___ftmul@f1+1,f,c
  7889  00E596  320D               	rrcf	___ftmul@f1,f,c
  7890  00E598  90D8               	bcf	status,0,c
  7891  00E59A  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  7892  00E59C  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  7893  00E59E  3217               	rrcf	___ftmul@f3_as_product,f,c
  7894  00E5A0  2E1A               	decfsz	___ftmul@cntr,f,c
  7895  00E5A2  D7EE               	goto	l1029
  7896  00E5A4  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7897  00E5A8  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7898  00E5AC  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7899  00E5B0  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  7900  00E5B4  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  7901  00E5B8  EC37  F06F         	call	___ftpack	;wreg free
  7902  00E5BC  C001  F00D         	movff	?___ftpack,?___ftmul
  7903  00E5C0  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  7904  00E5C4  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  7905  00E5C8  0012               	return	
  7906  00E5CA                     __end_of___ftmul:
  7907                           	opt stack 0
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           postinc0	equ	0xFEE
  7916                           wreg	equ	0xFE8
  7917                           postinc1	equ	0xFE6
  7918                           postdec1	equ	0xFE5
  7919                           fsr1h	equ	0xFE2
  7920                           fsr1l	equ	0xFE1
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           fsr2h	equ	0xFDA
  7925                           fsr2l	equ	0xFD9
  7926                           status	equ	0xFD8
  7927                           
  7928 ;; *************** function ___ftsub *****************
  7929 ;; Defined at:
  7930 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  f1              3   45[COMRAM] float 
  7933 ;;  f2              3   48[COMRAM] float 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  3   45[COMRAM] float 
  7938 ;; Registers used:
  7939 ;;		wreg, status,2, status,0, cstack
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7945 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7948 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7949 ;;Total ram usage:        6 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    2
  7952 ;; This function calls:
  7953 ;;		___ftadd
  7954 ;; This function is called by:
  7955 ;;		_exp
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text37
  7960  00D092                     __ptext37:
  7961                           	opt stack 0
  7962  00D092                     ___ftsub:
  7963                           	opt stack 19
  7964                           
  7965                           ;incstack = 0
  7966  00D092  5031               	movf	___ftsub@f2,w,c
  7967  00D094  1032               	iorwf	___ftsub@f2+1,w,c
  7968  00D096  1033               	iorwf	___ftsub@f2+2,w,c
  7969  00D098  B4D8               	btfsc	status,2,c
  7970  00D09A  D006               	goto	l1040
  7971  00D09C  0E00               	movlw	0
  7972  00D09E  1A31               	xorwf	___ftsub@f2,f,c
  7973  00D0A0  0E00               	movlw	0
  7974  00D0A2  1A32               	xorwf	___ftsub@f2+1,f,c
  7975  00D0A4  0E80               	movlw	128
  7976  00D0A6  1A33               	xorwf	___ftsub@f2+2,f,c
  7977  00D0A8                     l1040:
  7978  00D0A8  C02E  F022         	movff	___ftsub@f1,___ftadd@f1
  7979  00D0AC  C02F  F023         	movff	___ftsub@f1+1,___ftadd@f1+1
  7980  00D0B0  C030  F024         	movff	___ftsub@f1+2,___ftadd@f1+2
  7981  00D0B4  C031  F025         	movff	___ftsub@f2,___ftadd@f2
  7982  00D0B8  C032  F026         	movff	___ftsub@f2+1,___ftadd@f2+1
  7983  00D0BC  C033  F027         	movff	___ftsub@f2+2,___ftadd@f2+2
  7984  00D0C0  EC33  F077         	call	___ftadd	;wreg free
  7985  00D0C4  C022  F02E         	movff	?___ftadd,?___ftsub
  7986  00D0C8  C023  F02F         	movff	?___ftadd+1,?___ftsub+1
  7987  00D0CC  C024  F030         	movff	?___ftadd+2,?___ftsub+2
  7988  00D0D0  0012               	return	
  7989  00D0D2                     __end_of___ftsub:
  7990                           	opt stack 0
  7991                           tblptru	equ	0xFF8
  7992                           tblptrh	equ	0xFF7
  7993                           tblptrl	equ	0xFF6
  7994                           tablat	equ	0xFF5
  7995                           prodh	equ	0xFF4
  7996                           prodl	equ	0xFF3
  7997                           intcon	equ	0xFF2
  7998                           postinc0	equ	0xFEE
  7999                           wreg	equ	0xFE8
  8000                           postinc1	equ	0xFE6
  8001                           postdec1	equ	0xFE5
  8002                           fsr1h	equ	0xFE2
  8003                           fsr1l	equ	0xFE1
  8004                           indf2	equ	0xFDF
  8005                           postinc2	equ	0xFDE
  8006                           postdec2	equ	0xFDD
  8007                           fsr2h	equ	0xFDA
  8008                           fsr2l	equ	0xFD9
  8009                           status	equ	0xFD8
  8010                           
  8011 ;; *************** function ___ftadd *****************
  8012 ;; Defined at:
  8013 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;  f1              3   33[COMRAM] float 
  8016 ;;  f2              3   36[COMRAM] float 
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;  exp1            1   44[COMRAM] unsigned char 
  8019 ;;  exp2            1   43[COMRAM] unsigned char 
  8020 ;;  sign            1   42[COMRAM] unsigned char 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  3   33[COMRAM] float 
  8023 ;; Registers used:
  8024 ;;		wreg, status,2, status,0, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8030 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8031 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8032 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8033 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8034 ;;Total ram usage:       12 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    1
  8037 ;; This function calls:
  8038 ;;		___ftpack
  8039 ;; This function is called by:
  8040 ;;		___ftsub
  8041 ;;		_floor
  8042 ;;		_log
  8043 ;;		_eval_poly
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text38
  8048  00EE66                     __ptext38:
  8049                           	opt stack 0
  8050  00EE66                     ___ftadd:
  8051                           	opt stack 19
  8052                           
  8053                           ;incstack = 0
  8054  00EE66  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  8055  00EE6A  6A29               	clrf	(??___ftadd+1)& (0+255),c
  8056  00EE6C  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  8057  00EE6E  3423               	rlcf	___ftadd@f1+1,w,c
  8058  00EE70  3628               	rlcf	??___ftadd& (0+255),f,c
  8059  00EE72  E301               	bnc	u3591
  8060  00EE74  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  8061  00EE76                     u3591:
  8062  00EE76  5028               	movf	??___ftadd,w,c
  8063  00EE78  6E2D               	movwf	___ftadd@exp1,c
  8064  00EE7A  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  8065  00EE7E  6A29               	clrf	(??___ftadd+1)& (0+255),c
  8066  00EE80  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  8067  00EE82  3426               	rlcf	___ftadd@f2+1,w,c
  8068  00EE84  3628               	rlcf	??___ftadd& (0+255),f,c
  8069  00EE86  E301               	bnc	u3601
  8070  00EE88  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  8071  00EE8A                     u3601:
  8072  00EE8A  5028               	movf	??___ftadd,w,c
  8073  00EE8C  6E2C               	movwf	___ftadd@exp2,c
  8074  00EE8E  502D               	movf	___ftadd@exp1,w,c
  8075  00EE90  B4D8               	btfsc	status,2,c
  8076  00EE92  D00B               	goto	u3630
  8077  00EE94  502C               	movf	___ftadd@exp2,w,c
  8078  00EE96  5C2D               	subwf	___ftadd@exp1,w,c
  8079  00EE98  B0D8               	btfsc	status,0,c
  8080  00EE9A  D00E               	goto	l975
  8081  00EE9C  502D               	movf	___ftadd@exp1,w,c
  8082  00EE9E  0800               	sublw	0
  8083  00EEA0  242C               	addwf	___ftadd@exp2,w,c
  8084  00EEA2  6E28               	movwf	??___ftadd& (0+255),c
  8085  00EEA4  0E18               	movlw	24
  8086  00EEA6  6428               	cpfsgt	??___ftadd,c
  8087  00EEA8  D007               	goto	l975
  8088  00EEAA                     u3630:
  8089  00EEAA  C025  F022         	movff	___ftadd@f2,?___ftadd
  8090  00EEAE  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  8091  00EEB2  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  8092  00EEB6  0012               	return	
  8093  00EEB8                     l975:
  8094  00EEB8  502C               	movf	___ftadd@exp2,w,c
  8095  00EEBA  B4D8               	btfsc	status,2,c
  8096  00EEBC  D00B               	goto	u3660
  8097  00EEBE  502D               	movf	___ftadd@exp1,w,c
  8098  00EEC0  5C2C               	subwf	___ftadd@exp2,w,c
  8099  00EEC2  B0D8               	btfsc	status,0,c
  8100  00EEC4  D00E               	goto	l979
  8101  00EEC6  502C               	movf	___ftadd@exp2,w,c
  8102  00EEC8  0800               	sublw	0
  8103  00EECA  242D               	addwf	___ftadd@exp1,w,c
  8104  00EECC  6E28               	movwf	??___ftadd& (0+255),c
  8105  00EECE  0E18               	movlw	24
  8106  00EED0  6428               	cpfsgt	??___ftadd,c
  8107  00EED2  D007               	goto	l979
  8108  00EED4                     u3660:
  8109  00EED4  C022  F022         	movff	___ftadd@f1,?___ftadd
  8110  00EED8  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  8111  00EEDC  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  8112  00EEE0  0012               	return	
  8113  00EEE2                     l979:
  8114  00EEE2  0E06               	movlw	6
  8115  00EEE4  6E2B               	movwf	___ftadd@sign,c
  8116  00EEE6  BE24               	btfsc	___ftadd@f1+2,7,c
  8117  00EEE8  8E2B               	bsf	___ftadd@sign,7,c
  8118  00EEEA  BE27               	btfsc	___ftadd@f2+2,7,c
  8119  00EEEC  8C2B               	bsf	___ftadd@sign,6,c
  8120  00EEEE  8E23               	bsf	___ftadd@f1+1,7,c
  8121  00EEF0  0EFF               	movlw	255
  8122  00EEF2  1622               	andwf	___ftadd@f1,f,c
  8123  00EEF4  0EFF               	movlw	255
  8124  00EEF6  1623               	andwf	___ftadd@f1+1,f,c
  8125  00EEF8  0E00               	movlw	0
  8126  00EEFA  1624               	andwf	___ftadd@f1+2,f,c
  8127  00EEFC  8E26               	bsf	___ftadd@f2+1,7,c
  8128  00EEFE  0EFF               	movlw	255
  8129  00EF00  1625               	andwf	___ftadd@f2,f,c
  8130  00EF02  0EFF               	movlw	255
  8131  00EF04  1626               	andwf	___ftadd@f2+1,f,c
  8132  00EF06  0E00               	movlw	0
  8133  00EF08  1627               	andwf	___ftadd@f2+2,f,c
  8134  00EF0A  502C               	movf	___ftadd@exp2,w,c
  8135  00EF0C  5C2D               	subwf	___ftadd@exp1,w,c
  8136  00EF0E  B0D8               	btfsc	status,0,c
  8137  00EF10  D01B               	goto	l984
  8138  00EF12                     u3690:
  8139  00EF12  90D8               	bcf	status,0,c
  8140  00EF14  3625               	rlcf	___ftadd@f2,f,c
  8141  00EF16  3626               	rlcf	___ftadd@f2+1,f,c
  8142  00EF18  3627               	rlcf	___ftadd@f2+2,f,c
  8143  00EF1A  062C               	decf	___ftadd@exp2,f,c
  8144  00EF1C  502D               	movf	___ftadd@exp1,w,c
  8145  00EF1E  182C               	xorwf	___ftadd@exp2,w,c
  8146  00EF20  B4D8               	btfsc	status,2,c
  8147  00EF22  D00D               	goto	l989
  8148  00EF24  062B               	decf	___ftadd@sign,f,c
  8149  00EF26  C02B  F028         	movff	___ftadd@sign,??___ftadd
  8150  00EF2A  0E07               	movlw	7
  8151  00EF2C  1628               	andwf	??___ftadd,f,c
  8152  00EF2E  B4D8               	btfsc	status,2,c
  8153  00EF30  D006               	goto	l989
  8154  00EF32  D7EF               	goto	u3690
  8155  00EF34  90D8               	bcf	status,0,c
  8156  00EF36  3224               	rrcf	___ftadd@f1+2,f,c
  8157  00EF38  3223               	rrcf	___ftadd@f1+1,f,c
  8158  00EF3A  3222               	rrcf	___ftadd@f1,f,c
  8159  00EF3C  2A2D               	incf	___ftadd@exp1,f,c
  8160  00EF3E                     l989:
  8161  00EF3E  502C               	movf	___ftadd@exp2,w,c
  8162  00EF40  182D               	xorwf	___ftadd@exp1,w,c
  8163  00EF42  B4D8               	btfsc	status,2,c
  8164  00EF44  D01F               	goto	u3760
  8165  00EF46  D7F6               	goto	l990
  8166  00EF48                     l984:
  8167  00EF48  502D               	movf	___ftadd@exp1,w,c
  8168  00EF4A  5C2C               	subwf	___ftadd@exp2,w,c
  8169  00EF4C  B0D8               	btfsc	status,0,c
  8170  00EF4E  D01A               	goto	u3760
  8171  00EF50                     u3730:
  8172  00EF50  90D8               	bcf	status,0,c
  8173  00EF52  3622               	rlcf	___ftadd@f1,f,c
  8174  00EF54  3623               	rlcf	___ftadd@f1+1,f,c
  8175  00EF56  3624               	rlcf	___ftadd@f1+2,f,c
  8176  00EF58  062D               	decf	___ftadd@exp1,f,c
  8177  00EF5A  502D               	movf	___ftadd@exp1,w,c
  8178  00EF5C  182C               	xorwf	___ftadd@exp2,w,c
  8179  00EF5E  B4D8               	btfsc	status,2,c
  8180  00EF60  D00D               	goto	l998
  8181  00EF62  062B               	decf	___ftadd@sign,f,c
  8182  00EF64  C02B  F028         	movff	___ftadd@sign,??___ftadd
  8183  00EF68  0E07               	movlw	7
  8184  00EF6A  1628               	andwf	??___ftadd,f,c
  8185  00EF6C  B4D8               	btfsc	status,2,c
  8186  00EF6E  D006               	goto	l998
  8187  00EF70  D7EF               	goto	u3730
  8188  00EF72  90D8               	bcf	status,0,c
  8189  00EF74  3227               	rrcf	___ftadd@f2+2,f,c
  8190  00EF76  3226               	rrcf	___ftadd@f2+1,f,c
  8191  00EF78  3225               	rrcf	___ftadd@f2,f,c
  8192  00EF7A  2A2C               	incf	___ftadd@exp2,f,c
  8193  00EF7C                     l998:
  8194  00EF7C  502C               	movf	___ftadd@exp2,w,c
  8195  00EF7E  182D               	xorwf	___ftadd@exp1,w,c
  8196  00EF80  A4D8               	btfss	status,2,c
  8197  00EF82  D7F7               	goto	l999
  8198  00EF84                     u3760:
  8199  00EF84  AE2B               	btfss	___ftadd@sign,7,c
  8200  00EF86  D00C               	goto	l1001
  8201  00EF88  0EFF               	movlw	255
  8202  00EF8A  1A22               	xorwf	___ftadd@f1,f,c
  8203  00EF8C  0EFF               	movlw	255
  8204  00EF8E  1A23               	xorwf	___ftadd@f1+1,f,c
  8205  00EF90  0EFF               	movlw	255
  8206  00EF92  1A24               	xorwf	___ftadd@f1+2,f,c
  8207  00EF94  0E01               	movlw	1
  8208  00EF96  2622               	addwf	___ftadd@f1,f,c
  8209  00EF98  0E00               	movlw	0
  8210  00EF9A  2223               	addwfc	___ftadd@f1+1,f,c
  8211  00EF9C  0E00               	movlw	0
  8212  00EF9E  2224               	addwfc	___ftadd@f1+2,f,c
  8213  00EFA0                     l1001:
  8214  00EFA0  AC2B               	btfss	___ftadd@sign,6,c
  8215  00EFA2  D00C               	goto	l1002
  8216  00EFA4  0EFF               	movlw	255
  8217  00EFA6  1A25               	xorwf	___ftadd@f2,f,c
  8218  00EFA8  0EFF               	movlw	255
  8219  00EFAA  1A26               	xorwf	___ftadd@f2+1,f,c
  8220  00EFAC  0EFF               	movlw	255
  8221  00EFAE  1A27               	xorwf	___ftadd@f2+2,f,c
  8222  00EFB0  0E01               	movlw	1
  8223  00EFB2  2625               	addwf	___ftadd@f2,f,c
  8224  00EFB4  0E00               	movlw	0
  8225  00EFB6  2226               	addwfc	___ftadd@f2+1,f,c
  8226  00EFB8  0E00               	movlw	0
  8227  00EFBA  2227               	addwfc	___ftadd@f2+2,f,c
  8228  00EFBC                     l1002:
  8229  00EFBC  0E00               	movlw	0
  8230  00EFBE  6E2B               	movwf	___ftadd@sign,c
  8231  00EFC0  5022               	movf	___ftadd@f1,w,c
  8232  00EFC2  2625               	addwf	___ftadd@f2,f,c
  8233  00EFC4  5023               	movf	___ftadd@f1+1,w,c
  8234  00EFC6  2226               	addwfc	___ftadd@f2+1,f,c
  8235  00EFC8  5024               	movf	___ftadd@f1+2,w,c
  8236  00EFCA  2227               	addwfc	___ftadd@f2+2,f,c
  8237  00EFCC  AE27               	btfss	___ftadd@f2+2,7,c
  8238  00EFCE  D00E               	goto	l1003
  8239  00EFD0  0EFF               	movlw	255
  8240  00EFD2  1A25               	xorwf	___ftadd@f2,f,c
  8241  00EFD4  0EFF               	movlw	255
  8242  00EFD6  1A26               	xorwf	___ftadd@f2+1,f,c
  8243  00EFD8  0EFF               	movlw	255
  8244  00EFDA  1A27               	xorwf	___ftadd@f2+2,f,c
  8245  00EFDC  0E01               	movlw	1
  8246  00EFDE  2625               	addwf	___ftadd@f2,f,c
  8247  00EFE0  0E00               	movlw	0
  8248  00EFE2  2226               	addwfc	___ftadd@f2+1,f,c
  8249  00EFE4  0E00               	movlw	0
  8250  00EFE6  2227               	addwfc	___ftadd@f2+2,f,c
  8251  00EFE8  0E01               	movlw	1
  8252  00EFEA  6E2B               	movwf	___ftadd@sign,c
  8253  00EFEC                     l1003:
  8254  00EFEC  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  8255  00EFF0  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  8256  00EFF4  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  8257  00EFF8  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  8258  00EFFC  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  8259  00F000  EC37  F06F         	call	___ftpack	;wreg free
  8260  00F004  C001  F022         	movff	?___ftpack,?___ftadd
  8261  00F008  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  8262  00F00C  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  8263  00F010  0012               	return	
  8264  00F012                     __end_of___ftadd:
  8265                           	opt stack 0
  8266                           tblptru	equ	0xFF8
  8267                           tblptrh	equ	0xFF7
  8268                           tblptrl	equ	0xFF6
  8269                           tablat	equ	0xFF5
  8270                           prodh	equ	0xFF4
  8271                           prodl	equ	0xFF3
  8272                           intcon	equ	0xFF2
  8273                           postinc0	equ	0xFEE
  8274                           wreg	equ	0xFE8
  8275                           postinc1	equ	0xFE6
  8276                           postdec1	equ	0xFE5
  8277                           fsr1h	equ	0xFE2
  8278                           fsr1l	equ	0xFE1
  8279                           indf2	equ	0xFDF
  8280                           postinc2	equ	0xFDE
  8281                           postdec2	equ	0xFDD
  8282                           fsr2h	equ	0xFDA
  8283                           fsr2l	equ	0xFD9
  8284                           status	equ	0xFD8
  8285                           
  8286 ;; *************** function ___ftneg *****************
  8287 ;; Defined at:
  8288 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;  f1              3    0[COMRAM] float 
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;		None
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  3    0[COMRAM] float 
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8302 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8305 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8306 ;;Total ram usage:        3 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; This function calls:
  8309 ;;		Nothing
  8310 ;; This function is called by:
  8311 ;;		_pow
  8312 ;;		_exp
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text39
  8317  00CF88                     __ptext39:
  8318                           	opt stack 0
  8319  00CF88                     ___ftneg:
  8320                           	opt stack 21
  8321                           
  8322                           ;incstack = 0
  8323  00CF88  5001               	movf	___ftneg@f1,w,c
  8324  00CF8A  1002               	iorwf	___ftneg@f1+1,w,c
  8325  00CF8C  1003               	iorwf	___ftneg@f1+2,w,c
  8326  00CF8E  B4D8               	btfsc	status,2,c
  8327  00CF90  D006               	goto	l1034
  8328  00CF92  0E00               	movlw	0
  8329  00CF94  1A01               	xorwf	___ftneg@f1,f,c
  8330  00CF96  0E00               	movlw	0
  8331  00CF98  1A02               	xorwf	___ftneg@f1+1,f,c
  8332  00CF9A  0E80               	movlw	128
  8333  00CF9C  1A03               	xorwf	___ftneg@f1+2,f,c
  8334  00CF9E                     l1034:
  8335  00CF9E  C001  F001         	movff	___ftneg@f1,?___ftneg
  8336  00CFA2  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8337  00CFA6  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8338  00CFAA  0012               	return		;funcret
  8339  00CFAC                     __end_of___ftneg:
  8340                           	opt stack 0
  8341                           tblptru	equ	0xFF8
  8342                           tblptrh	equ	0xFF7
  8343                           tblptrl	equ	0xFF6
  8344                           tablat	equ	0xFF5
  8345                           prodh	equ	0xFF4
  8346                           prodl	equ	0xFF3
  8347                           intcon	equ	0xFF2
  8348                           postinc0	equ	0xFEE
  8349                           wreg	equ	0xFE8
  8350                           postinc1	equ	0xFE6
  8351                           postdec1	equ	0xFE5
  8352                           fsr1h	equ	0xFE2
  8353                           fsr1l	equ	0xFE1
  8354                           indf2	equ	0xFDF
  8355                           postinc2	equ	0xFDE
  8356                           postdec2	equ	0xFDD
  8357                           fsr2h	equ	0xFDA
  8358                           fsr2l	equ	0xFD9
  8359                           status	equ	0xFD8
  8360                           
  8361 ;; *************** function ___ftdiv *****************
  8362 ;; Defined at:
  8363 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;  f1              3    8[COMRAM] float 
  8366 ;;  f2              3   11[COMRAM] float 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  f3              3   18[COMRAM] float 
  8369 ;;  sign            1   22[COMRAM] unsigned char 
  8370 ;;  exp             1   21[COMRAM] unsigned char 
  8371 ;;  cntr            1   17[COMRAM] unsigned char 
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  3    8[COMRAM] float 
  8374 ;; Registers used:
  8375 ;;		wreg, status,2, status,0, cstack
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8381 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8382 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8383 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8384 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8385 ;;Total ram usage:       15 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; Hardware stack levels required when called:    1
  8388 ;; This function calls:
  8389 ;;		___ftpack
  8390 ;; This function is called by:
  8391 ;;		_exp
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text40
  8396  00E3F0                     __ptext40:
  8397                           	opt stack 0
  8398  00E3F0                     ___ftdiv:
  8399                           	opt stack 20
  8400                           
  8401                           ;incstack = 0
  8402  00E3F0  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  8403  00E3F4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  8404  00E3F6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  8405  00E3F8  340A               	rlcf	___ftdiv@f1+1,w,c
  8406  00E3FA  360F               	rlcf	??___ftdiv& (0+255),f,c
  8407  00E3FC  E301               	bnc	u4011
  8408  00E3FE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  8409  00E400                     u4011:
  8410  00E400  500F               	movf	??___ftdiv,w,c
  8411  00E402  6E16               	movwf	___ftdiv@exp,c
  8412  00E404  5016               	movf	___ftdiv@exp,w,c
  8413  00E406  A4D8               	btfss	status,2,c
  8414  00E408  D007               	goto	l1008
  8415  00E40A  0E00               	movlw	0
  8416  00E40C  6E09               	movwf	?___ftdiv,c
  8417  00E40E  0E00               	movlw	0
  8418  00E410  6E0A               	movwf	?___ftdiv+1,c
  8419  00E412  0E00               	movlw	0
  8420  00E414  6E0B               	movwf	?___ftdiv+2,c
  8421  00E416  0012               	return	
  8422  00E418                     l1008:
  8423  00E418  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  8424  00E41C  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  8425  00E41E  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  8426  00E420  340D               	rlcf	___ftdiv@f2+1,w,c
  8427  00E422  360F               	rlcf	??___ftdiv& (0+255),f,c
  8428  00E424  E301               	bnc	u4031
  8429  00E426  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  8430  00E428                     u4031:
  8431  00E428  500F               	movf	??___ftdiv,w,c
  8432  00E42A  6E17               	movwf	___ftdiv@sign,c
  8433  00E42C  5017               	movf	___ftdiv@sign,w,c
  8434  00E42E  A4D8               	btfss	status,2,c
  8435  00E430  D007               	goto	l1010
  8436  00E432  0E00               	movlw	0
  8437  00E434  6E09               	movwf	?___ftdiv,c
  8438  00E436  0E00               	movlw	0
  8439  00E438  6E0A               	movwf	?___ftdiv+1,c
  8440  00E43A  0E00               	movlw	0
  8441  00E43C  6E0B               	movwf	?___ftdiv+2,c
  8442  00E43E  0012               	return	
  8443  00E440                     l1010:
  8444  00E440  0E00               	movlw	0
  8445  00E442  6E13               	movwf	___ftdiv@f3,c
  8446  00E444  0E00               	movlw	0
  8447  00E446  6E14               	movwf	___ftdiv@f3+1,c
  8448  00E448  0E00               	movlw	0
  8449  00E44A  6E15               	movwf	___ftdiv@f3+2,c
  8450  00E44C  5017               	movf	___ftdiv@sign,w,c
  8451  00E44E  0F89               	addlw	137
  8452  00E450  5E16               	subwf	___ftdiv@exp,f,c
  8453  00E452  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  8454  00E456  500E               	movf	___ftdiv@f2+2,w,c
  8455  00E458  1A17               	xorwf	___ftdiv@sign,f,c
  8456  00E45A  0E80               	movlw	128
  8457  00E45C  1617               	andwf	___ftdiv@sign,f,c
  8458  00E45E  8E0A               	bsf	___ftdiv@f1+1,7,c
  8459  00E460  0EFF               	movlw	255
  8460  00E462  1609               	andwf	___ftdiv@f1,f,c
  8461  00E464  0EFF               	movlw	255
  8462  00E466  160A               	andwf	___ftdiv@f1+1,f,c
  8463  00E468  0E00               	movlw	0
  8464  00E46A  160B               	andwf	___ftdiv@f1+2,f,c
  8465  00E46C  8E0D               	bsf	___ftdiv@f2+1,7,c
  8466  00E46E  0EFF               	movlw	255
  8467  00E470  160C               	andwf	___ftdiv@f2,f,c
  8468  00E472  0EFF               	movlw	255
  8469  00E474  160D               	andwf	___ftdiv@f2+1,f,c
  8470  00E476  0E00               	movlw	0
  8471  00E478  160E               	andwf	___ftdiv@f2+2,f,c
  8472  00E47A  0E18               	movlw	24
  8473  00E47C  6E12               	movwf	___ftdiv@cntr,c
  8474  00E47E  90D8               	bcf	status,0,c
  8475  00E480  3613               	rlcf	___ftdiv@f3,f,c
  8476  00E482  3614               	rlcf	___ftdiv@f3+1,f,c
  8477  00E484  3615               	rlcf	___ftdiv@f3+2,f,c
  8478  00E486  500C               	movf	___ftdiv@f2,w,c
  8479  00E488  5C09               	subwf	___ftdiv@f1,w,c
  8480  00E48A  500D               	movf	___ftdiv@f2+1,w,c
  8481  00E48C  580A               	subwfb	___ftdiv@f1+1,w,c
  8482  00E48E  500E               	movf	___ftdiv@f2+2,w,c
  8483  00E490  580B               	subwfb	___ftdiv@f1+2,w,c
  8484  00E492  A0D8               	btfss	status,0,c
  8485  00E494  D007               	goto	l1012
  8486  00E496  500C               	movf	___ftdiv@f2,w,c
  8487  00E498  5E09               	subwf	___ftdiv@f1,f,c
  8488  00E49A  500D               	movf	___ftdiv@f2+1,w,c
  8489  00E49C  5A0A               	subwfb	___ftdiv@f1+1,f,c
  8490  00E49E  500E               	movf	___ftdiv@f2+2,w,c
  8491  00E4A0  5A0B               	subwfb	___ftdiv@f1+2,f,c
  8492  00E4A2  8013               	bsf	___ftdiv@f3,0,c
  8493  00E4A4                     l1012:
  8494  00E4A4  90D8               	bcf	status,0,c
  8495  00E4A6  3609               	rlcf	___ftdiv@f1,f,c
  8496  00E4A8  360A               	rlcf	___ftdiv@f1+1,f,c
  8497  00E4AA  360B               	rlcf	___ftdiv@f1+2,f,c
  8498  00E4AC  2E12               	decfsz	___ftdiv@cntr,f,c
  8499  00E4AE  D7E7               	goto	l1011
  8500  00E4B0  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  8501  00E4B4  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8502  00E4B8  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8503  00E4BC  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  8504  00E4C0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  8505  00E4C4  EC37  F06F         	call	___ftpack	;wreg free
  8506  00E4C8  C001  F009         	movff	?___ftpack,?___ftdiv
  8507  00E4CC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  8508  00E4D0  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  8509  00E4D4  0012               	return	
  8510  00E4D6                     __end_of___ftdiv:
  8511                           	opt stack 0
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           prodh	equ	0xFF4
  8517                           prodl	equ	0xFF3
  8518                           intcon	equ	0xFF2
  8519                           postinc0	equ	0xFEE
  8520                           wreg	equ	0xFE8
  8521                           postinc1	equ	0xFE6
  8522                           postdec1	equ	0xFE5
  8523                           fsr1h	equ	0xFE2
  8524                           fsr1l	equ	0xFE1
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           fsr2h	equ	0xFDA
  8529                           fsr2l	equ	0xFD9
  8530                           status	equ	0xFD8
  8531                           
  8532 ;; *************** function ___awtoft *****************
  8533 ;; Defined at:
  8534 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awtoft.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  c               2    8[COMRAM] int 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  sign            1   11[COMRAM] unsigned char 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  3    8[COMRAM] float 
  8541 ;; Registers used:
  8542 ;;		wreg, status,2, status,0, cstack
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8548 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8551 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8552 ;;Total ram usage:        4 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    1
  8555 ;; This function calls:
  8556 ;;		___ftpack
  8557 ;; This function is called by:
  8558 ;;		_covertir_valores_de_array_a_escala_decimal
  8559 ;;		_exp
  8560 ;;		_log
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           	psect	text41
  8565  00D05A                     __ptext41:
  8566                           	opt stack 0
  8567  00D05A                     ___awtoft:
  8568                           	opt stack 20
  8569                           
  8570                           ;incstack = 0
  8571  00D05A  0E00               	movlw	0
  8572  00D05C  6E0C               	movwf	___awtoft@sign,c
  8573  00D05E  AE0A               	btfss	___awtoft@c+1,7,c
  8574  00D060  D006               	goto	l904
  8575  00D062  6C09               	negf	___awtoft@c,c
  8576  00D064  1E0A               	comf	___awtoft@c+1,f,c
  8577  00D066  B0D8               	btfsc	status,0,c
  8578  00D068  2A0A               	incf	___awtoft@c+1,f,c
  8579  00D06A  0E01               	movlw	1
  8580  00D06C  6E0C               	movwf	___awtoft@sign,c
  8581  00D06E                     l904:
  8582  00D06E  C009  F001         	movff	___awtoft@c,___ftpack@arg
  8583  00D072  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  8584  00D076  6A03               	clrf	___ftpack@arg+2,c
  8585  00D078  0E8E               	movlw	142
  8586  00D07A  6E04               	movwf	___ftpack@exp,c
  8587  00D07C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8588  00D080  EC37  F06F         	call	___ftpack	;wreg free
  8589  00D084  C001  F009         	movff	?___ftpack,?___awtoft
  8590  00D088  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8591  00D08C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8592  00D090  0012               	return	
  8593  00D092                     __end_of___awtoft:
  8594                           	opt stack 0
  8595                           tblptru	equ	0xFF8
  8596                           tblptrh	equ	0xFF7
  8597                           tblptrl	equ	0xFF6
  8598                           tablat	equ	0xFF5
  8599                           prodh	equ	0xFF4
  8600                           prodl	equ	0xFF3
  8601                           intcon	equ	0xFF2
  8602                           postinc0	equ	0xFEE
  8603                           wreg	equ	0xFE8
  8604                           postinc1	equ	0xFE6
  8605                           postdec1	equ	0xFE5
  8606                           fsr1h	equ	0xFE2
  8607                           fsr1l	equ	0xFE1
  8608                           indf2	equ	0xFDF
  8609                           postinc2	equ	0xFDE
  8610                           postdec2	equ	0xFDD
  8611                           fsr2h	equ	0xFDA
  8612                           fsr2l	equ	0xFD9
  8613                           status	equ	0xFD8
  8614                           
  8615 ;; *************** function ___lltoft *****************
  8616 ;; Defined at:
  8617 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  c               4    8[COMRAM] unsigned long 
  8620 ;; Auto vars:     Size  Location     Type
  8621 ;;  exp             1   16[COMRAM] unsigned char 
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  3    8[COMRAM] float 
  8624 ;; Registers used:
  8625 ;;		wreg, status,2, status,0, cstack
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8631 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8633 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8634 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8635 ;;Total ram usage:        9 bytes
  8636 ;; Hardware stack levels used:    1
  8637 ;; Hardware stack levels required when called:    1
  8638 ;; This function calls:
  8639 ;;		___ftpack
  8640 ;; This function is called by:
  8641 ;;		_pow
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           	psect	text42
  8646  00D2EA                     __ptext42:
  8647                           	opt stack 0
  8648  00D2EA                     ___lltoft:
  8649                           	opt stack 21
  8650                           
  8651                           ;incstack = 0
  8652  00D2EA  0E8E               	movlw	142
  8653  00D2EC  6E11               	movwf	___lltoft@exp,c
  8654  00D2EE  D006               	goto	l1106
  8655  00D2F0  90D8               	bcf	status,0,c
  8656  00D2F2  320C               	rrcf	___lltoft@c+3,f,c
  8657  00D2F4  320B               	rrcf	___lltoft@c+2,f,c
  8658  00D2F6  320A               	rrcf	___lltoft@c+1,f,c
  8659  00D2F8  3209               	rrcf	___lltoft@c,f,c
  8660  00D2FA  2A11               	incf	___lltoft@exp,f,c
  8661  00D2FC                     l1106:
  8662  00D2FC  0E00               	movlw	0
  8663  00D2FE  1409               	andwf	___lltoft@c,w,c
  8664  00D300  6E0D               	movwf	??___lltoft& (0+255),c
  8665  00D302  0E00               	movlw	0
  8666  00D304  140A               	andwf	___lltoft@c+1,w,c
  8667  00D306  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  8668  00D308  0E00               	movlw	0
  8669  00D30A  140B               	andwf	___lltoft@c+2,w,c
  8670  00D30C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  8671  00D30E  0EFF               	movlw	255
  8672  00D310  140C               	andwf	___lltoft@c+3,w,c
  8673  00D312  6E10               	movwf	(??___lltoft+3)& (0+255),c
  8674  00D314  500D               	movf	??___lltoft,w,c
  8675  00D316  100E               	iorwf	??___lltoft+1,w,c
  8676  00D318  100F               	iorwf	??___lltoft+2,w,c
  8677  00D31A  1010               	iorwf	??___lltoft+3,w,c
  8678  00D31C  A4D8               	btfss	status,2,c
  8679  00D31E  D7E8               	goto	l1107
  8680  00D320  C009  F001         	movff	___lltoft@c,___ftpack@arg
  8681  00D324  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  8682  00D328  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  8683  00D32C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  8684  00D330  0E00               	movlw	0
  8685  00D332  6E05               	movwf	___ftpack@sign,c
  8686  00D334  EC37  F06F         	call	___ftpack	;wreg free
  8687  00D338  C001  F009         	movff	?___ftpack,?___lltoft
  8688  00D33C  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  8689  00D340  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  8690  00D344  0012               	return	
  8691  00D346                     __end_of___lltoft:
  8692                           	opt stack 0
  8693                           tblptru	equ	0xFF8
  8694                           tblptrh	equ	0xFF7
  8695                           tblptrl	equ	0xFF6
  8696                           tablat	equ	0xFF5
  8697                           prodh	equ	0xFF4
  8698                           prodl	equ	0xFF3
  8699                           intcon	equ	0xFF2
  8700                           postinc0	equ	0xFEE
  8701                           wreg	equ	0xFE8
  8702                           postinc1	equ	0xFE6
  8703                           postdec1	equ	0xFE5
  8704                           fsr1h	equ	0xFE2
  8705                           fsr1l	equ	0xFE1
  8706                           indf2	equ	0xFDF
  8707                           postinc2	equ	0xFDE
  8708                           postdec2	equ	0xFDD
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function ___ftpack *****************
  8714 ;; Defined at:
  8715 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  arg             3    0[COMRAM] unsigned um
  8718 ;;  exp             1    3[COMRAM] unsigned char 
  8719 ;;  sign            1    4[COMRAM] unsigned char 
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  3    0[COMRAM] float 
  8724 ;; Registers used:
  8725 ;;		wreg, status,2, status,0
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8731 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8733 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8734 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8735 ;;Total ram usage:        8 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; This function calls:
  8738 ;;		Nothing
  8739 ;; This function is called by:
  8740 ;;		___altoft
  8741 ;;		___awtoft
  8742 ;;		___ftadd
  8743 ;;		___ftdiv
  8744 ;;		___ftmul
  8745 ;;		___lltoft
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text43
  8750  00DE6E                     __ptext43:
  8751                           	opt stack 0
  8752  00DE6E                     ___ftpack:
  8753                           	opt stack 19
  8754                           
  8755                           ;incstack = 0
  8756  00DE6E  5004               	movf	___ftpack@exp,w,c
  8757  00DE70  B4D8               	btfsc	status,2,c
  8758  00DE72  D005               	goto	u3490
  8759  00DE74  5001               	movf	___ftpack@arg,w,c
  8760  00DE76  1002               	iorwf	___ftpack@arg+1,w,c
  8761  00DE78  1003               	iorwf	___ftpack@arg+2,w,c
  8762  00DE7A  A4D8               	btfss	status,2,c
  8763  00DE7C  D00C               	goto	l944
  8764  00DE7E                     u3490:
  8765  00DE7E  0E00               	movlw	0
  8766  00DE80  6E01               	movwf	?___ftpack,c
  8767  00DE82  0E00               	movlw	0
  8768  00DE84  6E02               	movwf	?___ftpack+1,c
  8769  00DE86  0E00               	movlw	0
  8770  00DE88  6E03               	movwf	?___ftpack+2,c
  8771  00DE8A  0012               	return	
  8772  00DE8C  2A04               	incf	___ftpack@exp,f,c
  8773  00DE8E  90D8               	bcf	status,0,c
  8774  00DE90  3203               	rrcf	___ftpack@arg+2,f,c
  8775  00DE92  3202               	rrcf	___ftpack@arg+1,f,c
  8776  00DE94  3201               	rrcf	___ftpack@arg,f,c
  8777  00DE96                     l944:
  8778  00DE96  0E00               	movlw	0
  8779  00DE98  1401               	andwf	___ftpack@arg,w,c
  8780  00DE9A  6E06               	movwf	??___ftpack& (0+255),c
  8781  00DE9C  0E00               	movlw	0
  8782  00DE9E  1402               	andwf	___ftpack@arg+1,w,c
  8783  00DEA0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8784  00DEA2  0EFE               	movlw	254
  8785  00DEA4  1403               	andwf	___ftpack@arg+2,w,c
  8786  00DEA6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8787  00DEA8  5006               	movf	??___ftpack,w,c
  8788  00DEAA  1007               	iorwf	??___ftpack+1,w,c
  8789  00DEAC  1008               	iorwf	??___ftpack+2,w,c
  8790  00DEAE  B4D8               	btfsc	status,2,c
  8791  00DEB0  D00C               	goto	l947
  8792  00DEB2  D7EC               	goto	l945
  8793  00DEB4  2A04               	incf	___ftpack@exp,f,c
  8794  00DEB6  0E01               	movlw	1
  8795  00DEB8  2601               	addwf	___ftpack@arg,f,c
  8796  00DEBA  0E00               	movlw	0
  8797  00DEBC  2202               	addwfc	___ftpack@arg+1,f,c
  8798  00DEBE  0E00               	movlw	0
  8799  00DEC0  2203               	addwfc	___ftpack@arg+2,f,c
  8800  00DEC2  90D8               	bcf	status,0,c
  8801  00DEC4  3203               	rrcf	___ftpack@arg+2,f,c
  8802  00DEC6  3202               	rrcf	___ftpack@arg+1,f,c
  8803  00DEC8  3201               	rrcf	___ftpack@arg,f,c
  8804  00DECA                     l947:
  8805  00DECA  0E00               	movlw	0
  8806  00DECC  1401               	andwf	___ftpack@arg,w,c
  8807  00DECE  6E06               	movwf	??___ftpack& (0+255),c
  8808  00DED0  0E00               	movlw	0
  8809  00DED2  1402               	andwf	___ftpack@arg+1,w,c
  8810  00DED4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8811  00DED6  0EFF               	movlw	255
  8812  00DED8  1403               	andwf	___ftpack@arg+2,w,c
  8813  00DEDA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8814  00DEDC  5006               	movf	??___ftpack,w,c
  8815  00DEDE  1007               	iorwf	??___ftpack+1,w,c
  8816  00DEE0  1008               	iorwf	??___ftpack+2,w,c
  8817  00DEE2  B4D8               	btfsc	status,2,c
  8818  00DEE4  D006               	goto	l950
  8819  00DEE6  D7E6               	goto	l948
  8820  00DEE8  0604               	decf	___ftpack@exp,f,c
  8821  00DEEA  90D8               	bcf	status,0,c
  8822  00DEEC  3601               	rlcf	___ftpack@arg,f,c
  8823  00DEEE  3602               	rlcf	___ftpack@arg+1,f,c
  8824  00DEF0  3603               	rlcf	___ftpack@arg+2,f,c
  8825  00DEF2                     l950:
  8826  00DEF2  BE02               	btfsc	___ftpack@arg+1,7,c
  8827  00DEF4  D003               	goto	u3530
  8828  00DEF6  0E02               	movlw	2
  8829  00DEF8  6004               	cpfslt	___ftpack@exp,c
  8830  00DEFA  D7F6               	goto	l951
  8831  00DEFC                     u3530:
  8832  00DEFC  A004               	btfss	___ftpack@exp,0,c
  8833  00DEFE  9E02               	bcf	___ftpack@arg+1,7,c
  8834  00DF00  90D8               	bcf	status,0,c
  8835  00DF02  3204               	rrcf	___ftpack@exp,f,c
  8836  00DF04  5004               	movf	___ftpack@exp,w,c
  8837  00DF06  1203               	iorwf	___ftpack@arg+2,f,c
  8838  00DF08  5005               	movf	___ftpack@sign,w,c
  8839  00DF0A  A4D8               	btfss	status,2,c
  8840  00DF0C  8E03               	bsf	___ftpack@arg+2,7,c
  8841  00DF0E  C001  F001         	movff	___ftpack@arg,?___ftpack
  8842  00DF12  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8843  00DF16  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8844  00DF1A  0012               	return	
  8845  00DF1C                     __end_of___ftpack:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           postinc0	equ	0xFEE
  8855                           wreg	equ	0xFE8
  8856                           postinc1	equ	0xFE6
  8857                           postdec1	equ	0xFE5
  8858                           fsr1h	equ	0xFE2
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _activar_alarma *****************
  8868 ;; Defined at:
  8869 ;;		line 311 in file "main.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  intentos_de_    2   67[COMRAM] int 
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8885 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8886 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8887 ;;Total ram usage:        3 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; Hardware stack levels required when called:    7
  8890 ;; This function calls:
  8891 ;;		_generar_reporte
  8892 ;;		_ingreso_numero
  8893 ;;		_lcd_gotoxy
  8894 ;;		_lcd_putrs
  8895 ;;		_titila_alarma_activada
  8896 ;;		_verificar_contrasenia
  8897 ;; This function is called by:
  8898 ;;		_seleccionar_opcion
  8899 ;;		_ir_a_pantalla_ingresar_contrasenia
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           	psect	text44
  8904  00F416                     __ptext44:
  8905                           	opt stack 0
  8906  00F416                     _activar_alarma:
  8907                           	opt stack 18
  8908                           
  8909                           ;main.c: 312: lcd_gotoxy(1, 1);
  8910                           
  8911                           ;incstack = 0
  8912  00F416  0E01               	movlw	1
  8913  00F418  6E05               	movwf	lcd_gotoxy@y,c
  8914  00F41A  0E01               	movlw	1
  8915  00F41C  ECB3  F067         	call	_lcd_gotoxy
  8916                           
  8917                           ;main.c: 313: lcd_putrs("Alarm activated ");
  8918  00F420  0E19               	movlw	low STR_17
  8919  00F422  6E09               	movwf	lcd_putrs@ptr,c
  8920  00F424  0EFF               	movlw	high STR_17
  8921  00F426  6E0A               	movwf	lcd_putrs@ptr+1,c
  8922  00F428  EC23  F069         	call	_lcd_putrs	;wreg free
  8923                           
  8924                           ;main.c: 314: lcd_gotoxy(1, 2);
  8925  00F42C  0E02               	movlw	2
  8926  00F42E  6E05               	movwf	lcd_gotoxy@y,c
  8927  00F430  0E01               	movlw	1
  8928  00F432  ECB3  F067         	call	_lcd_gotoxy
  8929                           
  8930                           ;main.c: 315: lcd_putrs("                ");
  8931  00F436  0E08               	movlw	low STR_18
  8932  00F438  6E09               	movwf	lcd_putrs@ptr,c
  8933  00F43A  0EFF               	movlw	high STR_18
  8934  00F43C  6E0A               	movwf	lcd_putrs@ptr+1,c
  8935  00F43E  EC23  F069         	call	_lcd_putrs	;wreg free
  8936                           
  8937                           ;main.c: 316: numeros_ingresados = 0;
  8938  00F442  0E00               	movlw	0
  8939  00F444  0100               	movlb	0	; () banked
  8940  00F446  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  8941  00F448  0E00               	movlw	0
  8942  00F44A  6FA4               	movwf	_numeros_ingresados& (0+255),b
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;main.c: 317: alarma_activada = 1;
  8946  00F44C  0E00               	movlw	0
  8947  00F44E  0100               	movlb	0	; () banked
  8948  00F450  6FA1               	movwf	(_alarma_activada+1)& (0+255),b
  8949  00F452  0E01               	movlw	1
  8950  00F454  6FA0               	movwf	_alarma_activada& (0+255),b
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;main.c: 319: int intentos_de_contrasenia = 0;
  8954  00F456  0E00               	movlw	0
  8955  00F458  6E45               	movwf	activar_alarma@intentos_de_contrasenia+1,c
  8956  00F45A  0E00               	movlw	0
  8957  00F45C  6E44               	movwf	activar_alarma@intentos_de_contrasenia,c
  8958                           
  8959                           ;main.c: 320: while (alarma_activada) {
  8960  00F45E  D0E3               	goto	l318
  8961  00F460                     
  8962                           ; BSR set to: 0
  8963                           ;main.c: 323: if (numeros_ingresados < 4) {
  8964                           
  8965                           ; BSR set to: 0
  8966  00F460  0100               	movlb	0	; () banked
  8967  00F462  BFA5               	btfsc	(_numeros_ingresados+1)& (0+255),7,b
  8968  00F464  D008               	goto	u5650
  8969  00F466  0100               	movlb	0	; () banked
  8970  00F468  51A5               	movf	(_numeros_ingresados+1)& (0+255),w,b
  8971  00F46A  E131               	bnz	l4889
  8972  00F46C  0E04               	movlw	4
  8973  00F46E  0100               	movlb	0	; () banked
  8974  00F470  5DA4               	subwf	_numeros_ingresados& (0+255),w,b
  8975  00F472  B0D8               	btfsc	status,0,c
  8976  00F474  D02C               	goto	l311
  8977  00F476                     u5650:
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;main.c: 324: if (alarma_sonando == 1) {
  8981  00F476  0100               	movlb	0	; () banked
  8982  00F478  059E               	decf	_alarma_sonando& (0+255),w,b
  8983  00F47A  0100               	movlb	0	; () banked
  8984  00F47C  119F               	iorwf	(_alarma_sonando+1)& (0+255),w,b
  8985  00F47E  A4D8               	btfss	status,2,c
  8986  00F480  D023               	goto	l312
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;main.c: 328: generar_reporte();
  8990  00F482  EC14  F068         	call	_generar_reporte	;wreg free
  8991                           
  8992                           ;main.c: 329: titila_alarma_activada();
  8993  00F486  EC83  F06A         	call	_titila_alarma_activada	;wreg free
  8994                           
  8995                           ;main.c: 330: LATBbits.LATB1 = !LATBbits.LATB1;;
  8996  00F48A  B28A               	btfsc	3978,1,c	;volatile
  8997  00F48C  D003               	goto	u5670
  8998  00F48E  6A43               	clrf	??_activar_alarma& (0+255),c
  8999  00F490  2A43               	incf	??_activar_alarma& (0+255),f,c
  9000  00F492  D001               	goto	u5688
  9001  00F494                     u5670:
  9002  00F494  6A43               	clrf	??_activar_alarma& (0+255),c
  9003  00F496                     u5688:
  9004  00F496  4643               	rlncf	??_activar_alarma,f,c
  9005  00F498  508A               	movf	3978,w,c	;volatile
  9006  00F49A  1843               	xorwf	??_activar_alarma,w,c
  9007  00F49C  0BFD               	andlw	-3
  9008  00F49E  1843               	xorwf	??_activar_alarma,w,c
  9009  00F4A0  6E8A               	movwf	3978,c	;volatile
  9010                           
  9011                           ;main.c: 331: LATBbits.LATB0 = !LATBbits.LATB0;
  9012  00F4A2  B08A               	btfsc	3978,0,c	;volatile
  9013  00F4A4  D003               	goto	u5690
  9014  00F4A6  6A43               	clrf	??_activar_alarma& (0+255),c
  9015  00F4A8  2A43               	incf	??_activar_alarma& (0+255),f,c
  9016  00F4AA  D001               	goto	u5708
  9017  00F4AC                     u5690:
  9018  00F4AC  6A43               	clrf	??_activar_alarma& (0+255),c
  9019  00F4AE                     u5708:
  9020  00F4AE  508A               	movf	3978,w,c	;volatile
  9021  00F4B0  1843               	xorwf	??_activar_alarma,w,c
  9022  00F4B2  0BFE               	andlw	-2
  9023  00F4B4  1843               	xorwf	??_activar_alarma,w,c
  9024  00F4B6  6E8A               	movwf	3978,c	;volatile
  9025                           
  9026                           ;main.c: 332: _delay((unsigned long)((98)*(8000000/4000.0)));
  9027  00F4B8  0EFF               	movlw	255
  9028  00F4BA  6E43               	movwf	??_activar_alarma& (0+255),c
  9029  00F4BC  0E8A               	movlw	138
  9030  00F4BE                     u6927:
  9031  00F4BE  2EE8               	decfsz	wreg,f,c
  9032  00F4C0  D7FE               	bra	u6927
  9033  00F4C2  2E43               	decfsz	??_activar_alarma& (0+255),f,c
  9034  00F4C4  D7FC               	bra	u6927
  9035  00F4C6  D000               	nop2	
  9036  00F4C8                     l312:
  9037                           
  9038                           ;main.c: 333: }
  9039                           ;main.c: 334: ingreso_numero();
  9040  00F4C8  EC36  F07C         	call	_ingreso_numero	;wreg free
  9041                           
  9042                           ;main.c: 335: } else {
  9043  00F4CC  D067               	goto	l317
  9044  00F4CE                     l311:
  9045  00F4CE                     l4889:
  9046                           
  9047                           ;main.c: 336: if (verificar_contrasenia()) {
  9048  00F4CE  EC39  F06B         	call	_verificar_contrasenia	;wreg free
  9049  00F4D2  5001               	movf	?_verificar_contrasenia,w,c
  9050  00F4D4  1002               	iorwf	?_verificar_contrasenia+1,w,c
  9051  00F4D6  B4D8               	btfsc	status,2,c
  9052  00F4D8  D019               	goto	l314
  9053                           
  9054                           ;main.c: 337: alarma_activada = 0;
  9055  00F4DA  0E00               	movlw	0
  9056  00F4DC  0100               	movlb	0	; () banked
  9057  00F4DE  6FA1               	movwf	(_alarma_activada+1)& (0+255),b
  9058  00F4E0  0E00               	movlw	0
  9059  00F4E2  6FA0               	movwf	_alarma_activada& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;main.c: 338: LATBbits.LATB1 = 0;;
  9063  00F4E4  928A               	bcf	3978,1,c	;volatile
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;main.c: 339: LATBbits.LATB0 = 0;;
  9067  00F4E6  908A               	bcf	3978,0,c	;volatile
  9068                           
  9069                           ;main.c: 340: alarma_sonando = 0;
  9070  00F4E8  0E00               	movlw	0
  9071  00F4EA  0100               	movlb	0	; () banked
  9072  00F4EC  6F9F               	movwf	(_alarma_sonando+1)& (0+255),b
  9073  00F4EE  0E00               	movlw	0
  9074  00F4F0  6F9E               	movwf	_alarma_sonando& (0+255),b
  9075                           
  9076                           ;main.c: 341: intentos_de_contrasenia = 0;
  9077  00F4F2  0E00               	movlw	0
  9078  00F4F4  6E45               	movwf	activar_alarma@intentos_de_contrasenia+1,c
  9079  00F4F6  0E00               	movlw	0
  9080  00F4F8  6E44               	movwf	activar_alarma@intentos_de_contrasenia,c
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;main.c: 342: _delay((unsigned long)((98)*(8000000/4000.0)));
  9084  00F4FA  0EFF               	movlw	255
  9085  00F4FC  6E43               	movwf	??_activar_alarma& (0+255),c
  9086  00F4FE  0E8A               	movlw	138
  9087  00F500                     u6937:
  9088  00F500  2EE8               	decfsz	wreg,f,c
  9089  00F502  D7FE               	bra	u6937
  9090  00F504  2E43               	decfsz	??_activar_alarma& (0+255),f,c
  9091  00F506  D7FC               	bra	u6937
  9092  00F508  D000               	nop2	
  9093                           
  9094                           ;main.c: 343: break;
  9095  00F50A  0012               	return	
  9096  00F50C                     l314:
  9097                           
  9098                           ;main.c: 345: numeros_ingresados = 0;
  9099  00F50C  0E00               	movlw	0
  9100  00F50E  0100               	movlb	0	; () banked
  9101  00F510  6FA5               	movwf	(_numeros_ingresados+1)& (0+255),b
  9102  00F512  0E00               	movlw	0
  9103  00F514  6FA4               	movwf	_numeros_ingresados& (0+255),b
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;main.c: 346: intentos_de_contrasenia++;
  9107  00F516  4A44               	infsnz	activar_alarma@intentos_de_contrasenia,f,c
  9108  00F518  2A45               	incf	activar_alarma@intentos_de_contrasenia+1,f,c
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;main.c: 347: lcd_gotoxy(1, 2);
  9112  00F51A  0E02               	movlw	2
  9113  00F51C  6E05               	movwf	lcd_gotoxy@y,c
  9114  00F51E  0E01               	movlw	1
  9115  00F520  ECB3  F067         	call	_lcd_gotoxy
  9116                           
  9117                           ;main.c: 348: lcd_putrs("                ");
  9118  00F524  0E08               	movlw	low STR_18
  9119  00F526  6E09               	movwf	lcd_putrs@ptr,c
  9120  00F528  0EFF               	movlw	high STR_18
  9121  00F52A  6E0A               	movwf	lcd_putrs@ptr+1,c
  9122  00F52C  EC23  F069         	call	_lcd_putrs	;wreg free
  9123                           
  9124                           ;main.c: 349: if (intentos_de_contrasenia >= 3) {
  9125  00F530  BE45               	btfsc	activar_alarma@intentos_de_contrasenia+1,7,c
  9126  00F532  D034               	goto	l317
  9127  00F534  5045               	movf	activar_alarma@intentos_de_contrasenia+1,w,c
  9128  00F536  E104               	bnz	u5720
  9129  00F538  0E03               	movlw	3
  9130  00F53A  5C44               	subwf	activar_alarma@intentos_de_contrasenia,w,c
  9131  00F53C  A0D8               	btfss	status,0,c
  9132  00F53E  D02E               	goto	l317
  9133  00F540                     u5720:
  9134                           
  9135                           ;main.c: 351: titila_alarma_activada();
  9136  00F540  EC83  F06A         	call	_titila_alarma_activada	;wreg free
  9137                           
  9138                           ;main.c: 352: alarma_sonando = 1;
  9139  00F544  0E00               	movlw	0
  9140  00F546  0100               	movlb	0	; () banked
  9141  00F548  6F9F               	movwf	(_alarma_sonando+1)& (0+255),b
  9142  00F54A  0E01               	movlw	1
  9143  00F54C  6F9E               	movwf	_alarma_sonando& (0+255),b
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;main.c: 353: causa_reporte = "3 tries";
  9147  00F54E  0EB7               	movlw	low STR_22
  9148  00F550  0100               	movlb	0	; () banked
  9149  00F552  6FC5               	movwf	_causa_reporte& (0+255),b
  9150  00F554  0EFF               	movlw	high STR_22
  9151  00F556  0100               	movlb	0	; () banked
  9152  00F558  6FC6               	movwf	(_causa_reporte+1)& (0+255),b
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;main.c: 354: generar_reporte();
  9156  00F55A  EC14  F068         	call	_generar_reporte	;wreg free
  9157                           
  9158                           ;main.c: 358: LATBbits.LATB1 = !LATBbits.LATB1;;
  9159  00F55E  B28A               	btfsc	3978,1,c	;volatile
  9160  00F560  D003               	goto	u5730
  9161  00F562  6A43               	clrf	??_activar_alarma& (0+255),c
  9162  00F564  2A43               	incf	??_activar_alarma& (0+255),f,c
  9163  00F566  D001               	goto	u5748
  9164  00F568                     u5730:
  9165  00F568  6A43               	clrf	??_activar_alarma& (0+255),c
  9166  00F56A                     u5748:
  9167  00F56A  4643               	rlncf	??_activar_alarma,f,c
  9168  00F56C  508A               	movf	3978,w,c	;volatile
  9169  00F56E  1843               	xorwf	??_activar_alarma,w,c
  9170  00F570  0BFD               	andlw	-3
  9171  00F572  1843               	xorwf	??_activar_alarma,w,c
  9172  00F574  6E8A               	movwf	3978,c	;volatile
  9173                           
  9174                           ;main.c: 359: LATBbits.LATB0 = !LATBbits.LATB0;
  9175  00F576  B08A               	btfsc	3978,0,c	;volatile
  9176  00F578  D003               	goto	u5750
  9177  00F57A  6A43               	clrf	??_activar_alarma& (0+255),c
  9178  00F57C  2A43               	incf	??_activar_alarma& (0+255),f,c
  9179  00F57E  D001               	goto	u5768
  9180  00F580                     u5750:
  9181  00F580  6A43               	clrf	??_activar_alarma& (0+255),c
  9182  00F582                     u5768:
  9183  00F582  508A               	movf	3978,w,c	;volatile
  9184  00F584  1843               	xorwf	??_activar_alarma,w,c
  9185  00F586  0BFE               	andlw	-2
  9186  00F588  1843               	xorwf	??_activar_alarma,w,c
  9187  00F58A  6E8A               	movwf	3978,c	;volatile
  9188                           
  9189                           ;main.c: 360: _delay((unsigned long)((98)*(8000000/4000.0)));
  9190  00F58C  0EFF               	movlw	255
  9191  00F58E  6E43               	movwf	??_activar_alarma& (0+255),c
  9192  00F590  0E8A               	movlw	138
  9193  00F592                     u6947:
  9194  00F592  2EE8               	decfsz	wreg,f,c
  9195  00F594  D7FE               	bra	u6947
  9196  00F596  2E43               	decfsz	??_activar_alarma& (0+255),f,c
  9197  00F598  D7FC               	bra	u6947
  9198  00F59A  D000               	nop2	
  9199  00F59C                     l317:
  9200                           
  9201                           ;main.c: 361: }
  9202                           ;main.c: 362: }
  9203                           ;main.c: 363: }
  9204                           ;main.c: 365: if (PORTCbits.RC5 == 0 || PORTCbits.RC6 == 0 || PORTCbits.RC7 == 0) {
  9205  00F59C  BA82               	btfsc	3970,5,c	;volatile
  9206  00F59E  AC82               	btfss	3970,6,c	;volatile
  9207  00F5A0  D002               	goto	u5790
  9208  00F5A2  BE82               	btfsc	3970,7,c	;volatile
  9209  00F5A4  D040               	goto	l318
  9210  00F5A6                     u5790:
  9211                           
  9212                           ;main.c: 371: titila_alarma_activada();
  9213  00F5A6  EC83  F06A         	call	_titila_alarma_activada	;wreg free
  9214                           
  9215                           ;main.c: 372: alarma_sonando = 1;
  9216  00F5AA  0E00               	movlw	0
  9217  00F5AC  0100               	movlb	0	; () banked
  9218  00F5AE  6F9F               	movwf	(_alarma_sonando+1)& (0+255),b
  9219  00F5B0  0E01               	movlw	1
  9220  00F5B2  6F9E               	movwf	_alarma_sonando& (0+255),b
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;main.c: 373: if (PORTCbits.RC5 == 0) {
  9224  00F5B4  BA82               	btfsc	3970,5,c	;volatile
  9225  00F5B6  D006               	goto	l321
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;main.c: 374: causa_reporte = "sensor1";
  9229  00F5B8  0E97               	movlw	low STR_23
  9230  00F5BA  0100               	movlb	0	; () banked
  9231  00F5BC  6FC5               	movwf	_causa_reporte& (0+255),b
  9232  00F5BE  0EFF               	movlw	high STR_23
  9233  00F5C0  0100               	movlb	0	; () banked
  9234  00F5C2  6FC6               	movwf	(_causa_reporte+1)& (0+255),b
  9235  00F5C4                     l321:
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;main.c: 375: }
  9239                           ;main.c: 376: if (PORTCbits.RC6 == 0) {
  9240                           
  9241                           ; BSR set to: 0
  9242  00F5C4  BC82               	btfsc	3970,6,c	;volatile
  9243  00F5C6  D006               	goto	l322
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;main.c: 377: causa_reporte = "sensor2";
  9247  00F5C8  0E9F               	movlw	low STR_24
  9248  00F5CA  0100               	movlb	0	; () banked
  9249  00F5CC  6FC5               	movwf	_causa_reporte& (0+255),b
  9250  00F5CE  0EFF               	movlw	high STR_24
  9251  00F5D0  0100               	movlb	0	; () banked
  9252  00F5D2  6FC6               	movwf	(_causa_reporte+1)& (0+255),b
  9253  00F5D4                     l322:
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;main.c: 378: }
  9257                           ;main.c: 379: if (PORTCbits.RC7 == 0) {
  9258                           
  9259                           ; BSR set to: 0
  9260  00F5D4  BE82               	btfsc	3970,7,c	;volatile
  9261  00F5D6  D006               	goto	l323
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;main.c: 380: causa_reporte = "sensor3";
  9265  00F5D8  0EA7               	movlw	low STR_25
  9266  00F5DA  0100               	movlb	0	; () banked
  9267  00F5DC  6FC5               	movwf	_causa_reporte& (0+255),b
  9268  00F5DE  0EFF               	movlw	high STR_25
  9269  00F5E0  0100               	movlb	0	; () banked
  9270  00F5E2  6FC6               	movwf	(_causa_reporte+1)& (0+255),b
  9271  00F5E4                     l323:
  9272                           
  9273                           ; BSR set to: 0
  9274                           ;main.c: 381: }
  9275                           ;main.c: 382: generar_reporte();
  9276                           
  9277                           ; BSR set to: 0
  9278  00F5E4  EC14  F068         	call	_generar_reporte	;wreg free
  9279                           
  9280                           ;main.c: 383: LATBbits.LATB1 = !LATBbits.LATB1;;
  9281  00F5E8  B28A               	btfsc	3978,1,c	;volatile
  9282  00F5EA  D003               	goto	u5830
  9283  00F5EC  6A43               	clrf	??_activar_alarma& (0+255),c
  9284  00F5EE  2A43               	incf	??_activar_alarma& (0+255),f,c
  9285  00F5F0  D001               	goto	u5848
  9286  00F5F2                     u5830:
  9287  00F5F2  6A43               	clrf	??_activar_alarma& (0+255),c
  9288  00F5F4                     u5848:
  9289  00F5F4  4643               	rlncf	??_activar_alarma,f,c
  9290  00F5F6  508A               	movf	3978,w,c	;volatile
  9291  00F5F8  1843               	xorwf	??_activar_alarma,w,c
  9292  00F5FA  0BFD               	andlw	-3
  9293  00F5FC  1843               	xorwf	??_activar_alarma,w,c
  9294  00F5FE  6E8A               	movwf	3978,c	;volatile
  9295                           
  9296                           ;main.c: 384: LATBbits.LATB0 = !LATBbits.LATB0;;
  9297  00F600  B08A               	btfsc	3978,0,c	;volatile
  9298  00F602  D003               	goto	u5850
  9299  00F604  6A43               	clrf	??_activar_alarma& (0+255),c
  9300  00F606  2A43               	incf	??_activar_alarma& (0+255),f,c
  9301  00F608  D001               	goto	u5868
  9302  00F60A                     u5850:
  9303  00F60A  6A43               	clrf	??_activar_alarma& (0+255),c
  9304  00F60C                     u5868:
  9305  00F60C  508A               	movf	3978,w,c	;volatile
  9306  00F60E  1843               	xorwf	??_activar_alarma,w,c
  9307  00F610  0BFE               	andlw	-2
  9308  00F612  1843               	xorwf	??_activar_alarma,w,c
  9309  00F614  6E8A               	movwf	3978,c	;volatile
  9310                           
  9311                           ;main.c: 385: _delay((unsigned long)((98)*(8000000/4000.0)));
  9312  00F616  0EFF               	movlw	255
  9313  00F618  6E43               	movwf	??_activar_alarma& (0+255),c
  9314  00F61A  0E8A               	movlw	138
  9315  00F61C                     u6957:
  9316  00F61C  2EE8               	decfsz	wreg,f,c
  9317  00F61E  D7FE               	bra	u6957
  9318  00F620  2E43               	decfsz	??_activar_alarma& (0+255),f,c
  9319  00F622  D7FC               	bra	u6957
  9320  00F624  D000               	nop2	
  9321  00F626                     l318:
  9322  00F626  0100               	movlb	0	; () banked
  9323  00F628  51A0               	movf	_alarma_activada& (0+255),w,b
  9324  00F62A  0100               	movlb	0	; () banked
  9325  00F62C  11A1               	iorwf	(_alarma_activada+1)& (0+255),w,b
  9326  00F62E  B4D8               	btfsc	status,2,c
  9327  00F630  0012               	return	
  9328  00F632  D716               	goto	l310
  9329  00F634                     __end_of_activar_alarma:
  9330                           	opt stack 0
  9331                           tblptru	equ	0xFF8
  9332                           tblptrh	equ	0xFF7
  9333                           tblptrl	equ	0xFF6
  9334                           tablat	equ	0xFF5
  9335                           prodh	equ	0xFF4
  9336                           prodl	equ	0xFF3
  9337                           intcon	equ	0xFF2
  9338                           postinc0	equ	0xFEE
  9339                           wreg	equ	0xFE8
  9340                           postinc1	equ	0xFE6
  9341                           postdec1	equ	0xFE5
  9342                           fsr1h	equ	0xFE2
  9343                           fsr1l	equ	0xFE1
  9344                           indf2	equ	0xFDF
  9345                           postinc2	equ	0xFDE
  9346                           postdec2	equ	0xFDD
  9347                           fsr2h	equ	0xFDA
  9348                           fsr2l	equ	0xFD9
  9349                           status	equ	0xFD8
  9350                           
  9351 ;; *************** function _verificar_contrasenia *****************
  9352 ;; Defined at:
  9353 ;;		line 612 in file "main.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;		None
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;  i               2    8[COMRAM] int 
  9358 ;;  equals          2    6[COMRAM] int 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;                  2    0[COMRAM] int 
  9361 ;; Registers used:
  9362 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9368 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9369 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9370 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9371 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9372 ;;Total ram usage:       10 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; This function calls:
  9375 ;;		Nothing
  9376 ;; This function is called by:
  9377 ;;		_activar_alarma
  9378 ;;		_ir_a_pantalla_ingresar_contrasenia
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           	psect	text45
  9383  00D672                     __ptext45:
  9384                           	opt stack 0
  9385  00D672                     _verificar_contrasenia:
  9386                           	opt stack 27
  9387                           
  9388                           ;main.c: 613: int equals = 0;
  9389                           
  9390                           ;incstack = 0
  9391  00D672  0E00               	movlw	0
  9392  00D674  6E08               	movwf	verificar_contrasenia@equals+1,c
  9393  00D676  0E00               	movlw	0
  9394  00D678  6E07               	movwf	verificar_contrasenia@equals,c
  9395                           
  9396                           ;main.c: 614: for (int i = 0; i < 4; i++) {
  9397  00D67A  0E00               	movlw	0
  9398  00D67C  6E0A               	movwf	verificar_contrasenia@i+1,c
  9399  00D67E  0E00               	movlw	0
  9400  00D680  6E09               	movwf	verificar_contrasenia@i,c
  9401  00D682  BE0A               	btfsc	verificar_contrasenia@i+1,7,c
  9402  00D684  D003               	goto	l425
  9403  00D686  500A               	movf	verificar_contrasenia@i+1,w,c
  9404  00D688  E12E               	bnz	l426
  9405  00D68A  D029               	goto	L2
  9406  00D68C                     l425:
  9407                           
  9408                           ;main.c: 615: if (array_contrasenia[i] == array_contrasenia_ingresada[i]) {
  9409  00D68C  90D8               	bcf	status,0,c
  9410  00D68E  3409               	rlcf	verificar_contrasenia@i,w,c
  9411  00D690  6ED9               	movwf	fsr2l,c
  9412  00D692  340A               	rlcf	verificar_contrasenia@i+1,w,c
  9413  00D694  6EDA               	movwf	fsr2h,c
  9414  00D696  0E60               	movlw	low _array_contrasenia_ingresada
  9415  00D698  26D9               	addwf	fsr2l,f,c
  9416  00D69A  0E00               	movlw	high _array_contrasenia_ingresada
  9417  00D69C  22DA               	addwfc	fsr2h,f,c
  9418  00D69E  90D8               	bcf	status,0,c
  9419  00D6A0  3409               	rlcf	verificar_contrasenia@i,w,c
  9420  00D6A2  6EE1               	movwf	fsr1l,c
  9421  00D6A4  340A               	rlcf	verificar_contrasenia@i+1,w,c
  9422  00D6A6  6EE2               	movwf	fsr1h,c
  9423  00D6A8  0EBD               	movlw	low _array_contrasenia
  9424  00D6AA  26E1               	addwf	fsr1l,f,c
  9425  00D6AC  0E00               	movlw	high _array_contrasenia
  9426  00D6AE  22E2               	addwfc	fsr1h,f,c
  9427  00D6B0  50DE               	movf	postinc2,w,c
  9428  00D6B2  18E6               	xorwf	postinc1,w,c
  9429  00D6B4  E109               	bnz	l4751
  9430  00D6B6  50DE               	movf	postinc2,w,c
  9431  00D6B8  18E6               	xorwf	postinc1,w,c
  9432  00D6BA  A4D8               	btfss	status,2,c
  9433  00D6BC  D005               	goto	l427
  9434                           
  9435                           ;main.c: 616: equals = 1;
  9436  00D6BE  0E00               	movlw	0
  9437  00D6C0  6E08               	movwf	verificar_contrasenia@equals+1,c
  9438  00D6C2  0E01               	movlw	1
  9439  00D6C4  6E07               	movwf	verificar_contrasenia@equals,c
  9440                           
  9441                           ;main.c: 617: } else {
  9442  00D6C6  D005               	goto	l428
  9443  00D6C8                     l427:
  9444  00D6C8                     l4751:
  9445                           
  9446                           ;main.c: 618: equals = 0;
  9447  00D6C8  0E00               	movlw	0
  9448  00D6CA  6E08               	movwf	verificar_contrasenia@equals+1,c
  9449  00D6CC  0E00               	movlw	0
  9450  00D6CE  6E07               	movwf	verificar_contrasenia@equals,c
  9451                           
  9452                           ;main.c: 619: break;
  9453  00D6D0  D00A               	goto	u5500
  9454  00D6D2                     l428:
  9455  00D6D2  4A09               	infsnz	verificar_contrasenia@i,f,c
  9456  00D6D4  2A0A               	incf	verificar_contrasenia@i+1,f,c
  9457  00D6D6  BE0A               	btfsc	verificar_contrasenia@i+1,7,c
  9458  00D6D8  D7D9               	goto	l425
  9459  00D6DA  500A               	movf	verificar_contrasenia@i+1,w,c
  9460  00D6DC  E104               	bnz	u5500
  9461  00D6DE                     L2:
  9462  00D6DE  0E04               	movlw	4
  9463  00D6E0  5C09               	subwf	verificar_contrasenia@i,w,c
  9464  00D6E2  A0D8               	btfss	status,0,c
  9465  00D6E4  D7D3               	goto	l425
  9466  00D6E6                     u5500:
  9467  00D6E6                     l426:
  9468                           
  9469                           ;main.c: 620: }
  9470                           ;main.c: 621: }
  9471                           ;main.c: 622: return equals;
  9472  00D6E6  C007  F001         	movff	verificar_contrasenia@equals,?_verificar_contrasenia
  9473  00D6EA  C008  F002         	movff	verificar_contrasenia@equals+1,?_verificar_contrasenia+1
  9474  00D6EE  0012               	return		;funcret
  9475  00D6F0                     __end_of_verificar_contrasenia:
  9476                           	opt stack 0
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           intcon	equ	0xFF2
  9484                           postinc0	equ	0xFEE
  9485                           wreg	equ	0xFE8
  9486                           postinc1	equ	0xFE6
  9487                           postdec1	equ	0xFE5
  9488                           fsr1h	equ	0xFE2
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function _titila_alarma_activada *****************
  9498 ;; Defined at:
  9499 ;;		line 286 in file "main.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;		None
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;		None
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      void 
  9506 ;; Registers used:
  9507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9517 ;;Total ram usage:        1 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    5
  9520 ;; This function calls:
  9521 ;;		_lcd_gotoxy
  9522 ;;		_lcd_putrs
  9523 ;; This function is called by:
  9524 ;;		_activar_alarma
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           	psect	text46
  9529  00D506                     __ptext46:
  9530                           	opt stack 0
  9531  00D506                     _titila_alarma_activada:
  9532                           	opt stack 19
  9533                           
  9534                           ;main.c: 287: if (txt_alarma_activada == 0) {
  9535                           
  9536                           ;incstack = 0
  9537  00D506  0100               	movlb	0	; () banked
  9538  00D508  518C               	movf	_txt_alarma_activada& (0+255),w,b
  9539  00D50A  0100               	movlb	0	; () banked
  9540  00D50C  118D               	iorwf	(_txt_alarma_activada+1)& (0+255),w,b
  9541  00D50E  A4D8               	btfss	status,2,c
  9542  00D510  D017               	goto	l301
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;main.c: 288: txt_alarma_activada = 1;
  9546  00D512  0E00               	movlw	0
  9547  00D514  0100               	movlb	0	; () banked
  9548  00D516  6F8D               	movwf	(_txt_alarma_activada+1)& (0+255),b
  9549  00D518  0E01               	movlw	1
  9550  00D51A  6F8C               	movwf	_txt_alarma_activada& (0+255),b
  9551                           
  9552                           ; BSR set to: 0
  9553                           ;main.c: 289: lcd_gotoxy(1, 1);
  9554  00D51C  0E01               	movlw	1
  9555  00D51E  6E05               	movwf	lcd_gotoxy@y,c
  9556  00D520  0E01               	movlw	1
  9557  00D522  ECB3  F067         	call	_lcd_gotoxy
  9558                           
  9559                           ;main.c: 290: lcd_putrs("Alarm activated ");
  9560  00D526  0E19               	movlw	low STR_17
  9561  00D528  6E09               	movwf	lcd_putrs@ptr,c
  9562  00D52A  0EFF               	movlw	high STR_17
  9563  00D52C  6E0A               	movwf	lcd_putrs@ptr+1,c
  9564  00D52E  EC23  F069         	call	_lcd_putrs	;wreg free
  9565                           
  9566                           ;main.c: 291: _delay((unsigned long)((80)*(8000000/4000.0)));
  9567  00D532  0ED0               	movlw	208
  9568  00D534  6E0B               	movwf	??_titila_alarma_activada& (0+255),c
  9569  00D536  0ECA               	movlw	202
  9570  00D538                     u6967:
  9571  00D538  2EE8               	decfsz	wreg,f,c
  9572  00D53A  D7FE               	bra	u6967
  9573  00D53C  2E0B               	decfsz	??_titila_alarma_activada& (0+255),f,c
  9574  00D53E  D7FC               	bra	u6967
  9575  00D540                     l301:
  9576                           
  9577                           ;main.c: 292: }
  9578                           ;main.c: 294: if (txt_alarma_activada == 1) {
  9579  00D540  0100               	movlb	0	; () banked
  9580  00D542  058C               	decf	_txt_alarma_activada& (0+255),w,b
  9581  00D544  0100               	movlb	0	; () banked
  9582  00D546  118D               	iorwf	(_txt_alarma_activada+1)& (0+255),w,b
  9583  00D548  A4D8               	btfss	status,2,c
  9584  00D54A  0012               	return	
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;main.c: 295: txt_alarma_activada = 0;
  9588  00D54C  0E00               	movlw	0
  9589  00D54E  0100               	movlb	0	; () banked
  9590  00D550  6F8D               	movwf	(_txt_alarma_activada+1)& (0+255),b
  9591  00D552  0E00               	movlw	0
  9592  00D554  6F8C               	movwf	_txt_alarma_activada& (0+255),b
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;main.c: 296: lcd_gotoxy(1, 1);
  9596  00D556  0E01               	movlw	1
  9597  00D558  6E05               	movwf	lcd_gotoxy@y,c
  9598  00D55A  0E01               	movlw	1
  9599  00D55C  ECB3  F067         	call	_lcd_gotoxy
  9600                           
  9601                           ;main.c: 297: lcd_putrs("                ");
  9602  00D560  0E08               	movlw	low STR_18
  9603  00D562  6E09               	movwf	lcd_putrs@ptr,c
  9604  00D564  0EFF               	movlw	high STR_18
  9605  00D566  6E0A               	movwf	lcd_putrs@ptr+1,c
  9606  00D568  EC23  F069         	call	_lcd_putrs	;wreg free
  9607                           
  9608                           ;main.c: 298: _delay((unsigned long)((60)*(8000000/4000.0)));
  9609  00D56C  0E9C               	movlw	156
  9610  00D56E  6E0B               	movwf	??_titila_alarma_activada& (0+255),c
  9611  00D570  0ED7               	movlw	215
  9612  00D572                     u6977:
  9613  00D572  2EE8               	decfsz	wreg,f,c
  9614  00D574  D7FE               	bra	u6977
  9615  00D576  2E0B               	decfsz	??_titila_alarma_activada& (0+255),f,c
  9616  00D578  D7FC               	bra	u6977
  9617  00D57A  F000               	nop	
  9618  00D57C  0012               	return	
  9619  00D57E                     __end_of_titila_alarma_activada:
  9620                           	opt stack 0
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           prodh	equ	0xFF4
  9626                           prodl	equ	0xFF3
  9627                           intcon	equ	0xFF2
  9628                           postinc0	equ	0xFEE
  9629                           wreg	equ	0xFE8
  9630                           postinc1	equ	0xFE6
  9631                           postdec1	equ	0xFE5
  9632                           fsr1h	equ	0xFE2
  9633                           fsr1l	equ	0xFE1
  9634                           indf2	equ	0xFDF
  9635                           postinc2	equ	0xFDE
  9636                           postdec2	equ	0xFDD
  9637                           fsr2h	equ	0xFDA
  9638                           fsr2l	equ	0xFD9
  9639                           status	equ	0xFD8
  9640                           
  9641 ;; *************** function _ingreso_numero *****************
  9642 ;; Defined at:
  9643 ;;		line 142 in file "main.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;		None
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;		None
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  1    wreg      void 
  9650 ;; Registers used:
  9651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9659 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9660 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9661 ;;Total ram usage:        2 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    6
  9664 ;; This function calls:
  9665 ;;		_guarda_numero_ingresado
  9666 ;; This function is called by:
  9667 ;;		_activar_alarma
  9668 ;;		_ir_a_pantalla_ingresar_contrasenia
  9669 ;;		_ir_a_pantalla_editar_contrasenia
  9670 ;;		_editar_fecha_reloj_digital
  9671 ;;		_editar_hora_reloj_digital
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           	psect	text47
  9676  00F86C                     __ptext47:
  9677                           	opt stack 0
  9678  00F86C                     _ingreso_numero:
  9679                           	opt stack 18
  9680                           
  9681                           ;main.c: 143: LATAbits.LATA0 = 1;
  9682                           
  9683                           ;incstack = 0
  9684  00F86C  8089               	bsf	3977,0,c	;volatile
  9685                           
  9686                           ;main.c: 144: LATAbits.LATA1 = 0;
  9687  00F86E  9289               	bcf	3977,1,c	;volatile
  9688                           
  9689                           ;main.c: 145: LATAbits.LATA2 = 0;
  9690  00F870  9489               	bcf	3977,2,c	;volatile
  9691                           
  9692                           ;main.c: 146: LATAbits.LATA3 = 0;
  9693  00F872  9689               	bcf	3977,3,c	;volatile
  9694                           
  9695                           ;main.c: 147: {
  9696                           ;main.c: 148: if (PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) {
  9697  00F874  BA80               	btfsc	3968,5,c	;volatile
  9698  00F876  A089               	btfss	3977,0,c	;volatile
  9699  00F878  D01A               	goto	u5090
  9700                           
  9701                           ;main.c: 149: key = 1;
  9702  00F87A  0E01               	movlw	1
  9703  00F87C  0100               	movlb	0	; () banked
  9704  00F87E  6FB4               	movwf	_key& (0+255),b
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;main.c: 150: guarda_numero_ingresado(key);
  9708  00F880  0100               	movlb	0	; () banked
  9709  00F882  51B4               	movf	_key& (0+255),w,b
  9710  00F884  6E41               	movwf	??_ingreso_numero& (0+255),c
  9711  00F886  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
  9712  00F888  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9713  00F88C  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9714  00F890  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
  9715                           
  9716                           ;main.c: 151: while (PORTAbits.RA5 == 1 && LATAbits.LATA0 == 1) {
  9717  00F894  D008               	goto	l212
  9718  00F896                     
  9719                           ;main.c: 152: _delay((unsigned long)((40)*(8000000/4000.0)));
  9720  00F896  0E68               	movlw	104
  9721  00F898  6E41               	movwf	??_ingreso_numero& (0+255),c
  9722  00F89A  0EE4               	movlw	228
  9723  00F89C                     u6987:
  9724  00F89C  2EE8               	decfsz	wreg,f,c
  9725  00F89E  D7FE               	bra	u6987
  9726  00F8A0  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
  9727  00F8A2  D7FC               	bra	u6987
  9728  00F8A4  D000               	nop2	
  9729  00F8A6                     l212:
  9730  00F8A6  AA80               	btfss	3968,5,c	;volatile
  9731  00F8A8  D002               	goto	u5090
  9732  00F8AA  B089               	btfsc	3977,0,c	;volatile
  9733  00F8AC  D7F4               	goto	l213
  9734  00F8AE                     u5090:
  9735                           
  9736                           ;main.c: 153: }
  9737                           ;main.c: 154: }
  9738                           ;main.c: 155: if (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) {
  9739  00F8AE  BE80               	btfsc	3968,7,c	;volatile
  9740  00F8B0  A089               	btfss	3977,0,c	;volatile
  9741  00F8B2  D01A               	goto	u5130
  9742                           
  9743                           ;main.c: 156: key = 2;
  9744  00F8B4  0E02               	movlw	2
  9745  00F8B6  0100               	movlb	0	; () banked
  9746  00F8B8  6FB4               	movwf	_key& (0+255),b
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;main.c: 157: guarda_numero_ingresado(key);
  9750  00F8BA  0100               	movlb	0	; () banked
  9751  00F8BC  51B4               	movf	_key& (0+255),w,b
  9752  00F8BE  6E41               	movwf	??_ingreso_numero& (0+255),c
  9753  00F8C0  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
  9754  00F8C2  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9755  00F8C6  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9756  00F8CA  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
  9757                           
  9758                           ;main.c: 158: while (PORTAbits.RA7 == 1 && LATAbits.LATA0 == 1) {
  9759  00F8CE  D008               	goto	l218
  9760  00F8D0                     
  9761                           ;main.c: 159: _delay((unsigned long)((40)*(8000000/4000.0)));
  9762  00F8D0  0E68               	movlw	104
  9763  00F8D2  6E41               	movwf	??_ingreso_numero& (0+255),c
  9764  00F8D4  0EE4               	movlw	228
  9765  00F8D6                     u6997:
  9766  00F8D6  2EE8               	decfsz	wreg,f,c
  9767  00F8D8  D7FE               	bra	u6997
  9768  00F8DA  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
  9769  00F8DC  D7FC               	bra	u6997
  9770  00F8DE  D000               	nop2	
  9771  00F8E0                     l218:
  9772  00F8E0  AE80               	btfss	3968,7,c	;volatile
  9773  00F8E2  D002               	goto	u5130
  9774  00F8E4  B089               	btfsc	3977,0,c	;volatile
  9775  00F8E6  D7F4               	goto	l219
  9776  00F8E8                     u5130:
  9777                           
  9778                           ;main.c: 160: }
  9779                           ;main.c: 161: }
  9780                           ;main.c: 162: if (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1) {
  9781  00F8E8  BC80               	btfsc	3968,6,c	;volatile
  9782  00F8EA  A089               	btfss	3977,0,c	;volatile
  9783  00F8EC  D01A               	goto	u5170
  9784                           
  9785                           ;main.c: 163: key = 3;
  9786  00F8EE  0E03               	movlw	3
  9787  00F8F0  0100               	movlb	0	; () banked
  9788  00F8F2  6FB4               	movwf	_key& (0+255),b
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;main.c: 164: guarda_numero_ingresado(key);
  9792  00F8F4  0100               	movlb	0	; () banked
  9793  00F8F6  51B4               	movf	_key& (0+255),w,b
  9794  00F8F8  6E41               	movwf	??_ingreso_numero& (0+255),c
  9795  00F8FA  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
  9796  00F8FC  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9797  00F900  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9798  00F904  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
  9799                           
  9800                           ;main.c: 165: while (PORTAbits.RA6 == 1 && LATAbits.LATA0 == 1) {
  9801  00F908  D008               	goto	l224
  9802  00F90A                     
  9803                           ;main.c: 166: _delay((unsigned long)((40)*(8000000/4000.0)));
  9804  00F90A  0E68               	movlw	104
  9805  00F90C  6E41               	movwf	??_ingreso_numero& (0+255),c
  9806  00F90E  0EE4               	movlw	228
  9807  00F910                     u7007:
  9808  00F910  2EE8               	decfsz	wreg,f,c
  9809  00F912  D7FE               	bra	u7007
  9810  00F914  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
  9811  00F916  D7FC               	bra	u7007
  9812  00F918  D000               	nop2	
  9813  00F91A                     l224:
  9814  00F91A  AC80               	btfss	3968,6,c	;volatile
  9815  00F91C  D002               	goto	u5170
  9816  00F91E  B089               	btfsc	3977,0,c	;volatile
  9817  00F920  D7F4               	goto	l225
  9818  00F922                     u5170:
  9819                           
  9820                           ;main.c: 167: }
  9821                           ;main.c: 168: }
  9822                           ;main.c: 169: }
  9823                           ;main.c: 170: LATAbits.LATA0 = 0;
  9824  00F922  9089               	bcf	3977,0,c	;volatile
  9825                           
  9826                           ;main.c: 171: LATAbits.LATA1 = 1;
  9827  00F924  8289               	bsf	3977,1,c	;volatile
  9828                           
  9829                           ;main.c: 172: LATAbits.LATA2 = 0;
  9830  00F926  9489               	bcf	3977,2,c	;volatile
  9831                           
  9832                           ;main.c: 173: LATAbits.LATA3 = 0;
  9833  00F928  9689               	bcf	3977,3,c	;volatile
  9834                           
  9835                           ;main.c: 174: {
  9836                           ;main.c: 175: if (PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) {
  9837  00F92A  BA80               	btfsc	3968,5,c	;volatile
  9838  00F92C  A289               	btfss	3977,1,c	;volatile
  9839  00F92E  D01A               	goto	u5210
  9840                           
  9841                           ;main.c: 176: key = 4;
  9842  00F930  0E04               	movlw	4
  9843  00F932  0100               	movlb	0	; () banked
  9844  00F934  6FB4               	movwf	_key& (0+255),b
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;main.c: 177: guarda_numero_ingresado(key);
  9848  00F936  0100               	movlb	0	; () banked
  9849  00F938  51B4               	movf	_key& (0+255),w,b
  9850  00F93A  6E41               	movwf	??_ingreso_numero& (0+255),c
  9851  00F93C  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
  9852  00F93E  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9853  00F942  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9854  00F946  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
  9855                           
  9856                           ;main.c: 178: while (PORTAbits.RA5 == 1 && LATAbits.LATA1 == 1) {
  9857  00F94A  D008               	goto	l230
  9858  00F94C                     
  9859                           ;main.c: 179: _delay((unsigned long)((40)*(8000000/4000.0)));
  9860  00F94C  0E68               	movlw	104
  9861  00F94E  6E41               	movwf	??_ingreso_numero& (0+255),c
  9862  00F950  0EE4               	movlw	228
  9863  00F952                     u7017:
  9864  00F952  2EE8               	decfsz	wreg,f,c
  9865  00F954  D7FE               	bra	u7017
  9866  00F956  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
  9867  00F958  D7FC               	bra	u7017
  9868  00F95A  D000               	nop2	
  9869  00F95C                     l230:
  9870  00F95C  AA80               	btfss	3968,5,c	;volatile
  9871  00F95E  D002               	goto	u5210
  9872  00F960  B289               	btfsc	3977,1,c	;volatile
  9873  00F962  D7F4               	goto	l231
  9874  00F964                     u5210:
  9875                           
  9876                           ;main.c: 180: }
  9877                           ;main.c: 181: }
  9878                           ;main.c: 182: if (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) {
  9879  00F964  BE80               	btfsc	3968,7,c	;volatile
  9880  00F966  A289               	btfss	3977,1,c	;volatile
  9881  00F968  D01A               	goto	u5250
  9882                           
  9883                           ;main.c: 183: key = 5;
  9884  00F96A  0E05               	movlw	5
  9885  00F96C  0100               	movlb	0	; () banked
  9886  00F96E  6FB4               	movwf	_key& (0+255),b
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;main.c: 184: guarda_numero_ingresado(key);
  9890  00F970  0100               	movlb	0	; () banked
  9891  00F972  51B4               	movf	_key& (0+255),w,b
  9892  00F974  6E41               	movwf	??_ingreso_numero& (0+255),c
  9893  00F976  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
  9894  00F978  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9895  00F97C  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9896  00F980  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
  9897                           
  9898                           ;main.c: 185: while (PORTAbits.RA7 == 1 && LATAbits.LATA1 == 1) {
  9899  00F984  D008               	goto	l236
  9900  00F986                     
  9901                           ;main.c: 186: _delay((unsigned long)((40)*(8000000/4000.0)));
  9902  00F986  0E68               	movlw	104
  9903  00F988  6E41               	movwf	??_ingreso_numero& (0+255),c
  9904  00F98A  0EE4               	movlw	228
  9905  00F98C                     u7027:
  9906  00F98C  2EE8               	decfsz	wreg,f,c
  9907  00F98E  D7FE               	bra	u7027
  9908  00F990  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
  9909  00F992  D7FC               	bra	u7027
  9910  00F994  D000               	nop2	
  9911  00F996                     l236:
  9912  00F996  AE80               	btfss	3968,7,c	;volatile
  9913  00F998  D002               	goto	u5250
  9914  00F99A  B289               	btfsc	3977,1,c	;volatile
  9915  00F99C  D7F4               	goto	l237
  9916  00F99E                     u5250:
  9917                           
  9918                           ;main.c: 187: }
  9919                           ;main.c: 188: }
  9920                           ;main.c: 189: if (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1) {
  9921  00F99E  BC80               	btfsc	3968,6,c	;volatile
  9922  00F9A0  A289               	btfss	3977,1,c	;volatile
  9923  00F9A2  D01A               	goto	u5290
  9924                           
  9925                           ;main.c: 190: key = 6;
  9926  00F9A4  0E06               	movlw	6
  9927  00F9A6  0100               	movlb	0	; () banked
  9928  00F9A8  6FB4               	movwf	_key& (0+255),b
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;main.c: 191: guarda_numero_ingresado(key);
  9932  00F9AA  0100               	movlb	0	; () banked
  9933  00F9AC  51B4               	movf	_key& (0+255),w,b
  9934  00F9AE  6E41               	movwf	??_ingreso_numero& (0+255),c
  9935  00F9B0  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
  9936  00F9B2  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9937  00F9B6  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9938  00F9BA  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
  9939                           
  9940                           ;main.c: 192: while (PORTAbits.RA6 == 1 && LATAbits.LATA1 == 1) {
  9941  00F9BE  D008               	goto	l242
  9942  00F9C0                     
  9943                           ;main.c: 193: _delay((unsigned long)((40)*(8000000/4000.0)));
  9944  00F9C0  0E68               	movlw	104
  9945  00F9C2  6E41               	movwf	??_ingreso_numero& (0+255),c
  9946  00F9C4  0EE4               	movlw	228
  9947  00F9C6                     u7037:
  9948  00F9C6  2EE8               	decfsz	wreg,f,c
  9949  00F9C8  D7FE               	bra	u7037
  9950  00F9CA  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
  9951  00F9CC  D7FC               	bra	u7037
  9952  00F9CE  D000               	nop2	
  9953  00F9D0                     l242:
  9954  00F9D0  AC80               	btfss	3968,6,c	;volatile
  9955  00F9D2  D002               	goto	u5290
  9956  00F9D4  B289               	btfsc	3977,1,c	;volatile
  9957  00F9D6  D7F4               	goto	l243
  9958  00F9D8                     u5290:
  9959                           
  9960                           ;main.c: 194: }
  9961                           ;main.c: 195: }
  9962                           ;main.c: 196: }
  9963                           ;main.c: 197: LATAbits.LATA0 = 0;
  9964  00F9D8  9089               	bcf	3977,0,c	;volatile
  9965                           
  9966                           ;main.c: 198: LATAbits.LATA1 = 0;
  9967  00F9DA  9289               	bcf	3977,1,c	;volatile
  9968                           
  9969                           ;main.c: 199: LATAbits.LATA2 = 1;
  9970  00F9DC  8489               	bsf	3977,2,c	;volatile
  9971                           
  9972                           ;main.c: 200: LATAbits.LATA3 = 0;
  9973  00F9DE  9689               	bcf	3977,3,c	;volatile
  9974                           
  9975                           ;main.c: 201: {
  9976                           ;main.c: 202: if (PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) {
  9977  00F9E0  BA80               	btfsc	3968,5,c	;volatile
  9978  00F9E2  A489               	btfss	3977,2,c	;volatile
  9979  00F9E4  D01A               	goto	u5330
  9980                           
  9981                           ;main.c: 203: key = 7;
  9982  00F9E6  0E07               	movlw	7
  9983  00F9E8  0100               	movlb	0	; () banked
  9984  00F9EA  6FB4               	movwf	_key& (0+255),b
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;main.c: 204: guarda_numero_ingresado(key);
  9988  00F9EC  0100               	movlb	0	; () banked
  9989  00F9EE  51B4               	movf	_key& (0+255),w,b
  9990  00F9F0  6E41               	movwf	??_ingreso_numero& (0+255),c
  9991  00F9F2  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
  9992  00F9F4  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
  9993  00F9F8  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
  9994  00F9FC  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
  9995                           
  9996                           ;main.c: 205: while (PORTAbits.RA5 == 1 && LATAbits.LATA2 == 1) {
  9997  00FA00  D008               	goto	l248
  9998  00FA02                     
  9999                           ;main.c: 206: _delay((unsigned long)((40)*(8000000/4000.0)));
 10000  00FA02  0E68               	movlw	104
 10001  00FA04  6E41               	movwf	??_ingreso_numero& (0+255),c
 10002  00FA06  0EE4               	movlw	228
 10003  00FA08                     u7047:
 10004  00FA08  2EE8               	decfsz	wreg,f,c
 10005  00FA0A  D7FE               	bra	u7047
 10006  00FA0C  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
 10007  00FA0E  D7FC               	bra	u7047
 10008  00FA10  D000               	nop2	
 10009  00FA12                     l248:
 10010  00FA12  AA80               	btfss	3968,5,c	;volatile
 10011  00FA14  D002               	goto	u5330
 10012  00FA16  B489               	btfsc	3977,2,c	;volatile
 10013  00FA18  D7F4               	goto	l249
 10014  00FA1A                     u5330:
 10015                           
 10016                           ;main.c: 207: }
 10017                           ;main.c: 208: }
 10018                           ;main.c: 209: if (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) {
 10019  00FA1A  BE80               	btfsc	3968,7,c	;volatile
 10020  00FA1C  A489               	btfss	3977,2,c	;volatile
 10021  00FA1E  D01A               	goto	u5370
 10022                           
 10023                           ;main.c: 210: key = 8;
 10024  00FA20  0E08               	movlw	8
 10025  00FA22  0100               	movlb	0	; () banked
 10026  00FA24  6FB4               	movwf	_key& (0+255),b
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;main.c: 211: guarda_numero_ingresado(key);
 10030  00FA26  0100               	movlb	0	; () banked
 10031  00FA28  51B4               	movf	_key& (0+255),w,b
 10032  00FA2A  6E41               	movwf	??_ingreso_numero& (0+255),c
 10033  00FA2C  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
 10034  00FA2E  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
 10035  00FA32  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
 10036  00FA36  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
 10037                           
 10038                           ;main.c: 212: while (PORTAbits.RA7 == 1 && LATAbits.LATA2 == 1) {
 10039  00FA3A  D008               	goto	l254
 10040  00FA3C                     
 10041                           ;main.c: 213: _delay((unsigned long)((40)*(8000000/4000.0)));
 10042  00FA3C  0E68               	movlw	104
 10043  00FA3E  6E41               	movwf	??_ingreso_numero& (0+255),c
 10044  00FA40  0EE4               	movlw	228
 10045  00FA42                     u7057:
 10046  00FA42  2EE8               	decfsz	wreg,f,c
 10047  00FA44  D7FE               	bra	u7057
 10048  00FA46  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
 10049  00FA48  D7FC               	bra	u7057
 10050  00FA4A  D000               	nop2	
 10051  00FA4C                     l254:
 10052  00FA4C  AE80               	btfss	3968,7,c	;volatile
 10053  00FA4E  D002               	goto	u5370
 10054  00FA50  B489               	btfsc	3977,2,c	;volatile
 10055  00FA52  D7F4               	goto	l255
 10056  00FA54                     u5370:
 10057                           
 10058                           ;main.c: 214: }
 10059                           ;main.c: 215: }
 10060                           ;main.c: 216: if (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1) {
 10061  00FA54  BC80               	btfsc	3968,6,c	;volatile
 10062  00FA56  A489               	btfss	3977,2,c	;volatile
 10063  00FA58  D01A               	goto	u5410
 10064                           
 10065                           ;main.c: 217: key = 9;
 10066  00FA5A  0E09               	movlw	9
 10067  00FA5C  0100               	movlb	0	; () banked
 10068  00FA5E  6FB4               	movwf	_key& (0+255),b
 10069                           
 10070                           ; BSR set to: 0
 10071                           ;main.c: 218: guarda_numero_ingresado(key);
 10072  00FA60  0100               	movlb	0	; () banked
 10073  00FA62  51B4               	movf	_key& (0+255),w,b
 10074  00FA64  6E41               	movwf	??_ingreso_numero& (0+255),c
 10075  00FA66  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
 10076  00FA68  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
 10077  00FA6C  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
 10078  00FA70  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
 10079                           
 10080                           ;main.c: 219: while (PORTAbits.RA6 == 1 && LATAbits.LATA2 == 1) {
 10081  00FA74  D008               	goto	l260
 10082  00FA76                     
 10083                           ;main.c: 220: _delay((unsigned long)((40)*(8000000/4000.0)));
 10084  00FA76  0E68               	movlw	104
 10085  00FA78  6E41               	movwf	??_ingreso_numero& (0+255),c
 10086  00FA7A  0EE4               	movlw	228
 10087  00FA7C                     u7067:
 10088  00FA7C  2EE8               	decfsz	wreg,f,c
 10089  00FA7E  D7FE               	bra	u7067
 10090  00FA80  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
 10091  00FA82  D7FC               	bra	u7067
 10092  00FA84  D000               	nop2	
 10093  00FA86                     l260:
 10094  00FA86  AC80               	btfss	3968,6,c	;volatile
 10095  00FA88  D002               	goto	u5410
 10096  00FA8A  B489               	btfsc	3977,2,c	;volatile
 10097  00FA8C  D7F4               	goto	l261
 10098  00FA8E                     u5410:
 10099                           
 10100                           ;main.c: 221: }
 10101                           ;main.c: 222: }
 10102                           ;main.c: 223: }
 10103                           ;main.c: 224: LATAbits.LATA0 = 0;
 10104  00FA8E  9089               	bcf	3977,0,c	;volatile
 10105                           
 10106                           ;main.c: 225: LATAbits.LATA1 = 0;
 10107  00FA90  9289               	bcf	3977,1,c	;volatile
 10108                           
 10109                           ;main.c: 226: LATAbits.LATA2 = 0;
 10110  00FA92  9489               	bcf	3977,2,c	;volatile
 10111                           
 10112                           ;main.c: 227: LATAbits.LATA3 = 1;
 10113  00FA94  8689               	bsf	3977,3,c	;volatile
 10114                           
 10115                           ;main.c: 229: if (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) {
 10116  00FA96  AE80               	btfss	3968,7,c	;volatile
 10117  00FA98  0012               	return	
 10118  00FA9A  A689               	btfss	3977,3,c	;volatile
 10119  00FA9C  0012               	return	
 10120                           
 10121                           ;main.c: 230: key = 0;
 10122  00FA9E  0E00               	movlw	0
 10123  00FAA0  0100               	movlb	0	; () banked
 10124  00FAA2  6FB4               	movwf	_key& (0+255),b
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;main.c: 231: guarda_numero_ingresado(key);
 10128  00FAA4  0100               	movlb	0	; () banked
 10129  00FAA6  51B4               	movf	_key& (0+255),w,b
 10130  00FAA8  6E41               	movwf	??_ingreso_numero& (0+255),c
 10131  00FAAA  6A42               	clrf	(??_ingreso_numero+1)& (0+255),c
 10132  00FAAC  C041  F03F         	movff	??_ingreso_numero,guarda_numero_ingresado@num
 10133  00FAB0  C042  F040         	movff	??_ingreso_numero+1,guarda_numero_ingresado@num+1
 10134  00FAB4  ECFD  F06B         	call	_guarda_numero_ingresado	;wreg free
 10135                           
 10136                           ;main.c: 232: while (PORTAbits.RA7 == 1 && LATAbits.LATA3 == 1) {
 10137  00FAB8  D008               	goto	l266
 10138  00FABA                     
 10139                           ;main.c: 233: _delay((unsigned long)((40)*(8000000/4000.0)));
 10140  00FABA  0E68               	movlw	104
 10141  00FABC  6E41               	movwf	??_ingreso_numero& (0+255),c
 10142  00FABE  0EE4               	movlw	228
 10143  00FAC0                     u7077:
 10144  00FAC0  2EE8               	decfsz	wreg,f,c
 10145  00FAC2  D7FE               	bra	u7077
 10146  00FAC4  2E41               	decfsz	??_ingreso_numero& (0+255),f,c
 10147  00FAC6  D7FC               	bra	u7077
 10148  00FAC8  D000               	nop2	
 10149  00FACA                     l266:
 10150  00FACA  AE80               	btfss	3968,7,c	;volatile
 10151  00FACC  0012               	return	
 10152  00FACE  A689               	btfss	3977,3,c	;volatile
 10153  00FAD0  0012               	return	
 10154  00FAD2  D7F3               	goto	l267
 10155  00FAD4                     __end_of_ingreso_numero:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           intcon	equ	0xFF2
 10164                           postinc0	equ	0xFEE
 10165                           wreg	equ	0xFE8
 10166                           postinc1	equ	0xFE6
 10167                           postdec1	equ	0xFE5
 10168                           fsr1h	equ	0xFE2
 10169                           fsr1l	equ	0xFE1
 10170                           indf2	equ	0xFDF
 10171                           postinc2	equ	0xFDE
 10172                           postdec2	equ	0xFDD
 10173                           fsr2h	equ	0xFDA
 10174                           fsr2l	equ	0xFD9
 10175                           status	equ	0xFD8
 10176                           
 10177 ;; *************** function _guarda_numero_ingresado *****************
 10178 ;; Defined at:
 10179 ;;		line 129 in file "main.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;  num             2   62[COMRAM] PTR int 
 10182 ;;		 -> RAM(3775), 
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;		None
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      void 
 10187 ;; Registers used:
 10188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10194 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10197 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10198 ;;Total ram usage:        2 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    5
 10201 ;; This function calls:
 10202 ;;		_lcd_gotoxy
 10203 ;;		_lcd_putrs
 10204 ;;		_sprintf
 10205 ;; This function is called by:
 10206 ;;		_ingreso_numero
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           	psect	text48
 10211  00D7FA                     __ptext48:
 10212                           	opt stack 0
 10213  00D7FA                     _guarda_numero_ingresado:
 10214                           	opt stack 18
 10215                           
 10216                           ;main.c: 130: if (motivo_ingreso_de_numeros == 0) {
 10217                           
 10218                           ;incstack = 0
 10219  00D7FA  0100               	movlb	0	; () banked
 10220  00D7FC  51A2               	movf	_motivo_ingreso_de_numeros& (0+255),w,b
 10221  00D7FE  0100               	movlb	0	; () banked
 10222  00D800  11A3               	iorwf	(_motivo_ingreso_de_numeros+1)& (0+255),w,b
 10223  00D802  A4D8               	btfss	status,2,c
 10224  00D804  D02D               	goto	l206
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;main.c: 131: array_contrasenia_ingresada[numeros_ingresados] = num;
 10228  00D806  90D8               	bcf	status,0,c
 10229  00D808  0100               	movlb	0	; () banked
 10230  00D80A  35A4               	rlcf	_numeros_ingresados& (0+255),w,b
 10231  00D80C  6ED9               	movwf	fsr2l,c
 10232  00D80E  0100               	movlb	0	; () banked
 10233  00D810  35A5               	rlcf	(_numeros_ingresados+1)& (0+255),w,b
 10234  00D812  6EDA               	movwf	fsr2h,c
 10235  00D814  0E60               	movlw	low _array_contrasenia_ingresada
 10236  00D816  26D9               	addwf	fsr2l,f,c
 10237  00D818  0E00               	movlw	high _array_contrasenia_ingresada
 10238  00D81A  22DA               	addwfc	fsr2h,f,c
 10239  00D81C  C03F  FFDE         	movff	guarda_numero_ingresado@num,postinc2
 10240  00D820  C040  FFDD         	movff	guarda_numero_ingresado@num+1,postdec2
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;main.c: 132: lcd_gotoxy(numeros_ingresados + 1, 2);
 10244  00D824  0E02               	movlw	2
 10245  00D826  6E05               	movwf	lcd_gotoxy@y,c
 10246  00D828  0100               	movlb	0	; () banked
 10247  00D82A  29A4               	incf	_numeros_ingresados& (0+255),w,b
 10248  00D82C  ECB3  F067         	call	_lcd_gotoxy
 10249                           
 10250                           ;main.c: 133: sprintf(buffer2, "%01u", num);
 10251  00D830  0E14               	movlw	low _buffer2
 10252  00D832  6E22               	movwf	sprintf@sp,c
 10253  00D834  0E01               	movlw	high _buffer2
 10254  00D836  6E23               	movwf	sprintf@sp+1,c
 10255  00D838  0EF1               	movlw	low STR_14
 10256  00D83A  6E24               	movwf	sprintf@f,c
 10257  00D83C  0EFF               	movlw	high STR_14
 10258  00D83E  6E25               	movwf	sprintf@f+1,c
 10259  00D840  C03F  F026         	movff	guarda_numero_ingresado@num,?_sprintf+4
 10260  00D844  C040  F027         	movff	guarda_numero_ingresado@num+1,?_sprintf+5
 10261  00D848  EC6A  F07D         	call	_sprintf	;wreg free
 10262                           
 10263                           ;main.c: 134: lcd_putrs(buffer2);
 10264  00D84C  0E14               	movlw	low _buffer2
 10265  00D84E  6E09               	movwf	lcd_putrs@ptr,c
 10266  00D850  0E01               	movlw	high _buffer2
 10267  00D852  6E0A               	movwf	lcd_putrs@ptr+1,c
 10268  00D854  EC23  F069         	call	_lcd_putrs	;wreg free
 10269                           
 10270                           ;main.c: 135: numeros_ingresados++;
 10271  00D858  0100               	movlb	0	; () banked
 10272  00D85A  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
 10273  00D85C  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
 10274                           
 10275                           ;main.c: 136: } else {
 10276  00D85E  0012               	return	
 10277  00D860                     l206:
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;main.c: 137: numeros_para_fecha[numeros_ingresados] = num;
 10281                           
 10282                           ; BSR set to: 0
 10283  00D860  90D8               	bcf	status,0,c
 10284  00D862  0100               	movlb	0	; () banked
 10285  00D864  35A4               	rlcf	_numeros_ingresados& (0+255),w,b
 10286  00D866  6ED9               	movwf	fsr2l,c
 10287  00D868  0100               	movlb	0	; () banked
 10288  00D86A  35A5               	rlcf	(_numeros_ingresados+1)& (0+255),w,b
 10289  00D86C  6EDA               	movwf	fsr2h,c
 10290  00D86E  0E80               	movlw	low _numeros_para_fecha
 10291  00D870  26D9               	addwf	fsr2l,f,c
 10292  00D872  0E00               	movlw	high _numeros_para_fecha
 10293  00D874  22DA               	addwfc	fsr2h,f,c
 10294  00D876  C03F  FFDE         	movff	guarda_numero_ingresado@num,postinc2
 10295  00D87A  C040  FFDD         	movff	guarda_numero_ingresado@num+1,postdec2
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;main.c: 138: numeros_ingresados++;
 10299  00D87E  0100               	movlb	0	; () banked
 10300  00D880  4BA4               	infsnz	_numeros_ingresados& (0+255),f,b
 10301  00D882  2BA5               	incf	(_numeros_ingresados+1)& (0+255),f,b
 10302  00D884  0012               	return	
 10303  00D886                     __end_of_guarda_numero_ingresado:
 10304                           	opt stack 0
 10305                           tblptru	equ	0xFF8
 10306                           tblptrh	equ	0xFF7
 10307                           tblptrl	equ	0xFF6
 10308                           tablat	equ	0xFF5
 10309                           prodh	equ	0xFF4
 10310                           prodl	equ	0xFF3
 10311                           intcon	equ	0xFF2
 10312                           postinc0	equ	0xFEE
 10313                           wreg	equ	0xFE8
 10314                           postinc1	equ	0xFE6
 10315                           postdec1	equ	0xFE5
 10316                           fsr1h	equ	0xFE2
 10317                           fsr1l	equ	0xFE1
 10318                           indf2	equ	0xFDF
 10319                           postinc2	equ	0xFDE
 10320                           postdec2	equ	0xFDD
 10321                           fsr2h	equ	0xFDA
 10322                           fsr2l	equ	0xFD9
 10323                           status	equ	0xFD8
 10324                           
 10325 ;; *************** function _generar_reporte *****************
 10326 ;; Defined at:
 10327 ;;		line 302 in file "main.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;		None
 10332 ;; Return value:  Size  Location     Type
 10333 ;;                  1    wreg      void 
 10334 ;; Registers used:
 10335 ;;		None
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10345 ;;Total ram usage:        0 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_activar_alarma
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           	psect	text49
 10355  00D028                     __ptext49:
 10356                           	opt stack 0
 10357  00D028                     _generar_reporte:
 10358                           	opt stack 24
 10359                           
 10360                           ;main.c: 303: dia_ultimo_reporte = dia;
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;incstack = 0
 10364  00D028  C0CB  F09C         	movff	_dia,_dia_ultimo_reporte
 10365  00D02C  C0CC  F09D         	movff	_dia+1,_dia_ultimo_reporte+1
 10366                           
 10367                           ;main.c: 304: mes_ultimo_reporte = mes;
 10368  00D030  C0CF  F09A         	movff	_mes,_mes_ultimo_reporte
 10369  00D034  C0D0  F09B         	movff	_mes+1,_mes_ultimo_reporte+1
 10370                           
 10371                           ;main.c: 305: anio_ultimo_reporte = anio;
 10372  00D038  C0D1  F098         	movff	_anio,_anio_ultimo_reporte
 10373  00D03C  C0D2  F099         	movff	_anio+1,_anio_ultimo_reporte+1
 10374                           
 10375                           ;main.c: 306: hora_ultimo_reporte = hora;
 10376  00D040  C0C9  F096         	movff	_hora,_hora_ultimo_reporte
 10377  00D044  C0CA  F097         	movff	_hora+1,_hora_ultimo_reporte+1
 10378                           
 10379                           ;main.c: 307: minutos_ultimo_reporte = minuto;
 10380  00D048  C0C7  F094         	movff	_minuto,_minutos_ultimo_reporte
 10381  00D04C  C0C8  F095         	movff	_minuto+1,_minutos_ultimo_reporte+1
 10382                           
 10383                           ;main.c: 308: segundos_ultimo_reporte = segundo;
 10384  00D050  C0A6  F092         	movff	_segundo,_segundos_ultimo_reporte
 10385  00D054  C0A7  F093         	movff	_segundo+1,_segundos_ultimo_reporte+1
 10386  00D058  0012               	return		;funcret
 10387  00D05A                     __end_of_generar_reporte:
 10388                           	opt stack 0
 10389                           tblptru	equ	0xFF8
 10390                           tblptrh	equ	0xFF7
 10391                           tblptrl	equ	0xFF6
 10392                           tablat	equ	0xFF5
 10393                           prodh	equ	0xFF4
 10394                           prodl	equ	0xFF3
 10395                           intcon	equ	0xFF2
 10396                           postinc0	equ	0xFEE
 10397                           wreg	equ	0xFE8
 10398                           postinc1	equ	0xFE6
 10399                           postdec1	equ	0xFE5
 10400                           fsr1h	equ	0xFE2
 10401                           fsr1l	equ	0xFE1
 10402                           indf2	equ	0xFDF
 10403                           postinc2	equ	0xFDE
 10404                           postdec2	equ	0xFDD
 10405                           fsr2h	equ	0xFDA
 10406                           fsr2l	equ	0xFD9
 10407                           status	equ	0xFD8
 10408                           
 10409 ;; *************** function _selecciona_opcion_fecha_hora *****************
 10410 ;; Defined at:
 10411 ;;		line 454 in file "main.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;                  1    wreg      void 
 10418 ;; Registers used:
 10419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10429 ;;Total ram usage:        1 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; Hardware stack levels required when called:    5
 10432 ;; This function calls:
 10433 ;;		_lcd_gotoxy
 10434 ;;		_lcd_putrs
 10435 ;; This function is called by:
 10436 ;;		_ir_a_pantalla_edicion
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           	psect	text50
 10441  00D774                     __ptext50:
 10442                           	opt stack 0
 10443  00D774                     _selecciona_opcion_fecha_hora:
 10444                           	opt stack 21
 10445                           
 10446                           ;main.c: 456: if (boton_seleccionar == 2) {
 10447                           
 10448                           ;incstack = 0
 10449  00D774  0E02               	movlw	2
 10450  00D776  0100               	movlb	0	; () banked
 10451  00D778  1990               	xorwf	_boton_seleccionar& (0+255),w,b
 10452  00D77A  0100               	movlb	0	; () banked
 10453  00D77C  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
 10454  00D77E  A4D8               	btfss	status,2,c
 10455  00D780  D016               	goto	l348
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;main.c: 457: lcd_gotoxy(1, 1);
 10459  00D782  0E01               	movlw	1
 10460  00D784  6E05               	movwf	lcd_gotoxy@y,c
 10461  00D786  0E01               	movlw	1
 10462  00D788  ECB3  F067         	call	_lcd_gotoxy
 10463                           
 10464                           ;main.c: 458: lcd_putrs("Edt Date");
 10465  00D78C  0E74               	movlw	low STR_32
 10466  00D78E  6E09               	movwf	lcd_putrs@ptr,c
 10467  00D790  0EFF               	movlw	high STR_32
 10468  00D792  6E0A               	movwf	lcd_putrs@ptr+1,c
 10469  00D794  EC23  F069         	call	_lcd_putrs	;wreg free
 10470                           
 10471                           ;main.c: 459: lcd_gotoxy(1, 2);
 10472  00D798  0E02               	movlw	2
 10473  00D79A  6E05               	movwf	lcd_gotoxy@y,c
 10474  00D79C  0E01               	movlw	1
 10475  00D79E  ECB3  F067         	call	_lcd_gotoxy
 10476                           
 10477                           ;main.c: 460: lcd_putrs("Press A ");
 10478  00D7A2  0E62               	movlw	low STR_33
 10479  00D7A4  6E09               	movwf	lcd_putrs@ptr,c
 10480  00D7A6  0EFF               	movlw	high STR_33
 10481  00D7A8  6E0A               	movwf	lcd_putrs@ptr+1,c
 10482  00D7AA  EC23  F069         	call	_lcd_putrs	;wreg free
 10483  00D7AE                     l348:
 10484                           
 10485                           ;main.c: 461: }
 10486                           ;main.c: 462: if (boton_seleccionar == 3) {
 10487  00D7AE  0E03               	movlw	3
 10488  00D7B0  0100               	movlb	0	; () banked
 10489  00D7B2  1990               	xorwf	_boton_seleccionar& (0+255),w,b
 10490  00D7B4  0100               	movlb	0	; () banked
 10491  00D7B6  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
 10492  00D7B8  A4D8               	btfss	status,2,c
 10493  00D7BA  D016               	goto	l349
 10494                           
 10495                           ; BSR set to: 0
 10496                           ;main.c: 463: lcd_gotoxy(1, 1);
 10497  00D7BC  0E01               	movlw	1
 10498  00D7BE  6E05               	movwf	lcd_gotoxy@y,c
 10499  00D7C0  0E01               	movlw	1
 10500  00D7C2  ECB3  F067         	call	_lcd_gotoxy
 10501                           
 10502                           ;main.c: 464: lcd_putrs("Edt Hour");
 10503  00D7C6  0E7D               	movlw	low STR_34
 10504  00D7C8  6E09               	movwf	lcd_putrs@ptr,c
 10505  00D7CA  0EFF               	movlw	high STR_34
 10506  00D7CC  6E0A               	movwf	lcd_putrs@ptr+1,c
 10507  00D7CE  EC23  F069         	call	_lcd_putrs	;wreg free
 10508                           
 10509                           ;main.c: 465: lcd_gotoxy(1, 2);
 10510  00D7D2  0E02               	movlw	2
 10511  00D7D4  6E05               	movwf	lcd_gotoxy@y,c
 10512  00D7D6  0E01               	movlw	1
 10513  00D7D8  ECB3  F067         	call	_lcd_gotoxy
 10514                           
 10515                           ;main.c: 466: lcd_putrs("Press A ");
 10516  00D7DC  0E62               	movlw	low STR_33
 10517  00D7DE  6E09               	movwf	lcd_putrs@ptr,c
 10518  00D7E0  0EFF               	movlw	high STR_33
 10519  00D7E2  6E0A               	movwf	lcd_putrs@ptr+1,c
 10520  00D7E4  EC23  F069         	call	_lcd_putrs	;wreg free
 10521  00D7E8                     l349:
 10522                           
 10523                           ;main.c: 467: }
 10524                           ;main.c: 468: _delay((unsigned long)((60)*(8000000/4000.0)));
 10525  00D7E8  0E9C               	movlw	156
 10526  00D7EA  6E0B               	movwf	??_selecciona_opcion_fecha_hora& (0+255),c
 10527  00D7EC  0ED7               	movlw	215
 10528  00D7EE                     u7087:
 10529  00D7EE  2EE8               	decfsz	wreg,f,c
 10530  00D7F0  D7FE               	bra	u7087
 10531  00D7F2  2E0B               	decfsz	??_selecciona_opcion_fecha_hora& (0+255),f,c
 10532  00D7F4  D7FC               	bra	u7087
 10533  00D7F6  F000               	nop	
 10534  00D7F8  0012               	return		;funcret
 10535  00D7FA                     __end_of_selecciona_opcion_fecha_hora:
 10536                           	opt stack 0
 10537                           tblptru	equ	0xFF8
 10538                           tblptrh	equ	0xFF7
 10539                           tblptrl	equ	0xFF6
 10540                           tablat	equ	0xFF5
 10541                           prodh	equ	0xFF4
 10542                           prodl	equ	0xFF3
 10543                           intcon	equ	0xFF2
 10544                           postinc0	equ	0xFEE
 10545                           wreg	equ	0xFE8
 10546                           postinc1	equ	0xFE6
 10547                           postdec1	equ	0xFE5
 10548                           fsr1h	equ	0xFE2
 10549                           fsr1l	equ	0xFE1
 10550                           indf2	equ	0xFDF
 10551                           postinc2	equ	0xFDE
 10552                           postdec2	equ	0xFDD
 10553                           fsr2h	equ	0xFDA
 10554                           fsr2l	equ	0xFD9
 10555                           status	equ	0xFD8
 10556                           
 10557 ;; *************** function _imprimir_reporte *****************
 10558 ;; Defined at:
 10559 ;;		line 392 in file "main.c"
 10560 ;; Parameters:    Size  Location     Type
 10561 ;;		None
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;		None
 10564 ;; Return value:  Size  Location     Type
 10565 ;;                  1    wreg      void 
 10566 ;; Registers used:
 10567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/0
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10577 ;;Total ram usage:        0 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; Hardware stack levels required when called:    5
 10580 ;; This function calls:
 10581 ;;		_cambiar_opcion
 10582 ;;		_lcd_gotoxy
 10583 ;;		_lcd_putrs
 10584 ;;		_sprintf
 10585 ;; This function is called by:
 10586 ;;		_ir_a_pantalla_edicion
 10587 ;; This function uses a non-reentrant model
 10588 ;;
 10589                           
 10590                           	psect	text51
 10591  00DC7E                     __ptext51:
 10592                           	opt stack 0
 10593  00DC7E                     _imprimir_reporte:
 10594                           	opt stack 21
 10595                           
 10596                           ;main.c: 393: sprintf(buffer3, "Reporte %02i/%02i/%02i", dia_ultimo_reporte, mes_ultimo_
      +                          reporte, anio_ultimo_reporte);
 10597                           
 10598                           ;incstack = 0
 10599  00DC7E  0E00               	movlw	low _buffer3
 10600  00DC80  6E22               	movwf	sprintf@sp,c
 10601  00DC82  0E01               	movlw	high _buffer3
 10602  00DC84  6E23               	movwf	sprintf@sp+1,c
 10603  00DC86  0ECA               	movlw	low STR_26
 10604  00DC88  6E24               	movwf	sprintf@f,c
 10605  00DC8A  0EFE               	movlw	high STR_26
 10606  00DC8C  6E25               	movwf	sprintf@f+1,c
 10607  00DC8E  C09C  F026         	movff	_dia_ultimo_reporte,?_sprintf+4
 10608  00DC92  C09D  F027         	movff	_dia_ultimo_reporte+1,?_sprintf+5
 10609  00DC96  C09A  F028         	movff	_mes_ultimo_reporte,?_sprintf+6
 10610  00DC9A  C09B  F029         	movff	_mes_ultimo_reporte+1,?_sprintf+7
 10611  00DC9E  C098  F02A         	movff	_anio_ultimo_reporte,?_sprintf+8
 10612  00DCA2  C099  F02B         	movff	_anio_ultimo_reporte+1,?_sprintf+9
 10613  00DCA6  EC6A  F07D         	call	_sprintf	;wreg free
 10614                           
 10615                           ;main.c: 394: lcd_gotoxy(1, 1);
 10616  00DCAA  0E01               	movlw	1
 10617  00DCAC  6E05               	movwf	lcd_gotoxy@y,c
 10618  00DCAE  0E01               	movlw	1
 10619  00DCB0  ECB3  F067         	call	_lcd_gotoxy
 10620                           
 10621                           ;main.c: 395: lcd_putrs(buffer3);
 10622  00DCB4  0E00               	movlw	low _buffer3
 10623  00DCB6  6E09               	movwf	lcd_putrs@ptr,c
 10624  00DCB8  0E01               	movlw	high _buffer3
 10625  00DCBA  6E0A               	movwf	lcd_putrs@ptr+1,c
 10626  00DCBC  EC23  F069         	call	_lcd_putrs	;wreg free
 10627                           
 10628                           ;main.c: 397: sprintf(buffer3, "%s %02i:%02i:%02i", causa_reporte, hora_ultimo_reporte, 
      +                          minutos_ultimo_reporte, segundos_ultimo_reporte);
 10629  00DCC0  0E00               	movlw	low _buffer3
 10630  00DCC2  6E22               	movwf	sprintf@sp,c
 10631  00DCC4  0E01               	movlw	high _buffer3
 10632  00DCC6  6E23               	movwf	sprintf@sp+1,c
 10633  00DCC8  0EF6               	movlw	low STR_27
 10634  00DCCA  6E24               	movwf	sprintf@f,c
 10635  00DCCC  0EFE               	movlw	high STR_27
 10636  00DCCE  6E25               	movwf	sprintf@f+1,c
 10637  00DCD0  C0C5  F026         	movff	_causa_reporte,?_sprintf+4
 10638  00DCD4  C0C6  F027         	movff	_causa_reporte+1,?_sprintf+5
 10639  00DCD8  C096  F028         	movff	_hora_ultimo_reporte,?_sprintf+6
 10640  00DCDC  C097  F029         	movff	_hora_ultimo_reporte+1,?_sprintf+7
 10641  00DCE0  C094  F02A         	movff	_minutos_ultimo_reporte,?_sprintf+8
 10642  00DCE4  C095  F02B         	movff	_minutos_ultimo_reporte+1,?_sprintf+9
 10643  00DCE8  C092  F02C         	movff	_segundos_ultimo_reporte,?_sprintf+10
 10644  00DCEC  C093  F02D         	movff	_segundos_ultimo_reporte+1,?_sprintf+11
 10645  00DCF0  EC6A  F07D         	call	_sprintf	;wreg free
 10646                           
 10647                           ;main.c: 398: lcd_gotoxy(1, 2);
 10648  00DCF4  0E02               	movlw	2
 10649  00DCF6  6E05               	movwf	lcd_gotoxy@y,c
 10650  00DCF8  0E01               	movlw	1
 10651  00DCFA  ECB3  F067         	call	_lcd_gotoxy
 10652                           
 10653                           ;main.c: 399: lcd_putrs(buffer3);
 10654  00DCFE  0E00               	movlw	low _buffer3
 10655  00DD00  6E09               	movwf	lcd_putrs@ptr,c
 10656  00DD02  0E01               	movlw	high _buffer3
 10657  00DD04  6E0A               	movwf	lcd_putrs@ptr+1,c
 10658  00DD06  EC23  F069         	call	_lcd_putrs	;wreg free
 10659                           
 10660                           ;main.c: 401: while(boton_seleccionar==4){
 10661  00DD0A  D002               	goto	l327
 10662  00DD0C                     
 10663                           ;main.c: 402: cambiar_opcion();
 10664  00DD0C  ECA6  F06D         	call	_cambiar_opcion	;wreg free
 10665  00DD10                     l327:
 10666  00DD10  0E04               	movlw	4
 10667  00DD12  0100               	movlb	0	; () banked
 10668  00DD14  1990               	xorwf	_boton_seleccionar& (0+255),w,b
 10669  00DD16  0100               	movlb	0	; () banked
 10670  00DD18  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
 10671  00DD1A  A4D8               	btfss	status,2,c
 10672  00DD1C  0012               	return	
 10673  00DD1E  D7F6               	goto	l328
 10674  00DD20                     __end_of_imprimir_reporte:
 10675                           	opt stack 0
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           postinc0	equ	0xFEE
 10684                           wreg	equ	0xFE8
 10685                           postinc1	equ	0xFE6
 10686                           postdec1	equ	0xFE5
 10687                           fsr1h	equ	0xFE2
 10688                           fsr1l	equ	0xFE1
 10689                           indf2	equ	0xFDF
 10690                           postinc2	equ	0xFDE
 10691                           postdec2	equ	0xFDD
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696 ;; *************** function _sprintf *****************
 10697 ;; Defined at:
 10698 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;  sp              2   33[COMRAM] PTR unsigned char 
 10701 ;;		 -> buffer3(20), buffer2(20), 
 10702 ;;  f               2   35[COMRAM] PTR const unsigned char 
 10703 ;;		 -> STR_27(18), STR_26(23), STR_14(5), STR_9(15), 
 10704 ;;		 -> STR_8(15), 
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;  tmpval          4    0        struct .
 10707 ;;  width           2   60[COMRAM] int 
 10708 ;;  val             2   56[COMRAM] unsigned int 
 10709 ;;  len             2   54[COMRAM] unsigned int 
 10710 ;;  ap              2   52[COMRAM] PTR void [1]
 10711 ;;		 -> ?_sprintf(2), 
 10712 ;;  cp              2   50[COMRAM] PTR const unsigned char 
 10713 ;;		 -> STR_43(7), STR_40(8), STR_25(8), STR_24(8), 
 10714 ;;		 -> STR_23(8), STR_22(8), RAM(3775), STR_7(6), 
 10715 ;;  c               1   59[COMRAM] char 
 10716 ;;  flag            1   58[COMRAM] unsigned char 
 10717 ;;  prec            1   49[COMRAM] char 
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  2   33[COMRAM] int 
 10720 ;; Registers used:
 10721 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10727 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10728 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10729 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10730 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10731 ;;Total ram usage:       29 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    1
 10734 ;; This function calls:
 10735 ;;		___lwdiv
 10736 ;;		___lwmod
 10737 ;;		___wmul
 10738 ;;		_isdigit
 10739 ;; This function is called by:
 10740 ;;		_setDiaMesAnio
 10741 ;;		_setHoraMinutoSegundo
 10742 ;;		_guarda_numero_ingresado
 10743 ;;		_imprimir_reporte
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           	psect	text52
 10748  00FAD4                     __ptext52:
 10749                           	opt stack 0
 10750  00FAD4                     _sprintf:
 10751                           	opt stack 26
 10752                           
 10753                           ;doprnt.c: 494: va_list ap;
 10754                           ;doprnt.c: 499: signed char c;
 10755                           ;doprnt.c: 501: int width;
 10756                           ;doprnt.c: 506: signed char prec;
 10757                           ;doprnt.c: 508: unsigned char flag;
 10758                           ;doprnt.c: 523: union {
 10759                           ;doprnt.c: 524: unsigned long vd;
 10760                           ;doprnt.c: 525: double integ;
 10761                           ;doprnt.c: 526: } tmpval;
 10762                           ;doprnt.c: 528: unsigned int val;
 10763                           ;doprnt.c: 529: unsigned len;
 10764                           ;doprnt.c: 530: const char * cp;
 10765                           ;doprnt.c: 533: *ap = __va_start();
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;incstack = 0
 10769  00FAD4  0E26               	movlw	low (?_sprintf+4)
 10770  00FAD6  6E35               	movwf	sprintf@ap,c
 10771  00FAD8  0E00               	movlw	high (?_sprintf+4)
 10772  00FADA  6E36               	movwf	sprintf@ap+1,c
 10773                           
 10774                           ;doprnt.c: 536: while(c = *f++) {
 10775  00FADC  D1BF               	goto	u4740
 10776  00FADE                     
 10777                           ;doprnt.c: 538: if(c != '%')
 10778  00FADE  0E25               	movlw	37
 10779  00FAE0  183C               	xorwf	sprintf@c,w,c
 10780  00FAE2  B4D8               	btfsc	status,2,c
 10781  00FAE4  D009               	goto	l565
 10782                           
 10783                           ;doprnt.c: 540: {
 10784                           ;doprnt.c: 541: ((*sp++ = (c)));
 10785  00FAE6  C022  FFD9         	movff	sprintf@sp,fsr2l
 10786  00FAEA  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 10787  00FAEE  C03C  FFDF         	movff	sprintf@c,indf2
 10788  00FAF2  4A22               	infsnz	sprintf@sp,f,c
 10789  00FAF4  2A23               	incf	sprintf@sp+1,f,c
 10790                           
 10791                           ;doprnt.c: 542: continue;
 10792  00FAF6  D1B2               	goto	u4740
 10793  00FAF8                     l565:
 10794                           
 10795                           ;doprnt.c: 543: }
 10796                           ;doprnt.c: 546: width = 0;
 10797  00FAF8  0E00               	movlw	0
 10798  00FAFA  6E3E               	movwf	sprintf@width+1,c
 10799  00FAFC  0E00               	movlw	0
 10800  00FAFE  6E3D               	movwf	sprintf@width,c
 10801                           
 10802                           ;doprnt.c: 548: flag = 0;
 10803  00FB00  0E00               	movlw	0
 10804  00FB02  6E3B               	movwf	sprintf@flag,c
 10805                           
 10806                           ;doprnt.c: 551: switch(*f) {
 10807                           
 10808                           ;doprnt.c: 550: for(;;) {
 10809  00FB04  D003               	goto	l567
 10810  00FB06                     
 10811                           ;doprnt.c: 580: flag |= 0x04;
 10812  00FB06  843B               	bsf	sprintf@flag,2,c
 10813                           
 10814                           ;doprnt.c: 581: f++;
 10815  00FB08  4A24               	infsnz	sprintf@f,f,c
 10816  00FB0A  2A25               	incf	sprintf@f+1,f,c
 10817  00FB0C                     l567:
 10818  00FB0C  C024  FFF6         	movff	sprintf@f,tblptrl
 10819  00FB10  C025  FFF7         	movff	sprintf@f+1,tblptrh
 10820  00FB14                     	if	0	;tblptru may be non-zero
 10821  00FB14                     	endif
 10822  00FB14                     	if	0	;tblptru may be non-zero
 10823  00FB14                     	endif
 10824  00FB14  0008               	tblrd		*
 10825  00FB16  50F5               	movf	tablat,w,c
 10826                           
 10827                           ; Switch size 1, requested type "space"
 10828                           ; Number of cases is 1, Range of values is 48 to 48
 10829                           ; switch strategies available:
 10830                           ; Name         Instructions Cycles
 10831                           ; simple_byte            4     3 (average)
 10832                           ;	Chosen strategy is simple_byte
 10833  00FB18  0A30               	xorlw	48	; case 48
 10834  00FB1A  B4D8               	btfsc	status,2,c
 10835  00FB1C  D7F4               	goto	l568
 10836                           
 10837                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10838                           
 10839                           ;doprnt.c: 586: }
 10840                           
 10841                           ;doprnt.c: 585: break;
 10842  00FB1E  C024  FFF6         	movff	sprintf@f,tblptrl
 10843  00FB22  C025  FFF7         	movff	sprintf@f+1,tblptrh
 10844  00FB26                     	if	0	;tblptru may be non-zero
 10845  00FB26                     	endif
 10846  00FB26                     	if	0	;tblptru may be non-zero
 10847  00FB26                     	endif
 10848  00FB26  0008               	tblrd		*
 10849  00FB28  50F5               	movf	tablat,w,c
 10850  00FB2A  ECA4  F067         	call	_isdigit
 10851  00FB2E  A0D8               	btfss	status,0,c
 10852  00FB30  D0AC               	goto	l575
 10853                           
 10854                           ;doprnt.c: 598: width = 0;
 10855  00FB32  0E00               	movlw	0
 10856  00FB34  6E3E               	movwf	sprintf@width+1,c
 10857  00FB36  0E00               	movlw	0
 10858  00FB38  6E3D               	movwf	sprintf@width,c
 10859  00FB3A                     
 10860                           ;doprnt.c: 600: width *= 10;
 10861  00FB3A  C03D  F01C         	movff	sprintf@width,___wmul@multiplier
 10862  00FB3E  C03E  F01D         	movff	sprintf@width+1,___wmul@multiplier+1
 10863  00FB42  0E00               	movlw	0
 10864  00FB44  6E1F               	movwf	___wmul@multiplicand+1,c
 10865  00FB46  0E0A               	movlw	10
 10866  00FB48  6E1E               	movwf	___wmul@multiplicand,c
 10867  00FB4A  ECE8  F067         	call	___wmul	;wreg free
 10868  00FB4E  C01C  F03D         	movff	?___wmul,sprintf@width
 10869  00FB52  C01D  F03E         	movff	?___wmul+1,sprintf@width+1
 10870                           
 10871                           ;doprnt.c: 601: width += *f++ - '0';
 10872  00FB56  0ED0               	movlw	208
 10873  00FB58  6E2E               	movwf	??_sprintf& (0+255),c
 10874  00FB5A  0EFF               	movlw	255
 10875  00FB5C  6E2F               	movwf	(??_sprintf+1)& (0+255),c
 10876  00FB5E  C024  FFF6         	movff	sprintf@f,tblptrl
 10877  00FB62  C025  FFF7         	movff	sprintf@f+1,tblptrh
 10878  00FB66                     	if	0	;tblptru may be non-zero
 10879  00FB66                     	endif
 10880  00FB66                     	if	0	;tblptru may be non-zero
 10881  00FB66                     	endif
 10882  00FB66  0008               	tblrd		*
 10883  00FB68  50F5               	movf	tablat,w,c
 10884  00FB6A  6E30               	movwf	(??_sprintf+2)& (0+255),c
 10885  00FB6C  6A31               	clrf	(??_sprintf+3)& (0+255),c
 10886  00FB6E  502E               	movf	??_sprintf,w,c
 10887  00FB70  2630               	addwf	??_sprintf+2,f,c
 10888  00FB72  502F               	movf	??_sprintf+1,w,c
 10889  00FB74  2231               	addwfc	??_sprintf+3,f,c
 10890  00FB76  5030               	movf	??_sprintf+2,w,c
 10891  00FB78  263D               	addwf	sprintf@width,f,c
 10892  00FB7A  5031               	movf	??_sprintf+3,w,c
 10893  00FB7C  223E               	addwfc	sprintf@width+1,f,c
 10894  00FB7E  4A24               	infsnz	sprintf@f,f,c
 10895  00FB80  2A25               	incf	sprintf@f+1,f,c
 10896                           
 10897                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10898  00FB82  C024  FFF6         	movff	sprintf@f,tblptrl
 10899  00FB86  C025  FFF7         	movff	sprintf@f+1,tblptrh
 10900  00FB8A                     	if	0	;tblptru may be non-zero
 10901  00FB8A                     	endif
 10902  00FB8A                     	if	0	;tblptru may be non-zero
 10903  00FB8A                     	endif
 10904  00FB8A  0008               	tblrd		*
 10905  00FB8C  50F5               	movf	tablat,w,c
 10906  00FB8E  ECA4  F067         	call	_isdigit
 10907  00FB92  A0D8               	btfss	status,0,c
 10908  00FB94  D07A               	goto	l575
 10909  00FB96  D7D1               	goto	l573
 10910  00FB98                     
 10911                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10912  00FB98  C035  FFD9         	movff	sprintf@ap,fsr2l
 10913  00FB9C  C036  FFDA         	movff	sprintf@ap+1,fsr2h
 10914  00FBA0  CFDE F033          	movff	postinc2,sprintf@cp
 10915  00FBA4  CFDD F034          	movff	postdec2,sprintf@cp+1
 10916  00FBA8  0E02               	movlw	2
 10917  00FBAA  2635               	addwf	sprintf@ap,f,c
 10918  00FBAC  0E00               	movlw	0
 10919  00FBAE  2236               	addwfc	sprintf@ap+1,f,c
 10920                           
 10921                           ;doprnt.c: 740: if(!cp)
 10922  00FBB0  5033               	movf	sprintf@cp,w,c
 10923  00FBB2  1034               	iorwf	sprintf@cp+1,w,c
 10924  00FBB4  A4D8               	btfss	status,2,c
 10925  00FBB6  D004               	goto	l582
 10926                           
 10927                           ;doprnt.c: 741: cp = "(null)";
 10928  00FBB8  0EBF               	movlw	low STR_43
 10929  00FBBA  6E33               	movwf	sprintf@cp,c
 10930  00FBBC  0EFF               	movlw	high STR_43
 10931  00FBBE  6E34               	movwf	sprintf@cp+1,c
 10932  00FBC0                     l582:
 10933                           
 10934                           ;doprnt.c: 745: len = 0;
 10935  00FBC0  0E00               	movlw	0
 10936  00FBC2  6E38               	movwf	sprintf@len+1,c
 10937  00FBC4  0E00               	movlw	0
 10938  00FBC6  6E37               	movwf	sprintf@len,c
 10939                           
 10940                           ;doprnt.c: 746: while(cp[len])
 10941  00FBC8  D002               	goto	l583
 10942  00FBCA                     
 10943                           ;doprnt.c: 747: len++;
 10944  00FBCA  4A37               	infsnz	sprintf@len,f,c
 10945  00FBCC  2A38               	incf	sprintf@len+1,f,c
 10946  00FBCE                     l583:
 10947  00FBCE  5037               	movf	sprintf@len,w,c
 10948  00FBD0  2433               	addwf	sprintf@cp,w,c
 10949  00FBD2  6E2E               	movwf	??_sprintf& (0+255),c
 10950  00FBD4  5038               	movf	sprintf@len+1,w,c
 10951  00FBD6  2034               	addwfc	sprintf@cp+1,w,c
 10952  00FBD8  6E2F               	movwf	(??_sprintf+1)& (0+255),c
 10953  00FBDA  C02E  FFF6         	movff	??_sprintf,tblptrl
 10954  00FBDE  C02F  FFF7         	movff	??_sprintf+1,tblptrh
 10955  00FBE2  6AF8               	clrf	tblptru,c
 10956  00FBE4  0E0E               	movlw	(high __ramtop+-1)
 10957  00FBE6  64F7               	cpfsgt	tblptrh,c
 10958  00FBE8  D003               	bra	u4537
 10959  00FBEA  0008               	tblrd		*
 10960  00FBEC  50F5               	movf	tablat,w,c
 10961  00FBEE  D005               	bra	u4530
 10962  00FBF0                     u4537:
 10963  00FBF0  CFF6 FFE9          	movff	tblptrl,fsr0l
 10964  00FBF4  CFF7 FFEA          	movff	tblptrh,fsr0h
 10965  00FBF8  50EF               	movf	indf0,w,c
 10966  00FBFA                     u4530:
 10967  00FBFA  0900               	iorlw	0
 10968  00FBFC  A4D8               	btfss	status,2,c
 10969  00FBFE  D7E5               	goto	l584
 10970                           
 10971                           ;doprnt.c: 757: if(width > len)
 10972  00FC00  503D               	movf	sprintf@width,w,c
 10973  00FC02  5C37               	subwf	sprintf@len,w,c
 10974  00FC04  503E               	movf	sprintf@width+1,w,c
 10975  00FC06  5838               	subwfb	sprintf@len+1,w,c
 10976  00FC08  B0D8               	btfsc	status,0,c
 10977  00FC0A  D005               	goto	l586
 10978                           
 10979                           ;doprnt.c: 758: width -= len;
 10980  00FC0C  5037               	movf	sprintf@len,w,c
 10981  00FC0E  5E3D               	subwf	sprintf@width,f,c
 10982  00FC10  5038               	movf	sprintf@len+1,w,c
 10983  00FC12  5A3E               	subwfb	sprintf@width+1,f,c
 10984  00FC14  D00D               	goto	l588
 10985  00FC16                     l586:
 10986                           
 10987                           ;doprnt.c: 759: else
 10988                           ;doprnt.c: 760: width = 0;
 10989  00FC16  0E00               	movlw	0
 10990  00FC18  6E3E               	movwf	sprintf@width+1,c
 10991  00FC1A  0E00               	movlw	0
 10992  00FC1C  6E3D               	movwf	sprintf@width,c
 10993                           
 10994                           ;doprnt.c: 764: while(width--)
 10995  00FC1E  D008               	goto	l588
 10996  00FC20                     l4227:
 10997                           
 10998                           ;doprnt.c: 765: ((*sp++ = (' ')));
 10999  00FC20  C022  FFD9         	movff	sprintf@sp,fsr2l
 11000  00FC24  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11001  00FC28  0E20               	movlw	32
 11002  00FC2A  6EDF               	movwf	indf2,c
 11003  00FC2C  4A22               	infsnz	sprintf@sp,f,c
 11004  00FC2E  2A23               	incf	sprintf@sp+1,f,c
 11005  00FC30                     l588:
 11006  00FC30  063D               	decf	sprintf@width,f,c
 11007  00FC32  A0D8               	btfss	status,0,c
 11008  00FC34  063E               	decf	sprintf@width+1,f,c
 11009  00FC36  283D               	incf	sprintf@width,w,c
 11010  00FC38  E1F3               	bnz	l4227
 11011  00FC3A  283E               	incf	sprintf@width+1,w,c
 11012  00FC3C  B4D8               	btfsc	status,2,c
 11013  00FC3E  D01A               	goto	l591
 11014  00FC40  D7EF               	goto	l589
 11015  00FC42                     l4233:
 11016                           
 11017                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 11018  00FC42  C033  FFF6         	movff	sprintf@cp,tblptrl
 11019  00FC46  C034  FFF7         	movff	sprintf@cp+1,tblptrh
 11020  00FC4A  6AF8               	clrf	tblptru,c
 11021  00FC4C  C022  FFD9         	movff	sprintf@sp,fsr2l
 11022  00FC50  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11023  00FC54  0E0E               	movlw	(high __ramtop+-1)
 11024  00FC56  64F7               	cpfsgt	tblptrh,c
 11025  00FC58  D003               	bra	u4577
 11026  00FC5A  0008               	tblrd		*
 11027  00FC5C  50F5               	movf	tablat,w,c
 11028  00FC5E  D005               	bra	u4570
 11029  00FC60                     u4577:
 11030  00FC60  CFF6 FFE9          	movff	tblptrl,fsr0l
 11031  00FC64  CFF7 FFEA          	movff	tblptrh,fsr0h
 11032  00FC68  50EF               	movf	indf0,w,c
 11033  00FC6A                     u4570:
 11034  00FC6A  6EDF               	movwf	indf2,c
 11035  00FC6C  4A33               	infsnz	sprintf@cp,f,c
 11036  00FC6E  2A34               	incf	sprintf@cp+1,f,c
 11037  00FC70  4A22               	infsnz	sprintf@sp,f,c
 11038  00FC72  2A23               	incf	sprintf@sp+1,f,c
 11039  00FC74                     l591:
 11040  00FC74  0637               	decf	sprintf@len,f,c
 11041  00FC76  A0D8               	btfss	status,0,c
 11042  00FC78  0638               	decf	sprintf@len+1,f,c
 11043  00FC7A  2837               	incf	sprintf@len,w,c
 11044  00FC7C  E1E2               	bnz	l4233
 11045  00FC7E  2838               	incf	sprintf@len+1,w,c
 11046  00FC80  B4D8               	btfsc	status,2,c
 11047  00FC82  D0EC               	goto	u4740
 11048  00FC84  D7DE               	goto	l592
 11049  00FC86                     
 11050                           ;doprnt.c: 818: flag |= 0x40;
 11051  00FC86  8C3B               	bsf	sprintf@flag,6,c
 11052                           
 11053                           ;doprnt.c: 822: }
 11054                           
 11055                           ;doprnt.c: 819: break;
 11056  00FC88  D01A               	goto	l580
 11057  00FC8A                     l575:
 11058  00FC8A  C024  FFF6         	movff	sprintf@f,tblptrl
 11059  00FC8E  C025  FFF7         	movff	sprintf@f+1,tblptrh
 11060  00FC92  4A24               	infsnz	sprintf@f,f,c
 11061  00FC94  2A25               	incf	sprintf@f+1,f,c
 11062  00FC96                     	if	0	;tblptru may be non-zero
 11063  00FC96                     	endif
 11064  00FC96                     	if	0	;tblptru may be non-zero
 11065  00FC96                     	endif
 11066  00FC96  0008               	tblrd		*
 11067  00FC98  CFF5 F03C          	movff	tablat,sprintf@c
 11068  00FC9C  503C               	movf	sprintf@c,w,c
 11069                           
 11070                           ; Switch size 1, requested type "space"
 11071                           ; Number of cases is 5, Range of values is 0 to 117
 11072                           ; switch strategies available:
 11073                           ; Name         Instructions Cycles
 11074                           ; simple_byte           16     9 (average)
 11075                           ;	Chosen strategy is simple_byte
 11076  00FC9E  0A00               	xorlw	0	; case 0
 11077  00FCA0  B4D8               	btfsc	status,2,c
 11078  00FCA2  D0E8               	goto	u4750
 11079  00FCA4  0A64               	xorlw	100	; case 100
 11080  00FCA6  B4D8               	btfsc	status,2,c
 11081  00FCA8  D00A               	goto	l580
 11082  00FCAA  0A0D               	xorlw	13	; case 105
 11083  00FCAC  B4D8               	btfsc	status,2,c
 11084  00FCAE  D007               	goto	l580
 11085  00FCB0  0A1A               	xorlw	26	; case 115
 11086  00FCB2  B4D8               	btfsc	status,2,c
 11087  00FCB4  D771               	goto	l581
 11088  00FCB6  0A06               	xorlw	6	; case 117
 11089  00FCB8  B4D8               	btfsc	status,2,c
 11090  00FCBA  D7E5               	goto	l595
 11091  00FCBC  D0CF               	goto	u4740
 11092  00FCBE                     l580:
 11093                           
 11094                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 11095  00FCBE  BC3B               	btfsc	sprintf@flag,6,c
 11096  00FCC0  D015               	goto	l596
 11097                           
 11098                           ;doprnt.c: 1253: {
 11099                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11100  00FCC2  C035  FFD9         	movff	sprintf@ap,fsr2l
 11101  00FCC6  C036  FFDA         	movff	sprintf@ap+1,fsr2h
 11102  00FCCA  CFDE F039          	movff	postinc2,sprintf@val
 11103  00FCCE  CFDD F03A          	movff	postdec2,sprintf@val+1
 11104  00FCD2  0E02               	movlw	2
 11105  00FCD4  2635               	addwf	sprintf@ap,f,c
 11106  00FCD6  0E00               	movlw	0
 11107  00FCD8  2236               	addwfc	sprintf@ap+1,f,c
 11108                           
 11109                           ;doprnt.c: 1261: if((int)val < 0) {
 11110  00FCDA  AE3A               	btfss	sprintf@val+1,7,c
 11111  00FCDC  D013               	goto	l598
 11112                           
 11113                           ;doprnt.c: 1262: flag |= 0x03;
 11114  00FCDE  0E03               	movlw	3
 11115  00FCE0  123B               	iorwf	sprintf@flag,f,c
 11116                           
 11117                           ;doprnt.c: 1263: val = -val;
 11118  00FCE2  6C39               	negf	sprintf@val,c
 11119  00FCE4  1E3A               	comf	sprintf@val+1,f,c
 11120  00FCE6  B0D8               	btfsc	status,0,c
 11121  00FCE8  2A3A               	incf	sprintf@val+1,f,c
 11122                           
 11123                           ;doprnt.c: 1264: }
 11124                           ;doprnt.c: 1266: }
 11125  00FCEA  D00C               	goto	l598
 11126  00FCEC                     l596:
 11127                           
 11128                           ;doprnt.c: 1268: else
 11129                           ;doprnt.c: 1273: {
 11130                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11131  00FCEC  C035  FFD9         	movff	sprintf@ap,fsr2l
 11132  00FCF0  C036  FFDA         	movff	sprintf@ap+1,fsr2h
 11133  00FCF4  CFDE F039          	movff	postinc2,sprintf@val
 11134  00FCF8  CFDD F03A          	movff	postdec2,sprintf@val+1
 11135  00FCFC  0E02               	movlw	2
 11136  00FCFE  2635               	addwf	sprintf@ap,f,c
 11137  00FD00  0E00               	movlw	0
 11138  00FD02  2236               	addwfc	sprintf@ap+1,f,c
 11139  00FD04                     l598:
 11140                           
 11141                           ;doprnt.c: 1287: }
 11142                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11143  00FD04  0E01               	movlw	1
 11144  00FD06  6E3C               	movwf	sprintf@c,c
 11145  00FD08                     l4263:
 11146  00FD08  0E05               	movlw	5
 11147  00FD0A  183C               	xorwf	sprintf@c,w,c
 11148  00FD0C  B4D8               	btfsc	status,2,c
 11149  00FD0E  D012               	goto	u4630
 11150                           
 11151                           ;doprnt.c: 1306: if(val < dpowers[c])
 11152  00FD10  503C               	movf	sprintf@c,w,c
 11153  00FD12  0D02               	mullw	2
 11154  00FD14  0E83               	movlw	low _dpowers
 11155  00FD16  24F3               	addwf	prodl,w,c
 11156  00FD18  6EF6               	movwf	tblptrl,c
 11157  00FD1A  0EFE               	movlw	high _dpowers
 11158  00FD1C  20F4               	addwfc	prodh,w,c
 11159  00FD1E  6EF7               	movwf	tblptrh,c
 11160  00FD20                     	if	0	;There are less than 3 active tblptr bytes
 11161  00FD20                     	endif
 11162  00FD20  0009               	tblrd		*+
 11163  00FD22  50F5               	movf	tablat,w,c
 11164  00FD24  5C39               	subwf	sprintf@val,w,c
 11165  00FD26  0009               	tblrd		*+
 11166  00FD28  50F5               	movf	tablat,w,c
 11167  00FD2A  583A               	subwfb	sprintf@val+1,w,c
 11168  00FD2C  A0D8               	btfss	status,0,c
 11169  00FD2E  D002               	goto	u4630
 11170                           
 11171                           ;doprnt.c: 1307: break;
 11172  00FD30  2A3C               	incf	sprintf@c,f,c
 11173  00FD32  D7EA               	goto	l4263
 11174  00FD34                     u4630:
 11175                           
 11176                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11177  00FD34  503D               	movf	sprintf@width,w,c
 11178  00FD36  103E               	iorwf	sprintf@width+1,w,c
 11179  00FD38  B4D8               	btfsc	status,2,c
 11180  00FD3A  D009               	goto	l602
 11181  00FD3C  C03B  F02E         	movff	sprintf@flag,??_sprintf
 11182  00FD40  0E03               	movlw	3
 11183  00FD42  162E               	andwf	??_sprintf,f,c
 11184  00FD44  B4D8               	btfsc	status,2,c
 11185  00FD46  D003               	goto	l602
 11186                           
 11187                           ;doprnt.c: 1346: width--;
 11188  00FD48  063D               	decf	sprintf@width,f,c
 11189  00FD4A  A0D8               	btfss	status,0,c
 11190  00FD4C  063E               	decf	sprintf@width+1,f,c
 11191  00FD4E                     l602:
 11192                           
 11193                           ;doprnt.c: 1381: if(width > c)
 11194  00FD4E  0E80               	movlw	128
 11195  00FD50  BE3C               	btfsc	sprintf@c,7,c
 11196  00FD52  0E7F               	movlw	127
 11197  00FD54  6E2E               	movwf	??_sprintf& (0+255),c
 11198  00FD56  503D               	movf	sprintf@width,w,c
 11199  00FD58  5C3C               	subwf	sprintf@c,w,c
 11200  00FD5A  503E               	movf	sprintf@width+1,w,c
 11201  00FD5C  0A80               	xorlw	128
 11202  00FD5E  582E               	subwfb	??_sprintf& (0+255),w,c
 11203  00FD60  B0D8               	btfsc	status,0,c
 11204  00FD62  D007               	goto	l603
 11205                           
 11206                           ;doprnt.c: 1382: width -= c;
 11207  00FD64  503C               	movf	sprintf@c,w,c
 11208  00FD66  5E3D               	subwf	sprintf@width,f,c
 11209  00FD68  0E00               	movlw	0
 11210  00FD6A  BE3C               	btfsc	sprintf@c,7,c
 11211  00FD6C  0EFF               	movlw	255
 11212  00FD6E  5A3E               	subwfb	sprintf@width+1,f,c
 11213  00FD70  D004               	goto	l604
 11214  00FD72                     l603:
 11215                           
 11216                           ;doprnt.c: 1383: else
 11217                           ;doprnt.c: 1384: width = 0;
 11218  00FD72  0E00               	movlw	0
 11219  00FD74  6E3E               	movwf	sprintf@width+1,c
 11220  00FD76  0E00               	movlw	0
 11221  00FD78  6E3D               	movwf	sprintf@width,c
 11222  00FD7A                     l604:
 11223                           
 11224                           ;doprnt.c: 1387: if(flag & 0x04) {
 11225  00FD7A  A43B               	btfss	sprintf@flag,2,c
 11226  00FD7C  D01E               	goto	l605
 11227                           
 11228                           ;doprnt.c: 1392: if(flag & 0x03)
 11229  00FD7E  C03B  F02E         	movff	sprintf@flag,??_sprintf
 11230  00FD82  0E03               	movlw	3
 11231  00FD84  162E               	andwf	??_sprintf,f,c
 11232  00FD86  B4D8               	btfsc	status,2,c
 11233  00FD88  D008               	goto	l606
 11234                           
 11235                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 11236  00FD8A  C022  FFD9         	movff	sprintf@sp,fsr2l
 11237  00FD8E  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11238  00FD92  0E2D               	movlw	45
 11239  00FD94  6EDF               	movwf	indf2,c
 11240  00FD96  4A22               	infsnz	sprintf@sp,f,c
 11241  00FD98  2A23               	incf	sprintf@sp+1,f,c
 11242  00FD9A                     l606:
 11243                           
 11244                           ;doprnt.c: 1415: if(width)
 11245  00FD9A  503D               	movf	sprintf@width,w,c
 11246  00FD9C  103E               	iorwf	sprintf@width+1,w,c
 11247  00FD9E  B4D8               	btfsc	status,2,c
 11248  00FDA0  D02D               	goto	l614
 11249                           
 11250                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 11251                           
 11252                           ;doprnt.c: 1416: do
 11253  00FDA2  C022  FFD9         	movff	sprintf@sp,fsr2l
 11254  00FDA6  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11255  00FDAA  0E30               	movlw	48
 11256  00FDAC  6EDF               	movwf	indf2,c
 11257  00FDAE  4A22               	infsnz	sprintf@sp,f,c
 11258  00FDB0  2A23               	incf	sprintf@sp+1,f,c
 11259                           
 11260                           ;doprnt.c: 1418: while(--width);
 11261  00FDB2  063D               	decf	sprintf@width,f,c
 11262  00FDB4  A0D8               	btfss	status,0,c
 11263  00FDB6  063E               	decf	sprintf@width+1,f,c
 11264  00FDB8  D7F0               	goto	l606
 11265  00FDBA                     l605:
 11266                           
 11267                           ;doprnt.c: 1422: {
 11268                           ;doprnt.c: 1424: if(width
 11269                           ;doprnt.c: 1428: )
 11270  00FDBA  503D               	movf	sprintf@width,w,c
 11271  00FDBC  103E               	iorwf	sprintf@width+1,w,c
 11272  00FDBE  B4D8               	btfsc	status,2,c
 11273  00FDC0  D00F               	goto	u4720
 11274  00FDC2                     u4710:
 11275                           
 11276                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 11277                           
 11278                           ;doprnt.c: 1429: do
 11279  00FDC2  C022  FFD9         	movff	sprintf@sp,fsr2l
 11280  00FDC6  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11281  00FDCA  0E20               	movlw	32
 11282  00FDCC  6EDF               	movwf	indf2,c
 11283  00FDCE  4A22               	infsnz	sprintf@sp,f,c
 11284  00FDD0  2A23               	incf	sprintf@sp+1,f,c
 11285                           
 11286                           ;doprnt.c: 1431: while(--width);
 11287  00FDD2  063D               	decf	sprintf@width,f,c
 11288  00FDD4  A0D8               	btfss	status,0,c
 11289  00FDD6  063E               	decf	sprintf@width+1,f,c
 11290  00FDD8  503D               	movf	sprintf@width,w,c
 11291  00FDDA  103E               	iorwf	sprintf@width+1,w,c
 11292  00FDDC  A4D8               	btfss	status,2,c
 11293  00FDDE  D7F1               	goto	u4710
 11294  00FDE0                     u4720:
 11295                           
 11296                           ;doprnt.c: 1438: if(flag & 0x03)
 11297  00FDE0  C03B  F02E         	movff	sprintf@flag,??_sprintf
 11298  00FDE4  0E03               	movlw	3
 11299  00FDE6  162E               	andwf	??_sprintf,f,c
 11300  00FDE8  B4D8               	btfsc	status,2,c
 11301  00FDEA  D008               	goto	l614
 11302                           
 11303                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11304  00FDEC  C022  FFD9         	movff	sprintf@sp,fsr2l
 11305  00FDF0  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11306  00FDF4  0E2D               	movlw	45
 11307  00FDF6  6EDF               	movwf	indf2,c
 11308  00FDF8  4A22               	infsnz	sprintf@sp,f,c
 11309  00FDFA  2A23               	incf	sprintf@sp+1,f,c
 11310  00FDFC                     l614:
 11311                           
 11312                           ;doprnt.c: 1469: }
 11313                           ;doprnt.c: 1472: prec = c;
 11314  00FDFC  C03C  F032         	movff	sprintf@c,sprintf@prec
 11315                           
 11316                           ;doprnt.c: 1474: while(prec--) {
 11317  00FE00  D029               	goto	l615
 11318  00FE02                     
 11319                           ;doprnt.c: 1478: {
 11320                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11321  00FE02  5032               	movf	sprintf@prec,w,c
 11322  00FE04  0D02               	mullw	2
 11323  00FE06  0E83               	movlw	low _dpowers
 11324  00FE08  24F3               	addwf	prodl,w,c
 11325  00FE0A  6EF6               	movwf	tblptrl,c
 11326  00FE0C  0EFE               	movlw	high _dpowers
 11327  00FE0E  20F4               	addwfc	prodh,w,c
 11328  00FE10  6EF7               	movwf	tblptrh,c
 11329  00FE12                     	if	0	;There are less than 3 active tblptr bytes
 11330  00FE12                     	endif
 11331  00FE12  0009               	tblrd		*+
 11332  00FE14  CFF5 F003          	movff	tablat,___lwdiv@divisor
 11333  00FE18  000A               	tblrd		*-
 11334  00FE1A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 11335  00FE1E  C039  F001         	movff	sprintf@val,___lwdiv@dividend
 11336  00FE22  C03A  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
 11337  00FE26  EC4C  F069         	call	___lwdiv	;wreg free
 11338  00FE2A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 11339  00FE2E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 11340  00FE32  0E00               	movlw	0
 11341  00FE34  6E0B               	movwf	___lwmod@divisor+1,c
 11342  00FE36  0E0A               	movlw	10
 11343  00FE38  6E0A               	movwf	___lwmod@divisor,c
 11344  00FE3A  EC69  F068         	call	___lwmod	;wreg free
 11345  00FE3E  5008               	movf	?___lwmod,w,c
 11346  00FE40  0F30               	addlw	48
 11347  00FE42  6E3C               	movwf	sprintf@c,c
 11348                           
 11349                           ;doprnt.c: 1523: }
 11350                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11351  00FE44  C022  FFD9         	movff	sprintf@sp,fsr2l
 11352  00FE48  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11353  00FE4C  C03C  FFDF         	movff	sprintf@c,indf2
 11354  00FE50  4A22               	infsnz	sprintf@sp,f,c
 11355  00FE52  2A23               	incf	sprintf@sp+1,f,c
 11356  00FE54                     l615:
 11357  00FE54  0632               	decf	sprintf@prec,f,c
 11358  00FE56  2832               	incf	sprintf@prec,w,c
 11359  00FE58  A4D8               	btfss	status,2,c
 11360  00FE5A  D7D3               	goto	l616
 11361  00FE5C                     u4740:
 11362  00FE5C  C024  FFF6         	movff	sprintf@f,tblptrl
 11363  00FE60  C025  FFF7         	movff	sprintf@f+1,tblptrh
 11364  00FE64  4A24               	infsnz	sprintf@f,f,c
 11365  00FE66  2A25               	incf	sprintf@f+1,f,c
 11366  00FE68                     	if	0	;tblptru may be non-zero
 11367  00FE68                     	endif
 11368  00FE68                     	if	0	;tblptru may be non-zero
 11369  00FE68                     	endif
 11370  00FE68  0008               	tblrd		*
 11371  00FE6A  CFF5 F03C          	movff	tablat,sprintf@c
 11372  00FE6E  503C               	movf	sprintf@c,w,c
 11373  00FE70  A4D8               	btfss	status,2,c
 11374  00FE72  D635               	goto	l564
 11375  00FE74                     u4750:
 11376                           
 11377                           ;doprnt.c: 1538: *sp = 0;
 11378                           
 11379                           ;doprnt.c: 1525: }
 11380                           ;doprnt.c: 1533: }
 11381                           ;doprnt.c: 1535: alldone:
 11382  00FE74  C022  FFD9         	movff	sprintf@sp,fsr2l
 11383  00FE78  C023  FFDA         	movff	sprintf@sp+1,fsr2h
 11384  00FE7C  0E00               	movlw	0
 11385  00FE7E  6EDF               	movwf	indf2,c
 11386  00FE80  0012               	return	
 11387  00FE82                     __end_of_sprintf:
 11388                           	opt stack 0
 11389                           tblptru	equ	0xFF8
 11390                           tblptrh	equ	0xFF7
 11391                           tblptrl	equ	0xFF6
 11392                           tablat	equ	0xFF5
 11393                           prodh	equ	0xFF4
 11394                           prodl	equ	0xFF3
 11395                           intcon	equ	0xFF2
 11396                           indf0	equ	0xFEF
 11397                           postinc0	equ	0xFEE
 11398                           fsr0h	equ	0xFEA
 11399                           fsr0l	equ	0xFE9
 11400                           wreg	equ	0xFE8
 11401                           postinc1	equ	0xFE6
 11402                           postdec1	equ	0xFE5
 11403                           fsr1h	equ	0xFE2
 11404                           fsr1l	equ	0xFE1
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           
 11412 ;; *************** function _isdigit *****************
 11413 ;; Defined at:
 11414 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;  c               1    wreg     unsigned char 
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;  c               1    2[COMRAM] unsigned char 
 11419 ;; Return value:  Size  Location     Type
 11420 ;;		None               void
 11421 ;; Registers used:
 11422 ;;		wreg, status,2, status,0
 11423 ;; Tracked objects:
 11424 ;;		On entry : 0/0
 11425 ;;		On exit  : 0/0
 11426 ;;		Unchanged: 0/0
 11427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11430 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11432 ;;Total ram usage:        3 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; This function calls:
 11435 ;;		Nothing
 11436 ;; This function is called by:
 11437 ;;		_sprintf
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           	psect	text53
 11442  00CF48                     __ptext53:
 11443                           	opt stack 0
 11444  00CF48                     _isdigit:
 11445                           	opt stack 26
 11446                           
 11447                           ;incstack = 0
 11448                           ;isdigit@c stored from wreg
 11449  00CF48  6E03               	movwf	isdigit@c,c
 11450  00CF4A  0E00               	movlw	0
 11451  00CF4C  6E02               	movwf	_isdigit$2012,c
 11452  00CF4E  0E3A               	movlw	58
 11453  00CF50  6003               	cpfslt	isdigit@c,c
 11454  00CF52  D005               	goto	l1059
 11455  00CF54  0E2F               	movlw	47
 11456  00CF56  6403               	cpfsgt	isdigit@c,c
 11457  00CF58  D002               	goto	l1059
 11458  00CF5A  0E01               	movlw	1
 11459  00CF5C  6E02               	movwf	_isdigit$2012,c
 11460  00CF5E                     l1059:
 11461  00CF5E  C002  F001         	movff	_isdigit$2012,??_isdigit
 11462  00CF62  3001               	rrcf	??_isdigit,w,c
 11463  00CF64  0012               	return	
 11464  00CF66                     __end_of_isdigit:
 11465                           	opt stack 0
 11466                           tblptru	equ	0xFF8
 11467                           tblptrh	equ	0xFF7
 11468                           tblptrl	equ	0xFF6
 11469                           tablat	equ	0xFF5
 11470                           prodh	equ	0xFF4
 11471                           prodl	equ	0xFF3
 11472                           intcon	equ	0xFF2
 11473                           indf0	equ	0xFEF
 11474                           postinc0	equ	0xFEE
 11475                           fsr0h	equ	0xFEA
 11476                           fsr0l	equ	0xFE9
 11477                           wreg	equ	0xFE8
 11478                           postinc1	equ	0xFE6
 11479                           postdec1	equ	0xFE5
 11480                           fsr1h	equ	0xFE2
 11481                           fsr1l	equ	0xFE1
 11482                           indf2	equ	0xFDF
 11483                           postinc2	equ	0xFDE
 11484                           postdec2	equ	0xFDD
 11485                           fsr2h	equ	0xFDA
 11486                           fsr2l	equ	0xFD9
 11487                           status	equ	0xFD8
 11488                           
 11489 ;; *************** function ___wmul *****************
 11490 ;; Defined at:
 11491 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 11492 ;; Parameters:    Size  Location     Type
 11493 ;;  multiplier      2   27[COMRAM] unsigned int 
 11494 ;;  multiplicand    2   29[COMRAM] unsigned int 
 11495 ;; Auto vars:     Size  Location     Type
 11496 ;;  product         2   31[COMRAM] unsigned int 
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  2   27[COMRAM] unsigned int 
 11499 ;; Registers used:
 11500 ;;		wreg, status,2, status,0, prodl, prodh
 11501 ;; Tracked objects:
 11502 ;;		On entry : 0/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11506 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11507 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11509 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11510 ;;Total ram usage:        6 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; This function calls:
 11513 ;;		Nothing
 11514 ;; This function is called by:
 11515 ;;		_covertir_valores_de_array_a_escala_decimal
 11516 ;;		_sprintf
 11517 ;;		_eval_poly
 11518 ;; This function uses a non-reentrant model
 11519 ;;
 11520                           
 11521                           	psect	text54
 11522  00CFD0                     __ptext54:
 11523                           	opt stack 0
 11524  00CFD0                     ___wmul:
 11525                           	opt stack 26
 11526                           
 11527                           ;incstack = 0
 11528  00CFD0  501C               	movf	___wmul@multiplier,w,c
 11529  00CFD2  021E               	mulwf	___wmul@multiplicand,c
 11530  00CFD4  CFF3 F020          	movff	prodl,___wmul@product
 11531  00CFD8  CFF4 F021          	movff	prodh,___wmul@product+1
 11532  00CFDC  501C               	movf	___wmul@multiplier,w,c
 11533  00CFDE  021F               	mulwf	___wmul@multiplicand+1,c
 11534  00CFE0  50F3               	movf	prodl,w,c
 11535  00CFE2  2621               	addwf	___wmul@product+1,f,c
 11536  00CFE4  501D               	movf	___wmul@multiplier+1,w,c
 11537  00CFE6  021E               	mulwf	___wmul@multiplicand,c
 11538  00CFE8  50F3               	movf	prodl,w,c
 11539  00CFEA  2621               	addwf	___wmul@product+1,f,c
 11540  00CFEC  C020  F01C         	movff	___wmul@product,?___wmul
 11541  00CFF0  C021  F01D         	movff	___wmul@product+1,?___wmul+1
 11542  00CFF4  0012               	return	
 11543  00CFF6                     __end_of___wmul:
 11544                           	opt stack 0
 11545                           tblptru	equ	0xFF8
 11546                           tblptrh	equ	0xFF7
 11547                           tblptrl	equ	0xFF6
 11548                           tablat	equ	0xFF5
 11549                           prodh	equ	0xFF4
 11550                           prodl	equ	0xFF3
 11551                           intcon	equ	0xFF2
 11552                           indf0	equ	0xFEF
 11553                           postinc0	equ	0xFEE
 11554                           fsr0h	equ	0xFEA
 11555                           fsr0l	equ	0xFE9
 11556                           wreg	equ	0xFE8
 11557                           postinc1	equ	0xFE6
 11558                           postdec1	equ	0xFE5
 11559                           fsr1h	equ	0xFE2
 11560                           fsr1l	equ	0xFE1
 11561                           indf2	equ	0xFDF
 11562                           postinc2	equ	0xFDE
 11563                           postdec2	equ	0xFDD
 11564                           fsr2h	equ	0xFDA
 11565                           fsr2l	equ	0xFD9
 11566                           status	equ	0xFD8
 11567                           
 11568 ;; *************** function ___lwmod *****************
 11569 ;; Defined at:
 11570 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;  dividend        2    7[COMRAM] unsigned int 
 11573 ;;  divisor         2    9[COMRAM] unsigned int 
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;  counter         1   11[COMRAM] unsigned char 
 11576 ;; Return value:  Size  Location     Type
 11577 ;;                  2    7[COMRAM] unsigned int 
 11578 ;; Registers used:
 11579 ;;		wreg, status,2, status,0
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11585 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11588 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11589 ;;Total ram usage:        5 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_sprintf
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           	psect	text55
 11599  00D0D2                     __ptext55:
 11600                           	opt stack 0
 11601  00D0D2                     ___lwmod:
 11602                           	opt stack 26
 11603                           
 11604                           ;incstack = 0
 11605  00D0D2  500A               	movf	___lwmod@divisor,w,c
 11606  00D0D4  100B               	iorwf	___lwmod@divisor+1,w,c
 11607  00D0D6  B4D8               	btfsc	status,2,c
 11608  00D0D8  D018               	goto	l1153
 11609  00D0DA  0E01               	movlw	1
 11610  00D0DC  6E0C               	movwf	___lwmod@counter,c
 11611  00D0DE  D004               	goto	l1148
 11612  00D0E0  90D8               	bcf	status,0,c
 11613  00D0E2  360A               	rlcf	___lwmod@divisor,f,c
 11614  00D0E4  360B               	rlcf	___lwmod@divisor+1,f,c
 11615  00D0E6  2A0C               	incf	___lwmod@counter,f,c
 11616  00D0E8                     l1148:
 11617  00D0E8  AE0B               	btfss	___lwmod@divisor+1,7,c
 11618  00D0EA  D7FA               	goto	l1149
 11619  00D0EC                     u4130:
 11620  00D0EC  500A               	movf	___lwmod@divisor,w,c
 11621  00D0EE  5C08               	subwf	___lwmod@dividend,w,c
 11622  00D0F0  500B               	movf	___lwmod@divisor+1,w,c
 11623  00D0F2  5809               	subwfb	___lwmod@dividend+1,w,c
 11624  00D0F4  A0D8               	btfss	status,0,c
 11625  00D0F6  D004               	goto	l1152
 11626  00D0F8  500A               	movf	___lwmod@divisor,w,c
 11627  00D0FA  5E08               	subwf	___lwmod@dividend,f,c
 11628  00D0FC  500B               	movf	___lwmod@divisor+1,w,c
 11629  00D0FE  5A09               	subwfb	___lwmod@dividend+1,f,c
 11630  00D100                     l1152:
 11631  00D100  90D8               	bcf	status,0,c
 11632  00D102  320B               	rrcf	___lwmod@divisor+1,f,c
 11633  00D104  320A               	rrcf	___lwmod@divisor,f,c
 11634  00D106  2E0C               	decfsz	___lwmod@counter,f,c
 11635  00D108  D7F1               	goto	u4130
 11636  00D10A                     l1153:
 11637  00D10A  C008  F008         	movff	___lwmod@dividend,?___lwmod
 11638  00D10E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 11639  00D112  0012               	return		;funcret
 11640  00D114                     __end_of___lwmod:
 11641                           	opt stack 0
 11642                           tblptru	equ	0xFF8
 11643                           tblptrh	equ	0xFF7
 11644                           tblptrl	equ	0xFF6
 11645                           tablat	equ	0xFF5
 11646                           prodh	equ	0xFF4
 11647                           prodl	equ	0xFF3
 11648                           intcon	equ	0xFF2
 11649                           indf0	equ	0xFEF
 11650                           postinc0	equ	0xFEE
 11651                           fsr0h	equ	0xFEA
 11652                           fsr0l	equ	0xFE9
 11653                           wreg	equ	0xFE8
 11654                           postinc1	equ	0xFE6
 11655                           postdec1	equ	0xFE5
 11656                           fsr1h	equ	0xFE2
 11657                           fsr1l	equ	0xFE1
 11658                           indf2	equ	0xFDF
 11659                           postinc2	equ	0xFDE
 11660                           postdec2	equ	0xFDD
 11661                           fsr2h	equ	0xFDA
 11662                           fsr2l	equ	0xFD9
 11663                           status	equ	0xFD8
 11664                           
 11665 ;; *************** function ___lwdiv *****************
 11666 ;; Defined at:
 11667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;  dividend        2    0[COMRAM] unsigned int 
 11670 ;;  divisor         2    2[COMRAM] unsigned int 
 11671 ;; Auto vars:     Size  Location     Type
 11672 ;;  quotient        2    4[COMRAM] unsigned int 
 11673 ;;  counter         1    6[COMRAM] unsigned char 
 11674 ;; Return value:  Size  Location     Type
 11675 ;;                  2    0[COMRAM] unsigned int 
 11676 ;; Registers used:
 11677 ;;		wreg, status,2, status,0
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11683 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11684 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11686 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11687 ;;Total ram usage:        7 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; This function calls:
 11690 ;;		Nothing
 11691 ;; This function is called by:
 11692 ;;		_sprintf
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           	psect	text56
 11697  00D298                     __ptext56:
 11698                           	opt stack 0
 11699  00D298                     ___lwdiv:
 11700                           	opt stack 26
 11701                           
 11702                           ;incstack = 0
 11703  00D298  0E00               	movlw	0
 11704  00D29A  6E06               	movwf	___lwdiv@quotient+1,c
 11705  00D29C  0E00               	movlw	0
 11706  00D29E  6E05               	movwf	___lwdiv@quotient,c
 11707  00D2A0  5003               	movf	___lwdiv@divisor,w,c
 11708  00D2A2  1004               	iorwf	___lwdiv@divisor+1,w,c
 11709  00D2A4  B4D8               	btfsc	status,2,c
 11710  00D2A6  D01C               	goto	l1143
 11711  00D2A8  0E01               	movlw	1
 11712  00D2AA  6E07               	movwf	___lwdiv@counter,c
 11713  00D2AC  D004               	goto	l1138
 11714  00D2AE  90D8               	bcf	status,0,c
 11715  00D2B0  3603               	rlcf	___lwdiv@divisor,f,c
 11716  00D2B2  3604               	rlcf	___lwdiv@divisor+1,f,c
 11717  00D2B4  2A07               	incf	___lwdiv@counter,f,c
 11718  00D2B6                     l1138:
 11719  00D2B6  AE04               	btfss	___lwdiv@divisor+1,7,c
 11720  00D2B8  D7FA               	goto	l1139
 11721  00D2BA                     u4100:
 11722  00D2BA  90D8               	bcf	status,0,c
 11723  00D2BC  3605               	rlcf	___lwdiv@quotient,f,c
 11724  00D2BE  3606               	rlcf	___lwdiv@quotient+1,f,c
 11725  00D2C0  5003               	movf	___lwdiv@divisor,w,c
 11726  00D2C2  5C01               	subwf	___lwdiv@dividend,w,c
 11727  00D2C4  5004               	movf	___lwdiv@divisor+1,w,c
 11728  00D2C6  5802               	subwfb	___lwdiv@dividend+1,w,c
 11729  00D2C8  A0D8               	btfss	status,0,c
 11730  00D2CA  D005               	goto	l1142
 11731  00D2CC  5003               	movf	___lwdiv@divisor,w,c
 11732  00D2CE  5E01               	subwf	___lwdiv@dividend,f,c
 11733  00D2D0  5004               	movf	___lwdiv@divisor+1,w,c
 11734  00D2D2  5A02               	subwfb	___lwdiv@dividend+1,f,c
 11735  00D2D4  8005               	bsf	___lwdiv@quotient,0,c
 11736  00D2D6                     l1142:
 11737  00D2D6  90D8               	bcf	status,0,c
 11738  00D2D8  3204               	rrcf	___lwdiv@divisor+1,f,c
 11739  00D2DA  3203               	rrcf	___lwdiv@divisor,f,c
 11740  00D2DC  2E07               	decfsz	___lwdiv@counter,f,c
 11741  00D2DE  D7ED               	goto	u4100
 11742  00D2E0                     l1143:
 11743  00D2E0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 11744  00D2E4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11745  00D2E8  0012               	return		;funcret
 11746  00D2EA                     __end_of___lwdiv:
 11747                           	opt stack 0
 11748                           tblptru	equ	0xFF8
 11749                           tblptrh	equ	0xFF7
 11750                           tblptrl	equ	0xFF6
 11751                           tablat	equ	0xFF5
 11752                           prodh	equ	0xFF4
 11753                           prodl	equ	0xFF3
 11754                           intcon	equ	0xFF2
 11755                           indf0	equ	0xFEF
 11756                           postinc0	equ	0xFEE
 11757                           fsr0h	equ	0xFEA
 11758                           fsr0l	equ	0xFE9
 11759                           wreg	equ	0xFE8
 11760                           postinc1	equ	0xFE6
 11761                           postdec1	equ	0xFE5
 11762                           fsr1h	equ	0xFE2
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _lcd_putrs *****************
 11772 ;; Defined at:
 11773 ;;		line 221 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
 11776 ;;		 -> STR_42(17), STR_41(21), STR_39(17), STR_38(17), 
 11777 ;;		 -> STR_37(9), STR_36(8), STR_35(9), STR_34(9), 
 11778 ;;		 -> STR_33(9), STR_32(9), STR_31(9), STR_30(8), 
 11779 ;;		 -> STR_29(9), STR_28(9), buffer3(20), STR_21(17), 
 11780 ;;		 -> STR_20(17), STR_19(17), STR_18(17), STR_17(17), 
 11781 ;;		 -> STR_16(15), STR_15(8), STR_13(9), STR_12(9), 
 11782 ;;		 -> STR_11(9), STR_10(7), buffer2(20), 
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;		None
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  1    wreg      void 
 11787 ;; Registers used:
 11788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11797 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11798 ;;Total ram usage:        2 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    4
 11801 ;; This function calls:
 11802 ;;		_lcd_putc
 11803 ;; This function is called by:
 11804 ;;		_setDiaMesAnio
 11805 ;;		_setHoraMinutoSegundo
 11806 ;;		_titila_texto_insert_password
 11807 ;;		_guarda_numero_ingresado
 11808 ;;		_mostrar_presionar_a
 11809 ;;		_resetear_pantalla_ingresar_contrasenia
 11810 ;;		_titila_alarma_activada
 11811 ;;		_activar_alarma
 11812 ;;		_imprimir_reporte
 11813 ;;		_titila_opcion
 11814 ;;		_selecciona_opcion_fecha_hora
 11815 ;;		_ir_a_pantalla_edicion
 11816 ;;		_ir_a_pantalla_ingresar_contrasenia
 11817 ;;		_ir_a_pantalla_editar_contrasenia
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           	psect	text57
 11822  00D246                     __ptext57:
 11823                           	opt stack 0
 11824  00D246                     _lcd_putrs:
 11825                           	opt stack 23
 11826                           
 11827                           ;unmc_lcd_216.c: 223: while(*ptr){
 11828                           
 11829                           ;incstack = 0
 11830  00D246  D014               	goto	l549
 11831  00D248                     
 11832                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
 11833  00D248  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
 11834  00D24C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
 11835  00D250  6AF8               	clrf	tblptru,c
 11836  00D252  0E0E               	movlw	(high __ramtop+-1)
 11837  00D254  64F7               	cpfsgt	tblptrh,c
 11838  00D256  D003               	bra	u4767
 11839  00D258  0008               	tblrd		*
 11840  00D25A  50F5               	movf	tablat,w,c
 11841  00D25C  D005               	bra	u4760
 11842  00D25E                     u4767:
 11843  00D25E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11844  00D262  CFF7 FFEA          	movff	tblptrh,fsr0h
 11845  00D266  50EF               	movf	indf0,w,c
 11846  00D268                     u4760:
 11847  00D268  EC8A  F068         	call	_lcd_putc
 11848  00D26C  4A09               	infsnz	lcd_putrs@ptr,f,c
 11849  00D26E  2A0A               	incf	lcd_putrs@ptr+1,f,c
 11850  00D270                     l549:
 11851  00D270  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
 11852  00D274  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
 11853  00D278  6AF8               	clrf	tblptru,c
 11854  00D27A  0E0E               	movlw	(high __ramtop+-1)
 11855  00D27C  64F7               	cpfsgt	tblptrh,c
 11856  00D27E  D003               	bra	u4777
 11857  00D280  0008               	tblrd		*
 11858  00D282  50F5               	movf	tablat,w,c
 11859  00D284  D005               	bra	u4770
 11860  00D286                     u4777:
 11861  00D286  CFF6 FFE9          	movff	tblptrl,fsr0l
 11862  00D28A  CFF7 FFEA          	movff	tblptrh,fsr0h
 11863  00D28E  50EF               	movf	indf0,w,c
 11864  00D290                     u4770:
 11865  00D290  0900               	iorlw	0
 11866  00D292  B4D8               	btfsc	status,2,c
 11867  00D294  0012               	return	
 11868  00D296  D7D8               	goto	l550
 11869  00D298                     __end_of_lcd_putrs:
 11870                           	opt stack 0
 11871                           tblptru	equ	0xFF8
 11872                           tblptrh	equ	0xFF7
 11873                           tblptrl	equ	0xFF6
 11874                           tablat	equ	0xFF5
 11875                           prodh	equ	0xFF4
 11876                           prodl	equ	0xFF3
 11877                           intcon	equ	0xFF2
 11878                           indf0	equ	0xFEF
 11879                           postinc0	equ	0xFEE
 11880                           fsr0h	equ	0xFEA
 11881                           fsr0l	equ	0xFE9
 11882                           wreg	equ	0xFE8
 11883                           postinc1	equ	0xFE6
 11884                           postdec1	equ	0xFE5
 11885                           fsr1h	equ	0xFE2
 11886                           fsr1l	equ	0xFE1
 11887                           indf2	equ	0xFDF
 11888                           postinc2	equ	0xFDE
 11889                           postdec2	equ	0xFDD
 11890                           fsr2h	equ	0xFDA
 11891                           fsr2l	equ	0xFD9
 11892                           status	equ	0xFD8
 11893                           
 11894 ;; *************** function _lcd_putc *****************
 11895 ;; Defined at:
 11896 ;;		line 172 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;  c               1    wreg     unsigned char 
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;  c               1    7[COMRAM] unsigned char 
 11901 ;; Return value:  Size  Location     Type
 11902 ;;                  1    wreg      void 
 11903 ;; Registers used:
 11904 ;;		wreg, status,2, status,0, cstack
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11914 ;;Total ram usage:        1 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:    3
 11917 ;; This function calls:
 11918 ;;		_lcd_gotoxy
 11919 ;;		_lcd_send_byte
 11920 ;; This function is called by:
 11921 ;;		_lcd_putrs
 11922 ;;		_lcd_puts
 11923 ;; This function uses a non-reentrant model
 11924 ;;
 11925                           
 11926                           	psect	text58
 11927  00D114                     __ptext58:
 11928                           	opt stack 0
 11929  00D114                     _lcd_putc:
 11930                           	opt stack 23
 11931                           
 11932                           ;incstack = 0
 11933                           ;lcd_putc@c stored from wreg
 11934  00D114  6E08               	movwf	lcd_putc@c,c
 11935                           
 11936                           ;unmc_lcd_216.c: 173: switch(c){
 11937  00D116  D018               	goto	l528
 11938  00D118                     
 11939                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
 11940  00D118  0E01               	movlw	1
 11941  00D11A  6E03               	movwf	lcd_send_byte@n,c
 11942  00D11C  0E00               	movlw	0
 11943  00D11E  ECFB  F067         	call	_lcd_send_byte
 11944                           
 11945                           ;unmc_lcd_216.c: 176: break;
 11946  00D122  0012               	return	
 11947  00D124                     
 11948                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
 11949  00D124  0E02               	movlw	2
 11950  00D126  6E05               	movwf	lcd_gotoxy@y,c
 11951  00D128  0E01               	movlw	1
 11952  00D12A  ECB3  F067         	call	_lcd_gotoxy
 11953                           
 11954                           ;unmc_lcd_216.c: 179: break;
 11955  00D12E  0012               	return	
 11956  00D130                     
 11957                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
 11958  00D130  0E10               	movlw	16
 11959  00D132  6E03               	movwf	lcd_send_byte@n,c
 11960  00D134  0E00               	movlw	0
 11961  00D136  ECFB  F067         	call	_lcd_send_byte
 11962                           
 11963                           ;unmc_lcd_216.c: 182: break;
 11964  00D13A  0012               	return	
 11965  00D13C                     
 11966                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
 11967  00D13C  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
 11968  00D140  0E01               	movlw	1
 11969  00D142  ECFB  F067         	call	_lcd_send_byte
 11970                           
 11971                           ;unmc_lcd_216.c: 186: }
 11972                           
 11973                           ;unmc_lcd_216.c: 185: break;
 11974  00D146  0012               	return	
 11975  00D148                     l528:
 11976  00D148  5008               	movf	lcd_putc@c,w,c
 11977                           
 11978                           ; Switch size 1, requested type "space"
 11979                           ; Number of cases is 3, Range of values is 8 to 12
 11980                           ; switch strategies available:
 11981                           ; Name         Instructions Cycles
 11982                           ; simple_byte           10     6 (average)
 11983                           ;	Chosen strategy is simple_byte
 11984  00D14A  0A08               	xorlw	8	; case 8
 11985  00D14C  B4D8               	btfsc	status,2,c
 11986  00D14E  D7F0               	goto	l532
 11987  00D150  0A02               	xorlw	2	; case 10
 11988  00D152  B4D8               	btfsc	status,2,c
 11989  00D154  D7E7               	goto	l531
 11990  00D156  0A06               	xorlw	6	; case 12
 11991  00D158  B4D8               	btfsc	status,2,c
 11992  00D15A  D7DE               	goto	l529
 11993  00D15C  D7EF               	goto	l533
 11994  00D15E                     __end_of_lcd_putc:
 11995                           	opt stack 0
 11996                           tblptru	equ	0xFF8
 11997                           tblptrh	equ	0xFF7
 11998                           tblptrl	equ	0xFF6
 11999                           tablat	equ	0xFF5
 12000                           prodh	equ	0xFF4
 12001                           prodl	equ	0xFF3
 12002                           intcon	equ	0xFF2
 12003                           indf0	equ	0xFEF
 12004                           postinc0	equ	0xFEE
 12005                           fsr0h	equ	0xFEA
 12006                           fsr0l	equ	0xFE9
 12007                           wreg	equ	0xFE8
 12008                           postinc1	equ	0xFE6
 12009                           postdec1	equ	0xFE5
 12010                           fsr1h	equ	0xFE2
 12011                           fsr1l	equ	0xFE1
 12012                           indf2	equ	0xFDF
 12013                           postinc2	equ	0xFDE
 12014                           postdec2	equ	0xFDD
 12015                           fsr2h	equ	0xFDA
 12016                           fsr2l	equ	0xFD9
 12017                           status	equ	0xFD8
 12018                           
 12019 ;; *************** function _lcd_gotoxy *****************
 12020 ;; Defined at:
 12021 ;;		line 158 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 12022 ;; Parameters:    Size  Location     Type
 12023 ;;  x               1    wreg     unsigned char 
 12024 ;;  y               1    4[COMRAM] unsigned char 
 12025 ;; Auto vars:     Size  Location     Type
 12026 ;;  x               1    5[COMRAM] unsigned char 
 12027 ;;  address         1    6[COMRAM] unsigned char 
 12028 ;; Return value:  Size  Location     Type
 12029 ;;                  1    wreg      void 
 12030 ;; Registers used:
 12031 ;;		wreg, status,2, status,0, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12037 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12040 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12041 ;;Total ram usage:        3 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    2
 12044 ;; This function calls:
 12045 ;;		_lcd_send_byte
 12046 ;; This function is called by:
 12047 ;;		_setDiaMesAnio
 12048 ;;		_setHoraMinutoSegundo
 12049 ;;		_titila_texto_insert_password
 12050 ;;		_guarda_numero_ingresado
 12051 ;;		_mostrar_presionar_a
 12052 ;;		_resetear_pantalla_ingresar_contrasenia
 12053 ;;		_titila_alarma_activada
 12054 ;;		_activar_alarma
 12055 ;;		_imprimir_reporte
 12056 ;;		_titila_opcion
 12057 ;;		_selecciona_opcion_fecha_hora
 12058 ;;		_ir_a_pantalla_edicion
 12059 ;;		_ir_a_pantalla_ingresar_contrasenia
 12060 ;;		_ir_a_pantalla_editar_contrasenia
 12061 ;;		_lcd_putc
 12062 ;; This function uses a non-reentrant model
 12063 ;;
 12064                           
 12065                           	psect	text59
 12066  00CF66                     __ptext59:
 12067                           	opt stack 0
 12068  00CF66                     _lcd_gotoxy:
 12069                           	opt stack 23
 12070                           
 12071                           ;incstack = 0
 12072                           ;lcd_gotoxy@x stored from wreg
 12073  00CF66  6E06               	movwf	lcd_gotoxy@x,c
 12074                           
 12075                           ;unmc_lcd_216.c: 159: int8 address;
 12076                           ;unmc_lcd_216.c: 161: if(y != 1)
 12077  00CF68  0405               	decf	lcd_gotoxy@y,w,c
 12078  00CF6A  B4D8               	btfsc	status,2,c
 12079  00CF6C  D002               	goto	l523
 12080                           
 12081                           ;unmc_lcd_216.c: 162: address = 0x40;
 12082  00CF6E  0E40               	movlw	64
 12083  00CF70  D001               	goto	L3
 12084  00CF72                     l523:
 12085                           
 12086                           ;unmc_lcd_216.c: 163: else
 12087                           ;unmc_lcd_216.c: 164: address=0;
 12088  00CF72  0E00               	movlw	0
 12089  00CF74                     L3:
 12090  00CF74  6E07               	movwf	lcd_gotoxy@address,c
 12091                           
 12092                           ;unmc_lcd_216.c: 166: address += x-1;
 12093  00CF76  0406               	decf	lcd_gotoxy@x,w,c
 12094  00CF78  2607               	addwf	lcd_gotoxy@address,f,c
 12095                           
 12096                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
 12097  00CF7A  5007               	movf	lcd_gotoxy@address,w,c
 12098  00CF7C  0980               	iorlw	128
 12099  00CF7E  6E03               	movwf	lcd_send_byte@n,c
 12100  00CF80  0E00               	movlw	0
 12101  00CF82  ECFB  F067         	call	_lcd_send_byte
 12102  00CF86  0012               	return		;funcret
 12103  00CF88                     __end_of_lcd_gotoxy:
 12104                           	opt stack 0
 12105                           tblptru	equ	0xFF8
 12106                           tblptrh	equ	0xFF7
 12107                           tblptrl	equ	0xFF6
 12108                           tablat	equ	0xFF5
 12109                           prodh	equ	0xFF4
 12110                           prodl	equ	0xFF3
 12111                           intcon	equ	0xFF2
 12112                           indf0	equ	0xFEF
 12113                           postinc0	equ	0xFEE
 12114                           fsr0h	equ	0xFEA
 12115                           fsr0l	equ	0xFE9
 12116                           wreg	equ	0xFE8
 12117                           postinc1	equ	0xFE6
 12118                           postdec1	equ	0xFE5
 12119                           fsr1h	equ	0xFE2
 12120                           fsr1l	equ	0xFE1
 12121                           indf2	equ	0xFDF
 12122                           postinc2	equ	0xFDE
 12123                           postdec2	equ	0xFDD
 12124                           fsr2h	equ	0xFDA
 12125                           fsr2l	equ	0xFD9
 12126                           status	equ	0xFD8
 12127                           
 12128 ;; *************** function _lcd_send_byte *****************
 12129 ;; Defined at:
 12130 ;;		line 86 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;  address         1    wreg     unsigned char 
 12133 ;;  n               1    2[COMRAM] unsigned char 
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;  address         1    3[COMRAM] unsigned char 
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  1    wreg      void 
 12138 ;; Registers used:
 12139 ;;		wreg, status,2, status,0, cstack
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12145 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12148 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12149 ;;Total ram usage:        2 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:    1
 12152 ;; This function calls:
 12153 ;;		_Delay100TCYx
 12154 ;;		_lcd_send_nibble
 12155 ;; This function is called by:
 12156 ;;		_lcd_init
 12157 ;;		_lcd_gotoxy
 12158 ;;		_lcd_putc
 12159 ;;		_lcd_comand
 12160 ;;		_lcd_setcursor_vb
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           	psect	text60
 12165  00CFF6                     __ptext60:
 12166                           	opt stack 0
 12167  00CFF6                     _lcd_send_byte:
 12168                           	opt stack 24
 12169                           
 12170                           ;incstack = 0
 12171                           ;lcd_send_byte@address stored from wreg
 12172  00CFF6  6E04               	movwf	lcd_send_byte@address,c
 12173                           
 12174                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 12175  00CFF8  968A               	bcf	3978,3,c	;volatile
 12176                           
 12177                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 12178  00CFFA  0E02               	movlw	2
 12179  00CFFC  EC74  F067         	call	_Delay100TCYx
 12180                           
 12181                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 12182  00D000  9893               	bcf	3987,4,c	;volatile
 12183                           
 12184                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 12185  00D002  9A93               	bcf	3987,5,c	;volatile
 12186                           
 12187                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 12188  00D004  9C93               	bcf	3987,6,c	;volatile
 12189                           
 12190                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 12191  00D006  9E93               	bcf	3987,7,c	;volatile
 12192                           
 12193                           ;unmc_lcd_216.c: 101: if(address)
 12194  00D008  5004               	movf	lcd_send_byte@address,w,c
 12195  00D00A  B4D8               	btfsc	status,2,c
 12196  00D00C  D002               	goto	l511
 12197                           
 12198                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 12199  00D00E  868A               	bsf	3978,3,c	;volatile
 12200  00D010  D001               	goto	l512
 12201  00D012                     l511:
 12202                           
 12203                           ;unmc_lcd_216.c: 103: else
 12204                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 12205  00D012  968A               	bcf	3978,3,c	;volatile
 12206  00D014                     l512:
 12207                           
 12208                           ;unmc_lcd_216.c: 106: __nop();
 12209  00D014  F000               	nop	
 12210                           
 12211                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 12212  00D016  3803               	swapf	lcd_send_byte@n,w,c
 12213  00D018  0B0F               	andlw	15
 12214  00D01A  EC0D  F06A         	call	_lcd_send_nibble
 12215                           
 12216                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 12217  00D01E  5003               	movf	lcd_send_byte@n,w,c
 12218  00D020  0B0F               	andlw	15
 12219  00D022  EC0D  F06A         	call	_lcd_send_nibble
 12220  00D026  0012               	return		;funcret
 12221  00D028                     __end_of_lcd_send_byte:
 12222                           	opt stack 0
 12223                           tblptru	equ	0xFF8
 12224                           tblptrh	equ	0xFF7
 12225                           tblptrl	equ	0xFF6
 12226                           tablat	equ	0xFF5
 12227                           prodh	equ	0xFF4
 12228                           prodl	equ	0xFF3
 12229                           intcon	equ	0xFF2
 12230                           indf0	equ	0xFEF
 12231                           postinc0	equ	0xFEE
 12232                           fsr0h	equ	0xFEA
 12233                           fsr0l	equ	0xFE9
 12234                           wreg	equ	0xFE8
 12235                           postinc1	equ	0xFE6
 12236                           postdec1	equ	0xFE5
 12237                           fsr1h	equ	0xFE2
 12238                           fsr1l	equ	0xFE1
 12239                           indf2	equ	0xFDF
 12240                           postinc2	equ	0xFDE
 12241                           postdec2	equ	0xFDD
 12242                           fsr2h	equ	0xFDA
 12243                           fsr2l	equ	0xFD9
 12244                           status	equ	0xFD8
 12245                           
 12246 ;; *************** function _lcd_send_nibble *****************
 12247 ;; Defined at:
 12248 ;;		line 25 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
 12249 ;; Parameters:    Size  Location     Type
 12250 ;;  nibble          1    wreg     unsigned char 
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;  nibble          1    1[COMRAM] unsigned char 
 12253 ;; Return value:  Size  Location     Type
 12254 ;;                  1    wreg      void 
 12255 ;; Registers used:
 12256 ;;		wreg, status,2, status,0
 12257 ;; Tracked objects:
 12258 ;;		On entry : 0/0
 12259 ;;		On exit  : 0/0
 12260 ;;		Unchanged: 0/0
 12261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12265 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12266 ;;Total ram usage:        2 bytes
 12267 ;; Hardware stack levels used:    1
 12268 ;; This function calls:
 12269 ;;		Nothing
 12270 ;; This function is called by:
 12271 ;;		_lcd_send_byte
 12272 ;;		_lcd_init
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           	psect	text61
 12277  00D41A                     __ptext61:
 12278                           	opt stack 0
 12279  00D41A                     _lcd_send_nibble:
 12280                           	opt stack 24
 12281                           
 12282                           ;incstack = 0
 12283                           ;lcd_send_nibble@nibble stored from wreg
 12284  00D41A  6E02               	movwf	lcd_send_nibble@nibble,c
 12285                           
 12286                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 12287  00D41C  A002               	btfss	lcd_send_nibble@nibble,0,c
 12288  00D41E  D003               	goto	u3390
 12289  00D420  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12290  00D422  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 12291  00D424  D001               	goto	u3408
 12292  00D426                     u3390:
 12293  00D426  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12294  00D428                     u3408:
 12295  00D428  3A01               	swapf	??_lcd_send_nibble,f,c
 12296  00D42A  508A               	movf	3978,w,c	;volatile
 12297  00D42C  1801               	xorwf	??_lcd_send_nibble,w,c
 12298  00D42E  0BEF               	andlw	-17
 12299  00D430  1801               	xorwf	??_lcd_send_nibble,w,c
 12300  00D432  6E8A               	movwf	3978,c	;volatile
 12301                           
 12302                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 12303  00D434  A202               	btfss	lcd_send_nibble@nibble,1,c
 12304  00D436  D003               	goto	u3410
 12305  00D438  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12306  00D43A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 12307  00D43C  D001               	goto	u3428
 12308  00D43E                     u3410:
 12309  00D43E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12310  00D440                     u3428:
 12311  00D440  3A01               	swapf	??_lcd_send_nibble,f,c
 12312  00D442  4601               	rlncf	??_lcd_send_nibble,f,c
 12313  00D444  508A               	movf	3978,w,c	;volatile
 12314  00D446  1801               	xorwf	??_lcd_send_nibble,w,c
 12315  00D448  0BDF               	andlw	-33
 12316  00D44A  1801               	xorwf	??_lcd_send_nibble,w,c
 12317  00D44C  6E8A               	movwf	3978,c	;volatile
 12318                           
 12319                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 12320  00D44E  A402               	btfss	lcd_send_nibble@nibble,2,c
 12321  00D450  D003               	goto	u3430
 12322  00D452  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12323  00D454  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 12324  00D456  D001               	goto	u3448
 12325  00D458                     u3430:
 12326  00D458  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12327  00D45A                     u3448:
 12328  00D45A  3A01               	swapf	??_lcd_send_nibble,f,c
 12329  00D45C  4601               	rlncf	??_lcd_send_nibble,f,c
 12330  00D45E  4601               	rlncf	??_lcd_send_nibble,f,c
 12331  00D460  508A               	movf	3978,w,c	;volatile
 12332  00D462  1801               	xorwf	??_lcd_send_nibble,w,c
 12333  00D464  0BBF               	andlw	-65
 12334  00D466  1801               	xorwf	??_lcd_send_nibble,w,c
 12335  00D468  6E8A               	movwf	3978,c	;volatile
 12336                           
 12337                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 12338  00D46A  A602               	btfss	lcd_send_nibble@nibble,3,c
 12339  00D46C  D003               	goto	u3450
 12340  00D46E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12341  00D470  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 12342  00D472  D001               	goto	u3468
 12343  00D474                     u3450:
 12344  00D474  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 12345  00D476                     u3468:
 12346  00D476  3201               	rrcf	??_lcd_send_nibble,f,c
 12347  00D478  3201               	rrcf	??_lcd_send_nibble,f,c
 12348  00D47A  508A               	movf	3978,w,c	;volatile
 12349  00D47C  1801               	xorwf	??_lcd_send_nibble,w,c
 12350  00D47E  0B7F               	andlw	-129
 12351  00D480  1801               	xorwf	??_lcd_send_nibble,w,c
 12352  00D482  6E8A               	movwf	3978,c	;volatile
 12353                           
 12354                           ;unmc_lcd_216.c: 32: __nop();
 12355  00D484  F000               	nop	
 12356                           
 12357                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 12358  00D486  848A               	bsf	3978,2,c	;volatile
 12359                           
 12360                           ;unmc_lcd_216.c: 34: __nop();__nop();
 12361  00D488  F000               	nop	
 12362  00D48A  F000               	nop	
 12363                           
 12364                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 12365  00D48C  948A               	bcf	3978,2,c	;volatile
 12366  00D48E  0012               	return		;funcret
 12367  00D490                     __end_of_lcd_send_nibble:
 12368                           	opt stack 0
 12369                           tblptru	equ	0xFF8
 12370                           tblptrh	equ	0xFF7
 12371                           tblptrl	equ	0xFF6
 12372                           tablat	equ	0xFF5
 12373                           prodh	equ	0xFF4
 12374                           prodl	equ	0xFF3
 12375                           intcon	equ	0xFF2
 12376                           indf0	equ	0xFEF
 12377                           postinc0	equ	0xFEE
 12378                           fsr0h	equ	0xFEA
 12379                           fsr0l	equ	0xFE9
 12380                           wreg	equ	0xFE8
 12381                           postinc1	equ	0xFE6
 12382                           postdec1	equ	0xFE5
 12383                           fsr1h	equ	0xFE2
 12384                           fsr1l	equ	0xFE1
 12385                           indf2	equ	0xFDF
 12386                           postinc2	equ	0xFDE
 12387                           postdec2	equ	0xFDD
 12388                           fsr2h	equ	0xFDA
 12389                           fsr2l	equ	0xFD9
 12390                           status	equ	0xFD8
 12391                           
 12392 ;; *************** function _Delay100TCYx *****************
 12393 ;; Defined at:
 12394 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d100tcyx.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;  unit            1    wreg     unsigned char 
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  unit            1    0[COMRAM] unsigned char 
 12399 ;; Return value:  Size  Location     Type
 12400 ;;                  1    wreg      void 
 12401 ;; Registers used:
 12402 ;;		wreg
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12412 ;;Total ram usage:        1 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; This function calls:
 12415 ;;		Nothing
 12416 ;; This function is called by:
 12417 ;;		_lcd_send_byte
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           	psect	text62
 12422  00CEE8                     __ptext62:
 12423                           	opt stack 0
 12424  00CEE8                     _Delay100TCYx:
 12425                           	opt stack 24
 12426                           
 12427                           ;incstack = 0
 12428                           ;Delay100TCYx@unit stored from wreg
 12429  00CEE8  6E01               	movwf	Delay100TCYx@unit,c
 12430  00CEEA                     l910:
 12431  00CEEA  0E21               	movlw	33
 12432  00CEEC                     u7097:
 12433  00CEEC  2EE8               	decfsz	wreg,f,c
 12434  00CEEE  D7FE               	bra	u7097
 12435  00CEF0  F000               	nop	
 12436  00CEF2  2E01               	decfsz	Delay100TCYx@unit,f,c
 12437  00CEF4  D7FA               	goto	l910
 12438  00CEF6  0012               	return	
 12439  00CEF8                     __end_of_Delay100TCYx:
 12440                           	opt stack 0
 12441                           tblptru	equ	0xFF8
 12442                           tblptrh	equ	0xFF7
 12443                           tblptrl	equ	0xFF6
 12444                           tablat	equ	0xFF5
 12445                           prodh	equ	0xFF4
 12446                           prodl	equ	0xFF3
 12447                           intcon	equ	0xFF2
 12448                           indf0	equ	0xFEF
 12449                           postinc0	equ	0xFEE
 12450                           fsr0h	equ	0xFEA
 12451                           fsr0l	equ	0xFE9
 12452                           wreg	equ	0xFE8
 12453                           postinc1	equ	0xFE6
 12454                           postdec1	equ	0xFE5
 12455                           fsr1h	equ	0xFE2
 12456                           fsr1l	equ	0xFE1
 12457                           indf2	equ	0xFDF
 12458                           postinc2	equ	0xFDE
 12459                           postdec2	equ	0xFDD
 12460                           fsr2h	equ	0xFDA
 12461                           fsr2l	equ	0xFD9
 12462                           status	equ	0xFD8
 12463                           
 12464 ;; *************** function _cambiar_opcion *****************
 12465 ;; Defined at:
 12466 ;;		line 254 in file "main.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;		None
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;		None
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  1    wreg      void 
 12473 ;; Registers used:
 12474 ;;		wreg, status,2, status,0
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12484 ;;Total ram usage:        1 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; This function calls:
 12487 ;;		Nothing
 12488 ;; This function is called by:
 12489 ;;		_imprimir_reporte
 12490 ;;		_ir_a_pantalla_edicion
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text63
 12495  00DB4C                     __ptext63:
 12496                           	opt stack 0
 12497  00DB4C                     _cambiar_opcion:
 12498                           	opt stack 25
 12499                           
 12500                           ;main.c: 255: LATAbits.LATA0 = 0;
 12501                           
 12502                           ;incstack = 0
 12503  00DB4C  9089               	bcf	3977,0,c	;volatile
 12504                           
 12505                           ;main.c: 256: LATAbits.LATA1 = 0;
 12506  00DB4E  9289               	bcf	3977,1,c	;volatile
 12507                           
 12508                           ;main.c: 257: LATAbits.LATA2 = 1;
 12509  00DB50  8489               	bsf	3977,2,c	;volatile
 12510                           
 12511                           ;main.c: 258: LATAbits.LATA3 = 0;
 12512  00DB52  9689               	bcf	3977,3,c	;volatile
 12513                           
 12514                           ;main.c: 259: if (PORTCbits.RC2 == 1 && LATAbits.LATA2 == 1) {
 12515  00DB54  B482               	btfsc	3970,2,c	;volatile
 12516  00DB56  A489               	btfss	3977,2,c	;volatile
 12517  00DB58  D01D               	goto	u5590
 12518                           
 12519                           ;main.c: 260: if (boton_seleccionar == 4) {
 12520  00DB5A  0E04               	movlw	4
 12521  00DB5C  0100               	movlb	0	; () banked
 12522  00DB5E  1990               	xorwf	_boton_seleccionar& (0+255),w,b
 12523  00DB60  0100               	movlb	0	; () banked
 12524  00DB62  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
 12525  00DB64  A4D8               	btfss	status,2,c
 12526  00DB66  D006               	goto	l283
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;main.c: 261: boton_seleccionar = 0;
 12530  00DB68  0E00               	movlw	0
 12531  00DB6A  0100               	movlb	0	; () banked
 12532  00DB6C  6F91               	movwf	(_boton_seleccionar+1)& (0+255),b
 12533  00DB6E  0E00               	movlw	0
 12534  00DB70  6F90               	movwf	_boton_seleccionar& (0+255),b
 12535                           
 12536                           ;main.c: 262: } else {
 12537  00DB72  D00C               	goto	l285
 12538  00DB74                     l283:
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;main.c: 263: boton_seleccionar++;
 12542                           
 12543                           ; BSR set to: 0
 12544  00DB74  0100               	movlb	0	; () banked
 12545  00DB76  4B90               	infsnz	_boton_seleccionar& (0+255),f,b
 12546  00DB78  2B91               	incf	(_boton_seleccionar+1)& (0+255),f,b
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;main.c: 264: }
 12550                           ;main.c: 265: while (PORTCbits.RC2 == 1 && LATAbits.LATA2 == 1) {
 12551  00DB7A  D008               	goto	l285
 12552  00DB7C                     
 12553                           ;main.c: 266: _delay((unsigned long)((40)*(8000000/4000.0)));
 12554                           
 12555                           ; BSR set to: 0
 12556  00DB7C  0E68               	movlw	104
 12557  00DB7E  6E01               	movwf	??_cambiar_opcion& (0+255),c
 12558  00DB80  0EE4               	movlw	228
 12559  00DB82                     u7107:
 12560  00DB82  2EE8               	decfsz	wreg,f,c
 12561  00DB84  D7FE               	bra	u7107
 12562  00DB86  2E01               	decfsz	??_cambiar_opcion& (0+255),f,c
 12563  00DB88  D7FC               	bra	u7107
 12564  00DB8A  D000               	nop2	
 12565  00DB8C                     l285:
 12566  00DB8C  A482               	btfss	3970,2,c	;volatile
 12567  00DB8E  D002               	goto	u5590
 12568  00DB90  B489               	btfsc	3977,2,c	;volatile
 12569  00DB92  D7F4               	goto	l286
 12570  00DB94                     u5590:
 12571                           
 12572                           ;main.c: 267: }
 12573                           ;main.c: 268: }
 12574                           ;main.c: 270: LATAbits.LATA0 = 0;
 12575  00DB94  9089               	bcf	3977,0,c	;volatile
 12576                           
 12577                           ;main.c: 271: LATAbits.LATA1 = 0;
 12578  00DB96  9289               	bcf	3977,1,c	;volatile
 12579                           
 12580                           ;main.c: 272: LATAbits.LATA2 = 0;
 12581  00DB98  9489               	bcf	3977,2,c	;volatile
 12582                           
 12583                           ;main.c: 273: LATAbits.LATA3 = 1;
 12584  00DB9A  8689               	bsf	3977,3,c	;volatile
 12585                           
 12586                           ;main.c: 274: if (PORTCbits.RC2 == 1 && LATAbits.LATA3 == 1) {
 12587  00DB9C  A482               	btfss	3970,2,c	;volatile
 12588  00DB9E  0012               	return	
 12589  00DBA0  A689               	btfss	3977,3,c	;volatile
 12590  00DBA2  0012               	return	
 12591                           
 12592                           ;main.c: 275: if (boton_seleccionar == 0) {
 12593  00DBA4  0100               	movlb	0	; () banked
 12594  00DBA6  5190               	movf	_boton_seleccionar& (0+255),w,b
 12595  00DBA8  0100               	movlb	0	; () banked
 12596  00DBAA  1191               	iorwf	(_boton_seleccionar+1)& (0+255),w,b
 12597  00DBAC  A4D8               	btfss	status,2,c
 12598  00DBAE  D006               	goto	l291
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;main.c: 276: boton_seleccionar = 4;
 12602  00DBB0  0E00               	movlw	0
 12603  00DBB2  0100               	movlb	0	; () banked
 12604  00DBB4  6F91               	movwf	(_boton_seleccionar+1)& (0+255),b
 12605  00DBB6  0E04               	movlw	4
 12606  00DBB8  6F90               	movwf	_boton_seleccionar& (0+255),b
 12607                           
 12608                           ;main.c: 277: } else {
 12609  00DBBA  D00D               	goto	l293
 12610  00DBBC                     l291:
 12611                           
 12612                           ; BSR set to: 0
 12613                           ;main.c: 278: boton_seleccionar--;
 12614                           
 12615                           ; BSR set to: 0
 12616  00DBBC  0100               	movlb	0	; () banked
 12617  00DBBE  0790               	decf	_boton_seleccionar& (0+255),f,b
 12618  00DBC0  A0D8               	btfss	status,0,c
 12619  00DBC2  0791               	decf	(_boton_seleccionar+1)& (0+255),f,b
 12620                           
 12621                           ; BSR set to: 0
 12622                           ;main.c: 279: }
 12623                           ;main.c: 280: while (PORTCbits.RC2 == 1 && LATAbits.LATA3 == 1) {
 12624  00DBC4  D008               	goto	l293
 12625  00DBC6                     
 12626                           ;main.c: 281: _delay((unsigned long)((40)*(8000000/4000.0)));
 12627                           
 12628                           ; BSR set to: 0
 12629  00DBC6  0E68               	movlw	104
 12630  00DBC8  6E01               	movwf	??_cambiar_opcion& (0+255),c
 12631  00DBCA  0EE4               	movlw	228
 12632  00DBCC                     u7117:
 12633  00DBCC  2EE8               	decfsz	wreg,f,c
 12634  00DBCE  D7FE               	bra	u7117
 12635  00DBD0  2E01               	decfsz	??_cambiar_opcion& (0+255),f,c
 12636  00DBD2  D7FC               	bra	u7117
 12637  00DBD4  D000               	nop2	
 12638  00DBD6                     l293:
 12639  00DBD6  A482               	btfss	3970,2,c	;volatile
 12640  00DBD8  0012               	return	
 12641  00DBDA  A689               	btfss	3977,3,c	;volatile
 12642  00DBDC  0012               	return	
 12643  00DBDE  D7F3               	goto	l294
 12644  00DBE0                     __end_of_cambiar_opcion:
 12645                           	opt stack 0
 12646                           tblptru	equ	0xFF8
 12647                           tblptrh	equ	0xFF7
 12648                           tblptrl	equ	0xFF6
 12649                           tablat	equ	0xFF5
 12650                           prodh	equ	0xFF4
 12651                           prodl	equ	0xFF3
 12652                           intcon	equ	0xFF2
 12653                           indf0	equ	0xFEF
 12654                           postinc0	equ	0xFEE
 12655                           fsr0h	equ	0xFEA
 12656                           fsr0l	equ	0xFE9
 12657                           wreg	equ	0xFE8
 12658                           postinc1	equ	0xFE6
 12659                           postdec1	equ	0xFE5
 12660                           fsr1h	equ	0xFE2
 12661                           fsr1l	equ	0xFE1
 12662                           indf2	equ	0xFDF
 12663                           postinc2	equ	0xFDE
 12664                           postdec2	equ	0xFDD
 12665                           fsr2h	equ	0xFDA
 12666                           fsr2l	equ	0xFD9
 12667                           status	equ	0xFD8
 12668                           
 12669 ;; *************** function _Read_RTC *****************
 12670 ;; Defined at:
 12671 ;;		line 112 in file "../../headers\unmc_rtcc_01.h"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;		None
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;		None
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  1    wreg      void 
 12678 ;; Registers used:
 12679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12689 ;;Total ram usage:        0 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    1
 12692 ;; This function calls:
 12693 ;;		_RtccReadDate
 12694 ;;		_RtccReadTime
 12695 ;; This function is called by:
 12696 ;;		_ir_a_pantalla_edicion
 12697 ;;		_main
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           	psect	text64
 12702  00EA0E                     __ptext64:
 12703                           	opt stack 0
 12704  00EA0E                     _Read_RTC:
 12705                           	opt stack 25
 12706                           
 12707                           ;headers\unmc_rtcc_01.h: 115: RtccReadTime(&RtccTime);
 12708                           
 12709                           ;incstack = 0
 12710  00EA0E  0EB9               	movlw	low _RtccTime
 12711  00EA10  6E01               	movwf	RtccReadTime@pTm,c
 12712  00EA12  0E00               	movlw	high _RtccTime
 12713  00EA14  6E02               	movwf	RtccReadTime@pTm+1,c
 12714  00EA16  ECD6  F069         	call	_RtccReadTime	;wreg free
 12715                           
 12716                           ;headers\unmc_rtcc_01.h: 116: segundo_u=(RtccTime.f.sec & 0x0F);
 12717  00EA1A  0100               	movlb	0	; () banked
 12718  00EA1C  51BA               	movf	(_RtccTime+1)& (0+255),w,b
 12719  00EA1E  0B0F               	andlw	15
 12720  00EA20  0100               	movlb	0	; () banked
 12721  00EA22  6FF5               	movwf	_segundo_u& (0+255),b
 12722                           
 12723                           ; BSR set to: 0
 12724                           ;headers\unmc_rtcc_01.h: 117: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
 12725  00EA24  0100               	movlb	0	; () banked
 12726  00EA26  39BA               	swapf	(_RtccTime+1)& (0+255),w,b
 12727  00EA28  0B0F               	andlw	15
 12728  00EA2A  0B0F               	andlw	15
 12729  00EA2C  0100               	movlb	0	; () banked
 12730  00EA2E  6FF4               	movwf	_segundo_d& (0+255),b
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;headers\unmc_rtcc_01.h: 118: minuto_u=(RtccTime.f.min & 0x0F);
 12734  00EA30  0100               	movlb	0	; () banked
 12735  00EA32  51BB               	movf	(_RtccTime+2)& (0+255),w,b
 12736  00EA34  0B0F               	andlw	15
 12737  00EA36  0100               	movlb	0	; () banked
 12738  00EA38  6FF3               	movwf	_minuto_u& (0+255),b
 12739                           
 12740                           ; BSR set to: 0
 12741                           ;headers\unmc_rtcc_01.h: 119: minuto_d=((RtccTime.f.min & 0xF0)>>4);
 12742  00EA3A  0100               	movlb	0	; () banked
 12743  00EA3C  39BB               	swapf	(_RtccTime+2)& (0+255),w,b
 12744  00EA3E  0B0F               	andlw	15
 12745  00EA40  0B0F               	andlw	15
 12746  00EA42  0100               	movlb	0	; () banked
 12747  00EA44  6FF2               	movwf	_minuto_d& (0+255),b
 12748                           
 12749                           ; BSR set to: 0
 12750                           ;headers\unmc_rtcc_01.h: 120: hora_u=(RtccTime.f.hour & 0x0F);
 12751  00EA46  0100               	movlb	0	; () banked
 12752  00EA48  51BC               	movf	(_RtccTime+3)& (0+255),w,b
 12753  00EA4A  0B0F               	andlw	15
 12754  00EA4C  0100               	movlb	0	; () banked
 12755  00EA4E  6FF1               	movwf	_hora_u& (0+255),b
 12756                           
 12757                           ; BSR set to: 0
 12758                           ;headers\unmc_rtcc_01.h: 121: hora_d=((RtccTime.f.hour & 0xF0)>>4);
 12759  00EA50  0100               	movlb	0	; () banked
 12760  00EA52  39BC               	swapf	(_RtccTime+3)& (0+255),w,b
 12761  00EA54  0B0F               	andlw	15
 12762  00EA56  0B0F               	andlw	15
 12763  00EA58  0100               	movlb	0	; () banked
 12764  00EA5A  6FF0               	movwf	_hora_d& (0+255),b
 12765                           
 12766                           ;headers\unmc_rtcc_01.h: 122: RtccReadDate(&RtccDate);
 12767  00EA5C  0EB5               	movlw	low _RtccDate
 12768  00EA5E  6E01               	movwf	RtccReadDate@pDt,c
 12769  00EA60  0E00               	movlw	high _RtccDate
 12770  00EA62  6E02               	movwf	RtccReadDate@pDt+1,c
 12771  00EA64  ECCF  F06C         	call	_RtccReadDate	;wreg free
 12772                           
 12773                           ;headers\unmc_rtcc_01.h: 123: fecha_u=(RtccDate.f.mday & 0x0F);
 12774  00EA68  0100               	movlb	0	; () banked
 12775  00EA6A  51B6               	movf	(_RtccDate+1)& (0+255),w,b
 12776  00EA6C  0B0F               	andlw	15
 12777  00EA6E  0100               	movlb	0	; () banked
 12778  00EA70  6FEF               	movwf	_fecha_u& (0+255),b
 12779                           
 12780                           ; BSR set to: 0
 12781                           ;headers\unmc_rtcc_01.h: 124: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
 12782  00EA72  0100               	movlb	0	; () banked
 12783  00EA74  39B6               	swapf	(_RtccDate+1)& (0+255),w,b
 12784  00EA76  0B0F               	andlw	15
 12785  00EA78  0B0F               	andlw	15
 12786  00EA7A  0100               	movlb	0	; () banked
 12787  00EA7C  6FEE               	movwf	_fecha_d& (0+255),b
 12788                           
 12789                           ; BSR set to: 0
 12790                           ;headers\unmc_rtcc_01.h: 125: mes_u=(RtccDate.f.mon & 0x0F);
 12791  00EA7E  0100               	movlb	0	; () banked
 12792  00EA80  51B7               	movf	(_RtccDate+2)& (0+255),w,b
 12793  00EA82  0B0F               	andlw	15
 12794  00EA84  0100               	movlb	0	; () banked
 12795  00EA86  6FED               	movwf	_mes_u& (0+255),b
 12796                           
 12797                           ; BSR set to: 0
 12798                           ;headers\unmc_rtcc_01.h: 126: mes_d=((RtccDate.f.mon & 0xF0)>>4);
 12799  00EA88  0100               	movlb	0	; () banked
 12800  00EA8A  39B7               	swapf	(_RtccDate+2)& (0+255),w,b
 12801  00EA8C  0B0F               	andlw	15
 12802  00EA8E  0B0F               	andlw	15
 12803  00EA90  0100               	movlb	0	; () banked
 12804  00EA92  6FEC               	movwf	_mes_d& (0+255),b
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;headers\unmc_rtcc_01.h: 127: dia_semana=RtccDate.f.wday;
 12808  00EA94  C0B5  F0EB         	movff	_RtccDate,_dia_semana
 12809                           
 12810                           ; BSR set to: 0
 12811                           ;headers\unmc_rtcc_01.h: 128: anio_u=(RtccDate.f.year & 0x0F);
 12812  00EA98  0100               	movlb	0	; () banked
 12813  00EA9A  51B8               	movf	(_RtccDate+3)& (0+255),w,b
 12814  00EA9C  0B0F               	andlw	15
 12815  00EA9E  0100               	movlb	0	; () banked
 12816  00EAA0  6FEA               	movwf	_anio_u& (0+255),b
 12817                           
 12818                           ; BSR set to: 0
 12819                           ;headers\unmc_rtcc_01.h: 129: anio_d=((RtccDate.f.year & 0xF0)>>4);
 12820  00EAA2  0100               	movlb	0	; () banked
 12821  00EAA4  39B8               	swapf	(_RtccDate+3)& (0+255),w,b
 12822  00EAA6  0B0F               	andlw	15
 12823  00EAA8  0B0F               	andlw	15
 12824  00EAAA  0100               	movlb	0	; () banked
 12825  00EAAC  6FE9               	movwf	_anio_d& (0+255),b
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;headers\unmc_rtcc_01.h: 131: segundo=segundo_d*10+segundo_u;
 12829  00EAAE  0100               	movlb	0	; () banked
 12830  00EAB0  51F4               	movf	_segundo_d& (0+255),w,b
 12831  00EAB2  0D0A               	mullw	10
 12832  00EAB4  0100               	movlb	0	; () banked
 12833  00EAB6  51F5               	movf	_segundo_u& (0+255),w,b
 12834  00EAB8  24F3               	addwf	prodl,w,c
 12835  00EABA  0100               	movlb	0	; () banked
 12836  00EABC  6FA6               	movwf	_segundo& (0+255),b
 12837  00EABE  0100               	movlb	0	; () banked
 12838  00EAC0  0E00               	movlw	0
 12839  00EAC2  20F4               	addwfc	prodh,w,c
 12840  00EAC4  0100               	movlb	0	; () banked
 12841  00EAC6  6FA7               	movwf	(_segundo+1)& (0+255),b
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;headers\unmc_rtcc_01.h: 132: minuto=minuto_d*10+minuto_u;
 12845  00EAC8  0100               	movlb	0	; () banked
 12846  00EACA  51F2               	movf	_minuto_d& (0+255),w,b
 12847  00EACC  0D0A               	mullw	10
 12848  00EACE  0100               	movlb	0	; () banked
 12849  00EAD0  51F3               	movf	_minuto_u& (0+255),w,b
 12850  00EAD2  24F3               	addwf	prodl,w,c
 12851  00EAD4  0100               	movlb	0	; () banked
 12852  00EAD6  6FC7               	movwf	_minuto& (0+255),b
 12853  00EAD8  0100               	movlb	0	; () banked
 12854  00EADA  0E00               	movlw	0
 12855  00EADC  20F4               	addwfc	prodh,w,c
 12856  00EADE  0100               	movlb	0	; () banked
 12857  00EAE0  6FC8               	movwf	(_minuto+1)& (0+255),b
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;headers\unmc_rtcc_01.h: 133: hora=hora_d*10+hora_u;
 12861  00EAE2  0100               	movlb	0	; () banked
 12862  00EAE4  51F0               	movf	_hora_d& (0+255),w,b
 12863  00EAE6  0D0A               	mullw	10
 12864  00EAE8  0100               	movlb	0	; () banked
 12865  00EAEA  51F1               	movf	_hora_u& (0+255),w,b
 12866  00EAEC  24F3               	addwf	prodl,w,c
 12867  00EAEE  0100               	movlb	0	; () banked
 12868  00EAF0  6FC9               	movwf	_hora& (0+255),b
 12869  00EAF2  0100               	movlb	0	; () banked
 12870  00EAF4  0E00               	movlw	0
 12871  00EAF6  20F4               	addwfc	prodh,w,c
 12872  00EAF8  0100               	movlb	0	; () banked
 12873  00EAFA  6FCA               	movwf	(_hora+1)& (0+255),b
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;headers\unmc_rtcc_01.h: 134: dia=fecha_d*10+fecha_u;
 12877  00EAFC  0100               	movlb	0	; () banked
 12878  00EAFE  51EE               	movf	_fecha_d& (0+255),w,b
 12879  00EB00  0D0A               	mullw	10
 12880  00EB02  0100               	movlb	0	; () banked
 12881  00EB04  51EF               	movf	_fecha_u& (0+255),w,b
 12882  00EB06  24F3               	addwf	prodl,w,c
 12883  00EB08  0100               	movlb	0	; () banked
 12884  00EB0A  6FCB               	movwf	_dia& (0+255),b
 12885  00EB0C  0100               	movlb	0	; () banked
 12886  00EB0E  0E00               	movlw	0
 12887  00EB10  20F4               	addwfc	prodh,w,c
 12888  00EB12  0100               	movlb	0	; () banked
 12889  00EB14  6FCC               	movwf	(_dia+1)& (0+255),b
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;headers\unmc_rtcc_01.h: 135: diasem=dia_semana;
 12893  00EB16  C0EB  F0CD         	movff	_dia_semana,_diasem
 12894  00EB1A  0100               	movlb	0	; () banked
 12895  00EB1C  6BCE               	clrf	(_diasem+1)& (0+255),b
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;headers\unmc_rtcc_01.h: 136: mes=mes_d*10+mes_u;
 12899  00EB1E  0100               	movlb	0	; () banked
 12900  00EB20  51EC               	movf	_mes_d& (0+255),w,b
 12901  00EB22  0D0A               	mullw	10
 12902  00EB24  0100               	movlb	0	; () banked
 12903  00EB26  51ED               	movf	_mes_u& (0+255),w,b
 12904  00EB28  24F3               	addwf	prodl,w,c
 12905  00EB2A  0100               	movlb	0	; () banked
 12906  00EB2C  6FCF               	movwf	_mes& (0+255),b
 12907  00EB2E  0100               	movlb	0	; () banked
 12908  00EB30  0E00               	movlw	0
 12909  00EB32  20F4               	addwfc	prodh,w,c
 12910  00EB34  0100               	movlb	0	; () banked
 12911  00EB36  6FD0               	movwf	(_mes+1)& (0+255),b
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;headers\unmc_rtcc_01.h: 137: anio=anio_d*10+anio_u;
 12915  00EB38  0100               	movlb	0	; () banked
 12916  00EB3A  51E9               	movf	_anio_d& (0+255),w,b
 12917  00EB3C  0D0A               	mullw	10
 12918  00EB3E  0100               	movlb	0	; () banked
 12919  00EB40  51EA               	movf	_anio_u& (0+255),w,b
 12920  00EB42  24F3               	addwf	prodl,w,c
 12921  00EB44  0100               	movlb	0	; () banked
 12922  00EB46  6FD1               	movwf	_anio& (0+255),b
 12923  00EB48  0100               	movlb	0	; () banked
 12924  00EB4A  0E00               	movlw	0
 12925  00EB4C  20F4               	addwfc	prodh,w,c
 12926  00EB4E  0100               	movlb	0	; () banked
 12927  00EB50  6FD2               	movwf	(_anio+1)& (0+255),b
 12928                           
 12929                           ; BSR set to: 0
 12930  00EB52  0012               	return		;funcret
 12931  00EB54                     __end_of_Read_RTC:
 12932                           	opt stack 0
 12933                           tblptru	equ	0xFF8
 12934                           tblptrh	equ	0xFF7
 12935                           tblptrl	equ	0xFF6
 12936                           tablat	equ	0xFF5
 12937                           prodh	equ	0xFF4
 12938                           prodl	equ	0xFF3
 12939                           intcon	equ	0xFF2
 12940                           indf0	equ	0xFEF
 12941                           postinc0	equ	0xFEE
 12942                           fsr0h	equ	0xFEA
 12943                           fsr0l	equ	0xFE9
 12944                           wreg	equ	0xFE8
 12945                           postinc1	equ	0xFE6
 12946                           postdec1	equ	0xFE5
 12947                           fsr1h	equ	0xFE2
 12948                           fsr1l	equ	0xFE1
 12949                           indf2	equ	0xFDF
 12950                           postinc2	equ	0xFDE
 12951                           postdec2	equ	0xFDD
 12952                           fsr2h	equ	0xFDA
 12953                           fsr2l	equ	0xFD9
 12954                           status	equ	0xFD8
 12955                           
 12956 ;; *************** function _RtccReadTime *****************
 12957 ;; Defined at:
 12958 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadTime.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;  pTm             2    0[COMRAM] PTR struct .
 12961 ;;		 -> RtccTime(4), 
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;  rTD0            8   10[COMRAM] struct .
 12964 ;;  rTD1            8    2[COMRAM] struct .
 12965 ;; Return value:  Size  Location     Type
 12966 ;;                  1    wreg      void 
 12967 ;; Registers used:
 12968 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12969 ;; Tracked objects:
 12970 ;;		On entry : 0/0
 12971 ;;		On exit  : 0/0
 12972 ;;		Unchanged: 0/0
 12973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12975 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12977 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12978 ;;Total ram usage:       18 bytes
 12979 ;; Hardware stack levels used:    1
 12980 ;; This function calls:
 12981 ;;		Nothing
 12982 ;; This function is called by:
 12983 ;;		_Read_RTC
 12984 ;; This function uses a non-reentrant model
 12985 ;;
 12986                           
 12987                           	psect	text65
 12988  00D3AC                     __ptext65:
 12989                           	opt stack 0
 12990  00D3AC                     _RtccReadTime:
 12991                           	opt stack 25
 12992                           
 12993                           ; BSR set to: 0
 12994                           ;incstack = 0
 12995  00D3AC  0EFC               	movlw	252
 12996  00D3AE  010F               	movlb	15	; () banked
 12997  00D3B0  173F               	andwf	63,f,b	;volatile
 12998                           
 12999                           ; BSR set to: 15
 13000  00D3B2  010F               	movlb	15	; () banked
 13001  00D3B4  813F               	bsf	63,0,b	;volatile
 13002                           
 13003                           ; BSR set to: 15
 13004  00D3B6  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
 13005                           
 13006                           ; BSR set to: 15
 13007  00D3BA  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
 13008                           
 13009                           ; BSR set to: 15
 13010  00D3BE  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
 13011                           
 13012                           ; BSR set to: 15
 13013  00D3C2  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
 13014                           
 13015                           ; BSR set to: 15
 13016  00D3C6  0EFC               	movlw	252
 13017  00D3C8  010F               	movlb	15	; () banked
 13018  00D3CA  173F               	andwf	63,f,b	;volatile
 13019  00D3CC  010F               	movlb	15	; () banked
 13020  00D3CE  813F               	bsf	63,0,b	;volatile
 13021                           
 13022                           ; BSR set to: 15
 13023  00D3D0  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
 13024                           
 13025                           ; BSR set to: 15
 13026  00D3D4  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
 13027                           
 13028                           ; BSR set to: 15
 13029  00D3D8  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
 13030                           
 13031                           ; BSR set to: 15
 13032  00D3DC  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
 13033                           
 13034                           ; BSR set to: 15
 13035  00D3E0  5009               	movf	RtccReadTime@rTD1+6,w,c
 13036  00D3E2  1811               	xorwf	RtccReadTime@rTD0+6,w,c
 13037  00D3E4  A4D8               	btfss	status,2,c
 13038  00D3E6  D7E2               	goto	_RtccReadTime
 13039                           
 13040                           ; BSR set to: 15
 13041                           
 13042                           ; BSR set to: 15
 13043  00D3E8  EE20 F003          	lfsr	2,3
 13044  00D3EC  5001               	movf	RtccReadTime@pTm,w,c
 13045  00D3EE  26D9               	addwf	fsr2l,f,c
 13046  00D3F0  5002               	movf	RtccReadTime@pTm+1,w,c
 13047  00D3F2  22DA               	addwfc	fsr2h,f,c
 13048  00D3F4  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
 13049  00D3F8  EE20 F002          	lfsr	2,2
 13050  00D3FC  5001               	movf	RtccReadTime@pTm,w,c
 13051  00D3FE  26D9               	addwf	fsr2l,f,c
 13052  00D400  5002               	movf	RtccReadTime@pTm+1,w,c
 13053  00D402  22DA               	addwfc	fsr2h,f,c
 13054  00D404  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
 13055  00D408  EE20 F001          	lfsr	2,1
 13056  00D40C  5001               	movf	RtccReadTime@pTm,w,c
 13057  00D40E  26D9               	addwf	fsr2l,f,c
 13058  00D410  5002               	movf	RtccReadTime@pTm+1,w,c
 13059  00D412  22DA               	addwfc	fsr2h,f,c
 13060  00D414  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
 13061                           
 13062                           ; BSR set to: 15
 13063  00D418  0012               	return		;funcret
 13064  00D41A                     __end_of_RtccReadTime:
 13065                           	opt stack 0
 13066                           tblptru	equ	0xFF8
 13067                           tblptrh	equ	0xFF7
 13068                           tblptrl	equ	0xFF6
 13069                           tablat	equ	0xFF5
 13070                           prodh	equ	0xFF4
 13071                           prodl	equ	0xFF3
 13072                           intcon	equ	0xFF2
 13073                           indf0	equ	0xFEF
 13074                           postinc0	equ	0xFEE
 13075                           fsr0h	equ	0xFEA
 13076                           fsr0l	equ	0xFE9
 13077                           wreg	equ	0xFE8
 13078                           postinc1	equ	0xFE6
 13079                           postdec1	equ	0xFE5
 13080                           fsr1h	equ	0xFE2
 13081                           fsr1l	equ	0xFE1
 13082                           indf2	equ	0xFDF
 13083                           postinc2	equ	0xFDE
 13084                           postdec2	equ	0xFDD
 13085                           fsr2h	equ	0xFDA
 13086                           fsr2l	equ	0xFD9
 13087                           status	equ	0xFD8
 13088                           
 13089 ;; *************** function _RtccReadDate *****************
 13090 ;; Defined at:
 13091 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadDate.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  pDt             2    0[COMRAM] PTR struct .
 13094 ;;		 -> RtccDate(4), 
 13095 ;; Auto vars:     Size  Location     Type
 13096 ;;  rTD0            8   10[COMRAM] struct .
 13097 ;;  rTD1            8    2[COMRAM] struct .
 13098 ;; Return value:  Size  Location     Type
 13099 ;;                  1    wreg      void 
 13100 ;; Registers used:
 13101 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13107 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13108 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13110 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13111 ;;Total ram usage:       18 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; This function calls:
 13114 ;;		Nothing
 13115 ;; This function is called by:
 13116 ;;		_Read_RTC
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           	psect	text66
 13121  00D99E                     __ptext66:
 13122                           	opt stack 0
 13123  00D99E                     _RtccReadDate:
 13124                           	opt stack 25
 13125                           
 13126                           ; BSR set to: 15
 13127                           ;incstack = 0
 13128  00D99E  0EFC               	movlw	252
 13129  00D9A0  010F               	movlb	15	; () banked
 13130  00D9A2  173F               	andwf	63,f,b	;volatile
 13131  00D9A4  0E03               	movlw	3
 13132  00D9A6  010F               	movlb	15	; () banked
 13133  00D9A8  133F               	iorwf	63,f,b	;volatile
 13134                           
 13135                           ; BSR set to: 15
 13136  00D9AA  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 13137                           
 13138                           ; BSR set to: 15
 13139  00D9AE  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 13140                           
 13141                           ; BSR set to: 15
 13142  00D9B2  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 13143                           
 13144                           ; BSR set to: 15
 13145  00D9B6  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 13146                           
 13147                           ; BSR set to: 15
 13148  00D9BA  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 13149                           
 13150                           ; BSR set to: 15
 13151  00D9BE  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 13152  00D9C2  0EFC               	movlw	252
 13153  00D9C4  010F               	movlb	15	; () banked
 13154  00D9C6  173F               	andwf	63,f,b	;volatile
 13155  00D9C8  0E03               	movlw	3
 13156  00D9CA  010F               	movlb	15	; () banked
 13157  00D9CC  133F               	iorwf	63,f,b	;volatile
 13158                           
 13159                           ; BSR set to: 15
 13160  00D9CE  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 13161                           
 13162                           ; BSR set to: 15
 13163  00D9D2  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 13164                           
 13165                           ; BSR set to: 15
 13166  00D9D6  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 13167                           
 13168                           ; BSR set to: 15
 13169  00D9DA  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 13170                           
 13171                           ; BSR set to: 15
 13172  00D9DE  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 13173                           
 13174                           ; BSR set to: 15
 13175  00D9E2  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 13176  00D9E6  5005               	movf	RtccReadDate@rTD1+2,w,c
 13177  00D9E8  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 13178  00D9EA  A4D8               	btfss	status,2,c
 13179  00D9EC  D7D8               	goto	_RtccReadDate
 13180                           
 13181                           ; BSR set to: 15
 13182                           
 13183                           ; BSR set to: 15
 13184  00D9EE  EE20 F001          	lfsr	2,1
 13185  00D9F2  5001               	movf	RtccReadDate@pDt,w,c
 13186  00D9F4  26D9               	addwf	fsr2l,f,c
 13187  00D9F6  5002               	movf	RtccReadDate@pDt+1,w,c
 13188  00D9F8  22DA               	addwfc	fsr2h,f,c
 13189  00D9FA  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 13190  00D9FE  EE20 F002          	lfsr	2,2
 13191  00DA02  5001               	movf	RtccReadDate@pDt,w,c
 13192  00DA04  26D9               	addwf	fsr2l,f,c
 13193  00DA06  5002               	movf	RtccReadDate@pDt+1,w,c
 13194  00DA08  22DA               	addwfc	fsr2h,f,c
 13195  00DA0A  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 13196                           
 13197                           ; BSR set to: 15
 13198  00DA0E  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 13199  00DA12  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 13200  00DA16  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 13201                           
 13202                           ; BSR set to: 15
 13203  00DA1A  EE20 F003          	lfsr	2,3
 13204  00DA1E  5001               	movf	RtccReadDate@pDt,w,c
 13205  00DA20  26D9               	addwf	fsr2l,f,c
 13206  00DA22  5002               	movf	RtccReadDate@pDt+1,w,c
 13207  00DA24  22DA               	addwfc	fsr2h,f,c
 13208  00DA26  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 13209                           
 13210                           ; BSR set to: 15
 13211  00DA2A  0012               	return		;funcret
 13212  00DA2C                     __end_of_RtccReadDate:
 13213                           	opt stack 0
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           intcon	equ	0xFF2
 13221                           indf0	equ	0xFEF
 13222                           postinc0	equ	0xFEE
 13223                           fsr0h	equ	0xFEA
 13224                           fsr0l	equ	0xFE9
 13225                           wreg	equ	0xFE8
 13226                           postinc1	equ	0xFE6
 13227                           postdec1	equ	0xFE5
 13228                           fsr1h	equ	0xFE2
 13229                           fsr1l	equ	0xFE1
 13230                           indf2	equ	0xFDF
 13231                           postinc2	equ	0xFDE
 13232                           postdec2	equ	0xFDD
 13233                           fsr2h	equ	0xFDA
 13234                           fsr2l	equ	0xFD9
 13235                           status	equ	0xFD8
 13236                           tblptru	equ	0xFF8
 13237                           tblptrh	equ	0xFF7
 13238                           tblptrl	equ	0xFF6
 13239                           tablat	equ	0xFF5
 13240                           prodh	equ	0xFF4
 13241                           prodl	equ	0xFF3
 13242                           intcon	equ	0xFF2
 13243                           indf0	equ	0xFEF
 13244                           postinc0	equ	0xFEE
 13245                           fsr0h	equ	0xFEA
 13246                           fsr0l	equ	0xFE9
 13247                           wreg	equ	0xFE8
 13248                           postinc1	equ	0xFE6
 13249                           postdec1	equ	0xFE5
 13250                           fsr1h	equ	0xFE2
 13251                           fsr1l	equ	0xFE1
 13252                           indf2	equ	0xFDF
 13253                           postinc2	equ	0xFDE
 13254                           postdec2	equ	0xFDD
 13255                           fsr2h	equ	0xFDA
 13256                           fsr2l	equ	0xFD9
 13257                           status	equ	0xFD8
 13258                           
 13259                           	psect	rparam
 13260  0000                     tblptru	equ	0xFF8
 13261                           tblptrh	equ	0xFF7
 13262                           tblptrl	equ	0xFF6
 13263                           tablat	equ	0xFF5
 13264                           prodh	equ	0xFF4
 13265                           prodl	equ	0xFF3
 13266                           intcon	equ	0xFF2
 13267                           indf0	equ	0xFEF
 13268                           postinc0	equ	0xFEE
 13269                           fsr0h	equ	0xFEA
 13270                           fsr0l	equ	0xFE9
 13271                           wreg	equ	0xFE8
 13272                           postinc1	equ	0xFE6
 13273                           postdec1	equ	0xFE5
 13274                           fsr1h	equ	0xFE2
 13275                           fsr1l	equ	0xFE1
 13276                           indf2	equ	0xFDF
 13277                           postinc2	equ	0xFDE
 13278                           postdec2	equ	0xFDD
 13279                           fsr2h	equ	0xFDA
 13280                           fsr2l	equ	0xFD9
 13281                           status	equ	0xFD8


Data Sizes:
    Strings     300
    Constant    71
    Data        34
    BSS         133
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     22     151
    BANK1           256      0      52
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 3775
		 -> STR_43(CODE[7]), STR_40(CODE[8]), STR_25(CODE[8]), STR_24(CODE[8]), 
		 -> STR_23(CODE[8]), STR_22(CODE[8]), RAM(DATA[3775]), STR_7(CODE[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_27(CODE[18]), STR_26(CODE[23]), STR_14(CODE[5]), STR_9(CODE[15]), 
		 -> STR_8(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer3(BANK1[20]), buffer2(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_42(CODE[17]), STR_41(CODE[21]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[9]), STR_36(CODE[8]), STR_35(CODE[9]), STR_34(CODE[9]), 
		 -> STR_33(CODE[9]), STR_32(CODE[9]), STR_31(CODE[9]), STR_30(CODE[8]), 
		 -> STR_29(CODE[9]), STR_28(CODE[9]), buffer3(BANK1[20]), STR_21(CODE[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_16(CODE[15]), STR_15(CODE[8]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[9]), STR_10(CODE[7]), buffer2(BANK1[20]), 

    guarda_numero_ingresado@num	PTR int  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    causa_reporte	PTR unsigned char  size(2) Largest target is 8
		 -> STR_40(CODE[8]), STR_25(CODE[8]), STR_24(CODE[8]), STR_23(CODE[8]), 
		 -> STR_22(CODE[8]), STR_7(CODE[6]), 

    array_seleccionar	PTR unsigned char [6] size(2) Largest target is 5
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _titila_texto_insert_password->_lcd_putrs
    _resetear_pantalla_ingresar_contrasenia->_lcd_putrs
    _mostrar_presionar_a->_lcd_putrs
    _titila_opcion->_lcd_putrs
    _seleccionar_opcion->_editar_fecha_reloj_digital
    _seleccionar_opcion->_editar_hora_reloj_digital
    _ir_a_pantalla_editar_contrasenia->_ingreso_numero
    _editar_hora_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _setHoraMinutoSegundo->_sprintf
    _editar_fecha_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _setDiaMesAnio->_sprintf
    _Write_RTC->_RtccWriteDate
    _covertir_valores_de_array_a_escala_decimal->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___awtoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___wmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _activar_alarma->_ingreso_numero
    _titila_alarma_activada->_lcd_putrs
    _ingreso_numero->_guarda_numero_ingresado
    _guarda_numero_ingresado->_sprintf
    _selecciona_opcion_fecha_hora->_lcd_putrs
    _imprimir_reporte->_sprintf
    _sprintf->___wmul
    ___wmul->___fttol
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    _si_apreta_numero_va_a_pantalla_contrasenia->_ir_a_pantalla_ingresar_contrasenia
    _ir_a_pantalla_ingresar_contrasenia->_ir_a_pantalla_edicion
    _seleccionar_opcion->_editar_fecha_reloj_digital
    _seleccionar_opcion->_editar_hora_reloj_digital
    _editar_hora_reloj_digital->_covertir_valores_de_array_a_escala_decimal
    _editar_fecha_reloj_digital->_covertir_valores_de_array_a_escala_decimal

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  480977
                                             21 BANK0      1     1      0
                           _Read_RTC
              _ir_a_pantalla_inicial
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   34646
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
                  _set_reloj_digital
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     925
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     730
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _ir_a_pantalla_inicial                                0     0      0  445339
                  _set_reloj_digital
_si_apreta_numero_va_a_pantalla_cont
       _titila_texto_insert_password
 ---------------------------------------------------------------------------------
 (2) _titila_texto_insert_password                         1     1      0    9343
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _si_apreta_numero_va_a_pantalla_contrasenia           0     0      0  405474
 _ir_a_pantalla_ingresar_contrasenia
 ---------------------------------------------------------------------------------
 (3) _ir_a_pantalla_ingresar_contrasenia                   2     2      0  405474
                                             19 BANK0      2     2      0
                     _activar_alarma
                     _ingreso_numero
              _ir_a_pantalla_edicion
                         _lcd_gotoxy
                          _lcd_putrs
                _mostrar_presionar_a
_resetear_pantalla_ingresar_contrase
              _verificar_contrasenia
 ---------------------------------------------------------------------------------
 (4) _resetear_pantalla_ingresar_contrasenia               2     2      0    9411
                                             10 COMRAM     2     2      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _mostrar_presionar_a                                  0     0      0    9343
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _ir_a_pantalla_edicion                                1     1      0  331176
                                             18 BANK0      1     1      0
                           _Read_RTC
                     _cambiar_opcion
                   _imprimir_reporte
                         _lcd_gotoxy
                          _lcd_putrs
       _selecciona_opcion_fecha_hora
                 _seleccionar_opcion
                  _set_reloj_digital
                      _titila_opcion
 ---------------------------------------------------------------------------------
 (5) _titila_opcion                                        1     1      0    9343
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _set_reloj_digital                                    0     0      0   30522
                      _setDiaMesAnio
               _setHoraMinutoSegundo
 ---------------------------------------------------------------------------------
 (5) _seleccionar_opcion                                   0     0      0  258841
                     _activar_alarma
         _editar_fecha_reloj_digital
          _editar_hora_reloj_digital
   _ir_a_pantalla_editar_contrasenia
 ---------------------------------------------------------------------------------
 (6) _ir_a_pantalla_editar_contrasenia                     2     2      0   23051
                                             66 COMRAM     2     2      0
                     _ingreso_numero
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (6) _editar_hora_reloj_digital                            9     9      0  101673
                                             94 COMRAM     1     1      0
                                             10 BANK0      8     8      0
                          _Write_RTC
_covertir_valores_de_array_a_escala_
                     _ingreso_numero
               _setHoraMinutoSegundo
 ---------------------------------------------------------------------------------
 (3) _setHoraMinutoSegundo                                 0     0      0   15261
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _editar_fecha_reloj_digital                           9     9      0  101673
                                             94 COMRAM     1     1      0
                                             10 BANK0      8     8      0
                          _Write_RTC
_covertir_valores_de_array_a_escala_
                     _ingreso_numero
                      _setDiaMesAnio
 ---------------------------------------------------------------------------------
 (3) _setDiaMesAnio                                        0     0      0   15261
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2469
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     561
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     696
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (7) _covertir_valores_de_array_a_escala_decimal          14    12      2   70051
                                             90 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                           ___awtoft
                            ___fttol
                             ___wmul
                                _pow
 ---------------------------------------------------------------------------------
 (8) _pow                                                 17    11      6   65683
                                             73 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (9) _log                                                  5     2      3   21400
                                             57 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _exp                                                  9     6      3   35628
                                             64 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (10) _ldexp                                               7     2      5     400
                                             57 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (10) _floor                                               8     5      3    9183
                                             45 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (10) _frexp                                               7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     556
                                             12 COMRAM    15    11      4
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftge                                              9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4    2758
                                             27 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (10) _eval_poly                                          12     5      7    9553
                                             45 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    3882
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftsub                                             6     0      6    4615
                                             45 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    4270
                                             33 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftneg                                             3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) ___ftdiv                                            15     9      6    3102
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___awtoft                                            4     1      3    2863
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             9     5      4    2689
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _activar_alarma                                       3     3      0   32444
                                             66 COMRAM     3     3      0
                    _generar_reporte
                     _ingreso_numero
                         _lcd_gotoxy
                          _lcd_putrs
             _titila_alarma_activada
              _verificar_contrasenia
 ---------------------------------------------------------------------------------
 (4) _verificar_contrasenia                               10     8      2     115
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (7) _titila_alarma_activada                               1     1      0    9343
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (7) _ingreso_numero                                       2     2      0   13618
                                             64 COMRAM     2     2      0
            _guarda_numero_ingresado
 ---------------------------------------------------------------------------------
 (8) _guarda_numero_ingresado                              2     0      2   13618
                                             62 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (7) _generar_reporte                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _selecciona_opcion_fecha_hora                         1     1      0    9343
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (5) _imprimir_reporte                                     0     0      0   12792
                     _cambiar_opcion
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             33    21     12    3449
                                             33 COMRAM    29    17     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     767
                                             27 COMRAM     6     2      4
                           ___awtoft (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    6210
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    3885
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    3133
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     708
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _cambiar_opcion                                       1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Read_RTC                                             0     0      0     992
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (6) _RtccReadTime                                        18    16      2     449
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (6) _RtccReadDate                                        18    16      2     543
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _ir_a_pantalla_inicial
     _set_reloj_digital
       _setDiaMesAnio
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
       _setHoraMinutoSegundo
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
     _si_apreta_numero_va_a_pantalla_contrasenia
       _ir_a_pantalla_ingresar_contrasenia
         _activar_alarma
           _generar_reporte
           _ingreso_numero
             _guarda_numero_ingresado
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _sprintf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _isdigit
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _titila_alarma_activada
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
           _verificar_contrasenia
         _ingreso_numero
           _guarda_numero_ingresado
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
             _sprintf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
               _isdigit
         _ir_a_pantalla_edicion
           _Read_RTC
             _RtccReadDate
             _RtccReadTime
           _cambiar_opcion
           _imprimir_reporte
             _cambiar_opcion
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
             _sprintf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
               _isdigit
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _selecciona_opcion_fecha_hora
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
           _seleccionar_opcion
             _activar_alarma
               _generar_reporte
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _titila_alarma_activada
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
               _verificar_contrasenia
             _editar_fecha_reloj_digital
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _covertir_valores_de_array_a_escala_decimal
                 ___awtoft
                   ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _pow
                   ___ftge
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                   ___lltoft
                     ___ftpack
                   _exp
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___ftpack
                     ___ftge
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg
                     ___ftsub
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _floor
                       ___altoft
                         ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftge
                       ___fttol
                         ___awtoft (ARG)
                           ___ftpack
                       _frexp
                     _ldexp
                       _eval_poly (ARG)
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                     _log (ARG)
                       ___awtoft
                         ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       _eval_poly
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                       _frexp
                   _log
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _frexp
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _setDiaMesAnio
                 _Write_RTC
                   _RtccWrOn
                   _RtccWriteDate
                     _RtccWrOn
                   _RtccWriteTime
                     _RtccWrOn
                   ___awdiv
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
             _editar_hora_reloj_digital
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _covertir_valores_de_array_a_escala_decimal
                 ___awtoft
                   ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _pow
                   ___ftge
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                   ___lltoft
                     ___ftpack
                   _exp
                     ___awtoft
                       ___ftpack
                     ___ftdiv
                       ___ftpack
                     ___ftge
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg
                     ___ftsub
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _floor
                       ___altoft
                         ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftge
                       ___fttol
                         ___awtoft (ARG)
                           ___ftpack
                       _frexp
                     _ldexp
                       _eval_poly (ARG)
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                     _log (ARG)
                       ___awtoft
                         ___ftpack
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       _eval_poly
                         ___ftadd
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___fttol (ARG)
                               ___awtoft (ARG)
                                 ___ftpack
                           _frexp (ARG)
                         ___ftmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                       _frexp
                   _log
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___fttol (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___fttol (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                     _frexp
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _setHoraMinutoSegundo
                 _Write_RTC
                   _RtccWrOn
                   _RtccWriteDate
                     _RtccWrOn
                   _RtccWriteTime
                     _RtccWrOn
                   ___awdiv
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_putrs
                   _lcd_putc
                     _lcd_gotoxy
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                 _sprintf
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   ___wmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                   _isdigit
             _ir_a_pantalla_editar_contrasenia
               _ingreso_numero
                 _guarda_numero_ingresado
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_putrs
                     _lcd_putc
                       _lcd_gotoxy
                         _lcd_send_byte
                           _Delay100TCYx
                           _lcd_send_nibble
                       _lcd_send_byte
                         _Delay100TCYx
                         _lcd_send_nibble
                   _sprintf
                     ___lwdiv
                     ___lwmod
                       ___lwdiv (ARG)
                     ___wmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___fttol (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                     _isdigit
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
           _set_reloj_digital
             _setDiaMesAnio
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _sprintf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _isdigit
             _setHoraMinutoSegundo
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_putrs
                 _lcd_putc
                   _lcd_gotoxy
                     _lcd_send_byte
                       _Delay100TCYx
                       _lcd_send_nibble
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
               _sprintf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 ___wmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                 _isdigit
           _titila_opcion
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _mostrar_presionar_a
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _resetear_pantalla_ingresar_contrasenia
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _verificar_contrasenia
     _titila_texto_insert_password
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
     _set_reloj_digital
       _setDiaMesAnio
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit
       _setHoraMinutoSegundo
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
           _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      34       8       20.3%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     16      97       5       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12A       6        0.0%
DATA                 0      0     12A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Nov 10 20:28:40 2017

                                             _titila_opcion E23A  
                                              ___altoft@exp 0024  
                                                         _a 00AE  
                                                         _b 00AC  
                                                         _c 00AA  
                                                         _i 00B2  
                                                         _j 00B0  
                                                         _k 00A8  
                                       _hora_ultimo_reporte 0096  
                                             ___altoft@sign 0025  
                                            ?_lcd_send_byte 0003  
                                              ___awdiv@sign 0006  
                                guarda_numero_ingresado@num 003F  
                                       ___wmul@multiplicand 001E  
                           __size_of_titila_alarma_activada 0078  
                                               lcd_comand@d 0005  
                                              __CFG_CP0$OFF 000000  
                                              ___ftadd@exp1 002D  
                                              ___ftadd@exp2 002C  
                                              ___ftadd@sign 002B  
                                                       l201 DD70  
                                                       l212 F8A6  
                                                       l213 F896  
                                                       l301 D540  
                                                       l206 D860  
                                                       l230 F95C  
                                                       l310 F460  
                                                       l231 F94C  
                                                       l311 F4CE  
                                                       l224 F91A  
                                                       l312 F4C8  
                                                       l225 F90A  
                                                       l321 F5C4  
                                                       l242 F9D0  
                                                       l218 F8E0  
                                                       l322 F5D4  
                                                       l314 F50C  
                                                       l243 F9C0  
                                                       l219 F8D0  
                                                       l323 F5E4  
                                                       l260 FA86  
                                                       l236 F996  
                                                       l261 FA76  
                                                       l237 F986  
                                                       l317 F59C  
                                                       l341 E2A6  
                                                       l254 FA4C  
                                                       l318 F626  
                                                       l190 D8CE  
                                                       l422 DC7C  
                                                       l511 D012  
                                                       l327 DD10  
                                                       l255 FA3C  
                                                       l415 DC16  
                                                       l343 E2DE  
                                                       l512 D014  
                                                       l328 DD0C  
                                                       l248 FA12  
                                                       l416 DC32  
                                                       l344 E300  
                                                       l249 FA02  
                                                       l425 D68C  
                                                       l441 F6C2  
                                                       l353 DDF0  
                                                       l602 FD4E  
                                                       l266 FACA  
                                                       l426 D6E6  
                                                       l442 F6CC  
                                                       l194 D62E  
                                                       l418 DC4A  
                                                       l370 DF5C  
                                                       l291 DBBC  
                                                       l283 DB74  
                                                       l523 CF72  
                                                       l531 D124  
                                                       l603 FD72  
                                                       l267 FABA  
                                                       l427 D6C8  
                                                       l451 F852  
                                                       l371 DF78  
                                                       l532 D130  
                                                       l604 FD7A  
                                                       l348 D7AE  
                                                       l428 D6D2  
                                                       l444 F7AC  
                                                       l364 DE56  
                                                       l516 D4BE  
                                                       l293 DBD6  
                                                       l285 DB8C  
                                                       l533 D13C  
                                                       l605 FDBA  
                                                       l349 D7E8  
                                                       l189 D8AA  
                                                       l453 F7D0  
                                                       l437 F6FA  
                                                       l461 F2B2  
                                                       l373 DF8E  
                                                       l381 D934  
                                                       l294 DBC6  
                                                       l286 DB7C  
                                                       l550 D248  
                                                       l614 FDFC  
                                                       l606 FD9A  
                                                       l702 E74E  
                                                       l446 F71C  
                                                       l470 F2D4  
                                                       l518 D4E0  
                                                       l615 FE54  
                                                       l703 E7A6  
                                                       l455 F81A  
                                                       l439 F66A  
                                                       l463 F230  
                                                       l375 DF98  
                                                       l528 D148  
                                                       l616 FE02  
                                                       l456 F824  
                                                       l448 F774  
                                                       l480 F3CE  
                                                       l472 F31E  
                                                       l529 D118  
                                                       l449 F77E  
                                                       l473 F328  
                                                       l465 F27A  
                                                       l466 F284  
                                                       l490 CFB0  
                                                       l707 E7B0  
                                                       l475 F3FC  
                                                       l395 D978  
                                                       l580 FCBE  
                                                       l564 FADE  
                                                       l468 F356  
                                                       l388 D956  
                                                       l549 D270  
                                                       l581 FB98  
                                                       l573 FB3A  
                                                       l565 FAF8  
                                                       l477 F37A  
                                                       l910 CEEA  
                                                       l582 FBC0  
                                                       l575 FC8A  
                                                       l591 FC74  
                                                       l583 FBCE  
                                                       l567 FB0C  
                                                       l479 F3C4  
                                                       l592 FC42  
                                                       l584 FBCA  
                                                       l568 FB06  
                                                       l904 D06E  
                                                       l673 E99C  
                                                       l586 FC16  
                                                       l674 E9FA  
                                                       l595 FC86  
                                                       l667 E938  
                                                       l596 FCEC  
                                                       l588 FC30  
                                                       l924 CEFA  
                                                       l589 FC20  
                                                       l598 FD04  
                                                       l950 DEF2  
                                                       l678 EA04  
                                                       l951 DEE8  
                                                       l944 DE96  
                                                       l696 E6FA  
                                                       l880 D72A  
                                                       l945 DE8C  
                                                       l793 D5AC  
                                                       l794 D5A0  
                                                       l947 DECA  
                                                       l883 D752  
                                                       l948 DEB4  
                                                       l884 D75C  
                                                       l876 D704  
                                                       l885 D76A  
                                                       l877 D714  
                                                       l990 EF34  
                                                       l975 EEB8  
                                                       l879 D732  
                                                       l984 EF48  
                                                       l979 EEE2  
                                                       l989 EF3E  
                                                       l998 EF7C  
                                                       l999 EF72  
                                                       _dia 00CB  
                                                       _key 00B4  
                                                       _mes 00CF  
                                                       _exp F012  
                                                       _log E7BA  
                                                       _pow EB54  
                                                       wreg 000FE8  
                                 _editar_hora_reloj_digital F1FA  
                                           RtccReadDate@pDt 0001  
                                               lcd_gotoxy@x 0006  
                                               lcd_gotoxy@y 0005  
                                              ___ftdiv@cntr 0012  
                                              ___ftdiv@sign 0017  
                                                      l1001 EFA0  
                                                      l1010 E440  
                                                      l1002 EFBC  
                                                      l1011 E47E  
                                                      l1003 EFEC  
                                                      l1012 E4A4  
                                                      l1030 E590  
                                                      l1023 E4FE  
                                                      l1008 E418  
                                                      l1040 D0A8  
                                                      l1016 DA5C  
                                                      l1025 E526  
                                                      l1017 DA8C  
                                                      l1106 D2FC  
                                                      l1034 CF9E  
                                                      l1026 E558  
                                                      l1107 D2F0  
                                                      l1027 E568  
                                                      l1052 E690  
                                                      l1044 E5F6  
                                                      l1029 E580  
                                                      l1053 E684  
                                                      l1142 D2D6  
                                                      l1046 E66C  
                                                      l1143 D2E0  
                                                      l1055 E6AC  
                                                      l1047 E65C  
                                                      l1152 D100  
                                                      l1153 D10A  
                                                      l1138 D2B6  
                                                      l1330 F062  
                                                      l1139 D2AE  
                                                      l1059 CF5E  
                                                      l1331 F09A  
                                                      l1171 EBB2  
                                                      l1148 D0E8  
                                                      l1340 E340  
                                                      l1332 F0C8  
                                                      l1172 EC38  
                                                      l1149 D0E0  
                                                      l1333 F1EC  
                                                      l1173 EC16  
                                                      l1342 E368  
                                                      l1334 F1C2  
                                                      l1174 ECBC  
                                                      l1343 E3E2  
                                                      l1352 DFE2  
                                                      l1328 F02A  
                                                      l1168 EB9A  
                                                      l1169 EB8C  
                                                      l1354 E028  
                                                      l1370 E7D6  
                                                      l1339 E34E  
                                                      l1348 DAE4  
                                                      l1356 E058  
                                                      l1372 E7F8  
                                                      l1357 E04C  
                                                      l1378 E14C  
                                                      l1379 E0D0  
                                                      l5003 F6C2  
                                                      l5031 F774  
                                                      l5007 F6E2  
                                                      l4233 FC42  
                                                      l4227 FC20  
                                                      l5035 F794  
                                                      l5123 F31E  
                                                      l4263 FD08  
                                                      l3527 DAB8  
                                                      l5063 F83A  
                                                      l5151 F3C4  
                                                      l5127 F33E  
                                                      l5059 F81A  
                                                      l5155 F3E4  
                                                      l5309 D1C6  
                                                      l5501 D4B6  
                                                      l5095 F27A  
                                                      l4457 F1C2  
                                                      l5099 F29A  
                                                      l5515 D4D8  
                                                      l4751 D6C8  
                                                      l5383 DF78  
                                                      ?_exp 0041  
                                                      ?_log 003A  
                                                      l4759 E176  
                                                      l4971 DC32  
                                                      l4973 DC3A  
                                                      l4889 F4CE  
                                                      ?_pow 004A  
                                                      STR_1 FFD3  
                                                      STR_2 FFEC  
                                                      STR_3 FFE7  
                                                      STR_4 FFD8  
                                                      STR_5 FFE2  
                                                      STR_6 FFDD  
                                                      STR_7 FFCD  
                                                      STR_8 FF3B  
                                                      STR_9 FF4A  
                                                      u4011 E400  
                                                      u4100 D2BA  
                                                      u4031 E428  
                                                      u3410 D43E  
                                                      u4130 D0EC  
                                                      u4210 E002  
                                                      u5010 EBFE  
                                                      u3430 D458  
                                                      u5030 D89C  
                                                      u3408 D428  
                                                      u5040 D8C0  
                                                      u3601 EE8A  
                                                      u3450 D474  
                                                      u5210 F964  
                                                      u5130 F8E8  
                                                      u3530 DEFC  
                                                      u4170 E35A  
                                                      u4218 E004  
                                                      u5050 D60C  
                                                      u3428 D440  
                                                      u3390 D426  
                                                      u3630 EEAA  
                                                      u3448 D45A  
                                                      u6040 F80A  
                                                      u3801 E4E6  
                                                      u4530 FBFA  
                                                      u5410 FA8E  
                                                      u5330 FA1A  
                                                      u5250 F99E  
                                                      u5170 F922  
                                                      u5090 F8AE  
                                                      u3490 DE7E  
                                                      u3730 EF50  
                                                      u3468 D476  
                                                      u5500 D6E6  
                                                      u3660 EED4  
                                                      u6140 F30E  
                                                      u3821 E50E  
                                                      u4710 FDC2  
                                                      u4630 FD34  
                                                      u3910 E614  
                                                      u7007 F910  
                                                      u3591 EE76  
                                                      u4720 FDE0  
                                                      u3760 EF84  
                                                      u5520 E230  
                                                      u4537 FBF0  
                                                      u7017 F952  
                                                      u4570 FC6A  
                                                      u5370 FA54  
                                                      u5290 F9D8  
                                                      u3690 EF12  
                                                      u6090 F26A  
                                                      u7107 DB82  
                                                      u7027 F98C  
                                                      u3915 E60C  
                                                      u4740 FE5C  
                                                      u4820 D736  
                                                      u7117 DBCC  
                                                      u7037 F9C6  
                                                      u4750 FE74  
                                                      u3950 E696  
                                                      u4910 F0A2  
                                                      u6190 F3B4  
                                                      u6350 D1EA  
                                                      u6430 DF72  
                                                      u6510 D92A  
                                                      u7047 FA08  
                                                      u4760 D268  
                                                      u5720 F540  
                                                      u4920 F0A4  
                                                      u4577 FC60  
                                                      u7057 FA42  
                                                      u4770 D290  
                                                      u5730 F568  
                                                      u5650 F476  
                                                      u6370 DE0E  
                                                      u6450 DFAE  
                                                      u6610 D966  
                                                      u6530 D930  
                                                      u7067 FA7C  
                                                      u3891 E5DA  
                                                      u5708 F4AE  
                                                      u3980 DB0C  
                                                      u7077 FAC0  
                                                      u5590 DB94  
                                                      u5830 F5F2  
                                                      u5750 F580  
                                                      u5670 F494  
                                                      u6390 DE2C  
                                                      u6710 D998  
                                                      u6630 D96E  
                                                      u6550 D944  
                                                      u4767 D25E  
                                                      u7087 D7EE  
                                                      u7097 CEEC  
                                                      u4777 D286  
                                                      u5850 F60A  
                                                      u5690 F4AC  
                                                      u5930 F69C  
                                                      u6650 D974  
                                                      u6570 D94C  
                                                      u6490 D922  
                                                      u6730 D4CE  
                                                      u5748 F56A  
                                                      u3988 DB0E  
                                                      u5940 F6B2  
                                                      u5790 F5A6  
                                                      u6670 D988  
                                                      u6590 D952  
                                                      u6807 DDB8  
                                                      u5848 F5F4  
                                                      u5768 F582  
                                                      u5688 F496  
                                                      u5880 DC2C  
                                                      u6817 DE5E  
                                                      u6690 D990  
                                                      u6907 F7A4  
                                                      u6827 E282  
                                                      u5868 F60C  
                                                      u5980 F74E  
                                                      u6917 F84A  
                                                      u6837 E290  
                                                      u5990 F764  
                                                      u6927 F4BE  
                                                      u6847 E29E  
                                                      u6937 F500  
                                                      u6857 E306  
                                                      u6777 CFC2  
                                                      u6947 F592  
                                                      u6867 F2AA  
                                                      u6787 CEFC  
                                                      u6957 F61C  
                                                      u6877 F34E  
                                                      u6797 DD68  
                                                      u6967 D538  
                                                      u6887 F3F4  
                                                      u6977 D572  
                                                      u6897 F6F2  
                                                      u6987 F89C  
                                                      u6997 F8D6  
                                          ?_lcd_send_nibble 0001  
                                                      _anio 00D1  
                                                      _flag 07B0  
                                                      _main CFAC  
                                                      _hora 00C9  
                                              ___ftpack@arg 0001  
                                              ___ftpack@exp 0004  
                                                      fsr0h 000FEA  
                                                      fsr1h 000FE2  
                                                      indf0 000FEF  
                                                      fsr2h 000FDA  
                                                      fsr0l 000FE9  
                                                      indf2 000FDF  
                                                      fsr1l 000FE1  
                                                      fsr2l 000FD9  
                                                      exp@x 0041  
                                                      log@x 003A  
                                             __CFG_T1DIG$ON 000000  
                                  ?_guarda_numero_ingresado 003F  
                                                      pow@x 004A  
                                                      pow@y 004D  
                                                      prodh 000FF4  
                                                      prodl 000FF3  
                                                      start 0000  
                                             __CFG_IESO$OFF 000000  
                                          RtccReadDate@rTD0 000B  
                                          RtccReadDate@rTD1 0003  
                                        _dia_ultimo_reporte 009C  
                                              ___ftmul@cntr 001A  
                                            ?_titila_opcion 0001  
                                              ___param_bank 000000  
                                              ___ftmul@sign 001B  
                                           RtccReadTime@pTm 0001  
                                              ___fttol@exp1 001B  
                                                     ??_exp 0044  
                                                     ??_log 003D  
                                              ___fttol@lval 0017  
                                                     ??_pow 0050  
                                               _Delay1KTCYx CEF8  
                                             __CFG_PLLDIV$1 000000  
                                                     ?_main 0001  
                                           __end_of___awdiv D774  
                                           __end_of___ftadd F012  
                                                     STR_10 FFC6  
                                                     STR_11 FF6B  
                                                     STR_12 FF10  
                                                     STR_20 FF08  
                                                     STR_13 FF10  
                                                     STR_21 FF08  
                                                     STR_30 FF11  
                                                     STR_14 FFF1  
                                                     STR_22 FFB7  
                                                     STR_31 FF10  
                                                     STR_15 FFAF  
                                                     STR_23 FF97  
                                                     STR_16 FF0A  
                                                     STR_40 FFB7  
                                                     STR_24 FF9F  
                                                     STR_32 FF74  
                                                     STR_25 FFA7  
                                                     STR_33 FF62  
                                                     STR_17 FF19  
                                                     STR_41 FEE1  
                                                     STR_42 FF08  
                                                     STR_34 FF7D  
                                                     STR_18 FF08  
                                                     STR_26 FECA  
                                                     STR_35 FF62  
                                                     STR_19 FF19  
                                                     STR_43 FFBF  
                                                     STR_27 FEF6  
                                                     STR_36 FF8F  
                                                     STR_28 FF59  
                                                     STR_37 FF86  
                                                     STR_29 FF86  
                                                     STR_38 FF2A  
                                                     STR_39 FF08  
                                     __size_of_Delay100TCYx 0010  
                                           __end_of___ftdiv E4D6  
                                           __end_of___ftneg CFAC  
                                           __end_of___ftmul E5CA  
                                           ___awdiv@divisor 0003  
                                           __end_of___ftsub D0D2  
                                           __end_of___fttol E6BE  
               covertir_valores_de_array_a_escala_decimal@i 00DB  
                                           __end_of___lwdiv D2EA  
                                           __end_of___lwmod D114  
                                           ___awdiv@counter 0005  
                                                     _TRISA 000F92  
                                                     _TRISB 000F93  
                                                     _TRISC 000F94  
                     activar_alarma@intentos_de_contrasenia 0044  
                                              ___lltoft@exp 0011  
                                            __CFG_FCMEN$OFF 000000  
                                             ___awtoft@sign 000C  
                              __size_of_mostrar_presionar_a 0018  
                                           __end_of_dpowers FE8D  
                                                     _floor E312  
                                                     _ldexp DFCA  
                                                     _frexp DABC  
                                                     _mes_d 00EC  
                                                     _errno 0088  
                                                     _mes_u 00ED  
                                           __end_of_isdigit CF66  
                                             ___ftpack@sign 0005  
                                                     _setup D15E  
                                    _titila_alarma_activada D506  
                                                     tablat 000FF5  
                                                     pow@yi 0057  
                                      _setHoraMinutoSegundo D5F6  
                                              lcd_putrs@ptr 0009  
                                                     status 000FD8  
                                           __end_of_sprintf FE82  
                                 _motivo_ingreso_de_numeros 00A2  
                                               exp@exponent 0047  
                                   __CFG_DSWDTOSC$INTOSCREF 000000  
                                               ldexp@newexp 003D  
                                            _activar_alarma F416  
                                           __initialization D346  
                                               log@exponent 003D  
                                              _Delay100TCYx CEE8  
                                              __end_of_main CFD0  
                                           ??_lcd_send_byte 0004  
                                          RtccReadTime@rTD0 000B  
                                          RtccReadTime@rTD1 0003  
                                          __end_of_Read_RTC EB54  
            __end_of_resetear_pantalla_ingresar_contrasenia D1F6  
           __size_of_resetear_pantalla_ingresar_contrasenia 004E  
                  ??_resetear_pantalla_ingresar_contrasenia 000B  
                   ?_resetear_pantalla_ingresar_contrasenia 0001  
                    _resetear_pantalla_ingresar_contrasenia D1A8  
                                                    ??_main 00E8  
                                             ___fttol@sign1 0016  
                                             __activetblptr 000002  
                                          __end_of_RtccWrOn CF1A  
                                            _alarma_sonando 009E  
                                                    ?_floor 002E  
                                                    ?_ldexp 003A  
                                                    ?_frexp 0001  
                                          __end_of___altoft D5F6  
                                  __size_of_generar_reporte 0032  
                                                    _EECON2 000FA7  
                                                    _ANCON0 000F48  
                                                    _ANCON1 000F49  
                                          ___awdiv@dividend 0001  
                                                    ?_setup 0001  
                                          __end_of___awtoft D092  
                   editar_fecha_reloj_digital@mes_ingresado 00DF  
                                          __end_of___ftpack DF1C  
                                __end_of_seleccionar_opcion D246  
                                          __end_of___lltoft D346  
                            __size_of_verificar_contrasenia 007E  
                                     ?_setHoraMinutoSegundo 0001  
                                            __CFG_WDTEN$OFF 000000  
                             __end_of_verificar_contrasenia D6F0  
                                          RtccWriteDate@pDt 0001  
                                                    _RTCCFG 000F3F  
                                            __CFG_WPCFG$OFF 000000  
                                          ??_cambiar_opcion 0001  
                                    __end_of_activar_alarma F634  
                                         _set_reloj_digital CEB6  
                                            __CFG_WPDIS$OFF 000000  
                                           ??_titila_opcion 000B  
                   resetear_pantalla_ingresar_contrasenia@i 000B  
                                            __CFG_XINST$OFF 000000  
                                        ?_set_reloj_digital 0001  
                                          __end_of_lcd_init D506  
                                          __end_of_lcd_putc D15E  
                                                    ___ftge DA2C  
                                                    ___wmul CFD0  
                                                 ??___awdiv 0005  
                                                 ??___ftadd 0028  
                                            __CFG_STVREN$ON 000000  
                                                 ??___ftdiv 000F  
                                                 ??___ftneg 0004  
                                                    _diasem 00CD  
                                                 ??___ftmul 0013  
                                                    _anio_d 00E9  
                                                 ??___ftsub 0034  
                                                 ??___fttol 0011  
                                                    _anio_u 00EA  
                                   ??_ir_a_pantalla_edicion 00E5  
                                                 ??___lwdiv 0005  
                                 __size_of_imprimir_reporte 00A2  
                                                 ??___lwmod 000C  
                                                    _hora_d 00F0  
                                                    _hora_u 00F1  
                                                    clear_0 D38C  
                                                    clear_1 D39C  
                                       ??_set_reloj_digital 003F  
                                          ___awdiv@quotient 0007  
                                                    _minuto 00C7  
                      __end_of_selecciona_opcion_fecha_hora D7FA  
                     __size_of_selecciona_opcion_fecha_hora 0086  
                              _selecciona_opcion_fecha_hora D774  
                                   ??_ir_a_pantalla_inicial 0060  
                                     __end_of_RtccWriteDate EA0E  
                                     __end_of_RtccWriteTime E7BA  
                                                    floor@i 0031  
                                                    floor@x 002E  
                                     ___ftmul@f3_as_product 0017  
                                          RtccWriteTime@pTm 0001  
                                                 ??_isdigit 0001  
                         editar_hora_reloj_digital@posicion 00E3  
                                              __mediumconst FE82  
                                                    tblptrh 000FF7  
                                                    tblptrl 000FF6  
                                                    tblptru 000FF8  
                                                 ??_sprintf 002E  
                                          __end_ofexp@coeff FEAF  
                                          __end_oflog@coeff FECA  
                                 __end_of_set_reloj_digital CEC0  
                                                __accesstop 0060  
                                   __end_of__initialization D3A2  
                                                ___altoft@c 001C  
                        __size_of_editar_hora_reloj_digital 021C  
                                                ___ftadd@f1 0022  
                                                ___ftadd@f2 0025  
                                        __size_of_Write_RTC 019C  
                                                ___ftge@ff1 0001  
                                                ___ftge@ff2 0004  
                                           ?_activar_alarma 0001  
                                              eval_poly@res 0037  
                                             ___rparam_used 000001  
                                                ___ftdiv@f1 0009  
                                                ___ftdiv@f2 000C  
                                                ___ftdiv@f3 0013  
                                                ___ftneg@f1 0001  
                                                ___awtoft@c 0009  
                                                ___ftmul@f1 000D  
                                                ___ftmul@f2 0010  
                                                ___ftsub@f1 002E  
                                                ___ftsub@f2 0031  
                                                ___fttol@f1 000D  
                                            __pcstackCOMRAM 0001  
                                              __pidataBANK0 CF1A  
                                              __pidataBANK1 CEC0  
                                                ___lltoft@c 0009  
                                             __end_of_floor E3F0  
                                             __end_of_ldexp E090  
                                             __end_of_frexp DB4C  
                      __end_of_titila_texto_insert_password DDC4  
                     __size_of_titila_texto_insert_password 00A4  
                              _titila_texto_insert_password DD20  
                                             __end_of_setup D1A8  
                                           _alarma_activada 00A0  
                                           __CFG_DSWDTPS$G2 000000  
                             ?_selecciona_opcion_fecha_hora 0001  
                                           __CFG_OSC$INTOSC 000000  
                __end_of_ir_a_pantalla_ingresar_contrasenia DFCA  
               __size_of_ir_a_pantalla_ingresar_contrasenia 00AE  
                      ??_ir_a_pantalla_ingresar_contrasenia 0060  
                       ?_ir_a_pantalla_ingresar_contrasenia 0001  
                        _ir_a_pantalla_ingresar_contrasenia DF1C  
                                         lcd_gotoxy@address 0007  
                                        __size_of_lcd_putrs 0052  
                                                   ??_floor 0031  
                                                   ??_ldexp 003F  
                                                   ??_frexp 0006  
                  __end_of_ir_a_pantalla_editar_contrasenia DC7E  
                 __size_of_ir_a_pantalla_editar_contrasenia 009E  
                        ??_ir_a_pantalla_editar_contrasenia 0043  
                         ?_ir_a_pantalla_editar_contrasenia 0001  
                          _ir_a_pantalla_editar_contrasenia DBE0  
                                    ??_setHoraMinutoSegundo 003F  
                                              sprintf@width 003D  
                                                   ??_setup 003F  
                                                __pbssBANK0 0060  
                                                __pbssBANK1 0100  
                                        __size_of_eval_poly 00D2  
                                                 ?_Read_RTC 0001  
                                                _dia_semana 00EB  
                                 RtccWriteTime@tempHourWDay 000A  
                                         ??_generar_reporte 0001  
                         __end_of_editar_hora_reloj_digital F416  
                                                 ?_RtccWrOn 0001  
                                            lcd_send_byte@n 0003  
                                                   ?___ftge 0001  
                                       _mostrar_presionar_a CF30  
                                                   ?___wmul 001C  
                                       _anio_ultimo_reporte 0098  
                                             ?_RtccReadDate 0001  
                                             ?_RtccReadTime 0001  
                       __size_of_editar_fecha_reloj_digital 0238  
                                              ?_Delay1KTCYx 0001  
                                                 ?___altoft 001C  
                                                 ?___awtoft 0009  
                                    __size_of_setDiaMesAnio 008C  
                                                 ?___ftpack 0001  
                          __size_of_guarda_numero_ingresado 008C  
                                                 ?___lltoft 0009  
                             ?_titila_texto_insert_password 0001  
                                         __end_of_Write_RTC EE66  
                                                _lcd_comand CEDA  
                                                _lcd_gotoxy CF66  
                                   ?_titila_alarma_activada 0001  
                                      ?_mostrar_presionar_a 0001  
                                                   _RTCVALH 000F99  
                                                   _RTCVALL 000F98  
                                    _minutos_ultimo_reporte 0094  
                                    verificar_contrasenia@i 0009  
                                                 ?_lcd_init 0001  
                                                 ?_lcd_putc 0001  
                                __size_of_set_reloj_digital 000A  
                                                ??_Read_RTC 0013  
                                                   __Hparam 0000  
                   editar_fecha_reloj_digital@dia_ingresado 00DD  
                                                   __Lparam 0000  
                                  __size_of_lcd_send_nibble 0076  
                                                ??_RtccWrOn 0001  
                                            ??_RtccReadDate 0003  
                                           __size_of___ftge 0090  
                                            ??_RtccReadTime 0003  
                                                   ___awdiv D6F0  
                                                   ___ftadd EE66  
                                         __end_of_lcd_putrs D298  
                                                   ___ftdiv E3F0  
                                                   ___ftneg CF88  
                                           __size_of___wmul 0026  
                                                   ___ftmul E4D6  
                                                   ___ftsub D092  
                                                   ___fttol E5CA  
                                          _imprimir_reporte DC7E  
                                                   ___lwdiv D298  
                                                   ___lwmod D0D2  
                                   __size_of_ingreso_numero 0268  
                                                ??___altoft 0020  
                                               _RtccTimeVal 0084  
                                                   __pcinit D346  
                                                   _fecha_d 00EE  
                                                   _fecha_u 00EF  
                                                ??___awtoft 000C  
                                                ??___ftpack 0006  
                                         __end_of_eval_poly E162  
                                                   __ramtop 0F00  
                                                ??___lltoft 000D  
                                                   __ptext0 CFAC  
                                                   __ptext1 D15E  
                                                   __ptext2 D490  
                                                   __ptext3 CEF8  
                                                   __ptext4 CEDA  
                                                   __ptext5 CECC  
                                                   __ptext6 DD20  
                                                   __ptext7 D912  
                                                   __ptext8 DF1C  
                                                   __ptext9 D1A8  
                                                   _buffer2 0114  
                                                   _buffer3 0100  
                                                 _T1CONbits 000FCD  
                                                   _dpowers FE83  
                                              __size_of_exp 01E8  
                                              __size_of_log 011E  
                                                   _isdigit CF48  
                                              __size_of_pow 0176  
                            __end_of_titila_alarma_activada D57E  
                                        _numeros_ingresados 00A4  
                                        _numeros_para_fecha 0080  
                                                   _segundo 00A6  
                                     ??_mostrar_presionar_a 000B  
ir_a_pantalla_ingresar_contrasenia@intentos_de_contrasenias 00E6  
                            ??_selecciona_opcion_fecha_hora 000B  
                                                   _sprintf FAD4  
                                                ??_lcd_init 0005  
                                                ??_lcd_putc 0008  
                                      end_of_initialization D3A2  
                                                   exp@sign 0049  
                                             _setDiaMesAnio D886  
                                      lcd_send_byte@address 0004  
                                             __Lmediumconst FE82  
                                   _segundos_ultimo_reporte 0092  
                               verificar_contrasenia@equals 0007  
                                                   pow@sign 0056  
                                                   postdec1 000FE5  
                                                   postdec2 000FDD  
                                        _seleccionar_opcion D1F6  
                                                   postinc0 000FEE  
                                                   postinc1 000FE6  
                                                   postinc2 000FDE  
                                     __end_of_lcd_send_byte D028  
                            __size_of_ir_a_pantalla_edicion 00AA  
                             __end_of_ir_a_pantalla_edicion DE6E  
                                                 _PORTAbits 000F80  
                                                 _PORTCbits 000F82  
                                       ?_seleccionar_opcion 0001  
                                          __CFG_DSBOREN$OFF 000000  
                            __size_of_ir_a_pantalla_inicial 000E  
                             __end_of_ir_a_pantalla_inicial CEDA  
                        __end_of_editar_fecha_reloj_digital F86C  
                                _editar_fecha_reloj_digital F634  
                                               ?_lcd_comand 0001  
                                          __CFG_CPUDIV$OSC1 000000  
                                                 _TRISBbits 000F93  
                            ??_titila_texto_insert_password 000B  
                                               ?_lcd_gotoxy 0005  
                                           _LCD_INIT_STRING FE8D  
                                          ??_activar_alarma 0043  
                                            ?_setDiaMesAnio 0001  
                                      ??_seleccionar_opcion 0060  
                                               ___ftdiv@exp 0016  
                                     _verificar_contrasenia D672  
                                          __CFG_IOL1WAY$OFF 000000  
                                 RtccWriteDate@tempDayMonth 000A  
                                       __CFG_MSSP7B_EN$MSK7 000000  
                                               ___ftmul@exp 0016  
                                     __end_of_titila_opcion E312  
                editar_hora_reloj_digital@segundo_ingresado 00E1  
                                          Delay100TCYx@unit 0001  
                                            __end_of___ftge DABC  
                                            __end_of___wmul CFF6  
                                   _guarda_numero_ingresado D7FA  
                                 RtccWriteDate@tempHourWDay 000C  
                   editar_hora_reloj_digital@hora_ingresada 00DD  
                                         ??_lcd_send_nibble 0001  
                                             __pbitbssBANK0 07B0  
                                      __size_of_Delay1KTCYx 0010  
                                          __CFG_DSWDTEN$OFF 000000  
                 editar_hora_reloj_digital@minuto_ingresado 00DF  
                                                floor@expon 0034  
                                       start_initialization D346  
                                                eval_poly@d 0031  
                                                eval_poly@n 0033  
                                                eval_poly@x 002E  
                                                ldexp@value 003A  
                                           _generar_reporte D028  
                                               __end_of_exp F1FA  
                                               __end_of_log E8D8  
                                               __end_of_pow ECCA  
                                      __end_of_RtccReadDate DA2C  
                                      __end_of_RtccReadTime D41A  
        __end_of_covertir_valores_de_array_a_escala_decimal E23A  
       __size_of_covertir_valores_de_array_a_escala_decimal 00D8  
              ??_covertir_valores_de_array_a_escala_decimal 005D  
               ?_covertir_valores_de_array_a_escala_decimal 005B  
                _covertir_valores_de_array_a_escala_decimal E162  
                                                frexp@value 0001  
                                      RtccWriteTime@wasAlrm 0006  
                                      RtccWriteTime@wasWrEn 0007  
                                    __size_of_RtccWriteDate 0136  
                                           RtccWriteDate@di 0003  
                                    __size_of_RtccWriteTime 00FC  
                                         __size_of_Read_RTC 0146  
                                       __size_of_lcd_comand 000E  
                                                  ??___ftge 0007  
                                       __size_of_lcd_gotoxy 0022  
                                                  ??___wmul 0020  
                                            _ingreso_numero F86C  
                                               __pdataBANK0 00BD  
                                               __pdataBANK1 0128  
                                         __size_of_RtccWrOn 0012  
                                           RtccWriteTime@di 0003  
                                          __CFG_LPT1OSC$OFF 000000  
                                   __size_of_cambiar_opcion 0094  
                                         __size_of___altoft 0078  
                                               _ALRMCFGbits 000F91  
                                   __end_of_LCD_INIT_STRING FE91  
                                         __size_of___awtoft 0038  
                                         __size_of___ftpack 00AE  
                                         __size_of___lltoft 005C  
                                             __pcstackBANK0 00D3  
                                                 _Write_RTC ECCA  
                                           ??_setDiaMesAnio 003F  
                                              _isdigit$2012 0002  
                                  __end_of_imprimir_reporte DD20  
                                           Delay1KTCYx@unit 0001  
                             __size_of_setHoraMinutoSegundo 007C  
                                             _causa_reporte 00C5  
                                    ?_verificar_contrasenia 0001  
                                         __size_of_lcd_init 0076  
                                               sprintf@flag 003B  
                                         __size_of_lcd_putc 004A  
                                               sprintf@prec 0032  
                                         _array_contrasenia 00BD  
                                                 __pnvBANK0 00E9  
                                          ___lwdiv@dividend 0001  
                                ?_editar_hora_reloj_digital 0001  
                                    __end_of_ingreso_numero FAD4  
                                             ?_Delay100TCYx 0001  
                                 ??_guarda_numero_ingresado 0041  
                                             __pmediumconst FE82  
                                                  ?___awdiv 0001  
                                                  ?___ftadd 0022  
                                                  ?___ftdiv 0009  
                                                  ?___ftneg 0001  
                                                  ?___ftmul 000D  
                                                  ?___ftsub 002E  
                                                  ?___fttol 000D  
                                                  ?___lwdiv 0001  
                                                  ?___lwmod 0008  
                                   RtccWriteTime@tempMinSec 0008  
                               _array_contrasenia_ingresada 0060  
                                   __end_of_generar_reporte D05A  
                                                 _lcd_putrs D246  
                                             _RtccWriteDate E8D8  
                                             _RtccWriteTime E6BE  
                                                  ?_isdigit 0001  
                                                 _eval_poly E090  
                                      __CFG_RTCOSC$T1OSCREF 000000  
                                                ?_Write_RTC 0001  
                                          ___lwdiv@quotient 0005  
                                                  ?_sprintf 0022  
                                            __size_of_floor 00DE  
                                            __size_of_ldexp 00C6  
                                            __size_of_frexp 0090  
                              ??_editar_fecha_reloj_digital 005F  
                                            __size_of_setup 004A  
                                          _RtccAlrmTimeDate 0070  
                                            ___wmul@product 0020  
                                                  _LATAbits 000F89  
                                                  _LATBbits 000F8A  
                                                  _PIE3bits 000FA3  
                                                 _segundo_d 00F4  
                                            ??_Delay100TCYx 0001  
                                                 _segundo_u 00F5  
                                           ?_ingreso_numero 0001  
                                          __CFG_WDTPS$32768 000000  
                        editar_fecha_reloj_digital@posicion 00E3  
                                        RtccWriteDate@wasOn 0005  
                                  _txt_insertar_contrasenia 008E  
                                        _Rtcc_read_TimeDate 0068  
                                            ?_RtccWriteDate 0001  
                               __end_of_mostrar_presionar_a CF48  
                                                ?_lcd_putrs 0009  
                                         ___wmul@multiplier 001C  
                                            ?_RtccWriteTime 0001  
                                                 lcd_init@i 0005  
                                     __size_of_RtccReadDate 008E  
                                              ??_lcd_comand 0005  
                                                ?_eval_poly 002E  
                               ?_editar_fecha_reloj_digital 0001  
                  editar_fecha_reloj_digital@anio_ingresado 00E1  
                                                 lcd_putc@c 0008  
                                     __size_of_RtccReadTime 006E  
                                              ??_lcd_gotoxy 0006  
                           __end_of_guarda_numero_ingresado D886  
                                                 copy_data0 D35A  
                                                 copy_data1 D37A  
                                                  _Read_RTC EA0E  
                                         _array_seleccionar 0128  
                                                 frexp@eptr 0004  
                                           _lcd_send_nibble D41A  
                                                  __Hrparam 0000  
                                                  _RtccDate 00B5  
                                                  __Lrparam 0000  
                                                  _RtccTime 00B9  
                                                  _RtccWrOn CF08  
                                        __end_of_lcd_comand CEE8  
                                        __end_of_lcd_gotoxy CF88  
                                              _RtccReadDate D99E  
                                            _cambiar_opcion DB4C  
                                          __size_of___awdiv 0084  
                                          __size_of___ftadd 01AC  
                                              _RtccReadTime D3AC  
                                          __size_of___ftdiv 00E6  
                                          __size_of___ftneg 0024  
                                                  ___altoft D57E  
                                          __size_of___ftmul 00F4  
                                          __size_of___ftsub 0040  
                                          __size_of___fttol 00F4  
                                          __size_of___lwdiv 0052  
                                          __size_of___lwmod 0042  
                                                  ___awtoft D05A  
                                                  ___ftpack DE6E  
                                                  ___lltoft D2EA  
                         ir_a_pantalla_editar_contrasenia@i 0043  
                                          ?_generar_reporte 0001  
                                              _RtccTimeDate 0078  
           _covertir_valores_de_array_a_escala_decimal$2493 00D3  
           _covertir_valores_de_array_a_escala_decimal$2494 00D6  
                                                  _exp$2497 0044  
                                     _ir_a_pantalla_edicion DDC4  
                                                sprintf@len 0037  
                                                sprintf@val 0039  
                                          __size_of_isdigit 001E  
                                           ___lwdiv@divisor 0003  
                                     _ir_a_pantalla_inicial CECC  
                                               ??_Write_RTC 000E  
                                           ___lwdiv@counter 0007  
                                                  __ptext10 CF30  
                                                  __ptext11 DDC4  
                                                  __ptext20 ECCA  
                                                  __ptext12 E23A  
                                                  __ptext21 D6F0  
                                                  __ptext13 CEB6  
                                                  __ptext30 E312  
                                                  __ptext22 E6BE  
                                                  __ptext14 D1F6  
                                                  __ptext31 DABC  
                                                  __ptext23 E8D8  
                                                  __ptext15 DBE0  
                                                  __ptext40 E3F0  
                                                  __ptext32 E5CA  
                                                  __ptext24 CF08  
                                                  __ptext16 F1FA  
                                                  __ptext41 D05A  
                                                  __ptext33 DA2C  
                                                  __ptext25 E162  
                                                  __ptext17 D5F6  
                                                  __ptext50 D774  
                                                  __ptext42 D2EA  
                                                  __ptext34 D57E  
                                                  __ptext26 EB54  
                                                  __ptext18 F634  
                                                  __ptext51 DC7E  
                                                  __ptext43 DE6E  
                                                  __ptext35 E090  
                                                  __ptext27 E7BA  
                                                  __ptext19 D886  
                                                  __ptext60 CFF6  
                                                  __ptext52 FAD4  
                                                  __ptext44 F416  
                                                  __ptext36 E4D6  
                                                  __ptext28 F012  
                                                  __ptext61 D41A  
                                                  __ptext53 CF48  
                                                  __ptext45 D672  
                                                  __ptext37 D092  
                                                  __ptext29 DFCA  
                                                  __ptext62 CEE8  
                                                  __ptext54 CFD0  
                                                  __ptext46 D506  
                                                  __ptext38 EE66  
                                                  __ptext63 DB4C  
                                                  __ptext55 D0D2  
                                                  __ptext47 F86C  
                                                  __ptext39 CF88  
                                                  __ptext64 EA0E  
                                                  __ptext56 D298  
                                                  __ptext48 D7FA  
                                                  __ptext65 D3AC  
                                                  __ptext57 D246  
                                                  __ptext49 D028  
                                                  __ptext66 D99E  
                                                  __ptext58 D114  
                                                  __ptext59 CF66  
                                                  _lcd_init D490  
                                                  _lcd_putc D114  
                                                  _pow$2495 0050  
                                                  _pow$2496 0053  
                                          __size_of_sprintf 03AE  
                                    __size_of_lcd_send_byte 0032  
                                             __size_of_main 0024  
                               __size_of_seleccionar_opcion 0050  
                                                  _minuto_d 00F2  
                                                  _minuto_u 00F3  
                                    __end_of_cambiar_opcion DBE0  
                                             ??_Delay1KTCYx 0001  
                                           ??_RtccWriteDate 0004  
                                  ??_titila_alarma_activada 000B  
                                           ??_RtccWriteTime 0004  
                                               ??_lcd_putrs 000B  
                                                  exp@coeff FE91  
                                                  log@coeff FEAF  
                                               _OSCTUNEbits 000F9B  
                                                _INTCONbits 000FF2  
        __end_of_si_apreta_numero_va_a_pantalla_contrasenia D99E  
       __size_of_si_apreta_numero_va_a_pantalla_contrasenia 008C  
              ??_si_apreta_numero_va_a_pantalla_contrasenia 0060  
               ?_si_apreta_numero_va_a_pantalla_contrasenia 0001  
                _si_apreta_numero_va_a_pantalla_contrasenia D912  
                                               ??_eval_poly 0035  
                                      _txt_pantalla_edicion 008A  
                                        RtccWriteTime@wasOn 0005  
                                      __end_of_Delay100TCYx CEF8  
                                                  isdigit@c 0003  
                                    __size_of_titila_opcion 00D8  
                                   ??_verificar_contrasenia 0003  
                                                 sprintf@ap 0035  
                                                 sprintf@cp 0033  
                                   __end_of_lcd_send_nibble D490  
                                         ?_imprimir_reporte 0001  
                                                 sprintf@sp 0022  
                                          ___lwmod@dividend 0008  
                                        ??_imprimir_reporte 003F  
                                                _OSCCONbits 000FD3  
                               ??_editar_hora_reloj_digital 005F  
                                   __size_of_activar_alarma 021E  
                                         _boton_seleccionar 0090  
                                           ?_cambiar_opcion 0001  
                                     RtccWriteDate@tempYear 0007  
                              __end_of_setHoraMinutoSegundo D672  
                                             _lcd_send_byte CFF6  
                                                _RTCCFGbits 000F3F  
                                    ?_ir_a_pantalla_edicion 0001  
                                                  sprintf@c 003C  
                                                  sprintf@f 0024  
                                           ___lwmod@divisor 000A  
                                       __end_of_Delay1KTCYx CF08  
                                           ___lwmod@counter 000C  
                                    ?_ir_a_pantalla_inicial 0001  
                                      RtccWriteDate@wasAlrm 0006  
                                      RtccWriteDate@wasWrEn 0009  
                                     __end_of_setDiaMesAnio D912  
          covertir_valores_de_array_a_escala_decimal@numero 00D9  
                                        _mes_ultimo_reporte 009A  
                                          ??_ingreso_numero 0041  
                                       _txt_alarma_activada 008C  
                                     lcd_send_nibble@nibble 0002  
