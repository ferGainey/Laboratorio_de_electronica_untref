

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 15 21:07:33 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44  0000                     
    45                           ; Version 1.43
    46                           ; Generated 25/07/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F26J50 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  002250                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _minuto
    85  002250  001E               	dw	30
    86                           
    87                           ;initializer for _hora
    88  002252  0012               	dw	18
    89                           
    90                           ;initializer for _dia
    91  002254  0008               	dw	8
    92                           
    93                           ;initializer for _diasem
    94  002256  0003               	dw	3
    95                           
    96                           ;initializer for _mes
    97  002258  0009               	dw	9
    98                           
    99                           ;initializer for _anio
   100  00225A  000F               	dw	15
   101                           
   102                           	psect	idataBANK0
   103  002234                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _array_seleccionar
   107  002234  7A                 	db	low STR_1
   108  002235  0F                 	db	high STR_1
   109  002236  75                 	db	low STR_2
   110  002237  0F                 	db	high STR_2
   111  002238  93                 	db	low STR_3
   112  002239  0F                 	db	high STR_3
   113  00223A  8E                 	db	low STR_4
   114  00223B  0F                 	db	high STR_4
   115  00223C  7F                 	db	low STR_5
   116  00223D  0F                 	db	high STR_5
   117  00223E  89                 	db	low STR_6
   118  00223F  0F                 	db	high STR_6
   119  002240  84                 	db	low STR_7
   120  002241  0F                 	db	high STR_7
   121                           
   122                           	psect	smallconst
   123  000F00                     __psmallconst:
   124                           	opt stack 0
   125  000F00  00                 	db	0
   126  000F01                     _dpowers:
   127                           	opt stack 0
   128  000F01  0001               	dw	1
   129  000F03  000A               	dw	10
   130  000F05  0064               	dw	100
   131  000F07  03E8               	dw	1000
   132  000F09  2710               	dw	10000
   133  000F0B                     __end_of_dpowers:
   134                           	opt stack 0
   135  000F0B                     _LCD_INIT_STRING:
   136                           	opt stack 0
   137  000F0B  28                 	db	40
   138  000F0C  0C                 	db	12
   139  000F0D  01                 	db	1
   140  000F0E  06                 	db	6
   141  000F0F                     __end_of_LCD_INIT_STRING:
   142                           	opt stack 0
   143  0000                     _RTCCFG	set	3903
   144  0000                     _ANCON1	set	3913
   145  0000                     _ANCON0	set	3912
   146  0000                     _RTCCFGbits	set	3903
   147  0000                     _ALRMCFGbits	set	3985
   148  0000                     _EECON2	set	4007
   149  0000                     _INTCONbits	set	4082
   150  0000                     _RTCVALH	set	3993
   151  0000                     _RTCVALL	set	3992
   152  0000                     _TRISBbits	set	3987
   153  0000                     _LATBbits	set	3978
   154  0000                     _PORTAbits	set	3968
   155  0000                     _T1CONbits	set	4045
   156  0000                     _ADCON1	set	4033
   157  0000                     _ADCON0	set	4034
   158  0000                     _INTCON2bits	set	4081
   159  0000                     _TRISC	set	3988
   160  0000                     _TRISB	set	3987
   161  0000                     _TRISA	set	3986
   162  0000                     _OSCCONbits	set	4051
   163  0000                     _OSCTUNEbits	set	3995
   164  0000                     _PIE3bits	set	4003
   165  000F0F                     STR_15:
   166                           
   167                           ; BSR set to: 15
   168  000F0F  25                 	db	37
   169  000F10  30                 	db	48	;'0'
   170  000F11  32                 	db	50	;'2'
   171  000F12  75                 	db	117	;'u'
   172  000F13  2F                 	db	47
   173  000F14  25                 	db	37
   174  000F15  30                 	db	48	;'0'
   175  000F16  32                 	db	50	;'2'
   176  000F17  75                 	db	117	;'u'
   177  000F18  2F                 	db	47
   178  000F19  25                 	db	37
   179  000F1A  30                 	db	48	;'0'
   180  000F1B  32                 	db	50	;'2'
   181  000F1C  75                 	db	117	;'u'
   182  000F1D  00                 	db	0
   183  000F1E                     STR_16:
   184                           
   185                           ; BSR set to: 15
   186  000F1E  25                 	db	37
   187  000F1F  30                 	db	48	;'0'
   188  000F20  32                 	db	50	;'2'
   189  000F21  75                 	db	117	;'u'
   190  000F22  3A                 	db	58	;':'
   191  000F23  25                 	db	37
   192  000F24  30                 	db	48	;'0'
   193  000F25  32                 	db	50	;'2'
   194  000F26  75                 	db	117	;'u'
   195  000F27  3A                 	db	58	;':'
   196  000F28  25                 	db	37
   197  000F29  30                 	db	48	;'0'
   198  000F2A  32                 	db	50	;'2'
   199  000F2B  75                 	db	117	;'u'
   200  000F2C  00                 	db	0
   201  000F2D                     STR_18:
   202                           
   203                           ; BSR set to: 15
   204  000F2D  20                 	db	32
   205  000F2E  20                 	db	32
   206  000F2F  20                 	db	32
   207  000F30  20                 	db	32
   208  000F31  20                 	db	32
   209  000F32  20                 	db	32
   210  000F33  20                 	db	32
   211  000F34  20                 	db	32
   212  000F35  00                 	db	0
   213  000F36                     STR_9:
   214                           
   215                           ; BSR set to: 15
   216  000F36  4C                 	db	76	;'L'
   217  000F37  75                 	db	117	;'u'
   218  000F38  6E                 	db	110	;'n'
   219  000F39  65                 	db	101	;'e'
   220  000F3A  73                 	db	115	;'s'
   221  000F3B  20                 	db	32
   222  000F3C  20                 	db	32
   223  000F3D  00                 	db	0
   224  000F3E                     STR_14:
   225                           
   226                           ; BSR set to: 15
   227  000F3E  53                 	db	83	;'S'
   228  000F3F  61                 	db	97	;'a'
   229  000F40  62                 	db	98	;'b'
   230  000F41  61                 	db	97	;'a'
   231  000F42  64                 	db	100	;'d'
   232  000F43  6F                 	db	111	;'o'
   233  000F44  20                 	db	32
   234  000F45  00                 	db	0
   235  000F46                     STR_10:
   236                           
   237                           ; BSR set to: 15
   238  000F46  4D                 	db	77	;'M'
   239  000F47  61                 	db	97	;'a'
   240  000F48  72                 	db	114	;'r'
   241  000F49  74                 	db	116	;'t'
   242  000F4A  65                 	db	101	;'e'
   243  000F4B  73                 	db	115	;'s'
   244  000F4C  20                 	db	32
   245  000F4D  00                 	db	0
   246  000F4E                     STR_12:
   247                           
   248                           ; BSR set to: 15
   249  000F4E  4A                 	db	74	;'J'
   250  000F4F  75                 	db	117	;'u'
   251  000F50  65                 	db	101	;'e'
   252  000F51  76                 	db	118	;'v'
   253  000F52  65                 	db	101	;'e'
   254  000F53  73                 	db	115	;'s'
   255  000F54  20                 	db	32
   256  000F55  00                 	db	0
   257  000F56                     STR_11:
   258                           
   259                           ; BSR set to: 15
   260  000F56  4D                 	db	77	;'M'
   261  000F57  69                 	db	105	;'i'
   262  000F58  65                 	db	101	;'e'
   263  000F59  72                 	db	114	;'r'
   264  000F5A  63                 	db	99	;'c'
   265  000F5B  6F                 	db	111	;'o'
   266  000F5C  6C                 	db	108	;'l'
   267  000F5D  00                 	db	0
   268  000F5E                     STR_8:
   269                           
   270                           ; BSR set to: 15
   271  000F5E  44                 	db	68	;'D'
   272  000F5F  6F                 	db	111	;'o'
   273  000F60  6D                 	db	109	;'m'
   274  000F61  69                 	db	105	;'i'
   275  000F62  6E                 	db	110	;'n'
   276  000F63  67                 	db	103	;'g'
   277  000F64  6F                 	db	111	;'o'
   278  000F65  00                 	db	0
   279  000F66                     STR_13:
   280                           
   281                           ; BSR set to: 15
   282  000F66  56                 	db	86	;'V'
   283  000F67  69                 	db	105	;'i'
   284  000F68  65                 	db	101	;'e'
   285  000F69  72                 	db	114	;'r'
   286  000F6A  6E                 	db	110	;'n'
   287  000F6B  65                 	db	101	;'e'
   288  000F6C  73                 	db	115	;'s'
   289  000F6D  00                 	db	0
   290  000F6E                     STR_20:
   291                           
   292                           ; BSR set to: 15
   293  000F6E  28                 	db	40
   294  000F6F  6E                 	db	110	;'n'
   295  000F70  75                 	db	117	;'u'
   296  000F71  6C                 	db	108	;'l'
   297  000F72  6C                 	db	108	;'l'
   298  000F73  29                 	db	41
   299  000F74  00                 	db	0
   300  000F75                     STR_2:
   301                           
   302                           ; BSR set to: 15
   303  000F75  20                 	db	32
   304  000F76  44                 	db	68	;'D'
   305  000F77  69                 	db	105	;'i'
   306  000F78  61                 	db	97	;'a'
   307  000F79  00                 	db	0
   308  000F7A                     STR_1:
   309                           
   310                           ; BSR set to: 15
   311  000F7A  4E                 	db	78	;'N'
   312  000F7B  64                 	db	100	;'d'
   313  000F7C  69                 	db	105	;'i'
   314  000F7D  61                 	db	97	;'a'
   315  000F7E  00                 	db	0
   316  000F7F                     STR_5:
   317                           
   318                           ; BSR set to: 15
   319  000F7F  48                 	db	72	;'H'
   320  000F80  6F                 	db	111	;'o'
   321  000F81  72                 	db	114	;'r'
   322  000F82  61                 	db	97	;'a'
   323  000F83  00                 	db	0
   324  000F84                     STR_7:
   325                           
   326                           ; BSR set to: 15
   327  000F84  20                 	db	32
   328  000F85  53                 	db	83	;'S'
   329  000F86  65                 	db	101	;'e'
   330  000F87  67                 	db	103	;'g'
   331  000F88  00                 	db	0
   332  000F89                     STR_6:
   333                           
   334                           ; BSR set to: 15
   335  000F89  20                 	db	32
   336  000F8A  4D                 	db	77	;'M'
   337  000F8B  69                 	db	105	;'i'
   338  000F8C  6E                 	db	110	;'n'
   339  000F8D  00                 	db	0
   340  000F8E                     STR_4:
   341                           
   342                           ; BSR set to: 15
   343  000F8E  41                 	db	65	;'A'
   344  000F8F  6E                 	db	110	;'n'
   345  000F90  69                 	db	105	;'i'
   346  000F91  6F                 	db	111	;'o'
   347  000F92  00                 	db	0
   348  000F93                     STR_3:
   349                           
   350                           ; BSR set to: 15
   351  000F93  20                 	db	32
   352  000F94  4D                 	db	77	;'M'
   353  000F95  65                 	db	101	;'e'
   354  000F96  73                 	db	115	;'s'
   355  000F97  00                 	db	0
   356  000F98                     STR_17:
   357                           
   358                           ; BSR set to: 15
   359  000F98  45                 	db	69	;'E'
   360  000F99  64                 	db	100	;'d'
   361  000F9A  74                 	db	116	;'t'
   362  000F9B  00                 	db	0
   363  000F9C                     STR_19:
   364                           
   365                           ; BSR set to: 15
   366  000F9C  25                 	db	37
   367  000F9D  73                 	db	115	;'s'
   368  000F9E  00                 	db	0
   369                           
   370                           ; #config settings
   371  000F9F  00                 	db	0	; dummy byte at the end
   372  0000                     
   373                           	psect	cinit
   374  001F8E                     __pcinit:
   375                           	opt stack 0
   376  001F8E                     start_initialization:
   377                           	opt stack 0
   378  001F8E                     __initialization:
   379                           	opt stack 0
   380                           
   381                           ; Initialize objects allocated to BANK0 (14 bytes)
   382                           ; load TBLPTR registers with __pidataBANK0
   383  001F8E  0E34               	movlw	low __pidataBANK0
   384  001F90  6EF6               	movwf	tblptrl,c
   385  001F92  0E22               	movlw	high __pidataBANK0
   386  001F94  6EF7               	movwf	tblptrh,c
   387  001F96  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   388  001F98  6EF8               	movwf	tblptru,c
   389  001F9A  EE00  F090         	lfsr	0,__pdataBANK0
   390  001F9E  EE10 F00E          	lfsr	1,14
   391  001FA2                     copy_data0:
   392  001FA2  0009               	tblrd		*+
   393  001FA4  CFF5 FFEE          	movff	tablat,postinc0
   394  001FA8  50E5               	movf	postdec1,w,c
   395  001FAA  50E1               	movf	fsr1l,w,c
   396  001FAC  E1FA               	bnz	copy_data0
   397                           
   398                           ; Initialize objects allocated to COMRAM (12 bytes)
   399                           ; load TBLPTR registers with __pidataCOMRAM
   400  001FAE  0E50               	movlw	low __pidataCOMRAM
   401  001FB0  6EF6               	movwf	tblptrl,c
   402  001FB2  0E22               	movlw	high __pidataCOMRAM
   403  001FB4  6EF7               	movwf	tblptrh,c
   404  001FB6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   405  001FB8  6EF8               	movwf	tblptru,c
   406  001FBA  EE00  F050         	lfsr	0,__pdataCOMRAM
   407  001FBE  EE10 F00C          	lfsr	1,12
   408  001FC2                     copy_data1:
   409  001FC2  0009               	tblrd		*+
   410  001FC4  CFF5 FFEE          	movff	tablat,postinc0
   411  001FC8  50E5               	movf	postdec1,w,c
   412  001FCA  50E1               	movf	fsr1l,w,c
   413  001FCC  E1FA               	bnz	copy_data1
   414                           
   415                           ; Clear objects allocated to BANK0 (48 bytes)
   416  001FCE  EE00  F060         	lfsr	0,__pbssBANK0
   417  001FD2  0E30               	movlw	48
   418  001FD4                     clear_0:
   419  001FD4  6AEE               	clrf	postinc0,c
   420  001FD6  06E8               	decf	wreg,f,c
   421  001FD8  E1FD               	bnz	clear_0
   422                           
   423                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   424  001FDA  6A5C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   425                           
   426                           ; Clear objects allocated to COMRAM (35 bytes)
   427  001FDC  EE00  F02D         	lfsr	0,__pbssCOMRAM
   428  001FE0  0E23               	movlw	35
   429  001FE2                     clear_1:
   430  001FE2  6AEE               	clrf	postinc0,c
   431  001FE4  06E8               	decf	wreg,f,c
   432  001FE6  E1FD               	bnz	clear_1
   433  001FE8                     end_of_initialization:
   434                           	opt stack 0
   435  001FE8                     __end_of__initialization:
   436                           	opt stack 0
   437  001FE8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   438  001FEA  6EF8               	movwf	tblptru,c
   439  001FEC  0100               	movlb	0
   440  001FEE  EFD0  F007         	goto	_main	;jump to C main() function
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	bitbssCOMRAM
   451  0002E0                     __pbitbssCOMRAM:
   452                           	opt stack 0
   453  0002E0                     _flag:
   454                           	opt stack 0
   455  0002E0                     	ds	1
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1l	equ	0xFE1
   464                           
   465                           	psect	bssCOMRAM
   466  00002D                     __pbssCOMRAM:
   467                           	opt stack 0
   468  00002D                     _segundo:
   469                           	opt stack 0
   470  00002D                     	ds	2
   471  00002F                     _k:
   472                           	opt stack 0
   473  00002F                     	ds	2
   474  000031                     _c:
   475                           	opt stack 0
   476  000031                     	ds	2
   477  000033                     _b:
   478                           	opt stack 0
   479  000033                     	ds	2
   480  000035                     _a:
   481                           	opt stack 0
   482  000035                     	ds	2
   483  000037                     _j:
   484                           	opt stack 0
   485  000037                     	ds	2
   486  000039                     _i:
   487                           	opt stack 0
   488  000039                     	ds	2
   489  00003B                     _anio_d:
   490                           	opt stack 0
   491  00003B                     	ds	1
   492  00003C                     _anio_u:
   493                           	opt stack 0
   494  00003C                     	ds	1
   495  00003D                     _dia_semana:
   496                           	opt stack 0
   497  00003D                     	ds	1
   498  00003E                     _mes_d:
   499                           	opt stack 0
   500  00003E                     	ds	1
   501  00003F                     _mes_u:
   502                           	opt stack 0
   503  00003F                     	ds	1
   504  000040                     _fecha_d:
   505                           	opt stack 0
   506  000040                     	ds	1
   507  000041                     _fecha_u:
   508                           	opt stack 0
   509  000041                     	ds	1
   510  000042                     _hora_d:
   511                           	opt stack 0
   512  000042                     	ds	1
   513  000043                     _hora_u:
   514                           	opt stack 0
   515  000043                     	ds	1
   516  000044                     _minuto_d:
   517                           	opt stack 0
   518  000044                     	ds	1
   519  000045                     _minuto_u:
   520                           	opt stack 0
   521  000045                     	ds	1
   522  000046                     _segundo_d:
   523                           	opt stack 0
   524  000046                     	ds	1
   525  000047                     _segundo_u:
   526                           	opt stack 0
   527  000047                     	ds	1
   528  000048                     _RtccDate:
   529                           	opt stack 0
   530  000048                     	ds	4
   531  00004C                     _RtccTime:
   532                           	opt stack 0
   533  00004C                     	ds	4
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	dataCOMRAM
   544  000050                     __pdataCOMRAM:
   545                           	opt stack 0
   546  000050                     _minuto:
   547                           	opt stack 0
   548  000050                     	ds	2
   549  000052                     _hora:
   550                           	opt stack 0
   551  000052                     	ds	2
   552  000054                     _dia:
   553                           	opt stack 0
   554  000054                     	ds	2
   555  000056                     _diasem:
   556                           	opt stack 0
   557  000056                     	ds	2
   558  000058                     _mes:
   559                           	opt stack 0
   560  000058                     	ds	2
   561  00005A                     _anio:
   562                           	opt stack 0
   563  00005A                     	ds	2
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           tblptrl	equ	0xFF6
   567                           tablat	equ	0xFF5
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1l	equ	0xFE1
   572                           
   573                           	psect	bssBANK0
   574  000060                     __pbssBANK0:
   575                           	opt stack 0
   576  000060                     _Rtcc_read_TimeDate:
   577                           	opt stack 0
   578  000060                     	ds	8
   579  000068                     _RtccAlrmTimeDate:
   580                           	opt stack 0
   581  000068                     	ds	8
   582  000070                     _RtccTimeDate:
   583                           	opt stack 0
   584  000070                     	ds	8
   585  000078                     _RtccTimeVal:
   586                           	opt stack 0
   587  000078                     	ds	4
   588  00007C                     _buffer2:
   589                           	opt stack 0
   590  00007C                     	ds	20
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           
   600                           	psect	dataBANK0
   601  000090                     __pdataBANK0:
   602                           	opt stack 0
   603  000090                     _array_seleccionar:
   604                           	opt stack 0
   605  000090                     	ds	14
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           
   615                           	psect	cstackCOMRAM
   616  000001                     __pcstackCOMRAM:
   617                           	opt stack 0
   618  000001                     ??_isdigit:
   619  000001                     ??_lcd_send_nibble:
   620  000001                     ?___wmul:
   621                           	opt stack 0
   622  000001                     ?___awdiv:
   623                           	opt stack 0
   624  000001                     ?___lwdiv:
   625                           	opt stack 0
   626  000001                     Delay100TCYx@unit:
   627                           	opt stack 0
   628  000001                     Delay1KTCYx@unit:
   629                           	opt stack 0
   630  000001                     RtccReadDate@pDt:
   631                           	opt stack 0
   632  000001                     RtccReadTime@pTm:
   633                           	opt stack 0
   634  000001                     RtccWriteDate@pDt:
   635                           	opt stack 0
   636  000001                     RtccWriteTime@pTm:
   637                           	opt stack 0
   638  000001                     ___wmul@multiplier:
   639                           	opt stack 0
   640  000001                     ___awdiv@dividend:
   641                           	opt stack 0
   642  000001                     ___lwdiv@dividend:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x0
   646  000001                     	ds	1
   647  000002                     lcd_send_nibble@nibble:
   648                           	opt stack 0
   649  000002                     _isdigit$1752:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x1
   653  000002                     	ds	1
   654  000003                     lcd_send_byte@n:
   655                           	opt stack 0
   656  000003                     RtccWriteDate@di:
   657                           	opt stack 0
   658  000003                     RtccWriteTime@di:
   659                           	opt stack 0
   660  000003                     isdigit@c:
   661                           	opt stack 0
   662  000003                     ___wmul@multiplicand:
   663                           	opt stack 0
   664  000003                     ___awdiv@divisor:
   665                           	opt stack 0
   666  000003                     ___lwdiv@divisor:
   667                           	opt stack 0
   668  000003                     RtccReadDate@rTD1:
   669                           	opt stack 0
   670  000003                     RtccReadTime@rTD1:
   671                           	opt stack 0
   672                           
   673                           ; 8 bytes @ 0x2
   674  000003                     	ds	1
   675  000004                     lcd_send_byte@address:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x3
   679  000004                     	ds	1
   680  000005                     lcd_init@i:
   681                           	opt stack 0
   682  000005                     lcd_gotoxy@y:
   683                           	opt stack 0
   684  000005                     lcd_comand@d:
   685                           	opt stack 0
   686  000005                     RtccWriteDate@wasOn:
   687                           	opt stack 0
   688  000005                     RtccWriteTime@wasOn:
   689                           	opt stack 0
   690  000005                     ___awdiv@counter:
   691                           	opt stack 0
   692  000005                     ___wmul@product:
   693                           	opt stack 0
   694  000005                     ___lwdiv@quotient:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x4
   698  000005                     	ds	1
   699  000006                     lcd_gotoxy@x:
   700                           	opt stack 0
   701  000006                     RtccWriteDate@wasAlrm:
   702                           	opt stack 0
   703  000006                     RtccWriteTime@wasAlrm:
   704                           	opt stack 0
   705  000006                     ___awdiv@sign:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x5
   709  000006                     	ds	1
   710  000007                     lcd_gotoxy@address:
   711                           	opt stack 0
   712  000007                     RtccWriteTime@wasWrEn:
   713                           	opt stack 0
   714  000007                     ___lwdiv@counter:
   715                           	opt stack 0
   716  000007                     RtccWriteDate@tempYear:
   717                           	opt stack 0
   718  000007                     ___awdiv@quotient:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x6
   722  000007                     	ds	1
   723  000008                     ?___lwmod:
   724                           	opt stack 0
   725  000008                     lcd_putc@c:
   726                           	opt stack 0
   727  000008                     RtccWriteTime@tempMinSec:
   728                           	opt stack 0
   729  000008                     ___lwmod@dividend:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x7
   733  000008                     	ds	1
   734  000009                     RtccWriteDate@wasWrEn:
   735                           	opt stack 0
   736  000009                     lcd_putrs@ptr:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x8
   740  000009                     	ds	1
   741  00000A                     RtccWriteDate@tempDayMonth:
   742                           	opt stack 0
   743  00000A                     RtccWriteTime@tempHourWDay:
   744                           	opt stack 0
   745  00000A                     ___lwmod@divisor:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x9
   749  00000A                     	ds	1
   750  00000B                     ??_setDiaSemana:
   751  00000B                     RtccReadDate@rTD0:
   752                           	opt stack 0
   753  00000B                     RtccReadTime@rTD0:
   754                           	opt stack 0
   755                           
   756                           ; 8 bytes @ 0xA
   757  00000B                     	ds	1
   758  00000C                     ___lwmod@counter:
   759                           	opt stack 0
   760  00000C                     RtccWriteDate@tempHourWDay:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0xB
   764  00000C                     	ds	1
   765  00000D                     ?_sprintf:
   766                           	opt stack 0
   767  00000D                     sprintf@sp:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0xC
   771  00000D                     	ds	1
   772  00000E                     
   773                           ; 1 bytes @ 0xD
   774  00000E                     	ds	1
   775  00000F                     sprintf@f:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0xE
   779  00000F                     	ds	4
   780  000013                     
   781                           ; 1 bytes @ 0x12
   782  000013                     	ds	4
   783  000017                     ??_sprintf:
   784                           
   785                           ; 1 bytes @ 0x16
   786  000017                     	ds	4
   787  00001B                     sprintf@flag:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x1A
   791  00001B                     	ds	1
   792  00001C                     sprintf@val:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x1B
   796  00001C                     	ds	2
   797  00001E                     sprintf@prec:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x1D
   801  00001E                     	ds	1
   802  00001F                     sprintf@ap:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x1E
   806  00001F                     	ds	2
   807  000021                     sprintf@cp:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x20
   811  000021                     	ds	2
   812  000023                     sprintf@len:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x22
   816  000023                     	ds	2
   817  000025                     sprintf@width:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x24
   821  000025                     	ds	2
   822  000027                     sprintf@c:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x26
   826  000027                     	ds	1
   827  000028                     ??_main:
   828                           
   829                           ; 1 bytes @ 0x27
   830  000028                     	ds	1
   831  000029                     main@boton_centro_estado:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x28
   835  000029                     	ds	2
   836  00002B                     main@boton_seleccionar:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x2A
   840  00002B                     	ds	2
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1l	equ	0xFE1
   849                           
   850 ;;
   851 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   852 ;;
   853 ;; *************** function _main *****************
   854 ;; Defined at:
   855 ;;		line 128 in file "main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  boton_selecc    2   42[COMRAM] int 
   860 ;;  boton_centro    2   40[COMRAM] int 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  2  168[None  ] int 
   863 ;; Registers used:
   864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   871 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   873 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   874 ;;Total ram usage:        5 bytes
   875 ;; Hardware stack levels required when called:    7
   876 ;; This function calls:
   877 ;;		_Read_RTC
   878 ;;		_Write_RTC
   879 ;;		_lcd_gotoxy
   880 ;;		_lcd_putrs
   881 ;;		_setDiaMesAnio
   882 ;;		_setDiaSemana
   883 ;;		_setHoraMinutoSegundo
   884 ;;		_setup
   885 ;;		_sprintf
   886 ;; This function is called by:
   887 ;;		Startup code after reset
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text0
   892  000FA0                     __ptext0:
   893                           	opt stack 0
   894  000FA0                     _main:
   895                           	opt stack 24
   896                           
   897                           ;main.c: 129: setup();
   898                           
   899                           ;incstack = 0
   900  000FA0  EC70  F010         	call	_setup	;wreg free
   901                           
   902                           ;main.c: 135: int boton_centro_estado = 0;
   903  000FA4  0E00               	movlw	0
   904  000FA6  6E2A               	movwf	main@boton_centro_estado+1,c
   905  000FA8  0E00               	movlw	0
   906  000FAA  6E29               	movwf	main@boton_centro_estado,c
   907                           
   908                           ;main.c: 147: int boton_seleccionar = 0;
   909  000FAC  0E00               	movlw	0
   910  000FAE  6E2C               	movwf	main@boton_seleccionar+1,c
   911  000FB0  0E00               	movlw	0
   912  000FB2  6E2B               	movwf	main@boton_seleccionar,c
   913  000FB4                     
   914                           ;main.c: 151: Read_RTC();
   915  000FB4  ECAF  F00D         	call	_Read_RTC	;wreg free
   916                           
   917                           ;main.c: 153: if (PORTAbits.RA5 == 0 && boton_centro_estado == 0) {
   918  000FB8  BA80               	btfsc	3968,5,c	;volatile
   919  000FBA  D01B               	goto	l170
   920  000FBC  5029               	movf	main@boton_centro_estado,w,c
   921  000FBE  102A               	iorwf	main@boton_centro_estado+1,w,c
   922  000FC0  A4D8               	btfss	status,2,c
   923  000FC2  D017               	goto	l170
   924                           
   925                           ;main.c: 154: boton_centro_estado = 1;
   926  000FC4  0E00               	movlw	0
   927  000FC6  6E2A               	movwf	main@boton_centro_estado+1,c
   928  000FC8  0E01               	movlw	1
   929  000FCA  6E29               	movwf	main@boton_centro_estado,c
   930                           
   931                           ;main.c: 155: lcd_gotoxy(10, 2);
   932  000FCC  0E02               	movlw	2
   933  000FCE  6E05               	movwf	lcd_gotoxy@y,c
   934  000FD0  0E0A               	movlw	10
   935  000FD2  ECE1  F010         	call	_lcd_gotoxy
   936                           
   937                           ;main.c: 156: lcd_putrs("Edt");
   938  000FD6  0E98               	movlw	low STR_17
   939  000FD8  6E09               	movwf	lcd_putrs@ptr,c
   940  000FDA  0E0F               	movlw	high STR_17
   941  000FDC  6E0A               	movwf	lcd_putrs@ptr+1,c
   942  000FDE  EC22  F010         	call	_lcd_putrs	;wreg free
   943                           
   944                           ;main.c: 157: _delay((unsigned long)((98)*(8000000/4000.0)));
   945  000FE2  0EFF               	movlw	255
   946  000FE4  6E28               	movwf	??_main& (0+255),c
   947  000FE6  0E8A               	movlw	138
   948  000FE8                     u2957:
   949  000FE8  2EE8               	decfsz	wreg,f,c
   950  000FEA  D7FE               	bra	u2957
   951  000FEC  2E28               	decfsz	??_main& (0+255),f,c
   952  000FEE  D7FC               	bra	u2957
   953  000FF0  D000               	nop2	
   954  000FF2                     l170:
   955                           
   956                           ;main.c: 158: }
   957                           ;main.c: 160: if (PORTAbits.RA5 == 0 && boton_centro_estado == 1) {
   958  000FF2  BA80               	btfsc	3968,5,c	;volatile
   959  000FF4  D01B               	goto	l171
   960  000FF6  0429               	decf	main@boton_centro_estado,w,c
   961  000FF8  102A               	iorwf	main@boton_centro_estado+1,w,c
   962  000FFA  A4D8               	btfss	status,2,c
   963  000FFC  D017               	goto	l171
   964                           
   965                           ;main.c: 161: boton_centro_estado = 0;
   966  000FFE  0E00               	movlw	0
   967  001000  6E2A               	movwf	main@boton_centro_estado+1,c
   968  001002  0E00               	movlw	0
   969  001004  6E29               	movwf	main@boton_centro_estado,c
   970                           
   971                           ;main.c: 162: lcd_gotoxy(10, 2);
   972  001006  0E02               	movlw	2
   973  001008  6E05               	movwf	lcd_gotoxy@y,c
   974  00100A  0E0A               	movlw	10
   975  00100C  ECE1  F010         	call	_lcd_gotoxy
   976                           
   977                           ;main.c: 163: lcd_putrs("        ");
   978  001010  0E2D               	movlw	low STR_18
   979  001012  6E09               	movwf	lcd_putrs@ptr,c
   980  001014  0E0F               	movlw	high STR_18
   981  001016  6E0A               	movwf	lcd_putrs@ptr+1,c
   982  001018  EC22  F010         	call	_lcd_putrs	;wreg free
   983                           
   984                           ;main.c: 164: _delay((unsigned long)((98)*(8000000/4000.0)));
   985  00101C  0EFF               	movlw	255
   986  00101E  6E28               	movwf	??_main& (0+255),c
   987  001020  0E8A               	movlw	138
   988  001022                     u2967:
   989  001022  2EE8               	decfsz	wreg,f,c
   990  001024  D7FE               	bra	u2967
   991  001026  2E28               	decfsz	??_main& (0+255),f,c
   992  001028  D7FC               	bra	u2967
   993  00102A  D000               	nop2	
   994  00102C                     l171:
   995                           
   996                           ;main.c: 165: }
   997                           ;main.c: 167: if (boton_centro_estado == 1) {
   998  00102C  0429               	decf	main@boton_centro_estado,w,c
   999  00102E  102A               	iorwf	main@boton_centro_estado+1,w,c
  1000  001030  A4D8               	btfss	status,2,c
  1001  001032  D1A5               	goto	l172
  1002                           
  1003                           ;main.c: 169: if (PORTAbits.RA2 == 0) {
  1004  001034  B480               	btfsc	3968,2,c	;volatile
  1005  001036  D00E               	goto	u2410
  1006                           
  1007                           ;main.c: 170: if (boton_seleccionar == 6) {
  1008  001038  0E06               	movlw	6
  1009  00103A  182B               	xorwf	main@boton_seleccionar,w,c
  1010  00103C  102C               	iorwf	main@boton_seleccionar+1,w,c
  1011  00103E  A4D8               	btfss	status,2,c
  1012  001040  D005               	goto	l174
  1013                           
  1014                           ;main.c: 171: boton_seleccionar = 0;
  1015  001042  0E00               	movlw	0
  1016  001044  6E2C               	movwf	main@boton_seleccionar+1,c
  1017  001046  0E00               	movlw	0
  1018  001048  6E2B               	movwf	main@boton_seleccionar,c
  1019                           
  1020                           ;main.c: 172: } else {
  1021  00104A  D002               	goto	l175
  1022  00104C                     l174:
  1023                           
  1024                           ;main.c: 173: boton_seleccionar++;
  1025  00104C  4A2B               	infsnz	main@boton_seleccionar,f,c
  1026  00104E  2A2C               	incf	main@boton_seleccionar+1,f,c
  1027  001050                     l175:
  1028                           
  1029                           ;main.c: 174: }
  1030                           ;main.c: 175: while (PORTAbits.RA2 == 0);
  1031  001050  A480               	btfss	3968,2,c	;volatile
  1032  001052  D7FE               	goto	l175
  1033  001054                     u2410:
  1034                           
  1035                           ;main.c: 176: }
  1036                           ;main.c: 178: if (PORTAbits.RA7 == 0) {
  1037  001054  BE80               	btfsc	3968,7,c	;volatile
  1038  001056  D00E               	goto	u2440
  1039                           
  1040                           ;main.c: 179: if (boton_seleccionar == 0) {
  1041  001058  502B               	movf	main@boton_seleccionar,w,c
  1042  00105A  102C               	iorwf	main@boton_seleccionar+1,w,c
  1043  00105C  A4D8               	btfss	status,2,c
  1044  00105E  D005               	goto	l180
  1045                           
  1046                           ;main.c: 180: boton_seleccionar = 6;
  1047  001060  0E00               	movlw	0
  1048  001062  6E2C               	movwf	main@boton_seleccionar+1,c
  1049  001064  0E06               	movlw	6
  1050  001066  6E2B               	movwf	main@boton_seleccionar,c
  1051                           
  1052                           ;main.c: 181: } else {
  1053  001068  D003               	goto	l181
  1054  00106A                     l180:
  1055                           
  1056                           ;main.c: 182: boton_seleccionar--;
  1057  00106A  062B               	decf	main@boton_seleccionar,f,c
  1058  00106C  A0D8               	btfss	status,0,c
  1059  00106E  062C               	decf	main@boton_seleccionar+1,f,c
  1060  001070                     l181:
  1061                           
  1062                           ;main.c: 183: }
  1063                           ;main.c: 184: while (PORTAbits.RA7 == 0);
  1064  001070  AE80               	btfss	3968,7,c	;volatile
  1065  001072  D7FE               	goto	l181
  1066  001074                     u2440:
  1067                           
  1068                           ;main.c: 185: }
  1069                           ;main.c: 188: if (boton_seleccionar == 0) {
  1070  001074  502B               	movf	main@boton_seleccionar,w,c
  1071  001076  102C               	iorwf	main@boton_seleccionar+1,w,c
  1072  001078  A4D8               	btfss	status,2,c
  1073  00107A  D028               	goto	u2510
  1074                           
  1075                           ;main.c: 190: if (PORTAbits.RA3 == 0) {
  1076  00107C  B680               	btfsc	3968,3,c	;volatile
  1077  00107E  D012               	goto	u2480
  1078                           
  1079                           ;main.c: 191: if (diasem == 6) {
  1080  001080  0E06               	movlw	6
  1081  001082  1856               	xorwf	_diasem,w,c
  1082  001084  1057               	iorwf	_diasem+1,w,c
  1083  001086  A4D8               	btfss	status,2,c
  1084  001088  D007               	goto	l187
  1085                           
  1086                           ;main.c: 192: diasem = 0;
  1087  00108A  0E00               	movlw	0
  1088  00108C  6E57               	movwf	_diasem+1,c
  1089  00108E  0E00               	movlw	0
  1090  001090  6E56               	movwf	_diasem,c
  1091                           
  1092                           ;main.c: 193: Write_RTC();
  1093  001092  ECF2  F00B         	call	_Write_RTC	;wreg free
  1094                           
  1095                           ;main.c: 194: } else {
  1096  001096  D004               	goto	l188
  1097  001098                     l187:
  1098                           
  1099                           ;main.c: 195: diasem++;
  1100  001098  4A56               	infsnz	_diasem,f,c
  1101  00109A  2A57               	incf	_diasem+1,f,c
  1102                           
  1103                           ;main.c: 196: Write_RTC();
  1104  00109C  ECF2  F00B         	call	_Write_RTC	;wreg free
  1105  0010A0                     l188:
  1106                           
  1107                           ;main.c: 197: }
  1108                           ;main.c: 198: while (PORTAbits.RA3 == 0);
  1109  0010A0  A680               	btfss	3968,3,c	;volatile
  1110  0010A2  D7FE               	goto	l188
  1111  0010A4                     u2480:
  1112                           
  1113                           ;main.c: 199: }
  1114                           ;main.c: 201: if (PORTAbits.RA6 == 0) {
  1115  0010A4  BC80               	btfsc	3968,6,c	;volatile
  1116  0010A6  D012               	goto	u2510
  1117                           
  1118                           ;main.c: 202: if (diasem == 0) {
  1119  0010A8  5056               	movf	_diasem,w,c
  1120  0010AA  1057               	iorwf	_diasem+1,w,c
  1121  0010AC  A4D8               	btfss	status,2,c
  1122  0010AE  D007               	goto	l193
  1123                           
  1124                           ;main.c: 203: diasem = 6;
  1125  0010B0  0E00               	movlw	0
  1126  0010B2  6E57               	movwf	_diasem+1,c
  1127  0010B4  0E06               	movlw	6
  1128  0010B6  6E56               	movwf	_diasem,c
  1129                           
  1130                           ;main.c: 204: Write_RTC();
  1131  0010B8  ECF2  F00B         	call	_Write_RTC	;wreg free
  1132                           
  1133                           ;main.c: 205: } else {
  1134  0010BC  D005               	goto	l194
  1135  0010BE                     l193:
  1136                           
  1137                           ;main.c: 206: diasem--;
  1138  0010BE  0656               	decf	_diasem,f,c
  1139  0010C0  A0D8               	btfss	status,0,c
  1140  0010C2  0657               	decf	_diasem+1,f,c
  1141                           
  1142                           ;main.c: 207: Write_RTC();
  1143  0010C4  ECF2  F00B         	call	_Write_RTC	;wreg free
  1144  0010C8                     l194:
  1145                           
  1146                           ;main.c: 208: }
  1147                           ;main.c: 209: while (PORTAbits.RA6 == 0);
  1148  0010C8  AC80               	btfss	3968,6,c	;volatile
  1149  0010CA  D7FE               	goto	l194
  1150  0010CC                     u2510:
  1151                           
  1152                           ;main.c: 210: }
  1153                           ;main.c: 211: }
  1154                           ;main.c: 214: if (boton_seleccionar == 1) {
  1155  0010CC  042B               	decf	main@boton_seleccionar,w,c
  1156  0010CE  102C               	iorwf	main@boton_seleccionar+1,w,c
  1157  0010D0  A4D8               	btfss	status,2,c
  1158  0010D2  D02F               	goto	l198
  1159                           
  1160                           ;main.c: 216: if (PORTAbits.RA3 == 0) {
  1161  0010D4  B680               	btfsc	3968,3,c	;volatile
  1162  0010D6  D012               	goto	u2550
  1163                           
  1164                           ;main.c: 217: if (dia == 30) {
  1165  0010D8  0E1E               	movlw	30
  1166  0010DA  1854               	xorwf	_dia,w,c
  1167  0010DC  1055               	iorwf	_dia+1,w,c
  1168  0010DE  A4D8               	btfss	status,2,c
  1169  0010E0  D007               	goto	l200
  1170                           
  1171                           ;main.c: 218: dia = 0;
  1172  0010E2  0E00               	movlw	0
  1173  0010E4  6E55               	movwf	_dia+1,c
  1174  0010E6  0E00               	movlw	0
  1175  0010E8  6E54               	movwf	_dia,c
  1176                           
  1177                           ;main.c: 219: Write_RTC();
  1178  0010EA  ECF2  F00B         	call	_Write_RTC	;wreg free
  1179                           
  1180                           ;main.c: 220: } else {
  1181  0010EE  D004               	goto	l201
  1182  0010F0                     l200:
  1183                           
  1184                           ;main.c: 221: dia++;
  1185  0010F0  4A54               	infsnz	_dia,f,c
  1186  0010F2  2A55               	incf	_dia+1,f,c
  1187                           
  1188                           ;main.c: 222: Write_RTC();
  1189  0010F4  ECF2  F00B         	call	_Write_RTC	;wreg free
  1190  0010F8                     l201:
  1191                           
  1192                           ;main.c: 223: }
  1193                           ;main.c: 224: while (PORTAbits.RA3 == 0);
  1194  0010F8  A680               	btfss	3968,3,c	;volatile
  1195  0010FA  D7FE               	goto	l201
  1196  0010FC                     u2550:
  1197                           
  1198                           ;main.c: 225: }
  1199                           ;main.c: 227: if (PORTAbits.RA6 == 0) {
  1200  0010FC  BC80               	btfsc	3968,6,c	;volatile
  1201  0010FE  D012               	goto	u2580
  1202                           
  1203                           ;main.c: 228: if (dia == 0) {
  1204  001100  5054               	movf	_dia,w,c
  1205  001102  1055               	iorwf	_dia+1,w,c
  1206  001104  A4D8               	btfss	status,2,c
  1207  001106  D007               	goto	l206
  1208                           
  1209                           ;main.c: 229: dia = 30;
  1210  001108  0E00               	movlw	0
  1211  00110A  6E55               	movwf	_dia+1,c
  1212  00110C  0E1E               	movlw	30
  1213  00110E  6E54               	movwf	_dia,c
  1214                           
  1215                           ;main.c: 230: Write_RTC();
  1216  001110  ECF2  F00B         	call	_Write_RTC	;wreg free
  1217                           
  1218                           ;main.c: 231: } else {
  1219  001114  D005               	goto	l207
  1220  001116                     l206:
  1221                           
  1222                           ;main.c: 232: dia--;
  1223  001116  0654               	decf	_dia,f,c
  1224  001118  A0D8               	btfss	status,0,c
  1225  00111A  0655               	decf	_dia+1,f,c
  1226                           
  1227                           ;main.c: 233: Write_RTC();
  1228  00111C  ECF2  F00B         	call	_Write_RTC	;wreg free
  1229  001120                     l207:
  1230                           
  1231                           ;main.c: 234: }
  1232                           ;main.c: 235: while (PORTAbits.RA6 == 0);
  1233  001120  AC80               	btfss	3968,6,c	;volatile
  1234  001122  D7FE               	goto	l207
  1235  001124                     u2580:
  1236                           
  1237                           ;main.c: 236: }
  1238                           ;main.c: 238: _delay((unsigned long)((50)*(8000000/4000.0)));
  1239  001124  0E82               	movlw	130
  1240  001126  6E28               	movwf	??_main& (0+255),c
  1241  001128  0EDE               	movlw	222
  1242  00112A                     u2977:
  1243  00112A  2EE8               	decfsz	wreg,f,c
  1244  00112C  D7FE               	bra	u2977
  1245  00112E  2E28               	decfsz	??_main& (0+255),f,c
  1246  001130  D7FC               	bra	u2977
  1247  001132                     l198:
  1248                           
  1249                           ;main.c: 239: }
  1250                           ;main.c: 242: if (boton_seleccionar == 2) {
  1251  001132  0E02               	movlw	2
  1252  001134  182B               	xorwf	main@boton_seleccionar,w,c
  1253  001136  102C               	iorwf	main@boton_seleccionar+1,w,c
  1254  001138  A4D8               	btfss	status,2,c
  1255  00113A  D02F               	goto	l211
  1256                           
  1257                           ;main.c: 244: if (PORTAbits.RA3 == 0) {
  1258  00113C  B680               	btfsc	3968,3,c	;volatile
  1259  00113E  D012               	goto	u2620
  1260                           
  1261                           ;main.c: 245: if (mes == 12) {
  1262  001140  0E0C               	movlw	12
  1263  001142  1858               	xorwf	_mes,w,c
  1264  001144  1059               	iorwf	_mes+1,w,c
  1265  001146  A4D8               	btfss	status,2,c
  1266  001148  D007               	goto	l213
  1267                           
  1268                           ;main.c: 246: mes = 1;
  1269  00114A  0E00               	movlw	0
  1270  00114C  6E59               	movwf	_mes+1,c
  1271  00114E  0E01               	movlw	1
  1272  001150  6E58               	movwf	_mes,c
  1273                           
  1274                           ;main.c: 247: Write_RTC();
  1275  001152  ECF2  F00B         	call	_Write_RTC	;wreg free
  1276                           
  1277                           ;main.c: 248: } else {
  1278  001156  D004               	goto	l214
  1279  001158                     l213:
  1280                           
  1281                           ;main.c: 249: mes++;
  1282  001158  4A58               	infsnz	_mes,f,c
  1283  00115A  2A59               	incf	_mes+1,f,c
  1284                           
  1285                           ;main.c: 250: Write_RTC();
  1286  00115C  ECF2  F00B         	call	_Write_RTC	;wreg free
  1287  001160                     l214:
  1288                           
  1289                           ;main.c: 251: }
  1290                           ;main.c: 252: while (PORTAbits.RA3 == 0);
  1291  001160  A680               	btfss	3968,3,c	;volatile
  1292  001162  D7FE               	goto	l214
  1293  001164                     u2620:
  1294                           
  1295                           ;main.c: 253: }
  1296                           ;main.c: 255: if (PORTAbits.RA6 == 0) {
  1297  001164  BC80               	btfsc	3968,6,c	;volatile
  1298  001166  D012               	goto	u2650
  1299                           
  1300                           ;main.c: 256: if (mes == 1) {
  1301  001168  0458               	decf	_mes,w,c
  1302  00116A  1059               	iorwf	_mes+1,w,c
  1303  00116C  A4D8               	btfss	status,2,c
  1304  00116E  D007               	goto	l219
  1305                           
  1306                           ;main.c: 257: mes = 12;
  1307  001170  0E00               	movlw	0
  1308  001172  6E59               	movwf	_mes+1,c
  1309  001174  0E0C               	movlw	12
  1310  001176  6E58               	movwf	_mes,c
  1311                           
  1312                           ;main.c: 258: Write_RTC();
  1313  001178  ECF2  F00B         	call	_Write_RTC	;wreg free
  1314                           
  1315                           ;main.c: 259: } else {
  1316  00117C  D005               	goto	l220
  1317  00117E                     l219:
  1318                           
  1319                           ;main.c: 260: mes--;
  1320  00117E  0658               	decf	_mes,f,c
  1321  001180  A0D8               	btfss	status,0,c
  1322  001182  0659               	decf	_mes+1,f,c
  1323                           
  1324                           ;main.c: 261: Write_RTC();
  1325  001184  ECF2  F00B         	call	_Write_RTC	;wreg free
  1326  001188                     l220:
  1327                           
  1328                           ;main.c: 262: }
  1329                           ;main.c: 263: while (PORTAbits.RA6 == 0);
  1330  001188  AC80               	btfss	3968,6,c	;volatile
  1331  00118A  D7FE               	goto	l220
  1332  00118C                     u2650:
  1333                           
  1334                           ;main.c: 264: }
  1335                           ;main.c: 266: _delay((unsigned long)((50)*(8000000/4000.0)));
  1336  00118C  0E82               	movlw	130
  1337  00118E  6E28               	movwf	??_main& (0+255),c
  1338  001190  0EDE               	movlw	222
  1339  001192                     u2987:
  1340  001192  2EE8               	decfsz	wreg,f,c
  1341  001194  D7FE               	bra	u2987
  1342  001196  2E28               	decfsz	??_main& (0+255),f,c
  1343  001198  D7FC               	bra	u2987
  1344  00119A                     l211:
  1345                           
  1346                           ;main.c: 267: }
  1347                           ;main.c: 270: if (boton_seleccionar == 3) {
  1348  00119A  0E03               	movlw	3
  1349  00119C  182B               	xorwf	main@boton_seleccionar,w,c
  1350  00119E  102C               	iorwf	main@boton_seleccionar+1,w,c
  1351  0011A0  A4D8               	btfss	status,2,c
  1352  0011A2  D02F               	goto	l224
  1353                           
  1354                           ;main.c: 272: if (PORTAbits.RA3 == 0) {
  1355  0011A4  B680               	btfsc	3968,3,c	;volatile
  1356  0011A6  D012               	goto	u2690
  1357                           
  1358                           ;main.c: 273: if (anio == 99) {
  1359  0011A8  0E63               	movlw	99
  1360  0011AA  185A               	xorwf	_anio,w,c
  1361  0011AC  105B               	iorwf	_anio+1,w,c
  1362  0011AE  A4D8               	btfss	status,2,c
  1363  0011B0  D007               	goto	l226
  1364                           
  1365                           ;main.c: 274: anio = 0;
  1366  0011B2  0E00               	movlw	0
  1367  0011B4  6E5B               	movwf	_anio+1,c
  1368  0011B6  0E00               	movlw	0
  1369  0011B8  6E5A               	movwf	_anio,c
  1370                           
  1371                           ;main.c: 275: Write_RTC();
  1372  0011BA  ECF2  F00B         	call	_Write_RTC	;wreg free
  1373                           
  1374                           ;main.c: 276: } else {
  1375  0011BE  D004               	goto	l227
  1376  0011C0                     l226:
  1377                           
  1378                           ;main.c: 277: anio++;
  1379  0011C0  4A5A               	infsnz	_anio,f,c
  1380  0011C2  2A5B               	incf	_anio+1,f,c
  1381                           
  1382                           ;main.c: 278: Write_RTC();
  1383  0011C4  ECF2  F00B         	call	_Write_RTC	;wreg free
  1384  0011C8                     l227:
  1385                           
  1386                           ;main.c: 279: }
  1387                           ;main.c: 280: while (PORTAbits.RA3 == 0);
  1388  0011C8  A680               	btfss	3968,3,c	;volatile
  1389  0011CA  D7FE               	goto	l227
  1390  0011CC                     u2690:
  1391                           
  1392                           ;main.c: 281: }
  1393                           ;main.c: 283: if (PORTAbits.RA6 == 0) {
  1394  0011CC  BC80               	btfsc	3968,6,c	;volatile
  1395  0011CE  D012               	goto	u2720
  1396                           
  1397                           ;main.c: 284: if (anio == 0) {
  1398  0011D0  505A               	movf	_anio,w,c
  1399  0011D2  105B               	iorwf	_anio+1,w,c
  1400  0011D4  A4D8               	btfss	status,2,c
  1401  0011D6  D007               	goto	l232
  1402                           
  1403                           ;main.c: 285: anio = 99;
  1404  0011D8  0E00               	movlw	0
  1405  0011DA  6E5B               	movwf	_anio+1,c
  1406  0011DC  0E63               	movlw	99
  1407  0011DE  6E5A               	movwf	_anio,c
  1408                           
  1409                           ;main.c: 286: Write_RTC();
  1410  0011E0  ECF2  F00B         	call	_Write_RTC	;wreg free
  1411                           
  1412                           ;main.c: 287: } else {
  1413  0011E4  D005               	goto	l233
  1414  0011E6                     l232:
  1415                           
  1416                           ;main.c: 288: anio--;
  1417  0011E6  065A               	decf	_anio,f,c
  1418  0011E8  A0D8               	btfss	status,0,c
  1419  0011EA  065B               	decf	_anio+1,f,c
  1420                           
  1421                           ;main.c: 289: Write_RTC();
  1422  0011EC  ECF2  F00B         	call	_Write_RTC	;wreg free
  1423  0011F0                     l233:
  1424                           
  1425                           ;main.c: 290: }
  1426                           ;main.c: 291: while (PORTAbits.RA6 == 0);
  1427  0011F0  AC80               	btfss	3968,6,c	;volatile
  1428  0011F2  D7FE               	goto	l233
  1429  0011F4                     u2720:
  1430                           
  1431                           ;main.c: 292: }
  1432                           ;main.c: 294: _delay((unsigned long)((50)*(8000000/4000.0)));
  1433  0011F4  0E82               	movlw	130
  1434  0011F6  6E28               	movwf	??_main& (0+255),c
  1435  0011F8  0EDE               	movlw	222
  1436  0011FA                     u2997:
  1437  0011FA  2EE8               	decfsz	wreg,f,c
  1438  0011FC  D7FE               	bra	u2997
  1439  0011FE  2E28               	decfsz	??_main& (0+255),f,c
  1440  001200  D7FC               	bra	u2997
  1441  001202                     l224:
  1442                           
  1443                           ;main.c: 295: }
  1444                           ;main.c: 298: if (boton_seleccionar == 4) {
  1445  001202  0E04               	movlw	4
  1446  001204  182B               	xorwf	main@boton_seleccionar,w,c
  1447  001206  102C               	iorwf	main@boton_seleccionar+1,w,c
  1448  001208  A4D8               	btfss	status,2,c
  1449  00120A  D02F               	goto	l237
  1450                           
  1451                           ;main.c: 300: if (PORTAbits.RA3 == 0) {
  1452  00120C  B680               	btfsc	3968,3,c	;volatile
  1453  00120E  D012               	goto	u2760
  1454                           
  1455                           ;main.c: 301: if (hora == 59) {
  1456  001210  0E3B               	movlw	59
  1457  001212  1852               	xorwf	_hora,w,c
  1458  001214  1053               	iorwf	_hora+1,w,c
  1459  001216  A4D8               	btfss	status,2,c
  1460  001218  D007               	goto	l239
  1461                           
  1462                           ;main.c: 302: hora = 0;
  1463  00121A  0E00               	movlw	0
  1464  00121C  6E53               	movwf	_hora+1,c
  1465  00121E  0E00               	movlw	0
  1466  001220  6E52               	movwf	_hora,c
  1467                           
  1468                           ;main.c: 303: Write_RTC();
  1469  001222  ECF2  F00B         	call	_Write_RTC	;wreg free
  1470                           
  1471                           ;main.c: 304: } else {
  1472  001226  D004               	goto	l240
  1473  001228                     l239:
  1474                           
  1475                           ;main.c: 305: hora++;
  1476  001228  4A52               	infsnz	_hora,f,c
  1477  00122A  2A53               	incf	_hora+1,f,c
  1478                           
  1479                           ;main.c: 306: Write_RTC();
  1480  00122C  ECF2  F00B         	call	_Write_RTC	;wreg free
  1481  001230                     l240:
  1482                           
  1483                           ;main.c: 307: }
  1484                           ;main.c: 308: while (PORTAbits.RA3 == 0);
  1485  001230  A680               	btfss	3968,3,c	;volatile
  1486  001232  D7FE               	goto	l240
  1487  001234                     u2760:
  1488                           
  1489                           ;main.c: 309: }
  1490                           ;main.c: 311: if (PORTAbits.RA6 == 0) {
  1491  001234  BC80               	btfsc	3968,6,c	;volatile
  1492  001236  D012               	goto	u2790
  1493                           
  1494                           ;main.c: 312: if (hora == 0) {
  1495  001238  5052               	movf	_hora,w,c
  1496  00123A  1053               	iorwf	_hora+1,w,c
  1497  00123C  A4D8               	btfss	status,2,c
  1498  00123E  D007               	goto	l245
  1499                           
  1500                           ;main.c: 313: hora = 59;
  1501  001240  0E00               	movlw	0
  1502  001242  6E53               	movwf	_hora+1,c
  1503  001244  0E3B               	movlw	59
  1504  001246  6E52               	movwf	_hora,c
  1505                           
  1506                           ;main.c: 314: Write_RTC();
  1507  001248  ECF2  F00B         	call	_Write_RTC	;wreg free
  1508                           
  1509                           ;main.c: 315: } else {
  1510  00124C  D005               	goto	l246
  1511  00124E                     l245:
  1512                           
  1513                           ;main.c: 316: hora--;
  1514  00124E  0652               	decf	_hora,f,c
  1515  001250  A0D8               	btfss	status,0,c
  1516  001252  0653               	decf	_hora+1,f,c
  1517                           
  1518                           ;main.c: 317: Write_RTC();
  1519  001254  ECF2  F00B         	call	_Write_RTC	;wreg free
  1520  001258                     l246:
  1521                           
  1522                           ;main.c: 318: }
  1523                           ;main.c: 319: while (PORTAbits.RA6 == 0);
  1524  001258  AC80               	btfss	3968,6,c	;volatile
  1525  00125A  D7FE               	goto	l246
  1526  00125C                     u2790:
  1527                           
  1528                           ;main.c: 320: }
  1529                           ;main.c: 322: _delay((unsigned long)((50)*(8000000/4000.0)));
  1530  00125C  0E82               	movlw	130
  1531  00125E  6E28               	movwf	??_main& (0+255),c
  1532  001260  0EDE               	movlw	222
  1533  001262                     u3007:
  1534  001262  2EE8               	decfsz	wreg,f,c
  1535  001264  D7FE               	bra	u3007
  1536  001266  2E28               	decfsz	??_main& (0+255),f,c
  1537  001268  D7FC               	bra	u3007
  1538  00126A                     l237:
  1539                           
  1540                           ;main.c: 323: }
  1541                           ;main.c: 326: if (boton_seleccionar == 5) {
  1542  00126A  0E05               	movlw	5
  1543  00126C  182B               	xorwf	main@boton_seleccionar,w,c
  1544  00126E  102C               	iorwf	main@boton_seleccionar+1,w,c
  1545  001270  A4D8               	btfss	status,2,c
  1546  001272  D02F               	goto	l250
  1547                           
  1548                           ;main.c: 328: if (PORTAbits.RA3 == 0) {
  1549  001274  B680               	btfsc	3968,3,c	;volatile
  1550  001276  D012               	goto	u2830
  1551                           
  1552                           ;main.c: 329: if (minuto == 59) {
  1553  001278  0E3B               	movlw	59
  1554  00127A  1850               	xorwf	_minuto,w,c
  1555  00127C  1051               	iorwf	_minuto+1,w,c
  1556  00127E  A4D8               	btfss	status,2,c
  1557  001280  D007               	goto	l252
  1558                           
  1559                           ;main.c: 330: minuto = 0;
  1560  001282  0E00               	movlw	0
  1561  001284  6E51               	movwf	_minuto+1,c
  1562  001286  0E00               	movlw	0
  1563  001288  6E50               	movwf	_minuto,c
  1564                           
  1565                           ;main.c: 331: Write_RTC();
  1566  00128A  ECF2  F00B         	call	_Write_RTC	;wreg free
  1567                           
  1568                           ;main.c: 332: } else {
  1569  00128E  D004               	goto	l253
  1570  001290                     l252:
  1571                           
  1572                           ;main.c: 333: minuto++;
  1573  001290  4A50               	infsnz	_minuto,f,c
  1574  001292  2A51               	incf	_minuto+1,f,c
  1575                           
  1576                           ;main.c: 334: Write_RTC();
  1577  001294  ECF2  F00B         	call	_Write_RTC	;wreg free
  1578  001298                     l253:
  1579                           
  1580                           ;main.c: 335: }
  1581                           ;main.c: 336: while (PORTAbits.RA3 == 0);
  1582  001298  A680               	btfss	3968,3,c	;volatile
  1583  00129A  D7FE               	goto	l253
  1584  00129C                     u2830:
  1585                           
  1586                           ;main.c: 337: }
  1587                           ;main.c: 339: if (PORTAbits.RA6 == 0) {
  1588  00129C  BC80               	btfsc	3968,6,c	;volatile
  1589  00129E  D012               	goto	u2860
  1590                           
  1591                           ;main.c: 340: if (minuto == 0) {
  1592  0012A0  5050               	movf	_minuto,w,c
  1593  0012A2  1051               	iorwf	_minuto+1,w,c
  1594  0012A4  A4D8               	btfss	status,2,c
  1595  0012A6  D007               	goto	l258
  1596                           
  1597                           ;main.c: 341: minuto = 59;
  1598  0012A8  0E00               	movlw	0
  1599  0012AA  6E51               	movwf	_minuto+1,c
  1600  0012AC  0E3B               	movlw	59
  1601  0012AE  6E50               	movwf	_minuto,c
  1602                           
  1603                           ;main.c: 342: Write_RTC();
  1604  0012B0  ECF2  F00B         	call	_Write_RTC	;wreg free
  1605                           
  1606                           ;main.c: 343: } else {
  1607  0012B4  D005               	goto	l259
  1608  0012B6                     l258:
  1609                           
  1610                           ;main.c: 344: minuto--;
  1611  0012B6  0650               	decf	_minuto,f,c
  1612  0012B8  A0D8               	btfss	status,0,c
  1613  0012BA  0651               	decf	_minuto+1,f,c
  1614                           
  1615                           ;main.c: 345: Write_RTC();
  1616  0012BC  ECF2  F00B         	call	_Write_RTC	;wreg free
  1617  0012C0                     l259:
  1618                           
  1619                           ;main.c: 346: }
  1620                           ;main.c: 347: while (PORTAbits.RA6 == 0);
  1621  0012C0  AC80               	btfss	3968,6,c	;volatile
  1622  0012C2  D7FE               	goto	l259
  1623  0012C4                     u2860:
  1624                           
  1625                           ;main.c: 348: }
  1626                           ;main.c: 350: _delay((unsigned long)((50)*(8000000/4000.0)));
  1627  0012C4  0E82               	movlw	130
  1628  0012C6  6E28               	movwf	??_main& (0+255),c
  1629  0012C8  0EDE               	movlw	222
  1630  0012CA                     u3017:
  1631  0012CA  2EE8               	decfsz	wreg,f,c
  1632  0012CC  D7FE               	bra	u3017
  1633  0012CE  2E28               	decfsz	??_main& (0+255),f,c
  1634  0012D0  D7FC               	bra	u3017
  1635  0012D2                     l250:
  1636                           
  1637                           ;main.c: 351: }
  1638                           ;main.c: 354: if (boton_seleccionar == 6) {
  1639  0012D2  0E06               	movlw	6
  1640  0012D4  182B               	xorwf	main@boton_seleccionar,w,c
  1641  0012D6  102C               	iorwf	main@boton_seleccionar+1,w,c
  1642  0012D8  A4D8               	btfss	status,2,c
  1643  0012DA  D02F               	goto	l263
  1644                           
  1645                           ;main.c: 356: if (PORTAbits.RA3 == 0) {
  1646  0012DC  B680               	btfsc	3968,3,c	;volatile
  1647  0012DE  D012               	goto	u2900
  1648                           
  1649                           ;main.c: 357: if (segundo == 59) {
  1650  0012E0  0E3B               	movlw	59
  1651  0012E2  182D               	xorwf	_segundo,w,c
  1652  0012E4  102E               	iorwf	_segundo+1,w,c
  1653  0012E6  A4D8               	btfss	status,2,c
  1654  0012E8  D007               	goto	l265
  1655                           
  1656                           ;main.c: 358: segundo = 0;
  1657  0012EA  0E00               	movlw	0
  1658  0012EC  6E2E               	movwf	_segundo+1,c
  1659  0012EE  0E00               	movlw	0
  1660  0012F0  6E2D               	movwf	_segundo,c
  1661                           
  1662                           ;main.c: 359: Write_RTC();
  1663  0012F2  ECF2  F00B         	call	_Write_RTC	;wreg free
  1664                           
  1665                           ;main.c: 360: } else {
  1666  0012F6  D004               	goto	l266
  1667  0012F8                     l265:
  1668                           
  1669                           ;main.c: 361: segundo++;
  1670  0012F8  4A2D               	infsnz	_segundo,f,c
  1671  0012FA  2A2E               	incf	_segundo+1,f,c
  1672                           
  1673                           ;main.c: 362: Write_RTC();
  1674  0012FC  ECF2  F00B         	call	_Write_RTC	;wreg free
  1675  001300                     l266:
  1676                           
  1677                           ;main.c: 363: }
  1678                           ;main.c: 364: while (PORTAbits.RA3 == 0);
  1679  001300  A680               	btfss	3968,3,c	;volatile
  1680  001302  D7FE               	goto	l266
  1681  001304                     u2900:
  1682                           
  1683                           ;main.c: 365: }
  1684                           ;main.c: 367: if (PORTAbits.RA6 == 0) {
  1685  001304  BC80               	btfsc	3968,6,c	;volatile
  1686  001306  D012               	goto	u2930
  1687                           
  1688                           ;main.c: 368: if (segundo == 0) {
  1689  001308  502D               	movf	_segundo,w,c
  1690  00130A  102E               	iorwf	_segundo+1,w,c
  1691  00130C  A4D8               	btfss	status,2,c
  1692  00130E  D007               	goto	l271
  1693                           
  1694                           ;main.c: 369: segundo = 59;
  1695  001310  0E00               	movlw	0
  1696  001312  6E2E               	movwf	_segundo+1,c
  1697  001314  0E3B               	movlw	59
  1698  001316  6E2D               	movwf	_segundo,c
  1699                           
  1700                           ;main.c: 370: Write_RTC();
  1701  001318  ECF2  F00B         	call	_Write_RTC	;wreg free
  1702                           
  1703                           ;main.c: 371: } else {
  1704  00131C  D005               	goto	l272
  1705  00131E                     l271:
  1706                           
  1707                           ;main.c: 372: segundo--;
  1708  00131E  062D               	decf	_segundo,f,c
  1709  001320  A0D8               	btfss	status,0,c
  1710  001322  062E               	decf	_segundo+1,f,c
  1711                           
  1712                           ;main.c: 373: Write_RTC();
  1713  001324  ECF2  F00B         	call	_Write_RTC	;wreg free
  1714  001328                     l272:
  1715                           
  1716                           ;main.c: 374: }
  1717                           ;main.c: 375: while (PORTAbits.RA6 == 0);
  1718  001328  AC80               	btfss	3968,6,c	;volatile
  1719  00132A  D7FE               	goto	l272
  1720  00132C                     u2930:
  1721                           
  1722                           ;main.c: 376: }
  1723                           ;main.c: 378: _delay((unsigned long)((50)*(8000000/4000.0)));
  1724  00132C  0E82               	movlw	130
  1725  00132E  6E28               	movwf	??_main& (0+255),c
  1726  001330  0EDE               	movlw	222
  1727  001332                     u3027:
  1728  001332  2EE8               	decfsz	wreg,f,c
  1729  001334  D7FE               	bra	u3027
  1730  001336  2E28               	decfsz	??_main& (0+255),f,c
  1731  001338  D7FC               	bra	u3027
  1732  00133A                     l263:
  1733                           
  1734                           ;main.c: 379: }
  1735                           ;main.c: 381: sprintf(buffer2, "%s", array_seleccionar[boton_seleccionar]);
  1736  00133A  0E7C               	movlw	low _buffer2
  1737  00133C  6E0D               	movwf	sprintf@sp,c
  1738  00133E  0E00               	movlw	high _buffer2
  1739  001340  6E0E               	movwf	sprintf@sp+1,c
  1740  001342  0E9C               	movlw	low STR_19
  1741  001344  6E0F               	movwf	sprintf@f,c
  1742  001346  0E0F               	movlw	high STR_19
  1743  001348  6E10               	movwf	sprintf@f+1,c
  1744  00134A  90D8               	bcf	status,0,c
  1745  00134C  342B               	rlcf	main@boton_seleccionar,w,c
  1746  00134E  6ED9               	movwf	fsr2l,c
  1747  001350  342C               	rlcf	main@boton_seleccionar+1,w,c
  1748  001352  6EDA               	movwf	fsr2h,c
  1749  001354  0E90               	movlw	low _array_seleccionar
  1750  001356  26D9               	addwf	fsr2l,f,c
  1751  001358  0E00               	movlw	high _array_seleccionar
  1752  00135A  22DA               	addwfc	fsr2h,f,c
  1753  00135C  CFDE F011          	movff	postinc2,?_sprintf+4
  1754  001360  CFDD F012          	movff	postdec2,?_sprintf+5
  1755  001364  ECCE  F009         	call	_sprintf	;wreg free
  1756                           
  1757                           ;main.c: 382: lcd_gotoxy(13, 2);
  1758  001368  0E02               	movlw	2
  1759  00136A  6E05               	movwf	lcd_gotoxy@y,c
  1760  00136C  0E0D               	movlw	13
  1761  00136E  ECE1  F010         	call	_lcd_gotoxy
  1762                           
  1763                           ;main.c: 383: lcd_putrs(buffer2);
  1764  001372  0E7C               	movlw	low _buffer2
  1765  001374  6E09               	movwf	lcd_putrs@ptr,c
  1766  001376  0E00               	movlw	high _buffer2
  1767  001378  6E0A               	movwf	lcd_putrs@ptr+1,c
  1768  00137A  EC22  F010         	call	_lcd_putrs	;wreg free
  1769  00137E                     l172:
  1770                           
  1771                           ;main.c: 384: }
  1772                           ;main.c: 386: setDiaSemana();
  1773  00137E  EC4C  F00B         	call	_setDiaSemana	;wreg free
  1774                           
  1775                           ;main.c: 387: setDiaMesAnio();
  1776  001382  ECA4  F00E         	call	_setDiaMesAnio	;wreg free
  1777                           
  1778                           ;main.c: 388: setHoraMinutoSegundo();
  1779  001386  EC58  F00F         	call	_setHoraMinutoSegundo	;wreg free
  1780                           
  1781                           ;main.c: 390: _delay((unsigned long)((98)*(8000000/4000.0)));
  1782  00138A  0EFF               	movlw	255
  1783  00138C  6E28               	movwf	??_main& (0+255),c
  1784  00138E  0E8A               	movlw	138
  1785  001390                     u3037:
  1786  001390  2EE8               	decfsz	wreg,f,c
  1787  001392  D7FE               	bra	u3037
  1788  001394  2E28               	decfsz	??_main& (0+255),f,c
  1789  001396  D7FC               	bra	u3037
  1790  001398  D000               	nop2	
  1791  00139A  D60C               	goto	l169
  1792  00139C                     __end_of_main:
  1793                           	opt stack 0
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           postinc2	equ	0xFDE
  1803                           postdec2	equ	0xFDD
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _setup *****************
  1809 ;; Defined at:
  1810 ;;		line 97 in file "main.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    6
  1831 ;; This function calls:
  1832 ;;		_Write_RTC
  1833 ;;		_lcd_comand
  1834 ;;		_lcd_init
  1835 ;;		_setDiaMesAnio
  1836 ;;		_setDiaSemana
  1837 ;;		_setHoraMinutoSegundo
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text1
  1844  0020E0                     __ptext1:
  1845                           	opt stack 0
  1846  0020E0                     _setup:
  1847                           	opt stack 24
  1848                           
  1849                           ;main.c: 98: OSCTUNEbits.INTSRC = 1;
  1850                           
  1851                           ;incstack = 0
  1852  0020E0  8E9B               	bsf	3995,7,c	;volatile
  1853                           
  1854                           ;main.c: 99: OSCTUNEbits.PLLEN = 0;
  1855  0020E2  9C9B               	bcf	3995,6,c	;volatile
  1856                           
  1857                           ;main.c: 100: OSCCONbits.IRCF0 = 1;
  1858  0020E4  88D3               	bsf	4051,4,c	;volatile
  1859                           
  1860                           ;main.c: 101: OSCCONbits.IRCF1 = 1;
  1861  0020E6  8AD3               	bsf	4051,5,c	;volatile
  1862                           
  1863                           ;main.c: 102: OSCCONbits.IRCF2 = 1;
  1864  0020E8  8CD3               	bsf	4051,6,c	;volatile
  1865                           
  1866                           ;main.c: 103: OSCCONbits.SCS0 = 0;
  1867  0020EA  90D3               	bcf	4051,0,c	;volatile
  1868                           
  1869                           ;main.c: 104: OSCCONbits.SCS1 = 0;
  1870  0020EC  92D3               	bcf	4051,1,c	;volatile
  1871                           
  1872                           ;main.c: 105: TRISA = 0b11111111;
  1873  0020EE  6892               	setf	3986,c	;volatile
  1874                           
  1875                           ;main.c: 106: TRISB = 0;
  1876  0020F0  0E00               	movlw	0
  1877  0020F2  6E93               	movwf	3987,c	;volatile
  1878                           
  1879                           ;main.c: 107: TRISC = 0b00000111;
  1880  0020F4  0E07               	movlw	7
  1881  0020F6  6E94               	movwf	3988,c	;volatile
  1882                           
  1883                           ;main.c: 108: INTCON2bits.RBPU = 1;
  1884  0020F8  8EF1               	bsf	intcon2,7,c	;volatile
  1885                           
  1886                           ;main.c: 109: ANCON0 = 0b11111111;
  1887  0020FA  010F               	movlb	15	; () banked
  1888  0020FC  6948               	setf	72,b	;volatile
  1889                           
  1890                           ;main.c: 110: ANCON1 = 0b10010111;
  1891  0020FE  0E97               	movlw	151
  1892  002100  010F               	movlb	15	; () banked
  1893  002102  6F49               	movwf	73,b	;volatile
  1894                           
  1895                           ;main.c: 111: ADCON0 = 0b00111111;
  1896  002104  0E3F               	movlw	63
  1897  002106  6EC2               	movwf	4034,c	;volatile
  1898                           
  1899                           ; BSR set to: 15
  1900                           ;main.c: 112: ADCON1 = 0b11111111;
  1901  002108  68C1               	setf	4033,c	;volatile
  1902                           
  1903                           ; BSR set to: 15
  1904                           ;main.c: 115: T1CONbits.T1OSCEN = 1;
  1905  00210A  86CD               	bsf	4045,3,c	;volatile
  1906                           
  1907                           ; BSR set to: 15
  1908                           ;main.c: 117: lcd_init();
  1909  00210C  ECE2  F00E         	call	_lcd_init	;wreg free
  1910                           
  1911                           ;main.c: 118: lcd_comand(0b00001100);
  1912  002110  0E0C               	movlw	12
  1913  002112  EC21  F011         	call	_lcd_comand
  1914                           
  1915                           ;main.c: 120: setDiaSemana();
  1916  002116  EC4C  F00B         	call	_setDiaSemana	;wreg free
  1917                           
  1918                           ;main.c: 121: setDiaMesAnio();
  1919  00211A  ECA4  F00E         	call	_setDiaMesAnio	;wreg free
  1920                           
  1921                           ;main.c: 122: setHoraMinutoSegundo();
  1922  00211E  EC58  F00F         	call	_setHoraMinutoSegundo	;wreg free
  1923                           
  1924                           ;main.c: 123: Write_RTC();
  1925  002122  ECF2  F00B         	call	_Write_RTC	;wreg free
  1926  002126  0012               	return		;funcret
  1927  002128                     __end_of_setup:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           intcon2	equ	0xFF1
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1l	equ	0xFE1
  1938                           postinc2	equ	0xFDE
  1939                           postdec2	equ	0xFDD
  1940                           fsr2h	equ	0xFDA
  1941                           fsr2l	equ	0xFD9
  1942                           status	equ	0xFD8
  1943                           
  1944 ;; *************** function _setHoraMinutoSegundo *****************
  1945 ;; Defined at:
  1946 ;;		line 83 in file "main.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1964 ;;Total ram usage:        0 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    5
  1967 ;; This function calls:
  1968 ;;		_Write_RTC
  1969 ;;		_lcd_gotoxy
  1970 ;;		_lcd_putrs
  1971 ;;		_sprintf
  1972 ;; This function is called by:
  1973 ;;		_setup
  1974 ;;		_main
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text2
  1979  001EB0                     __ptext2:
  1980                           	opt stack 0
  1981  001EB0                     _setHoraMinutoSegundo:
  1982                           	opt stack 24
  1983                           
  1984                           ;main.c: 84: if (hora >= 24) {
  1985                           
  1986                           ;incstack = 0
  1987  001EB0  BE53               	btfsc	_hora+1,7,c
  1988  001EB2  D014               	goto	l160
  1989  001EB4  5053               	movf	_hora+1,w,c
  1990  001EB6  E104               	bnz	u2290
  1991  001EB8  0E18               	movlw	24
  1992  001EBA  5C52               	subwf	_hora,w,c
  1993  001EBC  A0D8               	btfss	status,0,c
  1994  001EBE  D00E               	goto	l160
  1995  001EC0                     u2290:
  1996                           
  1997                           ;main.c: 85: hora = 0;
  1998  001EC0  0E00               	movlw	0
  1999  001EC2  6E53               	movwf	_hora+1,c
  2000  001EC4  0E00               	movlw	0
  2001  001EC6  6E52               	movwf	_hora,c
  2002                           
  2003                           ;main.c: 86: minuto = 0;
  2004  001EC8  0E00               	movlw	0
  2005  001ECA  6E51               	movwf	_minuto+1,c
  2006  001ECC  0E00               	movlw	0
  2007  001ECE  6E50               	movwf	_minuto,c
  2008                           
  2009                           ;main.c: 87: segundo = 0;
  2010  001ED0  0E00               	movlw	0
  2011  001ED2  6E2E               	movwf	_segundo+1,c
  2012  001ED4  0E00               	movlw	0
  2013  001ED6  6E2D               	movwf	_segundo,c
  2014                           
  2015                           ;main.c: 88: Write_RTC();
  2016  001ED8  ECF2  F00B         	call	_Write_RTC	;wreg free
  2017  001EDC                     l160:
  2018                           
  2019                           ;main.c: 89: }
  2020                           ;main.c: 91: sprintf(buffer2, "%02u:%02u:%02u", hora, minuto, segundo);
  2021  001EDC  0E7C               	movlw	low _buffer2
  2022  001EDE  6E0D               	movwf	sprintf@sp,c
  2023  001EE0  0E00               	movlw	high _buffer2
  2024  001EE2  6E0E               	movwf	sprintf@sp+1,c
  2025  001EE4  0E1E               	movlw	low STR_16
  2026  001EE6  6E0F               	movwf	sprintf@f,c
  2027  001EE8  0E0F               	movlw	high STR_16
  2028  001EEA  6E10               	movwf	sprintf@f+1,c
  2029  001EEC  C052  F011         	movff	_hora,?_sprintf+4
  2030  001EF0  C053  F012         	movff	_hora+1,?_sprintf+5
  2031  001EF4  C050  F013         	movff	_minuto,?_sprintf+6
  2032  001EF8  C051  F014         	movff	_minuto+1,?_sprintf+7
  2033  001EFC  C02D  F015         	movff	_segundo,?_sprintf+8
  2034  001F00  C02E  F016         	movff	_segundo+1,?_sprintf+9
  2035  001F04  ECCE  F009         	call	_sprintf	;wreg free
  2036                           
  2037                           ;main.c: 92: lcd_gotoxy(1, 2);
  2038  001F08  0E02               	movlw	2
  2039  001F0A  6E05               	movwf	lcd_gotoxy@y,c
  2040  001F0C  0E01               	movlw	1
  2041  001F0E  ECE1  F010         	call	_lcd_gotoxy
  2042                           
  2043                           ;main.c: 93: lcd_putrs(buffer2);
  2044  001F12  0E7C               	movlw	low _buffer2
  2045  001F14  6E09               	movwf	lcd_putrs@ptr,c
  2046  001F16  0E00               	movlw	high _buffer2
  2047  001F18  6E0A               	movwf	lcd_putrs@ptr+1,c
  2048  001F1A  EC22  F010         	call	_lcd_putrs	;wreg free
  2049  001F1E  0012               	return		;funcret
  2050  001F20                     __end_of_setHoraMinutoSegundo:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           intcon2	equ	0xFF1
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           postdec1	equ	0xFE5
  2060                           fsr1l	equ	0xFE1
  2061                           postinc2	equ	0xFDE
  2062                           postdec2	equ	0xFDD
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _setDiaSemana *****************
  2068 ;; Defined at:
  2069 ;;		line 35 in file "main.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2087 ;;Total ram usage:        1 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    5
  2090 ;; This function calls:
  2091 ;;		_lcd_gotoxy
  2092 ;;		_lcd_putrs
  2093 ;; This function is called by:
  2094 ;;		_setup
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text3
  2100  001698                     __ptext3:
  2101                           	opt stack 0
  2102  001698                     _setDiaSemana:
  2103                           	opt stack 24
  2104                           
  2105                           ;main.c: 36: if (diasem == 0) {
  2106                           
  2107                           ;incstack = 0
  2108  001698  5056               	movf	_diasem,w,c
  2109  00169A  1057               	iorwf	_diasem+1,w,c
  2110  00169C  A4D8               	btfss	status,2,c
  2111  00169E  D013               	goto	l139
  2112                           
  2113                           ;main.c: 37: lcd_gotoxy(1, 1);
  2114  0016A0  0E01               	movlw	1
  2115  0016A2  6E05               	movwf	lcd_gotoxy@y,c
  2116  0016A4  0E01               	movlw	1
  2117  0016A6  ECE1  F010         	call	_lcd_gotoxy
  2118                           
  2119                           ;main.c: 38: lcd_putrs("Domingo");
  2120  0016AA  0E5E               	movlw	low STR_8
  2121  0016AC  6E09               	movwf	lcd_putrs@ptr,c
  2122  0016AE  0E0F               	movlw	high STR_8
  2123  0016B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  2124  0016B2  EC22  F010         	call	_lcd_putrs	;wreg free
  2125                           
  2126                           ;main.c: 39: _delay((unsigned long)((50)*(8000000/4000.0)));
  2127  0016B6  0E82               	movlw	130
  2128  0016B8  6E0B               	movwf	??_setDiaSemana& (0+255),c
  2129  0016BA  0EDE               	movlw	222
  2130  0016BC                     u3047:
  2131  0016BC  2EE8               	decfsz	wreg,f,c
  2132  0016BE  D7FE               	bra	u3047
  2133  0016C0  2E0B               	decfsz	??_setDiaSemana& (0+255),f,c
  2134  0016C2  D7FC               	bra	u3047
  2135                           
  2136                           ;main.c: 40: } else if (diasem == 1) {
  2137  0016C4  0012               	return	
  2138  0016C6                     l139:
  2139  0016C6  0456               	decf	_diasem,w,c
  2140  0016C8  1057               	iorwf	_diasem+1,w,c
  2141  0016CA  A4D8               	btfss	status,2,c
  2142  0016CC  D013               	goto	l141
  2143                           
  2144                           ;main.c: 41: lcd_gotoxy(1, 1);
  2145  0016CE  0E01               	movlw	1
  2146  0016D0  6E05               	movwf	lcd_gotoxy@y,c
  2147  0016D2  0E01               	movlw	1
  2148  0016D4  ECE1  F010         	call	_lcd_gotoxy
  2149                           
  2150                           ;main.c: 42: lcd_putrs("Lunes  ");
  2151  0016D8  0E36               	movlw	low STR_9
  2152  0016DA  6E09               	movwf	lcd_putrs@ptr,c
  2153  0016DC  0E0F               	movlw	high STR_9
  2154  0016DE  6E0A               	movwf	lcd_putrs@ptr+1,c
  2155  0016E0  EC22  F010         	call	_lcd_putrs	;wreg free
  2156                           
  2157                           ;main.c: 43: _delay((unsigned long)((50)*(8000000/4000.0)));
  2158  0016E4  0E82               	movlw	130
  2159  0016E6  6E0B               	movwf	??_setDiaSemana& (0+255),c
  2160  0016E8  0EDE               	movlw	222
  2161  0016EA                     u3057:
  2162  0016EA  2EE8               	decfsz	wreg,f,c
  2163  0016EC  D7FE               	bra	u3057
  2164  0016EE  2E0B               	decfsz	??_setDiaSemana& (0+255),f,c
  2165  0016F0  D7FC               	bra	u3057
  2166                           
  2167                           ;main.c: 44: } else if (diasem == 2) {
  2168  0016F2  0012               	return	
  2169  0016F4                     l141:
  2170  0016F4  0E02               	movlw	2
  2171  0016F6  1856               	xorwf	_diasem,w,c
  2172  0016F8  1057               	iorwf	_diasem+1,w,c
  2173  0016FA  A4D8               	btfss	status,2,c
  2174  0016FC  D013               	goto	l143
  2175                           
  2176                           ;main.c: 45: lcd_gotoxy(1, 1);
  2177  0016FE  0E01               	movlw	1
  2178  001700  6E05               	movwf	lcd_gotoxy@y,c
  2179  001702  0E01               	movlw	1
  2180  001704  ECE1  F010         	call	_lcd_gotoxy
  2181                           
  2182                           ;main.c: 46: lcd_putrs("Martes ");
  2183  001708  0E46               	movlw	low STR_10
  2184  00170A  6E09               	movwf	lcd_putrs@ptr,c
  2185  00170C  0E0F               	movlw	high STR_10
  2186  00170E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2187  001710  EC22  F010         	call	_lcd_putrs	;wreg free
  2188                           
  2189                           ;main.c: 47: _delay((unsigned long)((50)*(8000000/4000.0)));
  2190  001714  0E82               	movlw	130
  2191  001716  6E0B               	movwf	??_setDiaSemana& (0+255),c
  2192  001718  0EDE               	movlw	222
  2193  00171A                     u3067:
  2194  00171A  2EE8               	decfsz	wreg,f,c
  2195  00171C  D7FE               	bra	u3067
  2196  00171E  2E0B               	decfsz	??_setDiaSemana& (0+255),f,c
  2197  001720  D7FC               	bra	u3067
  2198                           
  2199                           ;main.c: 48: } else if (diasem == 3) {
  2200  001722  0012               	return	
  2201  001724                     l143:
  2202  001724  0E03               	movlw	3
  2203  001726  1856               	xorwf	_diasem,w,c
  2204  001728  1057               	iorwf	_diasem+1,w,c
  2205  00172A  A4D8               	btfss	status,2,c
  2206  00172C  D013               	goto	l145
  2207                           
  2208                           ;main.c: 49: lcd_gotoxy(1, 1);
  2209  00172E  0E01               	movlw	1
  2210  001730  6E05               	movwf	lcd_gotoxy@y,c
  2211  001732  0E01               	movlw	1
  2212  001734  ECE1  F010         	call	_lcd_gotoxy
  2213                           
  2214                           ;main.c: 50: lcd_putrs("Miercol");
  2215  001738  0E56               	movlw	low STR_11
  2216  00173A  6E09               	movwf	lcd_putrs@ptr,c
  2217  00173C  0E0F               	movlw	high STR_11
  2218  00173E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2219  001740  EC22  F010         	call	_lcd_putrs	;wreg free
  2220                           
  2221                           ;main.c: 51: _delay((unsigned long)((50)*(8000000/4000.0)));
  2222  001744  0E82               	movlw	130
  2223  001746  6E0B               	movwf	??_setDiaSemana& (0+255),c
  2224  001748  0EDE               	movlw	222
  2225  00174A                     u3077:
  2226  00174A  2EE8               	decfsz	wreg,f,c
  2227  00174C  D7FE               	bra	u3077
  2228  00174E  2E0B               	decfsz	??_setDiaSemana& (0+255),f,c
  2229  001750  D7FC               	bra	u3077
  2230                           
  2231                           ;main.c: 52: } else if (diasem == 4) {
  2232  001752  0012               	return	
  2233  001754                     l145:
  2234  001754  0E04               	movlw	4
  2235  001756  1856               	xorwf	_diasem,w,c
  2236  001758  1057               	iorwf	_diasem+1,w,c
  2237  00175A  A4D8               	btfss	status,2,c
  2238  00175C  D013               	goto	l147
  2239                           
  2240                           ;main.c: 53: lcd_gotoxy(1, 1);
  2241  00175E  0E01               	movlw	1
  2242  001760  6E05               	movwf	lcd_gotoxy@y,c
  2243  001762  0E01               	movlw	1
  2244  001764  ECE1  F010         	call	_lcd_gotoxy
  2245                           
  2246                           ;main.c: 54: lcd_putrs("Jueves ");
  2247  001768  0E4E               	movlw	low STR_12
  2248  00176A  6E09               	movwf	lcd_putrs@ptr,c
  2249  00176C  0E0F               	movlw	high STR_12
  2250  00176E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2251  001770  EC22  F010         	call	_lcd_putrs	;wreg free
  2252                           
  2253                           ;main.c: 55: _delay((unsigned long)((50)*(8000000/4000.0)));
  2254  001774  0E82               	movlw	130
  2255  001776  6E0B               	movwf	??_setDiaSemana& (0+255),c
  2256  001778  0EDE               	movlw	222
  2257  00177A                     u3087:
  2258  00177A  2EE8               	decfsz	wreg,f,c
  2259  00177C  D7FE               	bra	u3087
  2260  00177E  2E0B               	decfsz	??_setDiaSemana& (0+255),f,c
  2261  001780  D7FC               	bra	u3087
  2262                           
  2263                           ;main.c: 56: } else if (diasem == 5) {
  2264  001782  0012               	return	
  2265  001784                     l147:
  2266  001784  0E05               	movlw	5
  2267  001786  1856               	xorwf	_diasem,w,c
  2268  001788  1057               	iorwf	_diasem+1,w,c
  2269  00178A  A4D8               	btfss	status,2,c
  2270  00178C  D013               	goto	l149
  2271                           
  2272                           ;main.c: 57: lcd_gotoxy(1, 1);
  2273  00178E  0E01               	movlw	1
  2274  001790  6E05               	movwf	lcd_gotoxy@y,c
  2275  001792  0E01               	movlw	1
  2276  001794  ECE1  F010         	call	_lcd_gotoxy
  2277                           
  2278                           ;main.c: 58: lcd_putrs("Viernes");
  2279  001798  0E66               	movlw	low STR_13
  2280  00179A  6E09               	movwf	lcd_putrs@ptr,c
  2281  00179C  0E0F               	movlw	high STR_13
  2282  00179E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2283  0017A0  EC22  F010         	call	_lcd_putrs	;wreg free
  2284                           
  2285                           ;main.c: 59: _delay((unsigned long)((50)*(8000000/4000.0)));
  2286  0017A4  0E82               	movlw	130
  2287  0017A6  6E0B               	movwf	??_setDiaSemana& (0+255),c
  2288  0017A8  0EDE               	movlw	222
  2289  0017AA                     u3097:
  2290  0017AA  2EE8               	decfsz	wreg,f,c
  2291  0017AC  D7FE               	bra	u3097
  2292  0017AE  2E0B               	decfsz	??_setDiaSemana& (0+255),f,c
  2293  0017B0  D7FC               	bra	u3097
  2294                           
  2295                           ;main.c: 60: } else if (diasem == 6) {
  2296  0017B2  0012               	return	
  2297  0017B4                     l149:
  2298  0017B4  0E06               	movlw	6
  2299  0017B6  1856               	xorwf	_diasem,w,c
  2300  0017B8  1057               	iorwf	_diasem+1,w,c
  2301  0017BA  A4D8               	btfss	status,2,c
  2302  0017BC  0012               	return	
  2303                           
  2304                           ;main.c: 61: lcd_gotoxy(1, 1);
  2305  0017BE  0E01               	movlw	1
  2306  0017C0  6E05               	movwf	lcd_gotoxy@y,c
  2307  0017C2  0E01               	movlw	1
  2308  0017C4  ECE1  F010         	call	_lcd_gotoxy
  2309                           
  2310                           ;main.c: 62: lcd_putrs("Sabado ");
  2311  0017C8  0E3E               	movlw	low STR_14
  2312  0017CA  6E09               	movwf	lcd_putrs@ptr,c
  2313  0017CC  0E0F               	movlw	high STR_14
  2314  0017CE  6E0A               	movwf	lcd_putrs@ptr+1,c
  2315  0017D0  EC22  F010         	call	_lcd_putrs	;wreg free
  2316                           
  2317                           ;main.c: 63: _delay((unsigned long)((50)*(8000000/4000.0)));
  2318  0017D4  0E82               	movlw	130
  2319  0017D6  6E0B               	movwf	??_setDiaSemana& (0+255),c
  2320  0017D8  0EDE               	movlw	222
  2321  0017DA                     u3107:
  2322  0017DA  2EE8               	decfsz	wreg,f,c
  2323  0017DC  D7FE               	bra	u3107
  2324  0017DE  2E0B               	decfsz	??_setDiaSemana& (0+255),f,c
  2325  0017E0  D7FC               	bra	u3107
  2326  0017E2  0012               	return	
  2327  0017E4                     __end_of_setDiaSemana:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           tblptrh	equ	0xFF7
  2331                           tblptrl	equ	0xFF6
  2332                           tablat	equ	0xFF5
  2333                           intcon2	equ	0xFF1
  2334                           postinc0	equ	0xFEE
  2335                           wreg	equ	0xFE8
  2336                           postdec1	equ	0xFE5
  2337                           fsr1l	equ	0xFE1
  2338                           postinc2	equ	0xFDE
  2339                           postdec2	equ	0xFDD
  2340                           fsr2h	equ	0xFDA
  2341                           fsr2l	equ	0xFD9
  2342                           status	equ	0xFD8
  2343                           
  2344 ;; *************** function _setDiaMesAnio *****************
  2345 ;; Defined at:
  2346 ;;		line 67 in file "main.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;		None
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;		None
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2364 ;;Total ram usage:        0 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    5
  2367 ;; This function calls:
  2368 ;;		_Write_RTC
  2369 ;;		_lcd_gotoxy
  2370 ;;		_lcd_putrs
  2371 ;;		_sprintf
  2372 ;; This function is called by:
  2373 ;;		_setup
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text4
  2379  001D48                     __ptext4:
  2380                           	opt stack 0
  2381  001D48                     _setDiaMesAnio:
  2382                           	opt stack 24
  2383                           
  2384                           ;main.c: 68: if (dia > 31) {
  2385                           
  2386                           ;incstack = 0
  2387  001D48  BE55               	btfsc	_dia+1,7,c
  2388  001D4A  D00C               	goto	l155
  2389  001D4C  5055               	movf	_dia+1,w,c
  2390  001D4E  E104               	bnz	u2270
  2391  001D50  0E20               	movlw	32
  2392  001D52  5C54               	subwf	_dia,w,c
  2393  001D54  A0D8               	btfss	status,0,c
  2394  001D56  D006               	goto	l155
  2395  001D58                     u2270:
  2396                           
  2397                           ;main.c: 69: dia = 1;
  2398  001D58  0E00               	movlw	0
  2399  001D5A  6E55               	movwf	_dia+1,c
  2400  001D5C  0E01               	movlw	1
  2401  001D5E  6E54               	movwf	_dia,c
  2402                           
  2403                           ;main.c: 70: Write_RTC();
  2404  001D60  ECF2  F00B         	call	_Write_RTC	;wreg free
  2405  001D64                     l155:
  2406                           
  2407                           ;main.c: 71: }
  2408                           ;main.c: 73: if (mes > 12) {
  2409  001D64  BE59               	btfsc	_mes+1,7,c
  2410  001D66  D00C               	goto	l156
  2411  001D68  5059               	movf	_mes+1,w,c
  2412  001D6A  E104               	bnz	u2280
  2413  001D6C  0E0D               	movlw	13
  2414  001D6E  5C58               	subwf	_mes,w,c
  2415  001D70  A0D8               	btfss	status,0,c
  2416  001D72  D006               	goto	l156
  2417  001D74                     u2280:
  2418                           
  2419                           ;main.c: 74: mes = 1;
  2420  001D74  0E00               	movlw	0
  2421  001D76  6E59               	movwf	_mes+1,c
  2422  001D78  0E01               	movlw	1
  2423  001D7A  6E58               	movwf	_mes,c
  2424                           
  2425                           ;main.c: 75: Write_RTC();
  2426  001D7C  ECF2  F00B         	call	_Write_RTC	;wreg free
  2427  001D80                     l156:
  2428                           
  2429                           ;main.c: 76: }
  2430                           ;main.c: 78: sprintf(buffer2, "%02u/%02u/%02u", dia, mes, anio);
  2431  001D80  0E7C               	movlw	low _buffer2
  2432  001D82  6E0D               	movwf	sprintf@sp,c
  2433  001D84  0E00               	movlw	high _buffer2
  2434  001D86  6E0E               	movwf	sprintf@sp+1,c
  2435  001D88  0E0F               	movlw	low STR_15
  2436  001D8A  6E0F               	movwf	sprintf@f,c
  2437  001D8C  0E0F               	movlw	high STR_15
  2438  001D8E  6E10               	movwf	sprintf@f+1,c
  2439  001D90  C054  F011         	movff	_dia,?_sprintf+4
  2440  001D94  C055  F012         	movff	_dia+1,?_sprintf+5
  2441  001D98  C058  F013         	movff	_mes,?_sprintf+6
  2442  001D9C  C059  F014         	movff	_mes+1,?_sprintf+7
  2443  001DA0  C05A  F015         	movff	_anio,?_sprintf+8
  2444  001DA4  C05B  F016         	movff	_anio+1,?_sprintf+9
  2445  001DA8  ECCE  F009         	call	_sprintf	;wreg free
  2446                           
  2447                           ;main.c: 79: lcd_gotoxy(9, 1);
  2448  001DAC  0E01               	movlw	1
  2449  001DAE  6E05               	movwf	lcd_gotoxy@y,c
  2450  001DB0  0E09               	movlw	9
  2451  001DB2  ECE1  F010         	call	_lcd_gotoxy
  2452                           
  2453                           ;main.c: 80: lcd_putrs(buffer2);
  2454  001DB6  0E7C               	movlw	low _buffer2
  2455  001DB8  6E09               	movwf	lcd_putrs@ptr,c
  2456  001DBA  0E00               	movlw	high _buffer2
  2457  001DBC  6E0A               	movwf	lcd_putrs@ptr+1,c
  2458  001DBE  EC22  F010         	call	_lcd_putrs	;wreg free
  2459  001DC2  0012               	return		;funcret
  2460  001DC4                     __end_of_setDiaMesAnio:
  2461                           	opt stack 0
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           intcon2	equ	0xFF1
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           postdec1	equ	0xFE5
  2470                           fsr1l	equ	0xFE1
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _sprintf *****************
  2478 ;; Defined at:
  2479 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2482 ;;		 -> buffer2(20), 
  2483 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2484 ;;		 -> STR_19(3), STR_16(15), STR_15(15), 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  tmpval          4    0        struct .
  2487 ;;  width           2   36[COMRAM] int 
  2488 ;;  len             2   34[COMRAM] unsigned int 
  2489 ;;  cp              2   32[COMRAM] PTR const unsigned char 
  2490 ;;		 -> STR_20(7), STR_7(5), STR_6(5), STR_5(5), 
  2491 ;;		 -> STR_4(5), STR_3(5), STR_2(5), STR_1(5), 
  2492 ;;  ap              2   30[COMRAM] PTR void [1]
  2493 ;;		 -> ?_sprintf(2), 
  2494 ;;  val             2   27[COMRAM] unsigned int 
  2495 ;;  c               1   38[COMRAM] char 
  2496 ;;  prec            1   29[COMRAM] char 
  2497 ;;  flag            1   26[COMRAM] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  2   12[COMRAM] int 
  2500 ;; Registers used:
  2501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2507 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2508 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2509 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2510 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2511 ;;Total ram usage:       27 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    1
  2514 ;; This function calls:
  2515 ;;		___lwdiv
  2516 ;;		___lwmod
  2517 ;;		___wmul
  2518 ;;		_isdigit
  2519 ;; This function is called by:
  2520 ;;		_setDiaMesAnio
  2521 ;;		_setHoraMinutoSegundo
  2522 ;;		_main
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text5
  2527  00139C                     __ptext5:
  2528                           	opt stack 0
  2529  00139C                     _sprintf:
  2530                           	opt stack 29
  2531                           
  2532                           ;doprnt.c: 494: va_list ap;
  2533                           ;doprnt.c: 499: signed char c;
  2534                           ;doprnt.c: 501: int width;
  2535                           ;doprnt.c: 506: signed char prec;
  2536                           ;doprnt.c: 508: unsigned char flag;
  2537                           ;doprnt.c: 523: union {
  2538                           ;doprnt.c: 524: unsigned long vd;
  2539                           ;doprnt.c: 525: double integ;
  2540                           ;doprnt.c: 526: } tmpval;
  2541                           ;doprnt.c: 528: unsigned int val;
  2542                           ;doprnt.c: 529: unsigned len;
  2543                           ;doprnt.c: 530: const char * cp;
  2544                           ;doprnt.c: 533: *ap = __va_start();
  2545                           
  2546                           ;incstack = 0
  2547  00139C  0E11               	movlw	low (?_sprintf+4)
  2548  00139E  6E1F               	movwf	sprintf@ap,c
  2549  0013A0  0E00               	movlw	high (?_sprintf+4)
  2550  0013A2  6E20               	movwf	sprintf@ap+1,c
  2551                           
  2552                           ;doprnt.c: 536: while(c = *f++) {
  2553  0013A4  D166               	goto	u2160
  2554  0013A6                     
  2555                           ;doprnt.c: 538: if(c != '%')
  2556  0013A6  0E25               	movlw	37
  2557  0013A8  1827               	xorwf	sprintf@c,w,c
  2558  0013AA  B4D8               	btfsc	status,2,c
  2559  0013AC  D009               	goto	l350
  2560                           
  2561                           ;doprnt.c: 540: {
  2562                           ;doprnt.c: 541: ((*sp++ = (c)));
  2563  0013AE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2564  0013B2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2565  0013B6  C027  FFDF         	movff	sprintf@c,indf2
  2566  0013BA  4A0D               	infsnz	sprintf@sp,f,c
  2567  0013BC  2A0E               	incf	sprintf@sp+1,f,c
  2568                           
  2569                           ;doprnt.c: 542: continue;
  2570  0013BE  D159               	goto	u2160
  2571  0013C0                     l350:
  2572                           
  2573                           ;doprnt.c: 543: }
  2574                           ;doprnt.c: 546: width = 0;
  2575  0013C0  0E00               	movlw	0
  2576  0013C2  6E26               	movwf	sprintf@width+1,c
  2577  0013C4  0E00               	movlw	0
  2578  0013C6  6E25               	movwf	sprintf@width,c
  2579                           
  2580                           ;doprnt.c: 548: flag = 0;
  2581  0013C8  0E00               	movlw	0
  2582  0013CA  6E1B               	movwf	sprintf@flag,c
  2583                           
  2584                           ;doprnt.c: 551: switch(*f) {
  2585                           
  2586                           ;doprnt.c: 550: for(;;) {
  2587  0013CC  D003               	goto	l352
  2588  0013CE                     
  2589                           ;doprnt.c: 580: flag |= 0x04;
  2590  0013CE  841B               	bsf	sprintf@flag,2,c
  2591                           
  2592                           ;doprnt.c: 581: f++;
  2593  0013D0  4A0F               	infsnz	sprintf@f,f,c
  2594  0013D2  2A10               	incf	sprintf@f+1,f,c
  2595  0013D4                     l352:
  2596  0013D4  C00F  FFF6         	movff	sprintf@f,tblptrl
  2597  0013D8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2598  0013DC                     	if	0	;tblptru may be non-zero
  2599  0013DC                     	endif
  2600  0013DC                     	if	0	;tblptru may be non-zero
  2601  0013DC                     	endif
  2602  0013DC  0008               	tblrd		*
  2603  0013DE  50F5               	movf	tablat,w,c
  2604                           
  2605                           ; Switch size 1, requested type "space"
  2606                           ; Number of cases is 1, Range of values is 48 to 48
  2607                           ; switch strategies available:
  2608                           ; Name         Instructions Cycles
  2609                           ; simple_byte            4     3 (average)
  2610                           ;	Chosen strategy is simple_byte
  2611  0013E0  0A30               	xorlw	48	; case 48
  2612  0013E2  B4D8               	btfsc	status,2,c
  2613  0013E4  D7F4               	goto	l353
  2614                           
  2615                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2616                           
  2617                           ;doprnt.c: 586: }
  2618                           
  2619                           ;doprnt.c: 585: break;
  2620  0013E6  C00F  FFF6         	movff	sprintf@f,tblptrl
  2621  0013EA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2622  0013EE                     	if	0	;tblptru may be non-zero
  2623  0013EE                     	endif
  2624  0013EE                     	if	0	;tblptru may be non-zero
  2625  0013EE                     	endif
  2626  0013EE  0008               	tblrd		*
  2627  0013F0  50F5               	movf	tablat,w,c
  2628  0013F2  ECF2  F010         	call	_isdigit
  2629  0013F6  A0D8               	btfss	status,0,c
  2630  0013F8  D099               	goto	l360
  2631                           
  2632                           ;doprnt.c: 598: width = 0;
  2633  0013FA  0E00               	movlw	0
  2634  0013FC  6E26               	movwf	sprintf@width+1,c
  2635  0013FE  0E00               	movlw	0
  2636  001400  6E25               	movwf	sprintf@width,c
  2637  001402                     
  2638                           ;doprnt.c: 600: width *= 10;
  2639  001402  C025  F001         	movff	sprintf@width,___wmul@multiplier
  2640  001406  C026  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2641  00140A  0E00               	movlw	0
  2642  00140C  6E04               	movwf	___wmul@multiplicand+1,c
  2643  00140E  0E0A               	movlw	10
  2644  001410  6E03               	movwf	___wmul@multiplicand,c
  2645  001412  ECCE  F010         	call	___wmul	;wreg free
  2646  001416  C001  F025         	movff	?___wmul,sprintf@width
  2647  00141A  C002  F026         	movff	?___wmul+1,sprintf@width+1
  2648                           
  2649                           ;doprnt.c: 601: width += *f++ - '0';
  2650  00141E  0ED0               	movlw	208
  2651  001420  6E17               	movwf	??_sprintf& (0+255),c
  2652  001422  0EFF               	movlw	255
  2653  001424  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2654  001426  C00F  FFF6         	movff	sprintf@f,tblptrl
  2655  00142A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2656  00142E                     	if	0	;tblptru may be non-zero
  2657  00142E                     	endif
  2658  00142E                     	if	0	;tblptru may be non-zero
  2659  00142E                     	endif
  2660  00142E  0008               	tblrd		*
  2661  001430  50F5               	movf	tablat,w,c
  2662  001432  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2663  001434  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2664  001436  5017               	movf	??_sprintf,w,c
  2665  001438  2619               	addwf	??_sprintf+2,f,c
  2666  00143A  5018               	movf	??_sprintf+1,w,c
  2667  00143C  221A               	addwfc	??_sprintf+3,f,c
  2668  00143E  5019               	movf	??_sprintf+2,w,c
  2669  001440  2625               	addwf	sprintf@width,f,c
  2670  001442  501A               	movf	??_sprintf+3,w,c
  2671  001444  2226               	addwfc	sprintf@width+1,f,c
  2672  001446  4A0F               	infsnz	sprintf@f,f,c
  2673  001448  2A10               	incf	sprintf@f+1,f,c
  2674                           
  2675                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2676  00144A  C00F  FFF6         	movff	sprintf@f,tblptrl
  2677  00144E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2678  001452                     	if	0	;tblptru may be non-zero
  2679  001452                     	endif
  2680  001452                     	if	0	;tblptru may be non-zero
  2681  001452                     	endif
  2682  001452  0008               	tblrd		*
  2683  001454  50F5               	movf	tablat,w,c
  2684  001456  ECF2  F010         	call	_isdigit
  2685  00145A  A0D8               	btfss	status,0,c
  2686  00145C  D067               	goto	l360
  2687  00145E  D7D1               	goto	l358
  2688  001460                     
  2689                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2690  001460  C01F  FFD9         	movff	sprintf@ap,fsr2l
  2691  001464  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  2692  001468  CFDE F021          	movff	postinc2,sprintf@cp
  2693  00146C  CFDD F022          	movff	postdec2,sprintf@cp+1
  2694  001470  0E02               	movlw	2
  2695  001472  261F               	addwf	sprintf@ap,f,c
  2696  001474  0E00               	movlw	0
  2697  001476  2220               	addwfc	sprintf@ap+1,f,c
  2698                           
  2699                           ;doprnt.c: 740: if(!cp)
  2700  001478  5021               	movf	sprintf@cp,w,c
  2701  00147A  1022               	iorwf	sprintf@cp+1,w,c
  2702  00147C  A4D8               	btfss	status,2,c
  2703  00147E  D004               	goto	l364
  2704                           
  2705                           ;doprnt.c: 741: cp = "(null)";
  2706  001480  0E6E               	movlw	low STR_20
  2707  001482  6E21               	movwf	sprintf@cp,c
  2708  001484  0E0F               	movlw	high STR_20
  2709  001486  6E22               	movwf	sprintf@cp+1,c
  2710  001488                     l364:
  2711                           
  2712                           ;doprnt.c: 745: len = 0;
  2713  001488  0E00               	movlw	0
  2714  00148A  6E24               	movwf	sprintf@len+1,c
  2715  00148C  0E00               	movlw	0
  2716  00148E  6E23               	movwf	sprintf@len,c
  2717                           
  2718                           ;doprnt.c: 746: while(cp[len])
  2719  001490  D002               	goto	l365
  2720  001492                     
  2721                           ;doprnt.c: 747: len++;
  2722  001492  4A23               	infsnz	sprintf@len,f,c
  2723  001494  2A24               	incf	sprintf@len+1,f,c
  2724  001496                     l365:
  2725  001496  5023               	movf	sprintf@len,w,c
  2726  001498  2421               	addwf	sprintf@cp,w,c
  2727  00149A  6E17               	movwf	??_sprintf& (0+255),c
  2728  00149C  5024               	movf	sprintf@len+1,w,c
  2729  00149E  2022               	addwfc	sprintf@cp+1,w,c
  2730  0014A0  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2731  0014A2  C017  FFF6         	movff	??_sprintf,tblptrl
  2732  0014A6  C018  FFF7         	movff	??_sprintf+1,tblptrh
  2733  0014AA                     	if	0	;tblptru may be non-zero
  2734  0014AA                     	endif
  2735  0014AA                     	if	0	;tblptru may be non-zero
  2736  0014AA                     	endif
  2737  0014AA  0008               	tblrd		*
  2738  0014AC  50F5               	movf	tablat,w,c
  2739  0014AE  0900               	iorlw	0
  2740  0014B0  A4D8               	btfss	status,2,c
  2741  0014B2  D7EF               	goto	l366
  2742                           
  2743                           ;doprnt.c: 757: if(width > len)
  2744  0014B4  5025               	movf	sprintf@width,w,c
  2745  0014B6  5C23               	subwf	sprintf@len,w,c
  2746  0014B8  5026               	movf	sprintf@width+1,w,c
  2747  0014BA  5824               	subwfb	sprintf@len+1,w,c
  2748  0014BC  B0D8               	btfsc	status,0,c
  2749  0014BE  D005               	goto	l368
  2750                           
  2751                           ;doprnt.c: 758: width -= len;
  2752  0014C0  5023               	movf	sprintf@len,w,c
  2753  0014C2  5E25               	subwf	sprintf@width,f,c
  2754  0014C4  5024               	movf	sprintf@len+1,w,c
  2755  0014C6  5A26               	subwfb	sprintf@width+1,f,c
  2756  0014C8  D00D               	goto	l370
  2757  0014CA                     l368:
  2758                           
  2759                           ;doprnt.c: 759: else
  2760                           ;doprnt.c: 760: width = 0;
  2761  0014CA  0E00               	movlw	0
  2762  0014CC  6E26               	movwf	sprintf@width+1,c
  2763  0014CE  0E00               	movlw	0
  2764  0014D0  6E25               	movwf	sprintf@width,c
  2765                           
  2766                           ;doprnt.c: 764: while(width--)
  2767  0014D2  D008               	goto	l370
  2768  0014D4                     l2533:
  2769                           
  2770                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2771  0014D4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2772  0014D8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2773  0014DC  0E20               	movlw	32
  2774  0014DE  6EDF               	movwf	indf2,c
  2775  0014E0  4A0D               	infsnz	sprintf@sp,f,c
  2776  0014E2  2A0E               	incf	sprintf@sp+1,f,c
  2777  0014E4                     l370:
  2778  0014E4  0625               	decf	sprintf@width,f,c
  2779  0014E6  A0D8               	btfss	status,0,c
  2780  0014E8  0626               	decf	sprintf@width+1,f,c
  2781  0014EA  2825               	incf	sprintf@width,w,c
  2782  0014EC  E1F3               	bnz	l2533
  2783  0014EE  2826               	incf	sprintf@width+1,w,c
  2784  0014F0  B4D8               	btfsc	status,2,c
  2785  0014F2  D010               	goto	l373
  2786  0014F4  D7EF               	goto	l371
  2787  0014F6                     l2539:
  2788                           
  2789                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2790  0014F6  C021  FFF6         	movff	sprintf@cp,tblptrl
  2791  0014FA  C022  FFF7         	movff	sprintf@cp+1,tblptrh
  2792  0014FE                     	if	0	;tblptru may be non-zero
  2793  0014FE                     	endif
  2794  0014FE                     	if	0	;tblptru may be non-zero
  2795  0014FE                     	endif
  2796  0014FE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2797  001502  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2798  001506  0008               	tblrd		*
  2799  001508  CFF5 FFDF          	movff	tablat,indf2
  2800  00150C  4A21               	infsnz	sprintf@cp,f,c
  2801  00150E  2A22               	incf	sprintf@cp+1,f,c
  2802  001510  4A0D               	infsnz	sprintf@sp,f,c
  2803  001512  2A0E               	incf	sprintf@sp+1,f,c
  2804  001514                     l373:
  2805  001514  0623               	decf	sprintf@len,f,c
  2806  001516  A0D8               	btfss	status,0,c
  2807  001518  0624               	decf	sprintf@len+1,f,c
  2808  00151A  2823               	incf	sprintf@len,w,c
  2809  00151C  E1EC               	bnz	l2539
  2810  00151E  2824               	incf	sprintf@len+1,w,c
  2811  001520  B4D8               	btfsc	status,2,c
  2812  001522  D0A7               	goto	u2160
  2813  001524  D7E8               	goto	l374
  2814  001526                     
  2815                           ;doprnt.c: 818: flag |= 0xC0;
  2816  001526  0EC0               	movlw	192
  2817  001528  121B               	iorwf	sprintf@flag,f,c
  2818                           
  2819                           ;doprnt.c: 822: }
  2820                           
  2821                           ;doprnt.c: 819: break;
  2822  00152A  D014               	goto	l378
  2823  00152C                     l360:
  2824  00152C  C00F  FFF6         	movff	sprintf@f,tblptrl
  2825  001530  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2826  001534  4A0F               	infsnz	sprintf@f,f,c
  2827  001536  2A10               	incf	sprintf@f+1,f,c
  2828  001538                     	if	0	;tblptru may be non-zero
  2829  001538                     	endif
  2830  001538                     	if	0	;tblptru may be non-zero
  2831  001538                     	endif
  2832  001538  0008               	tblrd		*
  2833  00153A  CFF5 F027          	movff	tablat,sprintf@c
  2834  00153E  5027               	movf	sprintf@c,w,c
  2835                           
  2836                           ; Switch size 1, requested type "space"
  2837                           ; Number of cases is 3, Range of values is 0 to 117
  2838                           ; switch strategies available:
  2839                           ; Name         Instructions Cycles
  2840                           ; simple_byte           10     6 (average)
  2841                           ;	Chosen strategy is simple_byte
  2842  001540  0A00               	xorlw	0	; case 0
  2843  001542  B4D8               	btfsc	status,2,c
  2844  001544  D0A2               	goto	u2170
  2845  001546  0A73               	xorlw	115	; case 115
  2846  001548  B4D8               	btfsc	status,2,c
  2847  00154A  D78A               	goto	l363
  2848  00154C  0A06               	xorlw	6	; case 117
  2849  00154E  B4D8               	btfsc	status,2,c
  2850  001550  D7EA               	goto	l377
  2851  001552  D08F               	goto	u2160
  2852  001554                     l378:
  2853                           
  2854                           ;doprnt.c: 1273: {
  2855                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2856  001554  C01F  FFD9         	movff	sprintf@ap,fsr2l
  2857  001558  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  2858  00155C  CFDE F01C          	movff	postinc2,sprintf@val
  2859  001560  CFDD F01D          	movff	postdec2,sprintf@val+1
  2860  001564  0E02               	movlw	2
  2861  001566  261F               	addwf	sprintf@ap,f,c
  2862  001568  0E00               	movlw	0
  2863  00156A  2220               	addwfc	sprintf@ap+1,f,c
  2864                           
  2865                           ;doprnt.c: 1287: }
  2866                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2867  00156C  0E01               	movlw	1
  2868  00156E  6E27               	movwf	sprintf@c,c
  2869  001570                     l2559:
  2870  001570  0E05               	movlw	5
  2871  001572  1827               	xorwf	sprintf@c,w,c
  2872  001574  B4D8               	btfsc	status,2,c
  2873  001576  D012               	goto	u2090
  2874                           
  2875                           ;doprnt.c: 1306: if(val < dpowers[c])
  2876  001578  5027               	movf	sprintf@c,w,c
  2877  00157A  0D02               	mullw	2
  2878  00157C  0E01               	movlw	low _dpowers
  2879  00157E  24F3               	addwf	prodl,w,c
  2880  001580  6EF6               	movwf	tblptrl,c
  2881  001582  0E0F               	movlw	high _dpowers
  2882  001584  20F4               	addwfc	prodh,w,c
  2883  001586  6EF7               	movwf	tblptrh,c
  2884  001588                     	if	0	;There are less than 3 active tblptr bytes
  2885  001588                     	endif
  2886  001588  0009               	tblrd		*+
  2887  00158A  50F5               	movf	tablat,w,c
  2888  00158C  5C1C               	subwf	sprintf@val,w,c
  2889  00158E  0009               	tblrd		*+
  2890  001590  50F5               	movf	tablat,w,c
  2891  001592  581D               	subwfb	sprintf@val+1,w,c
  2892  001594  A0D8               	btfss	status,0,c
  2893  001596  D002               	goto	u2090
  2894                           
  2895                           ;doprnt.c: 1307: break;
  2896  001598  2A27               	incf	sprintf@c,f,c
  2897  00159A  D7EA               	goto	l2559
  2898  00159C                     u2090:
  2899                           
  2900                           ;doprnt.c: 1381: if(width > c)
  2901  00159C  0E80               	movlw	128
  2902  00159E  BE27               	btfsc	sprintf@c,7,c
  2903  0015A0  0E7F               	movlw	127
  2904  0015A2  6E17               	movwf	??_sprintf& (0+255),c
  2905  0015A4  5025               	movf	sprintf@width,w,c
  2906  0015A6  5C27               	subwf	sprintf@c,w,c
  2907  0015A8  5026               	movf	sprintf@width+1,w,c
  2908  0015AA  0A80               	xorlw	128
  2909  0015AC  5817               	subwfb	??_sprintf& (0+255),w,c
  2910  0015AE  B0D8               	btfsc	status,0,c
  2911  0015B0  D007               	goto	l382
  2912                           
  2913                           ;doprnt.c: 1382: width -= c;
  2914  0015B2  5027               	movf	sprintf@c,w,c
  2915  0015B4  5E25               	subwf	sprintf@width,f,c
  2916  0015B6  0E00               	movlw	0
  2917  0015B8  BE27               	btfsc	sprintf@c,7,c
  2918  0015BA  0EFF               	movlw	255
  2919  0015BC  5A26               	subwfb	sprintf@width+1,f,c
  2920  0015BE  D004               	goto	l383
  2921  0015C0                     l382:
  2922                           
  2923                           ;doprnt.c: 1383: else
  2924                           ;doprnt.c: 1384: width = 0;
  2925  0015C0  0E00               	movlw	0
  2926  0015C2  6E26               	movwf	sprintf@width+1,c
  2927  0015C4  0E00               	movlw	0
  2928  0015C6  6E25               	movwf	sprintf@width,c
  2929  0015C8                     l383:
  2930                           
  2931                           ;doprnt.c: 1387: if(flag & 0x04) {
  2932  0015C8  A41B               	btfss	sprintf@flag,2,c
  2933  0015CA  D010               	goto	l384
  2934  0015CC                     
  2935                           ;doprnt.c: 1415: if(width)
  2936  0015CC  5025               	movf	sprintf@width,w,c
  2937  0015CE  1026               	iorwf	sprintf@width+1,w,c
  2938  0015D0  B4D8               	btfsc	status,2,c
  2939  0015D2  D01F               	goto	u2150
  2940                           
  2941                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2942                           
  2943                           ;doprnt.c: 1416: do
  2944  0015D4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2945  0015D8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2946  0015DC  0E30               	movlw	48
  2947  0015DE  6EDF               	movwf	indf2,c
  2948  0015E0  4A0D               	infsnz	sprintf@sp,f,c
  2949  0015E2  2A0E               	incf	sprintf@sp+1,f,c
  2950                           
  2951                           ;doprnt.c: 1418: while(--width);
  2952  0015E4  0625               	decf	sprintf@width,f,c
  2953  0015E6  A0D8               	btfss	status,0,c
  2954  0015E8  0626               	decf	sprintf@width+1,f,c
  2955  0015EA  D7F0               	goto	L2
  2956  0015EC                     l384:
  2957                           
  2958                           ;doprnt.c: 1422: {
  2959                           ;doprnt.c: 1424: if(width
  2960                           ;doprnt.c: 1428: )
  2961  0015EC  5025               	movf	sprintf@width,w,c
  2962  0015EE  1026               	iorwf	sprintf@width+1,w,c
  2963  0015F0  B4D8               	btfsc	status,2,c
  2964  0015F2  D00F               	goto	u2150
  2965  0015F4                     u2140:
  2966                           
  2967                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2968                           
  2969                           ;doprnt.c: 1429: do
  2970  0015F4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2971  0015F8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2972  0015FC  0E20               	movlw	32
  2973  0015FE  6EDF               	movwf	indf2,c
  2974  001600  4A0D               	infsnz	sprintf@sp,f,c
  2975  001602  2A0E               	incf	sprintf@sp+1,f,c
  2976                           
  2977                           ;doprnt.c: 1431: while(--width);
  2978  001604  0625               	decf	sprintf@width,f,c
  2979  001606  A0D8               	btfss	status,0,c
  2980  001608  0626               	decf	sprintf@width+1,f,c
  2981  00160A  5025               	movf	sprintf@width,w,c
  2982  00160C  1026               	iorwf	sprintf@width+1,w,c
  2983  00160E  A4D8               	btfss	status,2,c
  2984  001610  D7F1               	goto	u2140
  2985  001612                     u2150:
  2986                           
  2987                           ;doprnt.c: 1469: }
  2988                           ;doprnt.c: 1472: prec = c;
  2989  001612  C027  F01E         	movff	sprintf@c,sprintf@prec
  2990                           
  2991                           ;doprnt.c: 1474: while(prec--) {
  2992  001616  D029               	goto	l392
  2993  001618                     
  2994                           ;doprnt.c: 1478: {
  2995                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2996  001618  501E               	movf	sprintf@prec,w,c
  2997  00161A  0D02               	mullw	2
  2998  00161C  0E01               	movlw	low _dpowers
  2999  00161E  24F3               	addwf	prodl,w,c
  3000  001620  6EF6               	movwf	tblptrl,c
  3001  001622  0E0F               	movlw	high _dpowers
  3002  001624  20F4               	addwfc	prodh,w,c
  3003  001626  6EF7               	movwf	tblptrh,c
  3004  001628                     	if	0	;There are less than 3 active tblptr bytes
  3005  001628                     	endif
  3006  001628  0009               	tblrd		*+
  3007  00162A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3008  00162E  000A               	tblrd		*-
  3009  001630  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3010  001634  C01C  F001         	movff	sprintf@val,___lwdiv@dividend
  3011  001638  C01D  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3012  00163C  ECF9  F00F         	call	___lwdiv	;wreg free
  3013  001640  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3014  001644  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3015  001648  0E00               	movlw	0
  3016  00164A  6E0B               	movwf	___lwmod@divisor+1,c
  3017  00164C  0E0A               	movlw	10
  3018  00164E  6E0A               	movwf	___lwmod@divisor,c
  3019  001650  EC94  F010         	call	___lwmod	;wreg free
  3020  001654  5008               	movf	?___lwmod,w,c
  3021  001656  0F30               	addlw	48
  3022  001658  6E27               	movwf	sprintf@c,c
  3023                           
  3024                           ;doprnt.c: 1523: }
  3025                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3026  00165A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3027  00165E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3028  001662  C027  FFDF         	movff	sprintf@c,indf2
  3029  001666  4A0D               	infsnz	sprintf@sp,f,c
  3030  001668  2A0E               	incf	sprintf@sp+1,f,c
  3031  00166A                     l392:
  3032  00166A  061E               	decf	sprintf@prec,f,c
  3033  00166C  281E               	incf	sprintf@prec,w,c
  3034  00166E  A4D8               	btfss	status,2,c
  3035  001670  D7D3               	goto	l393
  3036  001672                     u2160:
  3037  001672  C00F  FFF6         	movff	sprintf@f,tblptrl
  3038  001676  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3039  00167A  4A0F               	infsnz	sprintf@f,f,c
  3040  00167C  2A10               	incf	sprintf@f+1,f,c
  3041  00167E                     	if	0	;tblptru may be non-zero
  3042  00167E                     	endif
  3043  00167E                     	if	0	;tblptru may be non-zero
  3044  00167E                     	endif
  3045  00167E  0008               	tblrd		*
  3046  001680  CFF5 F027          	movff	tablat,sprintf@c
  3047  001684  5027               	movf	sprintf@c,w,c
  3048  001686  A4D8               	btfss	status,2,c
  3049  001688  D68E               	goto	l349
  3050  00168A                     u2170:
  3051                           
  3052                           ;doprnt.c: 1538: *sp = 0;
  3053                           
  3054                           ;doprnt.c: 1525: }
  3055                           ;doprnt.c: 1533: }
  3056                           ;doprnt.c: 1535: alldone:
  3057  00168A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3058  00168E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3059  001692  0E00               	movlw	0
  3060  001694  6EDF               	movwf	indf2,c
  3061  001696  0012               	return	
  3062  001698                     __end_of_sprintf:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           intcon2	equ	0xFF1
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           postdec1	equ	0xFE5
  3074                           fsr1l	equ	0xFE1
  3075                           indf2	equ	0xFDF
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           fsr2h	equ	0xFDA
  3079                           fsr2l	equ	0xFD9
  3080                           status	equ	0xFD8
  3081                           
  3082 ;; *************** function _isdigit *****************
  3083 ;; Defined at:
  3084 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  c               1    wreg     unsigned char 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  c               1    2[COMRAM] unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;		None               void
  3091 ;; Registers used:
  3092 ;;		wreg, status,2, status,0
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3099 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3101 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3102 ;;Total ram usage:        3 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_sprintf
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text6
  3112  0021E4                     __ptext6:
  3113                           	opt stack 0
  3114  0021E4                     _isdigit:
  3115                           	opt stack 29
  3116                           
  3117                           ;incstack = 0
  3118                           ;isdigit@c stored from wreg
  3119  0021E4  6E03               	movwf	isdigit@c,c
  3120  0021E6  0E00               	movlw	0
  3121  0021E8  6E02               	movwf	_isdigit$1752,c
  3122  0021EA  0E3A               	movlw	58
  3123  0021EC  6003               	cpfslt	isdigit@c,c
  3124  0021EE  D005               	goto	l836
  3125  0021F0  0E2F               	movlw	47
  3126  0021F2  6403               	cpfsgt	isdigit@c,c
  3127  0021F4  D002               	goto	l836
  3128  0021F6  0E01               	movlw	1
  3129  0021F8  6E02               	movwf	_isdigit$1752,c
  3130  0021FA                     l836:
  3131  0021FA  C002  F001         	movff	_isdigit$1752,??_isdigit
  3132  0021FE  3001               	rrcf	??_isdigit,w,c
  3133  002200  0012               	return	
  3134  002202                     __end_of_isdigit:
  3135                           	opt stack 0
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           prodh	equ	0xFF4
  3141                           prodl	equ	0xFF3
  3142                           intcon2	equ	0xFF1
  3143                           postinc0	equ	0xFEE
  3144                           wreg	equ	0xFE8
  3145                           postdec1	equ	0xFE5
  3146                           fsr1l	equ	0xFE1
  3147                           indf2	equ	0xFDF
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function ___wmul *****************
  3155 ;; Defined at:
  3156 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  multiplier      2    0[COMRAM] unsigned int 
  3159 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  product         2    4[COMRAM] unsigned int 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  2    0[COMRAM] unsigned int 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0, prodl, prodh
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3174 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3175 ;;Total ram usage:        6 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_sprintf
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text7
  3185  00219C                     __ptext7:
  3186                           	opt stack 0
  3187  00219C                     ___wmul:
  3188                           	opt stack 29
  3189                           
  3190                           ;incstack = 0
  3191  00219C  5001               	movf	___wmul@multiplier,w,c
  3192  00219E  0203               	mulwf	___wmul@multiplicand,c
  3193  0021A0  CFF3 F005          	movff	prodl,___wmul@product
  3194  0021A4  CFF4 F006          	movff	prodh,___wmul@product+1
  3195  0021A8  5001               	movf	___wmul@multiplier,w,c
  3196  0021AA  0204               	mulwf	___wmul@multiplicand+1,c
  3197  0021AC  50F3               	movf	prodl,w,c
  3198  0021AE  2606               	addwf	___wmul@product+1,f,c
  3199  0021B0  5002               	movf	___wmul@multiplier+1,w,c
  3200  0021B2  0203               	mulwf	___wmul@multiplicand,c
  3201  0021B4  50F3               	movf	prodl,w,c
  3202  0021B6  2606               	addwf	___wmul@product+1,f,c
  3203  0021B8  C005  F001         	movff	___wmul@product,?___wmul
  3204  0021BC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3205  0021C0  0012               	return	
  3206  0021C2                     __end_of___wmul:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           intcon2	equ	0xFF1
  3215                           postinc0	equ	0xFEE
  3216                           wreg	equ	0xFE8
  3217                           postdec1	equ	0xFE5
  3218                           fsr1l	equ	0xFE1
  3219                           indf2	equ	0xFDF
  3220                           postinc2	equ	0xFDE
  3221                           postdec2	equ	0xFDD
  3222                           fsr2h	equ	0xFDA
  3223                           fsr2l	equ	0xFD9
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function ___lwmod *****************
  3227 ;; Defined at:
  3228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  dividend        2    7[COMRAM] unsigned int 
  3231 ;;  divisor         2    9[COMRAM] unsigned int 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  counter         1   11[COMRAM] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  2    7[COMRAM] unsigned int 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3243 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3246 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3247 ;;Total ram usage:        5 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		_sprintf
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text8
  3257  002128                     __ptext8:
  3258                           	opt stack 0
  3259  002128                     ___lwmod:
  3260                           	opt stack 29
  3261                           
  3262                           ;incstack = 0
  3263  002128  500A               	movf	___lwmod@divisor,w,c
  3264  00212A  100B               	iorwf	___lwmod@divisor+1,w,c
  3265  00212C  B4D8               	btfsc	status,2,c
  3266  00212E  D018               	goto	l930
  3267  002130  0E01               	movlw	1
  3268  002132  6E0C               	movwf	___lwmod@counter,c
  3269  002134  D004               	goto	l925
  3270  002136  90D8               	bcf	status,0,c
  3271  002138  360A               	rlcf	___lwmod@divisor,f,c
  3272  00213A  360B               	rlcf	___lwmod@divisor+1,f,c
  3273  00213C  2A0C               	incf	___lwmod@counter,f,c
  3274  00213E                     l925:
  3275  00213E  AE0B               	btfss	___lwmod@divisor+1,7,c
  3276  002140  D7FA               	goto	l926
  3277  002142                     u1940:
  3278  002142  500A               	movf	___lwmod@divisor,w,c
  3279  002144  5C08               	subwf	___lwmod@dividend,w,c
  3280  002146  500B               	movf	___lwmod@divisor+1,w,c
  3281  002148  5809               	subwfb	___lwmod@dividend+1,w,c
  3282  00214A  A0D8               	btfss	status,0,c
  3283  00214C  D004               	goto	l929
  3284  00214E  500A               	movf	___lwmod@divisor,w,c
  3285  002150  5E08               	subwf	___lwmod@dividend,f,c
  3286  002152  500B               	movf	___lwmod@divisor+1,w,c
  3287  002154  5A09               	subwfb	___lwmod@dividend+1,f,c
  3288  002156                     l929:
  3289  002156  90D8               	bcf	status,0,c
  3290  002158  320B               	rrcf	___lwmod@divisor+1,f,c
  3291  00215A  320A               	rrcf	___lwmod@divisor,f,c
  3292  00215C  2E0C               	decfsz	___lwmod@counter,f,c
  3293  00215E  D7F1               	goto	u1940
  3294  002160                     l930:
  3295  002160  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3296  002164  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3297  002168  0012               	return		;funcret
  3298  00216A                     __end_of___lwmod:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon2	equ	0xFF1
  3307                           postinc0	equ	0xFEE
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           fsr1l	equ	0xFE1
  3311                           indf2	equ	0xFDF
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function ___lwdiv *****************
  3319 ;; Defined at:
  3320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  dividend        2    0[COMRAM] unsigned int 
  3323 ;;  divisor         2    2[COMRAM] unsigned int 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  quotient        2    4[COMRAM] unsigned int 
  3326 ;;  counter         1    6[COMRAM] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  2    0[COMRAM] unsigned int 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3336 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3337 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3339 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3340 ;;Total ram usage:        7 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_sprintf
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text9
  3350  001FF2                     __ptext9:
  3351                           	opt stack 0
  3352  001FF2                     ___lwdiv:
  3353                           	opt stack 29
  3354                           
  3355                           ;incstack = 0
  3356  001FF2  0E00               	movlw	0
  3357  001FF4  6E06               	movwf	___lwdiv@quotient+1,c
  3358  001FF6  0E00               	movlw	0
  3359  001FF8  6E05               	movwf	___lwdiv@quotient,c
  3360  001FFA  5003               	movf	___lwdiv@divisor,w,c
  3361  001FFC  1004               	iorwf	___lwdiv@divisor+1,w,c
  3362  001FFE  B4D8               	btfsc	status,2,c
  3363  002000  D01C               	goto	l920
  3364  002002  0E01               	movlw	1
  3365  002004  6E07               	movwf	___lwdiv@counter,c
  3366  002006  D004               	goto	l915
  3367  002008  90D8               	bcf	status,0,c
  3368  00200A  3603               	rlcf	___lwdiv@divisor,f,c
  3369  00200C  3604               	rlcf	___lwdiv@divisor+1,f,c
  3370  00200E  2A07               	incf	___lwdiv@counter,f,c
  3371  002010                     l915:
  3372  002010  AE04               	btfss	___lwdiv@divisor+1,7,c
  3373  002012  D7FA               	goto	l916
  3374  002014                     u1910:
  3375  002014  90D8               	bcf	status,0,c
  3376  002016  3605               	rlcf	___lwdiv@quotient,f,c
  3377  002018  3606               	rlcf	___lwdiv@quotient+1,f,c
  3378  00201A  5003               	movf	___lwdiv@divisor,w,c
  3379  00201C  5C01               	subwf	___lwdiv@dividend,w,c
  3380  00201E  5004               	movf	___lwdiv@divisor+1,w,c
  3381  002020  5802               	subwfb	___lwdiv@dividend+1,w,c
  3382  002022  A0D8               	btfss	status,0,c
  3383  002024  D005               	goto	l919
  3384  002026  5003               	movf	___lwdiv@divisor,w,c
  3385  002028  5E01               	subwf	___lwdiv@dividend,f,c
  3386  00202A  5004               	movf	___lwdiv@divisor+1,w,c
  3387  00202C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3388  00202E  8005               	bsf	___lwdiv@quotient,0,c
  3389  002030                     l919:
  3390  002030  90D8               	bcf	status,0,c
  3391  002032  3204               	rrcf	___lwdiv@divisor+1,f,c
  3392  002034  3203               	rrcf	___lwdiv@divisor,f,c
  3393  002036  2E07               	decfsz	___lwdiv@counter,f,c
  3394  002038  D7ED               	goto	u1910
  3395  00203A                     l920:
  3396  00203A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3397  00203E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3398  002042  0012               	return		;funcret
  3399  002044                     __end_of___lwdiv:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           intcon2	equ	0xFF1
  3408                           postinc0	equ	0xFEE
  3409                           wreg	equ	0xFE8
  3410                           postdec1	equ	0xFE5
  3411                           fsr1l	equ	0xFE1
  3412                           indf2	equ	0xFDF
  3413                           postinc2	equ	0xFDE
  3414                           postdec2	equ	0xFDD
  3415                           fsr2h	equ	0xFDA
  3416                           fsr2l	equ	0xFD9
  3417                           status	equ	0xFD8
  3418                           
  3419 ;; *************** function _lcd_putrs *****************
  3420 ;; Defined at:
  3421 ;;		line 221 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  3424 ;;		 -> STR_18(9), STR_17(4), buffer2(20), STR_14(8), 
  3425 ;;		 -> STR_13(8), STR_12(8), STR_11(8), STR_10(8), 
  3426 ;;		 -> STR_9(8), STR_8(8), 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;		None
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3442 ;;Total ram usage:        2 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    4
  3445 ;; This function calls:
  3446 ;;		_lcd_putc
  3447 ;; This function is called by:
  3448 ;;		_setDiaSemana
  3449 ;;		_setDiaMesAnio
  3450 ;;		_setHoraMinutoSegundo
  3451 ;;		_main
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text10
  3456  002044                     __ptext10:
  3457                           	opt stack 0
  3458  002044                     _lcd_putrs:
  3459                           	opt stack 24
  3460                           
  3461                           ;unmc_lcd_216.c: 223: while(*ptr){
  3462                           
  3463                           ;incstack = 0
  3464  002044  D014               	goto	l334
  3465  002046                     
  3466                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  3467  002046  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3468  00204A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3469  00204E  6AF8               	clrf	tblptru,c
  3470  002050  0E0E               	movlw	(high __ramtop+-1)
  3471  002052  64F7               	cpfsgt	tblptrh,c
  3472  002054  D003               	bra	u1967
  3473  002056  0008               	tblrd		*
  3474  002058  50F5               	movf	tablat,w,c
  3475  00205A  D005               	bra	u1960
  3476  00205C                     u1967:
  3477  00205C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3478  002060  CFF7 FFEA          	movff	tblptrh,fsr0h
  3479  002064  50EF               	movf	indf0,w,c
  3480  002066                     u1960:
  3481  002066  EC4B  F010         	call	_lcd_putc
  3482  00206A  4A09               	infsnz	lcd_putrs@ptr,f,c
  3483  00206C  2A0A               	incf	lcd_putrs@ptr+1,f,c
  3484  00206E                     l334:
  3485  00206E  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3486  002072  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3487  002076  6AF8               	clrf	tblptru,c
  3488  002078  0E0E               	movlw	(high __ramtop+-1)
  3489  00207A  64F7               	cpfsgt	tblptrh,c
  3490  00207C  D003               	bra	u1977
  3491  00207E  0008               	tblrd		*
  3492  002080  50F5               	movf	tablat,w,c
  3493  002082  D005               	bra	u1970
  3494  002084                     u1977:
  3495  002084  CFF6 FFE9          	movff	tblptrl,fsr0l
  3496  002088  CFF7 FFEA          	movff	tblptrh,fsr0h
  3497  00208C  50EF               	movf	indf0,w,c
  3498  00208E                     u1970:
  3499  00208E  0900               	iorlw	0
  3500  002090  B4D8               	btfsc	status,2,c
  3501  002092  0012               	return	
  3502  002094  D7D8               	goto	l335
  3503  002096                     __end_of_lcd_putrs:
  3504                           	opt stack 0
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           intcon2	equ	0xFF1
  3512                           indf0	equ	0xFEF
  3513                           postinc0	equ	0xFEE
  3514                           fsr0h	equ	0xFEA
  3515                           fsr0l	equ	0xFE9
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _lcd_putc *****************
  3527 ;; Defined at:
  3528 ;;		line 172 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  c               1    wreg     unsigned char 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;  c               1    7[COMRAM] unsigned char 
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, status,0, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3546 ;;Total ram usage:        1 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    3
  3549 ;; This function calls:
  3550 ;;		_lcd_gotoxy
  3551 ;;		_lcd_send_byte
  3552 ;; This function is called by:
  3553 ;;		_lcd_putrs
  3554 ;;		_lcd_puts
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text11
  3559  002096                     __ptext11:
  3560                           	opt stack 0
  3561  002096                     _lcd_putc:
  3562                           	opt stack 24
  3563                           
  3564                           ;incstack = 0
  3565                           ;lcd_putc@c stored from wreg
  3566  002096  6E08               	movwf	lcd_putc@c,c
  3567                           
  3568                           ;unmc_lcd_216.c: 173: switch(c){
  3569  002098  D018               	goto	l313
  3570  00209A                     
  3571                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  3572  00209A  0E01               	movlw	1
  3573  00209C  6E03               	movwf	lcd_send_byte@n,c
  3574  00209E  0E00               	movlw	0
  3575  0020A0  ECB5  F010         	call	_lcd_send_byte
  3576                           
  3577                           ;unmc_lcd_216.c: 176: break;
  3578  0020A4  0012               	return	
  3579  0020A6                     
  3580                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  3581  0020A6  0E02               	movlw	2
  3582  0020A8  6E05               	movwf	lcd_gotoxy@y,c
  3583  0020AA  0E01               	movlw	1
  3584  0020AC  ECE1  F010         	call	_lcd_gotoxy
  3585                           
  3586                           ;unmc_lcd_216.c: 179: break;
  3587  0020B0  0012               	return	
  3588  0020B2                     
  3589                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  3590  0020B2  0E10               	movlw	16
  3591  0020B4  6E03               	movwf	lcd_send_byte@n,c
  3592  0020B6  0E00               	movlw	0
  3593  0020B8  ECB5  F010         	call	_lcd_send_byte
  3594                           
  3595                           ;unmc_lcd_216.c: 182: break;
  3596  0020BC  0012               	return	
  3597  0020BE                     
  3598                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  3599  0020BE  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  3600  0020C2  0E01               	movlw	1
  3601  0020C4  ECB5  F010         	call	_lcd_send_byte
  3602                           
  3603                           ;unmc_lcd_216.c: 186: }
  3604                           
  3605                           ;unmc_lcd_216.c: 185: break;
  3606  0020C8  0012               	return	
  3607  0020CA                     l313:
  3608  0020CA  5008               	movf	lcd_putc@c,w,c
  3609                           
  3610                           ; Switch size 1, requested type "space"
  3611                           ; Number of cases is 3, Range of values is 8 to 12
  3612                           ; switch strategies available:
  3613                           ; Name         Instructions Cycles
  3614                           ; simple_byte           10     6 (average)
  3615                           ;	Chosen strategy is simple_byte
  3616  0020CC  0A08               	xorlw	8	; case 8
  3617  0020CE  B4D8               	btfsc	status,2,c
  3618  0020D0  D7F0               	goto	l317
  3619  0020D2  0A02               	xorlw	2	; case 10
  3620  0020D4  B4D8               	btfsc	status,2,c
  3621  0020D6  D7E7               	goto	l316
  3622  0020D8  0A06               	xorlw	6	; case 12
  3623  0020DA  B4D8               	btfsc	status,2,c
  3624  0020DC  D7DE               	goto	l314
  3625  0020DE  D7EF               	goto	l318
  3626  0020E0                     __end_of_lcd_putc:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           prodh	equ	0xFF4
  3633                           prodl	equ	0xFF3
  3634                           intcon2	equ	0xFF1
  3635                           indf0	equ	0xFEF
  3636                           postinc0	equ	0xFEE
  3637                           fsr0h	equ	0xFEA
  3638                           fsr0l	equ	0xFE9
  3639                           wreg	equ	0xFE8
  3640                           postdec1	equ	0xFE5
  3641                           fsr1l	equ	0xFE1
  3642                           indf2	equ	0xFDF
  3643                           postinc2	equ	0xFDE
  3644                           postdec2	equ	0xFDD
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _lcd_gotoxy *****************
  3650 ;; Defined at:
  3651 ;;		line 158 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  x               1    wreg     unsigned char 
  3654 ;;  y               1    4[COMRAM] unsigned char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  x               1    5[COMRAM] unsigned char 
  3657 ;;  address         1    6[COMRAM] unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3667 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3668 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3670 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3671 ;;Total ram usage:        3 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    2
  3674 ;; This function calls:
  3675 ;;		_lcd_send_byte
  3676 ;; This function is called by:
  3677 ;;		_setDiaSemana
  3678 ;;		_setDiaMesAnio
  3679 ;;		_setHoraMinutoSegundo
  3680 ;;		_main
  3681 ;;		_lcd_putc
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text12
  3686  0021C2                     __ptext12:
  3687                           	opt stack 0
  3688  0021C2                     _lcd_gotoxy:
  3689                           	opt stack 24
  3690                           
  3691                           ;incstack = 0
  3692                           ;lcd_gotoxy@x stored from wreg
  3693  0021C2  6E06               	movwf	lcd_gotoxy@x,c
  3694                           
  3695                           ;unmc_lcd_216.c: 159: int8 address;
  3696                           ;unmc_lcd_216.c: 161: if(y != 1)
  3697  0021C4  0405               	decf	lcd_gotoxy@y,w,c
  3698  0021C6  B4D8               	btfsc	status,2,c
  3699  0021C8  D002               	goto	l308
  3700                           
  3701                           ;unmc_lcd_216.c: 162: address = 0x40;
  3702  0021CA  0E40               	movlw	64
  3703  0021CC  D001               	goto	L1
  3704  0021CE                     l308:
  3705                           
  3706                           ;unmc_lcd_216.c: 163: else
  3707                           ;unmc_lcd_216.c: 164: address=0;
  3708  0021CE  0E00               	movlw	0
  3709  0021D0                     L1:
  3710  0021D0  6E07               	movwf	lcd_gotoxy@address,c
  3711                           
  3712                           ;unmc_lcd_216.c: 166: address += x-1;
  3713  0021D2  0406               	decf	lcd_gotoxy@x,w,c
  3714  0021D4  2607               	addwf	lcd_gotoxy@address,f,c
  3715                           
  3716                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  3717  0021D6  5007               	movf	lcd_gotoxy@address,w,c
  3718  0021D8  0980               	iorlw	128
  3719  0021DA  6E03               	movwf	lcd_send_byte@n,c
  3720  0021DC  0E00               	movlw	0
  3721  0021DE  ECB5  F010         	call	_lcd_send_byte
  3722  0021E2  0012               	return		;funcret
  3723  0021E4                     __end_of_lcd_gotoxy:
  3724                           	opt stack 0
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           intcon2	equ	0xFF1
  3732                           indf0	equ	0xFEF
  3733                           postinc0	equ	0xFEE
  3734                           fsr0h	equ	0xFEA
  3735                           fsr0l	equ	0xFE9
  3736                           wreg	equ	0xFE8
  3737                           postdec1	equ	0xFE5
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           postdec2	equ	0xFDD
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _Write_RTC *****************
  3747 ;; Defined at:
  3748 ;;		line 72 in file "../../headers\unmc_rtcc_01.h"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    2
  3769 ;; This function calls:
  3770 ;;		_RtccWrOn
  3771 ;;		_RtccWriteDate
  3772 ;;		_RtccWriteTime
  3773 ;;		___awdiv
  3774 ;; This function is called by:
  3775 ;;		_setDiaMesAnio
  3776 ;;		_setHoraMinutoSegundo
  3777 ;;		_setup
  3778 ;;		_main
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           	psect	text13
  3783  0017E4                     __ptext13:
  3784                           	opt stack 0
  3785  0017E4                     _Write_RTC:
  3786                           	opt stack 26
  3787                           
  3788                           ;headers\unmc_rtcc_01.h: 73: RtccWrOn();
  3789                           
  3790                           ;incstack = 0
  3791  0017E4  EC01  F011         	call	_RtccWrOn	;wreg free
  3792                           
  3793                           ;headers\unmc_rtcc_01.h: 75: PIE3bits.RTCCIE = 1;
  3794  0017E8  80A3               	bsf	4003,0,c	;volatile
  3795                           
  3796                           ;headers\unmc_rtcc_01.h: 76: segundo_d = segundo / 10;
  3797  0017EA  C02D  F001         	movff	_segundo,___awdiv@dividend
  3798  0017EE  C02E  F002         	movff	_segundo+1,___awdiv@dividend+1
  3799  0017F2  0E00               	movlw	0
  3800  0017F4  6E04               	movwf	___awdiv@divisor+1,c
  3801  0017F6  0E0A               	movlw	10
  3802  0017F8  6E03               	movwf	___awdiv@divisor,c
  3803  0017FA  EC62  F00E         	call	___awdiv	;wreg free
  3804  0017FE  5001               	movf	?___awdiv,w,c
  3805  001800  6E46               	movwf	_segundo_d,c
  3806                           
  3807                           ;headers\unmc_rtcc_01.h: 77: segundo_u = segundo - segundo_d * 10;
  3808  001802  5046               	movf	_segundo_d,w,c
  3809  001804  0D0A               	mullw	10
  3810  001806  50F3               	movf	prodl,w,c
  3811  001808  0800               	sublw	0
  3812  00180A  242D               	addwf	_segundo,w,c
  3813  00180C  6E47               	movwf	_segundo_u,c
  3814                           
  3815                           ;headers\unmc_rtcc_01.h: 78: RtccTime.f.sec = segundo_d * 16 + segundo_u;
  3816  00180E  5046               	movf	_segundo_d,w,c
  3817  001810  0D10               	mullw	16
  3818  001812  50F3               	movf	prodl,w,c
  3819  001814  2447               	addwf	_segundo_u,w,c
  3820  001816  6E4D               	movwf	_RtccTime+1,c
  3821                           
  3822                           ;headers\unmc_rtcc_01.h: 79: minuto_d = minuto / 10;
  3823  001818  C050  F001         	movff	_minuto,___awdiv@dividend
  3824  00181C  C051  F002         	movff	_minuto+1,___awdiv@dividend+1
  3825  001820  0E00               	movlw	0
  3826  001822  6E04               	movwf	___awdiv@divisor+1,c
  3827  001824  0E0A               	movlw	10
  3828  001826  6E03               	movwf	___awdiv@divisor,c
  3829  001828  EC62  F00E         	call	___awdiv	;wreg free
  3830  00182C  5001               	movf	?___awdiv,w,c
  3831  00182E  6E44               	movwf	_minuto_d,c
  3832                           
  3833                           ;headers\unmc_rtcc_01.h: 80: minuto_u = minuto - minuto_d * 10;
  3834  001830  5044               	movf	_minuto_d,w,c
  3835  001832  0D0A               	mullw	10
  3836  001834  50F3               	movf	prodl,w,c
  3837  001836  0800               	sublw	0
  3838  001838  2450               	addwf	_minuto,w,c
  3839  00183A  6E45               	movwf	_minuto_u,c
  3840                           
  3841                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.min = minuto_d * 16 + minuto_u;
  3842  00183C  5044               	movf	_minuto_d,w,c
  3843  00183E  0D10               	mullw	16
  3844  001840  50F3               	movf	prodl,w,c
  3845  001842  2445               	addwf	_minuto_u,w,c
  3846  001844  6E4E               	movwf	_RtccTime+2,c
  3847                           
  3848                           ;headers\unmc_rtcc_01.h: 82: hora_d = hora / 10;
  3849  001846  C052  F001         	movff	_hora,___awdiv@dividend
  3850  00184A  C053  F002         	movff	_hora+1,___awdiv@dividend+1
  3851  00184E  0E00               	movlw	0
  3852  001850  6E04               	movwf	___awdiv@divisor+1,c
  3853  001852  0E0A               	movlw	10
  3854  001854  6E03               	movwf	___awdiv@divisor,c
  3855  001856  EC62  F00E         	call	___awdiv	;wreg free
  3856  00185A  5001               	movf	?___awdiv,w,c
  3857  00185C  6E42               	movwf	_hora_d,c
  3858                           
  3859                           ;headers\unmc_rtcc_01.h: 83: hora_u = hora - hora_d * 10;
  3860  00185E  5042               	movf	_hora_d,w,c
  3861  001860  0D0A               	mullw	10
  3862  001862  50F3               	movf	prodl,w,c
  3863  001864  0800               	sublw	0
  3864  001866  2452               	addwf	_hora,w,c
  3865  001868  6E43               	movwf	_hora_u,c
  3866                           
  3867                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.hour = hora_d * 16 + hora_u;
  3868  00186A  5042               	movf	_hora_d,w,c
  3869  00186C  0D10               	mullw	16
  3870  00186E  50F3               	movf	prodl,w,c
  3871  001870  2443               	addwf	_hora_u,w,c
  3872  001872  6E4F               	movwf	_RtccTime+3,c
  3873                           
  3874                           ;headers\unmc_rtcc_01.h: 85: anio_d = anio / 10;
  3875  001874  C05A  F001         	movff	_anio,___awdiv@dividend
  3876  001878  C05B  F002         	movff	_anio+1,___awdiv@dividend+1
  3877  00187C  0E00               	movlw	0
  3878  00187E  6E04               	movwf	___awdiv@divisor+1,c
  3879  001880  0E0A               	movlw	10
  3880  001882  6E03               	movwf	___awdiv@divisor,c
  3881  001884  EC62  F00E         	call	___awdiv	;wreg free
  3882  001888  5001               	movf	?___awdiv,w,c
  3883  00188A  6E3B               	movwf	_anio_d,c
  3884                           
  3885                           ;headers\unmc_rtcc_01.h: 86: anio_u = anio - anio_d * 10;
  3886  00188C  503B               	movf	_anio_d,w,c
  3887  00188E  0D0A               	mullw	10
  3888  001890  50F3               	movf	prodl,w,c
  3889  001892  0800               	sublw	0
  3890  001894  245A               	addwf	_anio,w,c
  3891  001896  6E3C               	movwf	_anio_u,c
  3892                           
  3893                           ;headers\unmc_rtcc_01.h: 87: RtccDate.f.year = anio_d * 16 + anio_u;
  3894  001898  503B               	movf	_anio_d,w,c
  3895  00189A  0D10               	mullw	16
  3896  00189C  50F3               	movf	prodl,w,c
  3897  00189E  243C               	addwf	_anio_u,w,c
  3898  0018A0  6E4B               	movwf	_RtccDate+3,c
  3899                           
  3900                           ;headers\unmc_rtcc_01.h: 88: mes_d = mes / 10;
  3901  0018A2  C058  F001         	movff	_mes,___awdiv@dividend
  3902  0018A6  C059  F002         	movff	_mes+1,___awdiv@dividend+1
  3903  0018AA  0E00               	movlw	0
  3904  0018AC  6E04               	movwf	___awdiv@divisor+1,c
  3905  0018AE  0E0A               	movlw	10
  3906  0018B0  6E03               	movwf	___awdiv@divisor,c
  3907  0018B2  EC62  F00E         	call	___awdiv	;wreg free
  3908  0018B6  5001               	movf	?___awdiv,w,c
  3909  0018B8  6E3E               	movwf	_mes_d,c
  3910                           
  3911                           ;headers\unmc_rtcc_01.h: 89: mes_u = mes - mes_d * 10;
  3912  0018BA  503E               	movf	_mes_d,w,c
  3913  0018BC  0D0A               	mullw	10
  3914  0018BE  50F3               	movf	prodl,w,c
  3915  0018C0  0800               	sublw	0
  3916  0018C2  2458               	addwf	_mes,w,c
  3917  0018C4  6E3F               	movwf	_mes_u,c
  3918                           
  3919                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.mon = mes_d * 16 + mes_u;
  3920  0018C6  503E               	movf	_mes_d,w,c
  3921  0018C8  0D10               	mullw	16
  3922  0018CA  50F3               	movf	prodl,w,c
  3923  0018CC  243F               	addwf	_mes_u,w,c
  3924  0018CE  6E4A               	movwf	_RtccDate+2,c
  3925                           
  3926                           ;headers\unmc_rtcc_01.h: 91: fecha_d = dia / 10;
  3927  0018D0  C054  F001         	movff	_dia,___awdiv@dividend
  3928  0018D4  C055  F002         	movff	_dia+1,___awdiv@dividend+1
  3929  0018D8  0E00               	movlw	0
  3930  0018DA  6E04               	movwf	___awdiv@divisor+1,c
  3931  0018DC  0E0A               	movlw	10
  3932  0018DE  6E03               	movwf	___awdiv@divisor,c
  3933  0018E0  EC62  F00E         	call	___awdiv	;wreg free
  3934  0018E4  5001               	movf	?___awdiv,w,c
  3935  0018E6  6E40               	movwf	_fecha_d,c
  3936                           
  3937                           ;headers\unmc_rtcc_01.h: 92: fecha_u = dia - fecha_d * 10;
  3938  0018E8  5040               	movf	_fecha_d,w,c
  3939  0018EA  0D0A               	mullw	10
  3940  0018EC  50F3               	movf	prodl,w,c
  3941  0018EE  0800               	sublw	0
  3942  0018F0  2454               	addwf	_dia,w,c
  3943  0018F2  6E41               	movwf	_fecha_u,c
  3944                           
  3945                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mday = fecha_d * 16 + fecha_u;
  3946  0018F4  5040               	movf	_fecha_d,w,c
  3947  0018F6  0D10               	mullw	16
  3948  0018F8  50F3               	movf	prodl,w,c
  3949  0018FA  2441               	addwf	_fecha_u,w,c
  3950  0018FC  6E49               	movwf	_RtccDate+1,c
  3951                           
  3952                           ;headers\unmc_rtcc_01.h: 94: dia_semana = diasem;
  3953  0018FE  C056  F03D         	movff	_diasem,_dia_semana
  3954                           
  3955                           ;headers\unmc_rtcc_01.h: 95: RtccDate.f.wday = diasem;
  3956  001902  C056  F048         	movff	_diasem,_RtccDate
  3957                           
  3958                           ;headers\unmc_rtcc_01.h: 96: RtccWriteTime(&RtccTime, 1);
  3959  001906  0E4C               	movlw	low _RtccTime
  3960  001908  6E01               	movwf	RtccWriteTime@pTm,c
  3961  00190A  0E00               	movlw	high _RtccTime
  3962  00190C  6E02               	movwf	RtccWriteTime@pTm+1,c
  3963  00190E  0E01               	movlw	1
  3964  001910  6E03               	movwf	RtccWriteTime@di,c
  3965  001912  EC31  F00D         	call	_RtccWriteTime	;wreg free
  3966                           
  3967                           ;headers\unmc_rtcc_01.h: 97: RtccWriteDate(&RtccDate, 1);
  3968  001916  0E48               	movlw	low _RtccDate
  3969  001918  6E01               	movwf	RtccWriteDate@pDt,c
  3970  00191A  0E00               	movlw	high _RtccDate
  3971  00191C  6E02               	movwf	RtccWriteDate@pDt+1,c
  3972  00191E  0E01               	movlw	1
  3973  001920  6E03               	movwf	RtccWriteDate@di,c
  3974  001922  EC96  F00C         	call	_RtccWriteDate	;wreg free
  3975                           
  3976                           ;headers\unmc_rtcc_01.h: 98: (RTCCFGbits.RTCEN=1);
  3977  001926  010F               	movlb	15	; () banked
  3978  001928  8F3F               	bsf	63,7,b	;volatile
  3979                           
  3980                           ; BSR set to: 15
  3981  00192A  0012               	return		;funcret
  3982  00192C                     __end_of_Write_RTC:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           intcon2	equ	0xFF1
  3991                           indf0	equ	0xFEF
  3992                           postinc0	equ	0xFEE
  3993                           fsr0h	equ	0xFEA
  3994                           fsr0l	equ	0xFE9
  3995                           wreg	equ	0xFE8
  3996                           postdec1	equ	0xFE5
  3997                           fsr1l	equ	0xFE1
  3998                           indf2	equ	0xFDF
  3999                           postinc2	equ	0xFDE
  4000                           postdec2	equ	0xFDD
  4001                           fsr2h	equ	0xFDA
  4002                           fsr2l	equ	0xFD9
  4003                           status	equ	0xFD8
  4004                           
  4005 ;; *************** function ___awdiv *****************
  4006 ;; Defined at:
  4007 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  dividend        2    0[COMRAM] int 
  4010 ;;  divisor         2    2[COMRAM] int 
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;  quotient        2    6[COMRAM] int 
  4013 ;;  sign            1    5[COMRAM] unsigned char 
  4014 ;;  counter         1    4[COMRAM] unsigned char 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  2    0[COMRAM] int 
  4017 ;; Registers used:
  4018 ;;		wreg, status,2, status,0
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4025 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4027 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4028 ;;Total ram usage:        8 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; This function calls:
  4031 ;;		Nothing
  4032 ;; This function is called by:
  4033 ;;		_Write_RTC
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text14
  4038  001CC4                     __ptext14:
  4039                           	opt stack 0
  4040  001CC4                     ___awdiv:
  4041                           	opt stack 27
  4042                           
  4043                           ; BSR set to: 15
  4044                           ;incstack = 0
  4045  001CC4  0E00               	movlw	0
  4046  001CC6  6E06               	movwf	___awdiv@sign,c
  4047  001CC8  AE04               	btfss	___awdiv@divisor+1,7,c
  4048  001CCA  D006               	goto	l653
  4049  001CCC  6C03               	negf	___awdiv@divisor,c
  4050  001CCE  1E04               	comf	___awdiv@divisor+1,f,c
  4051  001CD0  B0D8               	btfsc	status,0,c
  4052  001CD2  2A04               	incf	___awdiv@divisor+1,f,c
  4053  001CD4  0E01               	movlw	1
  4054  001CD6  6E06               	movwf	___awdiv@sign,c
  4055  001CD8                     l653:
  4056  001CD8  AE02               	btfss	___awdiv@dividend+1,7,c
  4057  001CDA  D006               	goto	l654
  4058  001CDC  6C01               	negf	___awdiv@dividend,c
  4059  001CDE  1E02               	comf	___awdiv@dividend+1,f,c
  4060  001CE0  B0D8               	btfsc	status,0,c
  4061  001CE2  2A02               	incf	___awdiv@dividend+1,f,c
  4062  001CE4  0E01               	movlw	1
  4063  001CE6  1A06               	xorwf	___awdiv@sign,f,c
  4064  001CE8                     l654:
  4065  001CE8  0E00               	movlw	0
  4066  001CEA  6E08               	movwf	___awdiv@quotient+1,c
  4067  001CEC  0E00               	movlw	0
  4068  001CEE  6E07               	movwf	___awdiv@quotient,c
  4069  001CF0  5003               	movf	___awdiv@divisor,w,c
  4070  001CF2  1004               	iorwf	___awdiv@divisor+1,w,c
  4071  001CF4  B4D8               	btfsc	status,2,c
  4072  001CF6  D01C               	goto	l661
  4073  001CF8  0E01               	movlw	1
  4074  001CFA  6E05               	movwf	___awdiv@counter,c
  4075  001CFC  D004               	goto	l656
  4076  001CFE  90D8               	bcf	status,0,c
  4077  001D00  3603               	rlcf	___awdiv@divisor,f,c
  4078  001D02  3604               	rlcf	___awdiv@divisor+1,f,c
  4079  001D04  2A05               	incf	___awdiv@counter,f,c
  4080  001D06                     l656:
  4081  001D06  AE04               	btfss	___awdiv@divisor+1,7,c
  4082  001D08  D7FA               	goto	l657
  4083  001D0A                     u1870:
  4084  001D0A  90D8               	bcf	status,0,c
  4085  001D0C  3607               	rlcf	___awdiv@quotient,f,c
  4086  001D0E  3608               	rlcf	___awdiv@quotient+1,f,c
  4087  001D10  5003               	movf	___awdiv@divisor,w,c
  4088  001D12  5C01               	subwf	___awdiv@dividend,w,c
  4089  001D14  5004               	movf	___awdiv@divisor+1,w,c
  4090  001D16  5802               	subwfb	___awdiv@dividend+1,w,c
  4091  001D18  A0D8               	btfss	status,0,c
  4092  001D1A  D005               	goto	l660
  4093  001D1C  5003               	movf	___awdiv@divisor,w,c
  4094  001D1E  5E01               	subwf	___awdiv@dividend,f,c
  4095  001D20  5004               	movf	___awdiv@divisor+1,w,c
  4096  001D22  5A02               	subwfb	___awdiv@dividend+1,f,c
  4097  001D24  8007               	bsf	___awdiv@quotient,0,c
  4098  001D26                     l660:
  4099  001D26  90D8               	bcf	status,0,c
  4100  001D28  3204               	rrcf	___awdiv@divisor+1,f,c
  4101  001D2A  3203               	rrcf	___awdiv@divisor,f,c
  4102  001D2C  2E05               	decfsz	___awdiv@counter,f,c
  4103  001D2E  D7ED               	goto	u1870
  4104  001D30                     l661:
  4105  001D30  5006               	movf	___awdiv@sign,w,c
  4106  001D32  B4D8               	btfsc	status,2,c
  4107  001D34  D004               	goto	l662
  4108  001D36  6C07               	negf	___awdiv@quotient,c
  4109  001D38  1E08               	comf	___awdiv@quotient+1,f,c
  4110  001D3A  B0D8               	btfsc	status,0,c
  4111  001D3C  2A08               	incf	___awdiv@quotient+1,f,c
  4112  001D3E                     l662:
  4113  001D3E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4114  001D42  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4115  001D46  0012               	return	
  4116  001D48                     __end_of___awdiv:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           intcon2	equ	0xFF1
  4125                           indf0	equ	0xFEF
  4126                           postinc0	equ	0xFEE
  4127                           fsr0h	equ	0xFEA
  4128                           fsr0l	equ	0xFE9
  4129                           wreg	equ	0xFE8
  4130                           postdec1	equ	0xFE5
  4131                           fsr1l	equ	0xFE1
  4132                           indf2	equ	0xFDF
  4133                           postinc2	equ	0xFDE
  4134                           postdec2	equ	0xFDD
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _RtccWriteTime *****************
  4140 ;; Defined at:
  4141 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  pTm             2    0[COMRAM] PTR const struct .
  4144 ;;		 -> RtccTime(4), 
  4145 ;;  di              1    2[COMRAM] enum E7121
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  tempHourWDay    2    9[COMRAM] struct .
  4148 ;;  tempMinSec      2    7[COMRAM] struct .
  4149 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4150 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4151 ;;  wasOn           1    4[COMRAM] enum E7121
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      enum E6550
  4154 ;; Registers used:
  4155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4161 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4162 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4163 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4164 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4165 ;;Total ram usage:       11 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    1
  4168 ;; This function calls:
  4169 ;;		_RtccWrOn
  4170 ;; This function is called by:
  4171 ;;		_Write_RTC
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text15
  4176  001A62                     __ptext15:
  4177                           	opt stack 0
  4178  001A62                     _RtccWriteTime:
  4179                           	opt stack 26
  4180                           
  4181                           ;incstack = 0
  4182  001A62  0E00               	movlw	0
  4183  001A64  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4184  001A66  EE20 F002          	lfsr	2,2
  4185  001A6A  5001               	movf	RtccWriteTime@pTm,w,c
  4186  001A6C  26D9               	addwf	fsr2l,f,c
  4187  001A6E  5002               	movf	RtccWriteTime@pTm+1,w,c
  4188  001A70  22DA               	addwfc	fsr2h,f,c
  4189  001A72  0E5A               	movlw	90
  4190  001A74  60DF               	cpfslt	indf2,c
  4191  001A76  0012               	return	
  4192  001A78  EE20 F001          	lfsr	2,1
  4193  001A7C  5001               	movf	RtccWriteTime@pTm,w,c
  4194  001A7E  26D9               	addwf	fsr2l,f,c
  4195  001A80  5002               	movf	RtccWriteTime@pTm+1,w,c
  4196  001A82  22DA               	addwfc	fsr2h,f,c
  4197  001A84  0E5A               	movlw	90
  4198  001A86  60DF               	cpfslt	indf2,c
  4199  001A88  0012               	return	
  4200  001A8A  EE20 F003          	lfsr	2,3
  4201  001A8E  5001               	movf	RtccWriteTime@pTm,w,c
  4202  001A90  26D9               	addwf	fsr2l,f,c
  4203  001A92  5002               	movf	RtccWriteTime@pTm+1,w,c
  4204  001A94  22DA               	addwfc	fsr2h,f,c
  4205  001A96  0E24               	movlw	36
  4206  001A98  64DF               	cpfsgt	indf2,c
  4207  001A9A  D001               	goto	l473
  4208  001A9C  0012               	return	
  4209  001A9E                     l473:
  4210  001A9E  EE20 F002          	lfsr	2,2
  4211  001AA2  5001               	movf	RtccWriteTime@pTm,w,c
  4212  001AA4  26D9               	addwf	fsr2l,f,c
  4213  001AA6  5002               	movf	RtccWriteTime@pTm+1,w,c
  4214  001AA8  22DA               	addwfc	fsr2h,f,c
  4215  001AAA  50DF               	movf	indf2,w,c
  4216  001AAC  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4217  001AAE  EE20 F001          	lfsr	2,1
  4218  001AB2  5001               	movf	RtccWriteTime@pTm,w,c
  4219  001AB4  26D9               	addwf	fsr2l,f,c
  4220  001AB6  5002               	movf	RtccWriteTime@pTm+1,w,c
  4221  001AB8  22DA               	addwfc	fsr2h,f,c
  4222  001ABA  50DF               	movf	indf2,w,c
  4223  001ABC  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4224  001ABE  5003               	movf	RtccWriteTime@di,w,c
  4225  001AC0  A4D8               	btfss	status,2,c
  4226  001AC2  9CF2               	bcf	intcon,6,c	;volatile
  4227  001AC4  010F               	movlb	15	; () banked
  4228  001AC6  0E00               	movlw	0
  4229  001AC8  BB3F               	btfsc	63,5,b	;volatile
  4230  001ACA  0E01               	movlw	1
  4231  001ACC  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4232  001ACE  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4233  001AD0  B4D8               	btfsc	status,2,c
  4234                           
  4235                           ; BSR set to: 15
  4236  001AD2  EC01  F011         	call	_RtccWrOn	;wreg free
  4237  001AD6  010F               	movlb	15	; () banked
  4238  001AD8  0E00               	movlw	0
  4239  001ADA  BF3F               	btfsc	63,7,b	;volatile
  4240  001ADC  0E01               	movlw	1
  4241  001ADE  6E05               	movwf	RtccWriteTime@wasOn,c
  4242  001AE0  5005               	movf	RtccWriteTime@wasOn,w,c
  4243  001AE2  B4D8               	btfsc	status,2,c
  4244  001AE4  D006               	goto	l479
  4245                           
  4246                           ; BSR set to: 15
  4247  001AE6  0E00               	movlw	0
  4248  001AE8  BE91               	btfsc	3985,7,c	;volatile
  4249  001AEA  0E01               	movlw	1
  4250  001AEC  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4251                           
  4252                           ; BSR set to: 15
  4253  001AEE  010F               	movlb	15	; () banked
  4254  001AF0  9F3F               	bcf	63,7,b	;volatile
  4255  001AF2                     l479:
  4256                           
  4257                           ; BSR set to: 15
  4258                           
  4259                           ; BSR set to: 15
  4260  001AF2  0EFC               	movlw	252
  4261  001AF4  010F               	movlb	15	; () banked
  4262  001AF6  173F               	andwf	63,f,b	;volatile
  4263  001AF8  010F               	movlb	15	; () banked
  4264  001AFA  813F               	bsf	63,0,b	;volatile
  4265                           
  4266                           ; BSR set to: 15
  4267  001AFC  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4268                           
  4269                           ; BSR set to: 15
  4270  001B00  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4271                           
  4272                           ; BSR set to: 15
  4273  001B04  EE20 F003          	lfsr	2,3
  4274  001B08  5001               	movf	RtccWriteTime@pTm,w,c
  4275  001B0A  26D9               	addwf	fsr2l,f,c
  4276  001B0C  5002               	movf	RtccWriteTime@pTm+1,w,c
  4277  001B0E  22DA               	addwfc	fsr2h,f,c
  4278  001B10  50DF               	movf	indf2,w,c
  4279  001B12  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4280                           
  4281                           ; BSR set to: 15
  4282  001B14  0EFC               	movlw	252
  4283  001B16  010F               	movlb	15	; () banked
  4284  001B18  173F               	andwf	63,f,b	;volatile
  4285                           
  4286                           ; BSR set to: 15
  4287  001B1A  010F               	movlb	15	; () banked
  4288  001B1C  813F               	bsf	63,0,b	;volatile
  4289                           
  4290                           ; BSR set to: 15
  4291  001B1E  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4292                           
  4293                           ; BSR set to: 15
  4294  001B22  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4295                           
  4296                           ; BSR set to: 15
  4297  001B26  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4298                           
  4299                           ; BSR set to: 15
  4300  001B2A  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4301                           
  4302                           ; BSR set to: 15
  4303  001B2E  5005               	movf	RtccWriteTime@wasOn,w,c
  4304  001B30  B4D8               	btfsc	status,2,c
  4305  001B32  D00B               	goto	l480
  4306                           
  4307                           ; BSR set to: 15
  4308  001B34  010F               	movlb	15	; () banked
  4309  001B36  8F3F               	bsf	63,7,b	;volatile
  4310                           
  4311                           ; BSR set to: 15
  4312  001B38  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4313  001B3A  A4D8               	btfss	status,2,c
  4314                           
  4315                           ; BSR set to: 15
  4316  001B3C  8E91               	bsf	3985,7,c	;volatile
  4317                           
  4318                           ; BSR set to: 15
  4319                           
  4320                           ; BSR set to: 15
  4321  001B3E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4322  001B40  B4D8               	btfsc	status,2,c
  4323  001B42  D008               	goto	l484
  4324                           
  4325                           ; BSR set to: 15
  4326  001B44  EC01  F011         	call	_RtccWrOn	;wreg free
  4327  001B48  D005               	goto	l484
  4328  001B4A                     l480:
  4329  001B4A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4330  001B4C  A4D8               	btfss	status,2,c
  4331  001B4E  D002               	goto	l484
  4332  001B50  010F               	movlb	15	; () banked
  4333  001B52  9B3F               	bcf	63,5,b	;volatile
  4334  001B54                     l484:
  4335                           
  4336                           ; BSR set to: 15
  4337                           
  4338                           ; BSR set to: 15
  4339  001B54  5003               	movf	RtccWriteTime@di,w,c
  4340  001B56  B4D8               	btfsc	status,2,c
  4341  001B58  0012               	return	
  4342  001B5A  8CF2               	bsf	intcon,6,c	;volatile
  4343  001B5C  0012               	return	
  4344  001B5E                     __end_of_RtccWriteTime:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           intcon2	equ	0xFF1
  4354                           indf0	equ	0xFEF
  4355                           postinc0	equ	0xFEE
  4356                           fsr0h	equ	0xFEA
  4357                           fsr0l	equ	0xFE9
  4358                           wreg	equ	0xFE8
  4359                           postdec1	equ	0xFE5
  4360                           fsr1l	equ	0xFE1
  4361                           indf2	equ	0xFDF
  4362                           postinc2	equ	0xFDE
  4363                           postdec2	equ	0xFDD
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function _RtccWriteDate *****************
  4369 ;; Defined at:
  4370 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  pDt             2    0[COMRAM] PTR const struct .
  4373 ;;		 -> RtccDate(4), 
  4374 ;;  di              1    2[COMRAM] enum E7121
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  tempHourWDay    2   11[COMRAM] struct .
  4377 ;;  tempDayMonth    2    9[COMRAM] struct .
  4378 ;;  tempYear        2    6[COMRAM] struct .
  4379 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4380 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4381 ;;  wasOn           1    4[COMRAM] enum E7121
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      enum E6550
  4384 ;; Registers used:
  4385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4391 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4392 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4394 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4395 ;;Total ram usage:       13 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    1
  4398 ;; This function calls:
  4399 ;;		_RtccWrOn
  4400 ;; This function is called by:
  4401 ;;		_Write_RTC
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text16
  4406  00192C                     __ptext16:
  4407                           	opt stack 0
  4408  00192C                     _RtccWriteDate:
  4409                           	opt stack 26
  4410                           
  4411                           ;incstack = 0
  4412  00192C  0E00               	movlw	0
  4413  00192E  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4414  001930  EE20 F002          	lfsr	2,2
  4415  001934  5001               	movf	RtccWriteDate@pDt,w,c
  4416  001936  26D9               	addwf	fsr2l,f,c
  4417  001938  5002               	movf	RtccWriteDate@pDt+1,w,c
  4418  00193A  22DA               	addwfc	fsr2h,f,c
  4419  00193C  0E13               	movlw	19
  4420  00193E  60DF               	cpfslt	indf2,c
  4421  001940  0012               	return	
  4422  001942  EE20 F002          	lfsr	2,2
  4423  001946  5001               	movf	RtccWriteDate@pDt,w,c
  4424  001948  26D9               	addwf	fsr2l,f,c
  4425  00194A  5002               	movf	RtccWriteDate@pDt+1,w,c
  4426  00194C  22DA               	addwfc	fsr2h,f,c
  4427  00194E  50DF               	movf	indf2,w,c
  4428  001950  B4D8               	btfsc	status,2,c
  4429  001952  0012               	return	
  4430  001954  EE20 F001          	lfsr	2,1
  4431  001958  5001               	movf	RtccWriteDate@pDt,w,c
  4432  00195A  26D9               	addwf	fsr2l,f,c
  4433  00195C  5002               	movf	RtccWriteDate@pDt+1,w,c
  4434  00195E  22DA               	addwfc	fsr2h,f,c
  4435  001960  0E32               	movlw	50
  4436  001962  60DF               	cpfslt	indf2,c
  4437  001964  0012               	return	
  4438  001966  EE20 F001          	lfsr	2,1
  4439  00196A  5001               	movf	RtccWriteDate@pDt,w,c
  4440  00196C  26D9               	addwf	fsr2l,f,c
  4441  00196E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4442  001970  22DA               	addwfc	fsr2h,f,c
  4443  001972  50DF               	movf	indf2,w,c
  4444  001974  B4D8               	btfsc	status,2,c
  4445  001976  0012               	return	
  4446  001978  EE20 F003          	lfsr	2,3
  4447  00197C  5001               	movf	RtccWriteDate@pDt,w,c
  4448  00197E  26D9               	addwf	fsr2l,f,c
  4449  001980  5002               	movf	RtccWriteDate@pDt+1,w,c
  4450  001982  22DA               	addwfc	fsr2h,f,c
  4451  001984  0E99               	movlw	153
  4452  001986  64DF               	cpfsgt	indf2,c
  4453  001988  D001               	goto	l444
  4454  00198A  0012               	return	
  4455  00198C                     l444:
  4456  00198C  EE20 F003          	lfsr	2,3
  4457  001990  5001               	movf	RtccWriteDate@pDt,w,c
  4458  001992  26D9               	addwf	fsr2l,f,c
  4459  001994  5002               	movf	RtccWriteDate@pDt+1,w,c
  4460  001996  22DA               	addwfc	fsr2h,f,c
  4461  001998  50DF               	movf	indf2,w,c
  4462  00199A  6E07               	movwf	RtccWriteDate@tempYear,c
  4463  00199C  EE20 F001          	lfsr	2,1
  4464  0019A0  5001               	movf	RtccWriteDate@pDt,w,c
  4465  0019A2  26D9               	addwf	fsr2l,f,c
  4466  0019A4  5002               	movf	RtccWriteDate@pDt+1,w,c
  4467  0019A6  22DA               	addwfc	fsr2h,f,c
  4468  0019A8  50DF               	movf	indf2,w,c
  4469  0019AA  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4470  0019AC  EE20 F002          	lfsr	2,2
  4471  0019B0  5001               	movf	RtccWriteDate@pDt,w,c
  4472  0019B2  26D9               	addwf	fsr2l,f,c
  4473  0019B4  5002               	movf	RtccWriteDate@pDt+1,w,c
  4474  0019B6  22DA               	addwfc	fsr2h,f,c
  4475  0019B8  50DF               	movf	indf2,w,c
  4476  0019BA  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4477  0019BC  5003               	movf	RtccWriteDate@di,w,c
  4478  0019BE  A4D8               	btfss	status,2,c
  4479  0019C0  9CF2               	bcf	intcon,6,c	;volatile
  4480  0019C2  010F               	movlb	15	; () banked
  4481  0019C4  0E00               	movlw	0
  4482  0019C6  BB3F               	btfsc	63,5,b	;volatile
  4483  0019C8  0E01               	movlw	1
  4484  0019CA  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4485  0019CC  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4486  0019CE  B4D8               	btfsc	status,2,c
  4487                           
  4488                           ; BSR set to: 15
  4489  0019D0  EC01  F011         	call	_RtccWrOn	;wreg free
  4490  0019D4  010F               	movlb	15	; () banked
  4491  0019D6  0E00               	movlw	0
  4492  0019D8  BF3F               	btfsc	63,7,b	;volatile
  4493  0019DA  0E01               	movlw	1
  4494  0019DC  6E05               	movwf	RtccWriteDate@wasOn,c
  4495  0019DE  5005               	movf	RtccWriteDate@wasOn,w,c
  4496  0019E0  B4D8               	btfsc	status,2,c
  4497  0019E2  D006               	goto	l450
  4498                           
  4499                           ; BSR set to: 15
  4500  0019E4  0E00               	movlw	0
  4501  0019E6  BE91               	btfsc	3985,7,c	;volatile
  4502  0019E8  0E01               	movlw	1
  4503  0019EA  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4504                           
  4505                           ; BSR set to: 15
  4506  0019EC  010F               	movlb	15	; () banked
  4507  0019EE  9F3F               	bcf	63,7,b	;volatile
  4508  0019F0                     l450:
  4509                           
  4510                           ; BSR set to: 15
  4511                           
  4512                           ; BSR set to: 15
  4513  0019F0  0EFC               	movlw	252
  4514  0019F2  010F               	movlb	15	; () banked
  4515  0019F4  173F               	andwf	63,f,b	;volatile
  4516  0019F6  010F               	movlb	15	; () banked
  4517  0019F8  813F               	bsf	63,0,b	;volatile
  4518                           
  4519                           ; BSR set to: 15
  4520  0019FA  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4521                           
  4522                           ; BSR set to: 15
  4523  0019FE  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4524                           
  4525                           ; BSR set to: 15
  4526  001A02  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4527  001A06  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4528  001A0A  50DF               	movf	indf2,w,c
  4529  001A0C  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4530                           
  4531                           ; BSR set to: 15
  4532  001A0E  0EFC               	movlw	252
  4533  001A10  010F               	movlb	15	; () banked
  4534  001A12  173F               	andwf	63,f,b	;volatile
  4535                           
  4536                           ; BSR set to: 15
  4537  001A14  0E03               	movlw	3
  4538  001A16  010F               	movlb	15	; () banked
  4539  001A18  133F               	iorwf	63,f,b	;volatile
  4540                           
  4541                           ; BSR set to: 15
  4542  001A1A  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4543                           
  4544                           ; BSR set to: 15
  4545  001A1E  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4546                           
  4547                           ; BSR set to: 15
  4548  001A22  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4549                           
  4550                           ; BSR set to: 15
  4551  001A26  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4552                           
  4553                           ; BSR set to: 15
  4554  001A2A  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4555                           
  4556                           ; BSR set to: 15
  4557  001A2E  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4558                           
  4559                           ; BSR set to: 15
  4560  001A32  5005               	movf	RtccWriteDate@wasOn,w,c
  4561  001A34  B4D8               	btfsc	status,2,c
  4562  001A36  D00B               	goto	l451
  4563                           
  4564                           ; BSR set to: 15
  4565  001A38  010F               	movlb	15	; () banked
  4566  001A3A  8F3F               	bsf	63,7,b	;volatile
  4567                           
  4568                           ; BSR set to: 15
  4569  001A3C  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4570  001A3E  A4D8               	btfss	status,2,c
  4571                           
  4572                           ; BSR set to: 15
  4573  001A40  8E91               	bsf	3985,7,c	;volatile
  4574                           
  4575                           ; BSR set to: 15
  4576                           
  4577                           ; BSR set to: 15
  4578  001A42  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4579  001A44  B4D8               	btfsc	status,2,c
  4580  001A46  D008               	goto	l455
  4581                           
  4582                           ; BSR set to: 15
  4583  001A48  EC01  F011         	call	_RtccWrOn	;wreg free
  4584  001A4C  D005               	goto	l455
  4585  001A4E                     l451:
  4586  001A4E  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4587  001A50  A4D8               	btfss	status,2,c
  4588  001A52  D002               	goto	l455
  4589  001A54  010F               	movlb	15	; () banked
  4590  001A56  9B3F               	bcf	63,5,b	;volatile
  4591  001A58                     l455:
  4592                           
  4593                           ; BSR set to: 15
  4594                           
  4595                           ; BSR set to: 15
  4596  001A58  5003               	movf	RtccWriteDate@di,w,c
  4597  001A5A  B4D8               	btfsc	status,2,c
  4598  001A5C  0012               	return	
  4599  001A5E  9CF2               	bcf	intcon,6,c	;volatile
  4600  001A60  0012               	return	
  4601  001A62                     __end_of_RtccWriteDate:
  4602                           	opt stack 0
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           prodh	equ	0xFF4
  4608                           prodl	equ	0xFF3
  4609                           intcon	equ	0xFF2
  4610                           intcon2	equ	0xFF1
  4611                           indf0	equ	0xFEF
  4612                           postinc0	equ	0xFEE
  4613                           fsr0h	equ	0xFEA
  4614                           fsr0l	equ	0xFE9
  4615                           wreg	equ	0xFE8
  4616                           postdec1	equ	0xFE5
  4617                           fsr1l	equ	0xFE1
  4618                           indf2	equ	0xFDF
  4619                           postinc2	equ	0xFDE
  4620                           postdec2	equ	0xFDD
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _RtccWrOn *****************
  4626 ;; Defined at:
  4627 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccWrOn.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  data            2    0        unsigned int 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  1    wreg      void 
  4634 ;; Registers used:
  4635 ;;		wreg, status,2
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4645 ;;Total ram usage:        0 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_Write_RTC
  4651 ;;		_RtccWriteDate
  4652 ;;		_RtccWriteTime
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text17
  4657  002202                     __ptext17:
  4658                           	opt stack 0
  4659  002202                     _RtccWrOn:
  4660                           	opt stack 26
  4661                           
  4662                           ;incstack = 0
  4663  002202  9CF2               	bcf	intcon,6,c	;volatile
  4664  002204  0E55               	movlw	85
  4665  002206  6EA7               	movwf	4007,c	;volatile
  4666  002208  0EAA               	movlw	170
  4667  00220A  6EA7               	movwf	4007,c	;volatile
  4668  00220C  010F               	movlb	15	; () banked
  4669  00220E  8B3F               	bsf	63,5,b	;volatile
  4670                           
  4671                           ; BSR set to: 15
  4672  002210  8CF2               	bsf	intcon,6,c	;volatile
  4673                           
  4674                           ; BSR set to: 15
  4675  002212  0012               	return		;funcret
  4676  002214                     __end_of_RtccWrOn:
  4677                           	opt stack 0
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           prodh	equ	0xFF4
  4683                           prodl	equ	0xFF3
  4684                           intcon	equ	0xFF2
  4685                           intcon2	equ	0xFF1
  4686                           indf0	equ	0xFEF
  4687                           postinc0	equ	0xFEE
  4688                           fsr0h	equ	0xFEA
  4689                           fsr0l	equ	0xFE9
  4690                           wreg	equ	0xFE8
  4691                           postdec1	equ	0xFE5
  4692                           fsr1l	equ	0xFE1
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           postdec2	equ	0xFDD
  4696                           fsr2h	equ	0xFDA
  4697                           fsr2l	equ	0xFD9
  4698                           status	equ	0xFD8
  4699                           
  4700 ;; *************** function _lcd_init *****************
  4701 ;; Defined at:
  4702 ;;		line 119 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  i               1    4[COMRAM] unsigned char 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4719 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4720 ;;Total ram usage:        1 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    2
  4723 ;; This function calls:
  4724 ;;		_Delay1KTCYx
  4725 ;;		_lcd_send_byte
  4726 ;;		_lcd_send_nibble
  4727 ;; This function is called by:
  4728 ;;		_setup
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text18
  4733  001DC4                     __ptext18:
  4734                           	opt stack 0
  4735  001DC4                     _lcd_init:
  4736                           	opt stack 27
  4737                           
  4738                           ;unmc_lcd_216.c: 120: int8 i;
  4739                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  4740                           
  4741                           ; BSR set to: 15
  4742                           ;incstack = 0
  4743  001DC4  9693               	bcf	3987,3,c	;volatile
  4744                           
  4745                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  4746  001DC6  9493               	bcf	3987,2,c	;volatile
  4747                           
  4748                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  4749  001DC8  968A               	bcf	3978,3,c	;volatile
  4750                           
  4751                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  4752  001DCA  948A               	bcf	3978,2,c	;volatile
  4753                           
  4754                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  4755  001DCC  9893               	bcf	3987,4,c	;volatile
  4756                           
  4757                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  4758  001DCE  9A93               	bcf	3987,5,c	;volatile
  4759                           
  4760                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  4761  001DD0  9C93               	bcf	3987,6,c	;volatile
  4762                           
  4763                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  4764  001DD2  9E93               	bcf	3987,7,c	;volatile
  4765                           
  4766                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  4767  001DD4  0E0A               	movlw	10
  4768  001DD6  EC0A  F011         	call	_Delay1KTCYx
  4769                           
  4770                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  4771  001DDA  0E0A               	movlw	10
  4772  001DDC  EC0A  F011         	call	_Delay1KTCYx
  4773                           
  4774                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  4775  001DE0  0E0A               	movlw	10
  4776  001DE2  EC0A  F011         	call	_Delay1KTCYx
  4777                           
  4778                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  4779  001DE6  0E00               	movlw	0
  4780  001DE8  6E05               	movwf	lcd_init@i,c
  4781  001DEA                     l2759:
  4782  001DEA  0E02               	movlw	2
  4783  001DEC  6405               	cpfsgt	lcd_init@i,c
  4784  001DEE  D001               	goto	l301
  4785  001DF0  D008               	goto	u2310
  4786  001DF2                     l301:
  4787                           
  4788                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  4789  001DF2  0E03               	movlw	3
  4790  001DF4  EC1D  F00F         	call	_lcd_send_nibble
  4791                           
  4792                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  4793  001DF8  0E0A               	movlw	10
  4794  001DFA  EC0A  F011         	call	_Delay1KTCYx
  4795  001DFE  2A05               	incf	lcd_init@i,f,c
  4796  001E00  D7F4               	goto	l2759
  4797  001E02                     u2310:
  4798                           
  4799                           ;unmc_lcd_216.c: 146: }
  4800                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  4801  001E02  0E02               	movlw	2
  4802  001E04  EC1D  F00F         	call	_lcd_send_nibble
  4803                           
  4804                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  4805  001E08  0E00               	movlw	0
  4806  001E0A  6E05               	movwf	lcd_init@i,c
  4807  001E0C                     l2773:
  4808  001E0C  0E03               	movlw	3
  4809  001E0E  6405               	cpfsgt	lcd_init@i,c
  4810  001E10  D001               	goto	l303
  4811  001E12  0012               	return	
  4812  001E14                     l303:
  4813                           
  4814                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  4815  001E14  5005               	movf	lcd_init@i,w,c
  4816  001E16  0D01               	mullw	1
  4817  001E18  0E0B               	movlw	low _LCD_INIT_STRING
  4818  001E1A  24F3               	addwf	prodl,w,c
  4819  001E1C  6EF6               	movwf	tblptrl,c
  4820  001E1E  0E0F               	movlw	high _LCD_INIT_STRING
  4821  001E20  20F4               	addwfc	prodh,w,c
  4822  001E22  6EF7               	movwf	tblptrh,c
  4823  001E24                     	if	0	;There are less than 3 active tblptr bytes
  4824  001E24                     	endif
  4825  001E24  0008               	tblrd		*
  4826  001E26  CFF5 F003          	movff	tablat,lcd_send_byte@n
  4827  001E2A  0E00               	movlw	0
  4828  001E2C  ECB5  F010         	call	_lcd_send_byte
  4829                           
  4830                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  4831  001E30  0E0A               	movlw	10
  4832  001E32  EC0A  F011         	call	_Delay1KTCYx
  4833  001E36  2A05               	incf	lcd_init@i,f,c
  4834  001E38  D7E9               	goto	l2773
  4835  001E3A                     __end_of_lcd_init:
  4836                           	opt stack 0
  4837                           tblptru	equ	0xFF8
  4838                           tblptrh	equ	0xFF7
  4839                           tblptrl	equ	0xFF6
  4840                           tablat	equ	0xFF5
  4841                           prodh	equ	0xFF4
  4842                           prodl	equ	0xFF3
  4843                           intcon	equ	0xFF2
  4844                           intcon2	equ	0xFF1
  4845                           indf0	equ	0xFEF
  4846                           postinc0	equ	0xFEE
  4847                           fsr0h	equ	0xFEA
  4848                           fsr0l	equ	0xFE9
  4849                           wreg	equ	0xFE8
  4850                           postdec1	equ	0xFE5
  4851                           fsr1l	equ	0xFE1
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function _Delay1KTCYx *****************
  4860 ;; Defined at:
  4861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d1ktcyx.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  unit            1    wreg     unsigned char 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  unit            1    0[COMRAM] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4879 ;;Total ram usage:        1 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_lcd_init
  4885 ;;		_DelayPORXLCD
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text19
  4890  002214                     __ptext19:
  4891                           	opt stack 0
  4892  002214                     _Delay1KTCYx:
  4893                           	opt stack 28
  4894                           
  4895                           ;incstack = 0
  4896                           ;Delay1KTCYx@unit stored from wreg
  4897  002214  6E01               	movwf	Delay1KTCYx@unit,c
  4898  002216                     l701:
  4899  002216  0EC8               	movlw	200
  4900  002218                     u3117:
  4901  002218  D000               	nop2	
  4902  00221A  2EE8               	decfsz	wreg,f,c
  4903  00221C  D7FD               	bra	u3117
  4904  00221E  2E01               	decfsz	Delay1KTCYx@unit,f,c
  4905  002220  D7FA               	goto	l701
  4906  002222  0012               	return	
  4907  002224                     __end_of_Delay1KTCYx:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           intcon2	equ	0xFF1
  4917                           indf0	equ	0xFEF
  4918                           postinc0	equ	0xFEE
  4919                           fsr0h	equ	0xFEA
  4920                           fsr0l	equ	0xFE9
  4921                           wreg	equ	0xFE8
  4922                           postdec1	equ	0xFE5
  4923                           fsr1l	equ	0xFE1
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           postdec2	equ	0xFDD
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _lcd_comand *****************
  4932 ;; Defined at:
  4933 ;;		line 189 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  d               1    wreg     unsigned char 
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;  d               1    4[COMRAM] unsigned char 
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      void 
  4940 ;; Registers used:
  4941 ;;		wreg, status,2, status,0, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4951 ;;Total ram usage:        1 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    2
  4954 ;; This function calls:
  4955 ;;		_lcd_send_byte
  4956 ;; This function is called by:
  4957 ;;		_setup
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text20
  4962  002242                     __ptext20:
  4963                           	opt stack 0
  4964  002242                     _lcd_comand:
  4965                           	opt stack 27
  4966                           
  4967                           ;incstack = 0
  4968                           ;lcd_comand@d stored from wreg
  4969  002242  6E05               	movwf	lcd_comand@d,c
  4970                           
  4971                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  4972  002244  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  4973  002248  0E00               	movlw	0
  4974  00224A  ECB5  F010         	call	_lcd_send_byte
  4975  00224E  0012               	return		;funcret
  4976  002250                     __end_of_lcd_comand:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           intcon2	equ	0xFF1
  4986                           indf0	equ	0xFEF
  4987                           postinc0	equ	0xFEE
  4988                           fsr0h	equ	0xFEA
  4989                           fsr0l	equ	0xFE9
  4990                           wreg	equ	0xFE8
  4991                           postdec1	equ	0xFE5
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _lcd_send_byte *****************
  5001 ;; Defined at:
  5002 ;;		line 86 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  address         1    wreg     unsigned char 
  5005 ;;  n               1    2[COMRAM] unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  address         1    3[COMRAM] unsigned char 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  1    wreg      void 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2, status,0, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5017 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5020 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5021 ;;Total ram usage:        2 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    1
  5024 ;; This function calls:
  5025 ;;		_Delay100TCYx
  5026 ;;		_lcd_send_nibble
  5027 ;; This function is called by:
  5028 ;;		_lcd_init
  5029 ;;		_lcd_gotoxy
  5030 ;;		_lcd_putc
  5031 ;;		_lcd_comand
  5032 ;;		_lcd_setcursor_vb
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text21
  5037  00216A                     __ptext21:
  5038                           	opt stack 0
  5039  00216A                     _lcd_send_byte:
  5040                           	opt stack 25
  5041                           
  5042                           ;incstack = 0
  5043                           ;lcd_send_byte@address stored from wreg
  5044  00216A  6E04               	movwf	lcd_send_byte@address,c
  5045                           
  5046                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  5047  00216C  968A               	bcf	3978,3,c	;volatile
  5048                           
  5049                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  5050  00216E  0E02               	movlw	2
  5051  002170  EC12  F011         	call	_Delay100TCYx
  5052                           
  5053                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  5054  002174  9893               	bcf	3987,4,c	;volatile
  5055                           
  5056                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  5057  002176  9A93               	bcf	3987,5,c	;volatile
  5058                           
  5059                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  5060  002178  9C93               	bcf	3987,6,c	;volatile
  5061                           
  5062                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  5063  00217A  9E93               	bcf	3987,7,c	;volatile
  5064                           
  5065                           ;unmc_lcd_216.c: 101: if(address)
  5066  00217C  5004               	movf	lcd_send_byte@address,w,c
  5067  00217E  B4D8               	btfsc	status,2,c
  5068  002180  D002               	goto	l296
  5069                           
  5070                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  5071  002182  868A               	bsf	3978,3,c	;volatile
  5072  002184  D001               	goto	l297
  5073  002186                     l296:
  5074                           
  5075                           ;unmc_lcd_216.c: 103: else
  5076                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  5077  002186  968A               	bcf	3978,3,c	;volatile
  5078  002188                     l297:
  5079                           
  5080                           ;unmc_lcd_216.c: 106: __nop();
  5081  002188  F000               	nop	
  5082                           
  5083                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  5084  00218A  3803               	swapf	lcd_send_byte@n,w,c
  5085  00218C  0B0F               	andlw	15
  5086  00218E  EC1D  F00F         	call	_lcd_send_nibble
  5087                           
  5088                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  5089  002192  5003               	movf	lcd_send_byte@n,w,c
  5090  002194  0B0F               	andlw	15
  5091  002196  EC1D  F00F         	call	_lcd_send_nibble
  5092  00219A  0012               	return		;funcret
  5093  00219C                     __end_of_lcd_send_byte:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           intcon2	equ	0xFF1
  5103                           indf0	equ	0xFEF
  5104                           postinc0	equ	0xFEE
  5105                           fsr0h	equ	0xFEA
  5106                           fsr0l	equ	0xFE9
  5107                           wreg	equ	0xFE8
  5108                           postdec1	equ	0xFE5
  5109                           fsr1l	equ	0xFE1
  5110                           indf2	equ	0xFDF
  5111                           postinc2	equ	0xFDE
  5112                           postdec2	equ	0xFDD
  5113                           fsr2h	equ	0xFDA
  5114                           fsr2l	equ	0xFD9
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _lcd_send_nibble *****************
  5118 ;; Defined at:
  5119 ;;		line 25 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  nibble          1    wreg     unsigned char 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  nibble          1    1[COMRAM] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, status,0
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5137 ;;Total ram usage:        2 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; This function calls:
  5140 ;;		Nothing
  5141 ;; This function is called by:
  5142 ;;		_lcd_send_byte
  5143 ;;		_lcd_init
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text22
  5148  001E3A                     __ptext22:
  5149                           	opt stack 0
  5150  001E3A                     _lcd_send_nibble:
  5151                           	opt stack 25
  5152                           
  5153                           ;incstack = 0
  5154                           ;lcd_send_nibble@nibble stored from wreg
  5155  001E3A  6E02               	movwf	lcd_send_nibble@nibble,c
  5156                           
  5157                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  5158  001E3C  A002               	btfss	lcd_send_nibble@nibble,0,c
  5159  001E3E  D003               	goto	u1480
  5160  001E40  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5161  001E42  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5162  001E44  D001               	goto	u1498
  5163  001E46                     u1480:
  5164  001E46  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5165  001E48                     u1498:
  5166  001E48  3A01               	swapf	??_lcd_send_nibble,f,c
  5167  001E4A  508A               	movf	3978,w,c	;volatile
  5168  001E4C  1801               	xorwf	??_lcd_send_nibble,w,c
  5169  001E4E  0BEF               	andlw	-17
  5170  001E50  1801               	xorwf	??_lcd_send_nibble,w,c
  5171  001E52  6E8A               	movwf	3978,c	;volatile
  5172                           
  5173                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  5174  001E54  A202               	btfss	lcd_send_nibble@nibble,1,c
  5175  001E56  D003               	goto	u1500
  5176  001E58  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5177  001E5A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5178  001E5C  D001               	goto	u1518
  5179  001E5E                     u1500:
  5180  001E5E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5181  001E60                     u1518:
  5182  001E60  3A01               	swapf	??_lcd_send_nibble,f,c
  5183  001E62  4601               	rlncf	??_lcd_send_nibble,f,c
  5184  001E64  508A               	movf	3978,w,c	;volatile
  5185  001E66  1801               	xorwf	??_lcd_send_nibble,w,c
  5186  001E68  0BDF               	andlw	-33
  5187  001E6A  1801               	xorwf	??_lcd_send_nibble,w,c
  5188  001E6C  6E8A               	movwf	3978,c	;volatile
  5189                           
  5190                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  5191  001E6E  A402               	btfss	lcd_send_nibble@nibble,2,c
  5192  001E70  D003               	goto	u1520
  5193  001E72  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5194  001E74  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5195  001E76  D001               	goto	u1538
  5196  001E78                     u1520:
  5197  001E78  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5198  001E7A                     u1538:
  5199  001E7A  3A01               	swapf	??_lcd_send_nibble,f,c
  5200  001E7C  4601               	rlncf	??_lcd_send_nibble,f,c
  5201  001E7E  4601               	rlncf	??_lcd_send_nibble,f,c
  5202  001E80  508A               	movf	3978,w,c	;volatile
  5203  001E82  1801               	xorwf	??_lcd_send_nibble,w,c
  5204  001E84  0BBF               	andlw	-65
  5205  001E86  1801               	xorwf	??_lcd_send_nibble,w,c
  5206  001E88  6E8A               	movwf	3978,c	;volatile
  5207                           
  5208                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  5209  001E8A  A602               	btfss	lcd_send_nibble@nibble,3,c
  5210  001E8C  D003               	goto	u1540
  5211  001E8E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5212  001E90  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5213  001E92  D001               	goto	u1558
  5214  001E94                     u1540:
  5215  001E94  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5216  001E96                     u1558:
  5217  001E96  3201               	rrcf	??_lcd_send_nibble,f,c
  5218  001E98  3201               	rrcf	??_lcd_send_nibble,f,c
  5219  001E9A  508A               	movf	3978,w,c	;volatile
  5220  001E9C  1801               	xorwf	??_lcd_send_nibble,w,c
  5221  001E9E  0B7F               	andlw	-129
  5222  001EA0  1801               	xorwf	??_lcd_send_nibble,w,c
  5223  001EA2  6E8A               	movwf	3978,c	;volatile
  5224                           
  5225                           ;unmc_lcd_216.c: 32: __nop();
  5226  001EA4  F000               	nop	
  5227                           
  5228                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  5229  001EA6  848A               	bsf	3978,2,c	;volatile
  5230                           
  5231                           ;unmc_lcd_216.c: 34: __nop();__nop();
  5232  001EA8  F000               	nop	
  5233  001EAA  F000               	nop	
  5234                           
  5235                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  5236  001EAC  948A               	bcf	3978,2,c	;volatile
  5237  001EAE  0012               	return		;funcret
  5238  001EB0                     __end_of_lcd_send_nibble:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           intcon2	equ	0xFF1
  5248                           indf0	equ	0xFEF
  5249                           postinc0	equ	0xFEE
  5250                           fsr0h	equ	0xFEA
  5251                           fsr0l	equ	0xFE9
  5252                           wreg	equ	0xFE8
  5253                           postdec1	equ	0xFE5
  5254                           fsr1l	equ	0xFE1
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           postdec2	equ	0xFDD
  5258                           fsr2h	equ	0xFDA
  5259                           fsr2l	equ	0xFD9
  5260                           status	equ	0xFD8
  5261                           
  5262 ;; *************** function _Delay100TCYx *****************
  5263 ;; Defined at:
  5264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d100tcyx.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  unit            1    wreg     unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  unit            1    0[COMRAM] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5279 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5281 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5282 ;;Total ram usage:        1 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; This function calls:
  5285 ;;		Nothing
  5286 ;; This function is called by:
  5287 ;;		_lcd_send_byte
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           	psect	text23
  5292  002224                     __ptext23:
  5293                           	opt stack 0
  5294  002224                     _Delay100TCYx:
  5295                           	opt stack 25
  5296                           
  5297                           ;incstack = 0
  5298                           ;Delay100TCYx@unit stored from wreg
  5299  002224  6E01               	movwf	Delay100TCYx@unit,c
  5300  002226                     l687:
  5301  002226  0E21               	movlw	33
  5302  002228                     u3127:
  5303  002228  2EE8               	decfsz	wreg,f,c
  5304  00222A  D7FE               	bra	u3127
  5305  00222C  F000               	nop	
  5306  00222E  2E01               	decfsz	Delay100TCYx@unit,f,c
  5307  002230  D7FA               	goto	l687
  5308  002232  0012               	return	
  5309  002234                     __end_of_Delay100TCYx:
  5310                           	opt stack 0
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           intcon2	equ	0xFF1
  5319                           indf0	equ	0xFEF
  5320                           postinc0	equ	0xFEE
  5321                           fsr0h	equ	0xFEA
  5322                           fsr0l	equ	0xFE9
  5323                           wreg	equ	0xFE8
  5324                           postdec1	equ	0xFE5
  5325                           fsr1l	equ	0xFE1
  5326                           indf2	equ	0xFDF
  5327                           postinc2	equ	0xFDE
  5328                           postdec2	equ	0xFDD
  5329                           fsr2h	equ	0xFDA
  5330                           fsr2l	equ	0xFD9
  5331                           status	equ	0xFD8
  5332                           
  5333 ;; *************** function _Read_RTC *****************
  5334 ;; Defined at:
  5335 ;;		line 108 in file "../../headers\unmc_rtcc_01.h"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5353 ;;Total ram usage:        0 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    1
  5356 ;; This function calls:
  5357 ;;		_RtccReadDate
  5358 ;;		_RtccReadTime
  5359 ;; This function is called by:
  5360 ;;		_main
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text24
  5365  001B5E                     __ptext24:
  5366                           	opt stack 0
  5367  001B5E                     _Read_RTC:
  5368                           	opt stack 29
  5369                           
  5370                           ;headers\unmc_rtcc_01.h: 111: RtccReadTime(&RtccTime);
  5371                           
  5372                           ;incstack = 0
  5373  001B5E  0E4C               	movlw	low _RtccTime
  5374  001B60  6E01               	movwf	RtccReadTime@pTm,c
  5375  001B62  0E00               	movlw	high _RtccTime
  5376  001B64  6E02               	movwf	RtccReadTime@pTm+1,c
  5377  001B66  EC90  F00F         	call	_RtccReadTime	;wreg free
  5378                           
  5379                           ;headers\unmc_rtcc_01.h: 112: segundo_u = (RtccTime.f.sec & 0x0F);
  5380  001B6A  504D               	movf	_RtccTime+1,w,c
  5381  001B6C  0B0F               	andlw	15
  5382  001B6E  6E47               	movwf	_segundo_u,c
  5383                           
  5384                           ;headers\unmc_rtcc_01.h: 113: segundo_d = ((RtccTime.f.sec & 0xF0) >> 4);
  5385  001B70  384D               	swapf	_RtccTime+1,w,c
  5386  001B72  0B0F               	andlw	15
  5387  001B74  0B0F               	andlw	15
  5388  001B76  6E46               	movwf	_segundo_d,c
  5389                           
  5390                           ;headers\unmc_rtcc_01.h: 114: minuto_u = (RtccTime.f.min & 0x0F);
  5391  001B78  504E               	movf	_RtccTime+2,w,c
  5392  001B7A  0B0F               	andlw	15
  5393  001B7C  6E45               	movwf	_minuto_u,c
  5394                           
  5395                           ;headers\unmc_rtcc_01.h: 115: minuto_d = ((RtccTime.f.min & 0xF0) >> 4);
  5396  001B7E  384E               	swapf	_RtccTime+2,w,c
  5397  001B80  0B0F               	andlw	15
  5398  001B82  0B0F               	andlw	15
  5399  001B84  6E44               	movwf	_minuto_d,c
  5400                           
  5401                           ;headers\unmc_rtcc_01.h: 116: hora_u = (RtccTime.f.hour & 0x0F);
  5402  001B86  504F               	movf	_RtccTime+3,w,c
  5403  001B88  0B0F               	andlw	15
  5404  001B8A  6E43               	movwf	_hora_u,c
  5405                           
  5406                           ;headers\unmc_rtcc_01.h: 117: hora_d = ((RtccTime.f.hour & 0xF0) >> 4);
  5407  001B8C  384F               	swapf	_RtccTime+3,w,c
  5408  001B8E  0B0F               	andlw	15
  5409  001B90  0B0F               	andlw	15
  5410  001B92  6E42               	movwf	_hora_d,c
  5411                           
  5412                           ;headers\unmc_rtcc_01.h: 118: RtccReadDate(&RtccDate);
  5413  001B94  0E48               	movlw	low _RtccDate
  5414  001B96  6E01               	movwf	RtccReadDate@pDt,c
  5415  001B98  0E00               	movlw	high _RtccDate
  5416  001B9A  6E02               	movwf	RtccReadDate@pDt+1,c
  5417  001B9C  EC1B  F00E         	call	_RtccReadDate	;wreg free
  5418                           
  5419                           ;headers\unmc_rtcc_01.h: 119: fecha_u = (RtccDate.f.mday & 0x0F);
  5420  001BA0  5049               	movf	_RtccDate+1,w,c
  5421  001BA2  0B0F               	andlw	15
  5422  001BA4  6E41               	movwf	_fecha_u,c
  5423                           
  5424                           ;headers\unmc_rtcc_01.h: 120: fecha_d = ((RtccDate.f.mday & 0xF0) >> 4);
  5425  001BA6  3849               	swapf	_RtccDate+1,w,c
  5426  001BA8  0B0F               	andlw	15
  5427  001BAA  0B0F               	andlw	15
  5428  001BAC  6E40               	movwf	_fecha_d,c
  5429                           
  5430                           ;headers\unmc_rtcc_01.h: 121: mes_u = (RtccDate.f.mon & 0x0F);
  5431  001BAE  504A               	movf	_RtccDate+2,w,c
  5432  001BB0  0B0F               	andlw	15
  5433  001BB2  6E3F               	movwf	_mes_u,c
  5434                           
  5435                           ;headers\unmc_rtcc_01.h: 122: mes_d = ((RtccDate.f.mon & 0xF0) >> 4);
  5436  001BB4  384A               	swapf	_RtccDate+2,w,c
  5437  001BB6  0B0F               	andlw	15
  5438  001BB8  0B0F               	andlw	15
  5439  001BBA  6E3E               	movwf	_mes_d,c
  5440                           
  5441                           ;headers\unmc_rtcc_01.h: 123: dia_semana = RtccDate.f.wday;
  5442  001BBC  C048  F03D         	movff	_RtccDate,_dia_semana
  5443                           
  5444                           ;headers\unmc_rtcc_01.h: 124: anio_u = (RtccDate.f.year & 0x0F);
  5445  001BC0  504B               	movf	_RtccDate+3,w,c
  5446  001BC2  0B0F               	andlw	15
  5447  001BC4  6E3C               	movwf	_anio_u,c
  5448                           
  5449                           ;headers\unmc_rtcc_01.h: 125: anio_d = ((RtccDate.f.year & 0xF0) >> 4);
  5450  001BC6  384B               	swapf	_RtccDate+3,w,c
  5451  001BC8  0B0F               	andlw	15
  5452  001BCA  0B0F               	andlw	15
  5453  001BCC  6E3B               	movwf	_anio_d,c
  5454                           
  5455                           ;headers\unmc_rtcc_01.h: 127: segundo = segundo_d * 10 + segundo_u;
  5456  001BCE  5046               	movf	_segundo_d,w,c
  5457  001BD0  0D0A               	mullw	10
  5458  001BD2  5047               	movf	_segundo_u,w,c
  5459  001BD4  24F3               	addwf	prodl,w,c
  5460  001BD6  6E2D               	movwf	_segundo,c
  5461  001BD8  0E00               	movlw	0
  5462  001BDA  20F4               	addwfc	prodh,w,c
  5463  001BDC  6E2E               	movwf	_segundo+1,c
  5464                           
  5465                           ;headers\unmc_rtcc_01.h: 128: minuto = minuto_d * 10 + minuto_u;
  5466  001BDE  5044               	movf	_minuto_d,w,c
  5467  001BE0  0D0A               	mullw	10
  5468  001BE2  5045               	movf	_minuto_u,w,c
  5469  001BE4  24F3               	addwf	prodl,w,c
  5470  001BE6  6E50               	movwf	_minuto,c
  5471  001BE8  0E00               	movlw	0
  5472  001BEA  20F4               	addwfc	prodh,w,c
  5473  001BEC  6E51               	movwf	_minuto+1,c
  5474                           
  5475                           ;headers\unmc_rtcc_01.h: 129: hora = hora_d * 10 + hora_u;
  5476  001BEE  5042               	movf	_hora_d,w,c
  5477  001BF0  0D0A               	mullw	10
  5478  001BF2  5043               	movf	_hora_u,w,c
  5479  001BF4  24F3               	addwf	prodl,w,c
  5480  001BF6  6E52               	movwf	_hora,c
  5481  001BF8  0E00               	movlw	0
  5482  001BFA  20F4               	addwfc	prodh,w,c
  5483  001BFC  6E53               	movwf	_hora+1,c
  5484                           
  5485                           ;headers\unmc_rtcc_01.h: 130: dia = fecha_d * 10 + fecha_u;
  5486  001BFE  5040               	movf	_fecha_d,w,c
  5487  001C00  0D0A               	mullw	10
  5488  001C02  5041               	movf	_fecha_u,w,c
  5489  001C04  24F3               	addwf	prodl,w,c
  5490  001C06  6E54               	movwf	_dia,c
  5491  001C08  0E00               	movlw	0
  5492  001C0A  20F4               	addwfc	prodh,w,c
  5493  001C0C  6E55               	movwf	_dia+1,c
  5494                           
  5495                           ;headers\unmc_rtcc_01.h: 131: diasem = dia_semana;
  5496  001C0E  C03D  F056         	movff	_dia_semana,_diasem
  5497  001C12  6A57               	clrf	_diasem+1,c
  5498                           
  5499                           ;headers\unmc_rtcc_01.h: 132: mes = mes_d * 10 + mes_u;
  5500  001C14  503E               	movf	_mes_d,w,c
  5501  001C16  0D0A               	mullw	10
  5502  001C18  503F               	movf	_mes_u,w,c
  5503  001C1A  24F3               	addwf	prodl,w,c
  5504  001C1C  6E58               	movwf	_mes,c
  5505  001C1E  0E00               	movlw	0
  5506  001C20  20F4               	addwfc	prodh,w,c
  5507  001C22  6E59               	movwf	_mes+1,c
  5508                           
  5509                           ;headers\unmc_rtcc_01.h: 133: anio = anio_d * 10 + anio_u;
  5510  001C24  503B               	movf	_anio_d,w,c
  5511  001C26  0D0A               	mullw	10
  5512  001C28  503C               	movf	_anio_u,w,c
  5513  001C2A  24F3               	addwf	prodl,w,c
  5514  001C2C  6E5A               	movwf	_anio,c
  5515  001C2E  0E00               	movlw	0
  5516  001C30  20F4               	addwfc	prodh,w,c
  5517  001C32  6E5B               	movwf	_anio+1,c
  5518  001C34  0012               	return		;funcret
  5519  001C36                     __end_of_Read_RTC:
  5520                           	opt stack 0
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           intcon	equ	0xFF2
  5528                           intcon2	equ	0xFF1
  5529                           indf0	equ	0xFEF
  5530                           postinc0	equ	0xFEE
  5531                           fsr0h	equ	0xFEA
  5532                           fsr0l	equ	0xFE9
  5533                           wreg	equ	0xFE8
  5534                           postdec1	equ	0xFE5
  5535                           fsr1l	equ	0xFE1
  5536                           indf2	equ	0xFDF
  5537                           postinc2	equ	0xFDE
  5538                           postdec2	equ	0xFDD
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function _RtccReadTime *****************
  5544 ;; Defined at:
  5545 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadTime.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  pTm             2    0[COMRAM] PTR struct .
  5548 ;;		 -> RtccTime(4), 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;  rTD0            8   10[COMRAM] struct .
  5551 ;;  rTD1            8    2[COMRAM] struct .
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      void 
  5554 ;; Registers used:
  5555 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5561 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5562 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5564 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5565 ;;Total ram usage:       18 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; This function calls:
  5568 ;;		Nothing
  5569 ;; This function is called by:
  5570 ;;		_Read_RTC
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text25
  5575  001F20                     __ptext25:
  5576                           	opt stack 0
  5577  001F20                     _RtccReadTime:
  5578                           	opt stack 29
  5579                           
  5580                           ;incstack = 0
  5581  001F20  0EFC               	movlw	252
  5582  001F22  010F               	movlb	15	; () banked
  5583  001F24  173F               	andwf	63,f,b	;volatile
  5584                           
  5585                           ; BSR set to: 15
  5586  001F26  010F               	movlb	15	; () banked
  5587  001F28  813F               	bsf	63,0,b	;volatile
  5588                           
  5589                           ; BSR set to: 15
  5590  001F2A  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  5591                           
  5592                           ; BSR set to: 15
  5593  001F2E  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  5594                           
  5595                           ; BSR set to: 15
  5596  001F32  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  5597                           
  5598                           ; BSR set to: 15
  5599  001F36  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  5600                           
  5601                           ; BSR set to: 15
  5602  001F3A  0EFC               	movlw	252
  5603  001F3C  010F               	movlb	15	; () banked
  5604  001F3E  173F               	andwf	63,f,b	;volatile
  5605  001F40  010F               	movlb	15	; () banked
  5606  001F42  813F               	bsf	63,0,b	;volatile
  5607                           
  5608                           ; BSR set to: 15
  5609  001F44  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  5610                           
  5611                           ; BSR set to: 15
  5612  001F48  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  5613                           
  5614                           ; BSR set to: 15
  5615  001F4C  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  5616                           
  5617                           ; BSR set to: 15
  5618  001F50  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  5619                           
  5620                           ; BSR set to: 15
  5621  001F54  5009               	movf	RtccReadTime@rTD1+6,w,c
  5622  001F56  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  5623  001F58  A4D8               	btfss	status,2,c
  5624  001F5A  D7E2               	goto	_RtccReadTime
  5625                           
  5626                           ; BSR set to: 15
  5627                           
  5628                           ; BSR set to: 15
  5629  001F5C  EE20 F003          	lfsr	2,3
  5630  001F60  5001               	movf	RtccReadTime@pTm,w,c
  5631  001F62  26D9               	addwf	fsr2l,f,c
  5632  001F64  5002               	movf	RtccReadTime@pTm+1,w,c
  5633  001F66  22DA               	addwfc	fsr2h,f,c
  5634  001F68  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  5635  001F6C  EE20 F002          	lfsr	2,2
  5636  001F70  5001               	movf	RtccReadTime@pTm,w,c
  5637  001F72  26D9               	addwf	fsr2l,f,c
  5638  001F74  5002               	movf	RtccReadTime@pTm+1,w,c
  5639  001F76  22DA               	addwfc	fsr2h,f,c
  5640  001F78  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  5641  001F7C  EE20 F001          	lfsr	2,1
  5642  001F80  5001               	movf	RtccReadTime@pTm,w,c
  5643  001F82  26D9               	addwf	fsr2l,f,c
  5644  001F84  5002               	movf	RtccReadTime@pTm+1,w,c
  5645  001F86  22DA               	addwfc	fsr2h,f,c
  5646  001F88  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  5647                           
  5648                           ; BSR set to: 15
  5649  001F8C  0012               	return		;funcret
  5650  001F8E                     __end_of_RtccReadTime:
  5651                           	opt stack 0
  5652                           tblptru	equ	0xFF8
  5653                           tblptrh	equ	0xFF7
  5654                           tblptrl	equ	0xFF6
  5655                           tablat	equ	0xFF5
  5656                           prodh	equ	0xFF4
  5657                           prodl	equ	0xFF3
  5658                           intcon	equ	0xFF2
  5659                           intcon2	equ	0xFF1
  5660                           indf0	equ	0xFEF
  5661                           postinc0	equ	0xFEE
  5662                           fsr0h	equ	0xFEA
  5663                           fsr0l	equ	0xFE9
  5664                           wreg	equ	0xFE8
  5665                           postdec1	equ	0xFE5
  5666                           fsr1l	equ	0xFE1
  5667                           indf2	equ	0xFDF
  5668                           postinc2	equ	0xFDE
  5669                           postdec2	equ	0xFDD
  5670                           fsr2h	equ	0xFDA
  5671                           fsr2l	equ	0xFD9
  5672                           status	equ	0xFD8
  5673                           
  5674 ;; *************** function _RtccReadDate *****************
  5675 ;; Defined at:
  5676 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\plib\rtcc\RtccReadDate.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  pDt             2    0[COMRAM] PTR struct .
  5679 ;;		 -> RtccDate(4), 
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;  rTD0            8   10[COMRAM] struct .
  5682 ;;  rTD1            8    2[COMRAM] struct .
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5693 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5695 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5696 ;;Total ram usage:       18 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		_Read_RTC
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           	psect	text26
  5706  001C36                     __ptext26:
  5707                           	opt stack 0
  5708  001C36                     _RtccReadDate:
  5709                           	opt stack 29
  5710                           
  5711                           ; BSR set to: 15
  5712                           ;incstack = 0
  5713  001C36  0EFC               	movlw	252
  5714  001C38  010F               	movlb	15	; () banked
  5715  001C3A  173F               	andwf	63,f,b	;volatile
  5716  001C3C  0E03               	movlw	3
  5717  001C3E  010F               	movlb	15	; () banked
  5718  001C40  133F               	iorwf	63,f,b	;volatile
  5719                           
  5720                           ; BSR set to: 15
  5721  001C42  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  5722                           
  5723                           ; BSR set to: 15
  5724  001C46  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  5725                           
  5726                           ; BSR set to: 15
  5727  001C4A  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  5728                           
  5729                           ; BSR set to: 15
  5730  001C4E  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  5731                           
  5732                           ; BSR set to: 15
  5733  001C52  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  5734                           
  5735                           ; BSR set to: 15
  5736  001C56  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  5737  001C5A  0EFC               	movlw	252
  5738  001C5C  010F               	movlb	15	; () banked
  5739  001C5E  173F               	andwf	63,f,b	;volatile
  5740  001C60  0E03               	movlw	3
  5741  001C62  010F               	movlb	15	; () banked
  5742  001C64  133F               	iorwf	63,f,b	;volatile
  5743                           
  5744                           ; BSR set to: 15
  5745  001C66  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  5746                           
  5747                           ; BSR set to: 15
  5748  001C6A  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  5749                           
  5750                           ; BSR set to: 15
  5751  001C6E  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  5752                           
  5753                           ; BSR set to: 15
  5754  001C72  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  5755                           
  5756                           ; BSR set to: 15
  5757  001C76  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  5758                           
  5759                           ; BSR set to: 15
  5760  001C7A  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  5761  001C7E  5005               	movf	RtccReadDate@rTD1+2,w,c
  5762  001C80  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  5763  001C82  A4D8               	btfss	status,2,c
  5764  001C84  D7D8               	goto	_RtccReadDate
  5765                           
  5766                           ; BSR set to: 15
  5767                           
  5768                           ; BSR set to: 15
  5769  001C86  EE20 F001          	lfsr	2,1
  5770  001C8A  5001               	movf	RtccReadDate@pDt,w,c
  5771  001C8C  26D9               	addwf	fsr2l,f,c
  5772  001C8E  5002               	movf	RtccReadDate@pDt+1,w,c
  5773  001C90  22DA               	addwfc	fsr2h,f,c
  5774  001C92  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  5775  001C96  EE20 F002          	lfsr	2,2
  5776  001C9A  5001               	movf	RtccReadDate@pDt,w,c
  5777  001C9C  26D9               	addwf	fsr2l,f,c
  5778  001C9E  5002               	movf	RtccReadDate@pDt+1,w,c
  5779  001CA0  22DA               	addwfc	fsr2h,f,c
  5780  001CA2  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  5781                           
  5782                           ; BSR set to: 15
  5783  001CA6  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  5784  001CAA  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  5785  001CAE  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  5786                           
  5787                           ; BSR set to: 15
  5788  001CB2  EE20 F003          	lfsr	2,3
  5789  001CB6  5001               	movf	RtccReadDate@pDt,w,c
  5790  001CB8  26D9               	addwf	fsr2l,f,c
  5791  001CBA  5002               	movf	RtccReadDate@pDt+1,w,c
  5792  001CBC  22DA               	addwfc	fsr2h,f,c
  5793  001CBE  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  5794                           
  5795                           ; BSR set to: 15
  5796  001CC2  0012               	return		;funcret
  5797  001CC4                     __end_of_RtccReadDate:
  5798                           	opt stack 0
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           intcon2	equ	0xFF1
  5807                           indf0	equ	0xFEF
  5808                           postinc0	equ	0xFEE
  5809                           fsr0h	equ	0xFEA
  5810                           fsr0l	equ	0xFE9
  5811                           wreg	equ	0xFE8
  5812                           postdec1	equ	0xFE5
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           tblptru	equ	0xFF8
  5821                           tblptrh	equ	0xFF7
  5822                           tblptrl	equ	0xFF6
  5823                           tablat	equ	0xFF5
  5824                           prodh	equ	0xFF4
  5825                           prodl	equ	0xFF3
  5826                           intcon	equ	0xFF2
  5827                           intcon2	equ	0xFF1
  5828                           indf0	equ	0xFEF
  5829                           postinc0	equ	0xFEE
  5830                           fsr0h	equ	0xFEA
  5831                           fsr0l	equ	0xFE9
  5832                           wreg	equ	0xFE8
  5833                           postdec1	equ	0xFE5
  5834                           fsr1l	equ	0xFE1
  5835                           indf2	equ	0xFDF
  5836                           postinc2	equ	0xFDE
  5837                           postdec2	equ	0xFDD
  5838                           fsr2h	equ	0xFDA
  5839                           fsr2l	equ	0xFD9
  5840                           status	equ	0xFD8
  5841                           
  5842                           	psect	rparam
  5843  0000                     tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           intcon	equ	0xFF2
  5850                           intcon2	equ	0xFF1
  5851                           indf0	equ	0xFEF
  5852                           postinc0	equ	0xFEE
  5853                           fsr0h	equ	0xFEA
  5854                           fsr0l	equ	0xFE9
  5855                           wreg	equ	0xFE8
  5856                           postdec1	equ	0xFE5
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8


Data Sizes:
    Strings     144
    Constant    14
    Data        26
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      92
    BANK0           160      0      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    main$2103	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[3]), STR_16(CODE[15]), STR_15(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_18(CODE[9]), STR_17(CODE[4]), buffer2(BANK0[20]), STR_14(CODE[8]), 
		 -> STR_13(CODE[8]), STR_12(CODE[8]), STR_11(CODE[8]), STR_10(CODE[8]), 
		 -> STR_9(CODE[8]), STR_8(CODE[8]), 

    array_seleccionar	PTR unsigned char [7] size(2) Largest target is 5
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _setHoraMinutoSegundo->_sprintf
    _setDiaSemana->_lcd_putrs
    _setDiaMesAnio->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _Write_RTC->_RtccWriteDate
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   67245
                                             39 COMRAM     5     5      0
                           _Read_RTC
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                      _setDiaMesAnio
                       _setDiaSemana
               _setHoraMinutoSegundo
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   29910
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
                      _setDiaMesAnio
                       _setDiaSemana
               _setHoraMinutoSegundo
 ---------------------------------------------------------------------------------
 (2) _setHoraMinutoSegundo                                 0     0      0   10270
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setDiaSemana                                         1     1      0    5239
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _setDiaMesAnio                                        0     0      0   10270
                          _Write_RTC
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    21     10    2562
                                             12 COMRAM    27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     411
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3474
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2517
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1765
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _Write_RTC                                            0     0      0    2469
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _RtccWriteTime                                       11     8      3     561
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWriteDate                                       13    10      3     696
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     932
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     730
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     708
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     992
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     449
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     543
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _setDiaMesAnio
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _setDiaSemana
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _setHoraMinutoSegundo
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
     _setDiaMesAnio
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _setDiaSemana
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _setHoraMinutoSegundo
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3E       5       38.8%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     2C      5C       1       96.8%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9A       6        0.0%
DATA                 0      0      9A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 15 21:07:33 2017

                            _a 0035                              _b 0033                              _c 0031  
                            _i 0039                              _j 0037                              _k 002F  
               ?_lcd_send_byte 0003                   ___awdiv@sign 0006            ___wmul@multiplicand 0003  
                  lcd_comand@d 0005                   __CFG_CP0$OFF 000000                            l200 10F0  
                          l201 10F8                            l211 119A                            l220 1188  
                          l301 1DF2                            l141 16F4                            l213 1158  
                          l214 1160                            l206 1116                            l303 1E14  
                          l143 1724                            l207 1120                            l160 1EDC  
                          l240 1230                            l224 1202                            l232 11E6  
                          l313 20CA                            l145 1754                            l233 11F0  
                          l314 209A                            l250 12D2                            l226 11C0  
                          l170 0FF2                            l155 1D64                            l147 1784  
                          l139 16C6                            l227 11C8                            l219 117E  
                          l171 102C                            l308 21CE                            l316 20A6  
                          l156 1D80                            l172 137E                            l252 1290  
                          l180 106A                            l317 20B2                            l149 17B4  
                          l253 1298                            l237 126A                            l245 124E  
                          l181 1070                            l318 20BE                            l334 206E  
                          l350 13C0                            l246 1258                            l174 104C  
                          l335 2046                            l263 133A                            l271 131E  
                          l239 1228                            l175 1050                            l360 152C  
                          l352 13D4                            l272 1328                            l353 13CE  
                          l265 12F8                            l193 10BE                            l169 0FB4  
                          l450 19F0                            l370 14E4                            l266 1300  
                          l258 12B6                            l194 10C8                            l451 1A4E  
                          l371 14D4                            l363 1460                            l259 12C0  
                          l187 1098                            l444 198C                            l364 1488  
                          l188 10A0                            l701 2216                            l373 1514  
                          l365 1496                            l349 13A6                            l382 15C0  
                          l374 14F6                            l366 1492                            l358 1402  
                          l198 1132                            l455 1A58                            l383 15C8  
                          l296 2186                            l480 1B4A                            l392 166A  
                          l384 15EC                            l368 14CA                            l297 2188  
                          l473 1A9E                            l393 1618                            l377 1526  
                          l378 1554                            l484 1B54                            l660 1D26  
                          l661 1D30                            l653 1CD8                            l662 1D3E  
                          l654 1CE8                            l479 1AF2                            l656 1D06  
                          l920 203A                            l657 1CFE                            l930 2160  
                          l915 2010                            l916 2008                            l836 21FA  
                          l925 213E                            l926 2136                            l687 2226  
                          l919 2030                            l929 2156                            _dia 0054  
                          _mes 0058                            wreg 000FE8                RtccReadDate@pDt 0001  
                  lcd_gotoxy@x 0006                    lcd_gotoxy@y 0005                           l2533 14D4  
                         l2539 14F6                           l2559 1570                           l2773 1E0C  
                         l2759 1DEA                           STR_1 0F7A                           STR_2 0F75  
                         STR_3 0F93                           STR_4 0F8E                           STR_5 0F7F  
                         STR_6 0F89                           STR_7 0F84                           STR_8 0F5E  
                         STR_9 0F36                           u1500 1E5E                           u2140 15F4  
                         u2310 1E02                           u2150 1612                           u3007 1262  
                         u1520 1E78                           u2160 1672                           u3017 12CA  
                         u2170 168A                           u2090 159C                           u2410 1054  
                         u3107 17DA                           u3027 1332                           u1540 1E94  
                         u3117 2218                           u3037 1390                           u1518 1E60  
                         u2270 1D58                           u2510 10CC                           u3127 2228  
                         u3047 16BC                           u1480 1E46                           u2280 1D74  
                         u2440 1074                           u3057 16EA                           u1538 1E7A  
                         u2290 1EC0                           u3067 171A                           u2620 1164  
                         u3077 174A                           u1558 1E96                           u1910 2014  
                         u2550 10FC                           u3087 177A                           u2720 11F4  
                         u2480 10A4                           u3097 17AA                           u1498 1E48  
                         u2650 118C                           u1940 2142                           u2900 1304  
                         u2580 1124                           u1870 1D0A                           u2830 129C  
                         u1960 2066                           u2760 1234                           u1970 208E  
                         u2930 132C                           u2690 11CC                           u2860 12C4  
                         u2790 125C                           u1967 205C                           u1977 2084  
                         u2957 0FE8                           u2967 1022                           u2977 112A  
                         u2987 1192                           u2997 11FA               ?_lcd_send_nibble 0001  
                         _anio 005A                           _flag 02E0                           _main 0FA0  
                         _hora 0052                           fsr0h 000FEA                           indf0 000FEF  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                  __CFG_T1DIG$ON 000000  
                         prodh 000FF4                           prodl 000FF3                           start 0000  
                __CFG_IESO$OFF 000000               RtccReadDate@rTD0 000B               RtccReadDate@rTD1 0003  
                 ___param_bank 000000                RtccReadTime@pTm 0001                    _Delay1KTCYx 2214  
                __CFG_PLLDIV$1 000000                          ?_main 0001                __end_of___awdiv 1D48  
                        STR_10 0F46                          STR_11 0F56                          STR_20 0F6E  
                        STR_12 0F4E                          STR_13 0F66                          STR_14 0F3E  
                        STR_15 0F0F                          STR_16 0F1E                          STR_17 0F98  
                        STR_18 0F2D                          STR_19 0F9C          __size_of_Delay100TCYx 0010  
              ___awdiv@divisor 0003                __end_of___lwdiv 2044                __end_of___lwmod 216A  
              ___awdiv@counter 0005                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                 __CFG_FCMEN$OFF 000000                __end_of_dpowers 0F0B  
                        _mes_d 003E                          _mes_u 003F                __end_of_isdigit 2202  
                        _setup 20E0                 __pbitbssCOMRAM 02E0                          tablat 000FF5  
         _setHoraMinutoSegundo 1EB0                   lcd_putrs@ptr 0009                          status 000FD8  
              __end_of_sprintf 1698        __CFG_DSWDTOSC$INTOSCREF 000000                __initialization 1F8E  
                 _Delay100TCYx 2224                   __end_of_main 139C                ??_lcd_send_byte 0004  
             RtccReadTime@rTD0 000B               RtccReadTime@rTD1 0003               __end_of_Read_RTC 1C36  
                       ??_main 0028                  __activetblptr 000002               __end_of_RtccWrOn 2214  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         _EECON2 000FA7  
                       _ANCON0 000F48                         _ANCON1 000F49               ___awdiv@dividend 0001  
                       ?_setup 0001          ?_setHoraMinutoSegundo 0001                 __CFG_WDTEN$OFF 000000  
             RtccWriteDate@pDt 0001                         _RTCCFG 000F3F                 __CFG_WPCFG$OFF 000000  
               __CFG_WPDIS$OFF 000000                 __CFG_XINST$OFF 000000               __end_of_lcd_init 1E3A  
             __end_of_lcd_putc 20E0                         ___wmul 219C                      ??___awdiv 0005  
               __CFG_STVREN$ON 000000                         _diasem 0056                         _anio_d 003B  
                       _anio_u 003C                      ??___lwdiv 0005                      ??___lwmod 000C  
                       _hora_d 0042                         _hora_u 0043                         clear_0 1FD4  
                       clear_1 1FE2               ___awdiv@quotient 0007                         _minuto 0050  
        __end_of_RtccWriteDate 1A62          __end_of_RtccWriteTime 1B5E               RtccWriteTime@pTm 0001  
                 __pdataCOMRAM 0050                      ??_isdigit 0001                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                    ??_sprintf 0017                     __accesstop 0060        __end_of__initialization 1FE8  
           __size_of_Write_RTC 0148                  ___rparam_used 000001                  ?_setDiaSemana 0001  
               __pcstackCOMRAM 0001                   __pidataBANK0 2234                  __end_of_setup 2128  
              __CFG_DSWDTPS$G2 000000                __CFG_OSC$INTOSC 000000              lcd_gotoxy@address 0007  
           __size_of_lcd_putrs 0052         ??_setHoraMinutoSegundo 0028                   sprintf@width 0025  
                      ??_setup 0028                     __pbssBANK0 0060                      ?_Read_RTC 0001  
                   _dia_semana 003D      RtccWriteTime@tempHourWDay 000A                 ??_setDiaSemana 000B  
                    ?_RtccWrOn 0001                 lcd_send_byte@n 0003                        ?___wmul 0001  
                ?_RtccReadDate 0001                  ?_RtccReadTime 0001                   ?_Delay1KTCYx 0001  
       __size_of_setDiaMesAnio 007C              __end_of_Write_RTC 192C                     _lcd_comand 2242  
                   _lcd_gotoxy 21C2                        _RTCVALH 000F99                        _RTCVALL 000F98  
                    ?_lcd_init 0001                      ?_lcd_putc 0001                     ??_Read_RTC 0013  
                      __Hparam 0000                        __Lparam 0000       __size_of_lcd_send_nibble 0076  
                   ??_RtccWrOn 0001                 ??_RtccReadDate 0003                 ??_RtccReadTime 0003  
                      ___awdiv 1CC4              __end_of_lcd_putrs 2096                __size_of___wmul 0026  
                      ___lwdiv 1FF2                        ___lwmod 2128                   __psmallconst 0F00  
                  _RtccTimeVal 0078                        __pcinit 1F8E                        _fecha_d 0040  
                      _fecha_u 0041                        __ramtop 0F00                        __ptext0 0FA0  
                      __ptext1 20E0                        __ptext2 1EB0                        __ptext3 1698  
                      __ptext4 1D48                        __ptext5 139C                        __ptext6 21E4  
                      __ptext7 219C                        __ptext8 2128                        __ptext9 1FF2  
                      _buffer2 007C                      _T1CONbits 000FCD                        _dpowers 0F01  
                      _isdigit 21E4                        _segundo 002D                        _sprintf 139C  
                   ??_lcd_init 0005                     ??_lcd_putc 0008           end_of_initialization 1FE8  
                _setDiaMesAnio 1D48           lcd_send_byte@address 0004                  __Lmediumconst 0000  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE          __end_of_lcd_send_byte 219C                      _PORTAbits 000F80  
             __CFG_DSBOREN$OFF 000000           __end_of_setDiaSemana 17E4                    ?_lcd_comand 0001  
             __CFG_CPUDIV$OSC1 000000                      _TRISBbits 000F93                    ?_lcd_gotoxy 0005  
              _LCD_INIT_STRING 0F0B                 ?_setDiaMesAnio 0001               __CFG_IOL1WAY$OFF 000000  
    RtccWriteDate@tempDayMonth 000A            __CFG_MSSP7B_EN$MSK7 000000               Delay100TCYx@unit 0001  
               __end_of___wmul 21C2                  __pidataCOMRAM 2250      RtccWriteDate@tempHourWDay 000C  
            ??_lcd_send_nibble 0001           __size_of_Delay1KTCYx 0010               __CFG_DSWDTEN$OFF 000000  
          start_initialization 1F8E           __end_of_RtccReadDate 1CC4           __end_of_RtccReadTime 1F8E  
         RtccWriteTime@wasAlrm 0006           RtccWriteTime@wasWrEn 0007         __size_of_RtccWriteDate 0136  
              RtccWriteDate@di 0003         __size_of_RtccWriteTime 00FC              __size_of_Read_RTC 00D8  
          __size_of_lcd_comand 000E            __size_of_lcd_gotoxy 0022                       ??___wmul 0005  
                  __pdataBANK0 0090              __size_of_RtccWrOn 0012                RtccWriteTime@di 0003  
             __CFG_LPT1OSC$OFF 000000                    _ALRMCFGbits 000F91        __end_of_LCD_INIT_STRING 0F0F  
                  __pbssCOMRAM 002D          main@boton_seleccionar 002B                      _Write_RTC 17E4  
              ??_setDiaMesAnio 0028                   _isdigit$1752 0002                Delay1KTCYx@unit 0001  
__size_of_setHoraMinutoSegundo 0070              __size_of_lcd_init 0076                    sprintf@flag 001B  
            __size_of_lcd_putc 004A                    sprintf@prec 001E               ___lwdiv@dividend 0001  
                ?_Delay100TCYx 0001                       ?___awdiv 0001                       ?___lwdiv 0001  
                     ?___lwmod 0008          __size_of_setDiaSemana 014C        RtccWriteTime@tempMinSec 0008  
                    _lcd_putrs 2044        main@boton_centro_estado 0029                  _RtccWriteDate 192C  
                  __smallconst 0F00                  _RtccWriteTime 1A62                       ?_isdigit 0001  
         __CFG_RTCOSC$T1OSCREF 000000                     ?_Write_RTC 0001               ___lwdiv@quotient 0005  
                     ?_sprintf 000D                 __size_of_setup 0048               _RtccAlrmTimeDate 0068  
               ___wmul@product 0005                       _LATBbits 000F8A                       _PIE3bits 000FA3  
                 _setDiaSemana 1698                      _segundo_d 0046                 ??_Delay100TCYx 0001  
                    _segundo_u 0047               __CFG_WDTPS$32768 000000             RtccWriteDate@wasOn 0005  
           _Rtcc_read_TimeDate 0060                 ?_RtccWriteDate 0001                     ?_lcd_putrs 0009  
            ___wmul@multiplier 0001                 ?_RtccWriteTime 0001                      lcd_init@i 0005  
        __size_of_RtccReadDate 008E                   ??_lcd_comand 0005                      lcd_putc@c 0008  
        __size_of_RtccReadTime 006E                   ??_lcd_gotoxy 0006                    _INTCON2bits 000FF1  
                    copy_data0 1FA2                      copy_data1 1FC2                       _Read_RTC 1B5E  
            _array_seleccionar 0090                _lcd_send_nibble 1E3A                       __Hrparam 0000  
                     _RtccDate 0048                       __Lrparam 0000                       _RtccTime 004C  
                     _RtccWrOn 2202             __end_of_lcd_comand 2250             __end_of_lcd_gotoxy 21E4  
                 _RtccReadDate 1C36               __size_of___awdiv 0084                   _RtccReadTime 1F20  
             __size_of___lwdiv 0052               __size_of___lwmod 0042                   _RtccTimeDate 0070  
                   sprintf@len 0023                     sprintf@val 001C               __size_of_isdigit 001E  
              ___lwdiv@divisor 0003                    ??_Write_RTC 000E                ___lwdiv@counter 0007  
                     __ptext10 2044                       __ptext11 2096                       __ptext20 2242  
                     __ptext12 21C2                       __ptext21 216A                       __ptext13 17E4  
                     __ptext22 1E3A                       __ptext14 1CC4                       __ptext23 2224  
                     __ptext15 1A62                       __ptext24 1B5E                       __ptext16 192C  
                     __ptext25 1F20                       __ptext17 2202                       __ptext26 1C36  
                     __ptext18 1DC4                       __ptext19 2214                       _lcd_init 1DC4  
                     _lcd_putc 2096               __size_of_sprintf 02FC         __size_of_lcd_send_byte 0032  
                __size_of_main 03FC                       _minuto_d 0044                       _minuto_u 0045  
                ??_Delay1KTCYx 0001                ??_RtccWriteDate 0004                ??_RtccWriteTime 0004  
                  ??_lcd_putrs 000B                    _OSCTUNEbits 000F9B                     _INTCONbits 000FF2  
           RtccWriteTime@wasOn 0005           __end_of_Delay100TCYx 2234                       isdigit@c 0003  
                    sprintf@ap 001F                      sprintf@cp 0021        __end_of_lcd_send_nibble 1EB0  
                    sprintf@sp 000D               ___lwmod@dividend 0008                     _OSCCONbits 000FD3  
        RtccWriteDate@tempYear 0007   __end_of_setHoraMinutoSegundo 1F20                  _lcd_send_byte 216A  
                   _RTCCFGbits 000F3F                       sprintf@c 0027                       sprintf@f 000F  
              ___lwmod@divisor 000A            __end_of_Delay1KTCYx 2224                ___lwmod@counter 000C  
         RtccWriteDate@wasAlrm 0006           RtccWriteDate@wasWrEn 0009          __end_of_setDiaMesAnio 1DC4  
        lcd_send_nibble@nibble 0002  
