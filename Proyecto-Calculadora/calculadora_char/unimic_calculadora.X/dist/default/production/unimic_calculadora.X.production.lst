

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 01 20:58:35 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 1.43
    35                           ; Generated 25/07/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F26J50 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	idataCOMRAM
    70  001874                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _operador
    74  001874  15                 	db	low (STR_3+1)
    75  001875  0F                 	db	high (STR_3+1)
    76                           
    77                           ;initializer for _minuto
    78  001876  001E               	dw	30
    79                           
    80                           ;initializer for _hora
    81  001878  0012               	dw	18
    82                           
    83                           ;initializer for _dia
    84  00187A  0008               	dw	8
    85                           
    86                           ;initializer for _diasem
    87  00187C  0003               	dw	3
    88                           
    89                           ;initializer for _mes
    90  00187E  0009               	dw	9
    91                           
    92                           ;initializer for _anio
    93  001880  000F               	dw	15
    94                           
    95                           	psect	smallconst
    96  000F00                     __psmallconst:
    97                           	opt stack 0
    98  000F00  00                 	db	0
    99  000F01                     _dpowers:
   100                           	opt stack 0
   101  000F01  0001               	dw	1
   102  000F03  000A               	dw	10
   103  000F05  0064               	dw	100
   104  000F07  03E8               	dw	1000
   105  000F09  2710               	dw	10000
   106  000F0B                     __end_of_dpowers:
   107                           	opt stack 0
   108  000F0B                     _LCD_INIT_STRING:
   109                           	opt stack 0
   110  000F0B  28                 	db	40
   111  000F0C  0C                 	db	12
   112  000F0D  01                 	db	1
   113  000F0E  06                 	db	6
   114  000F0F                     __end_of_LCD_INIT_STRING:
   115                           	opt stack 0
   116  0000                     _ANCON0	set	3912
   117  0000                     _RTCCFGbits	set	3903
   118  0000                     _TRISBbits	set	3987
   119  0000                     _PORTCbits	set	3970
   120  0000                     _PORTAbits	set	3968
   121  0000                     _LATBbits	set	3978
   122  0000                     _T1CONbits	set	4045
   123  0000                     _ADCON1	set	4033
   124  0000                     _ADCON0	set	4034
   125  0000                     _INTCON2bits	set	4081
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISA	set	3986
   129  0000                     _OSCCONbits	set	4051
   130  0000                     _OSCTUNEbits	set	3995
   131  0000                     _PIE3bits	set	4003
   132  000F0F                     STR_2:
   133  000F0F  25                 	db	37
   134  000F10  30                 	db	48	;'0'
   135  000F11  31                 	db	49	;'1'
   136  000F12  75                 	db	117	;'u'
   137  000F13  00                 	db	0
   138  000F14                     STR_3:
   139  000F14  25                 	db	37
   140  000F15  00                 	db	0
   141  000F16                     STR_10:
   142  000F16  2B                 	db	43
   143  000F17  00                 	db	0
   144  000F18                     STR_7:
   145  000F18  2D                 	db	45
   146  000F19  00                 	db	0
   147  000F1A                     STR_5:
   148  000F1A  78                 	db	120	;'x'
   149  000F1B  00                 	db	0
   150  0000                     
   151                           ; #config settings
   152  000F1C  00                 	db	0	; dummy byte at the end
   153  0000                     
   154                           	psect	cinit
   155  0016CC                     __pcinit:
   156                           	opt stack 0
   157  0016CC                     start_initialization:
   158                           	opt stack 0
   159  0016CC                     __initialization:
   160                           	opt stack 0
   161                           
   162                           ; Initialize objects allocated to COMRAM (14 bytes)
   163                           ; load TBLPTR registers with __pidataCOMRAM
   164  0016CC  0E74               	movlw	low __pidataCOMRAM
   165  0016CE  6EF6               	movwf	tblptrl,c
   166  0016D0  0E18               	movlw	high __pidataCOMRAM
   167  0016D2  6EF7               	movwf	tblptrh,c
   168  0016D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   169  0016D6  6EF8               	movwf	tblptru,c
   170  0016D8  EE00  F051         	lfsr	0,__pdataCOMRAM
   171  0016DC  EE10 F00E          	lfsr	1,14
   172  0016E0                     copy_data0:
   173  0016E0  0009               	tblrd		*+
   174  0016E2  CFF5 FFEE          	movff	tablat,postinc0
   175  0016E6  50E5               	movf	postdec1,w,c
   176  0016E8  50E1               	movf	fsr1l,w,c
   177  0016EA  E1FA               	bnz	copy_data0
   178                           
   179                           ; Clear objects allocated to BANK0 (70 bytes)
   180  0016EC  EE00  F060         	lfsr	0,__pbssBANK0
   181  0016F0  0E46               	movlw	70
   182  0016F2                     clear_0:
   183  0016F2  6AEE               	clrf	postinc0,c
   184  0016F4  06E8               	decf	wreg,f,c
   185  0016F6  E1FD               	bnz	clear_0
   186                           
   187                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   188  0016F8  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   189                           
   190                           ; Clear objects allocated to COMRAM (31 bytes)
   191  0016FA  EE00  F032         	lfsr	0,__pbssCOMRAM
   192  0016FE  0E1F               	movlw	31
   193  001700                     clear_1:
   194  001700  6AEE               	clrf	postinc0,c
   195  001702  06E8               	decf	wreg,f,c
   196  001704  E1FD               	bnz	clear_1
   197  001706                     end_of_initialization:
   198                           	opt stack 0
   199  001706                     __end_of__initialization:
   200                           	opt stack 0
   201  001706  0E00               	movlw	low (__Lmediumconst shr (0+16))
   202  001708  6EF8               	movwf	tblptru,c
   203  00170A  0100               	movlb	0
   204  00170C  EF8F  F007         	goto	_main	;jump to C main() function
   205                           tblptru	equ	0xFF8
   206                           tblptrh	equ	0xFF7
   207                           tblptrl	equ	0xFF6
   208                           tablat	equ	0xFF5
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           postdec1	equ	0xFE5
   212                           fsr1l	equ	0xFE1
   213                           
   214                           	psect	bitbssCOMRAM
   215  0002F8                     __pbitbssCOMRAM:
   216                           	opt stack 0
   217  0002F8                     _flag:
   218                           	opt stack 0
   219  0002F8                     	ds	1
   220                           tblptru	equ	0xFF8
   221                           tblptrh	equ	0xFF7
   222                           tblptrl	equ	0xFF6
   223                           tablat	equ	0xFF5
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           postdec1	equ	0xFE5
   227                           fsr1l	equ	0xFE1
   228                           
   229                           	psect	bssCOMRAM
   230  000032                     __pbssCOMRAM:
   231                           	opt stack 0
   232  000032                     _contador_numeros_ingresados_der:
   233                           	opt stack 0
   234  000032                     	ds	2
   235  000034                     _contador_numeros_ingresados_izq:
   236                           	opt stack 0
   237  000034                     	ds	2
   238  000036                     _flag_sentido_escritura:
   239                           	opt stack 0
   240  000036                     	ds	2
   241  000038                     _segundo:
   242                           	opt stack 0
   243  000038                     	ds	2
   244  00003A                     _i:
   245                           	opt stack 0
   246  00003A                     	ds	2
   247  00003C                     _anio_d:
   248                           	opt stack 0
   249  00003C                     	ds	1
   250  00003D                     _anio_u:
   251                           	opt stack 0
   252  00003D                     	ds	1
   253  00003E                     _dia_semana:
   254                           	opt stack 0
   255  00003E                     	ds	1
   256  00003F                     _mes_d:
   257                           	opt stack 0
   258  00003F                     	ds	1
   259  000040                     _mes_u:
   260                           	opt stack 0
   261  000040                     	ds	1
   262  000041                     _fecha_d:
   263                           	opt stack 0
   264  000041                     	ds	1
   265  000042                     _fecha_u:
   266                           	opt stack 0
   267  000042                     	ds	1
   268  000043                     _hora_d:
   269                           	opt stack 0
   270  000043                     	ds	1
   271  000044                     _hora_u:
   272                           	opt stack 0
   273  000044                     	ds	1
   274  000045                     _minuto_d:
   275                           	opt stack 0
   276  000045                     	ds	1
   277  000046                     _minuto_u:
   278                           	opt stack 0
   279  000046                     	ds	1
   280  000047                     _segundo_d:
   281                           	opt stack 0
   282  000047                     	ds	1
   283  000048                     _segundo_u:
   284                           	opt stack 0
   285  000048                     	ds	1
   286  000049                     _RtccDate:
   287                           	opt stack 0
   288  000049                     	ds	4
   289  00004D                     _RtccTime:
   290                           	opt stack 0
   291  00004D                     	ds	4
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           postdec1	equ	0xFE5
   299                           fsr1l	equ	0xFE1
   300                           
   301                           	psect	dataCOMRAM
   302  000051                     __pdataCOMRAM:
   303                           	opt stack 0
   304  000051                     _operador:
   305                           	opt stack 0
   306  000051                     	ds	2
   307  000053                     _minuto:
   308                           	opt stack 0
   309  000053                     	ds	2
   310  000055                     _hora:
   311                           	opt stack 0
   312  000055                     	ds	2
   313  000057                     _dia:
   314                           	opt stack 0
   315  000057                     	ds	2
   316  000059                     _diasem:
   317                           	opt stack 0
   318  000059                     	ds	2
   319  00005B                     _mes:
   320                           	opt stack 0
   321  00005B                     	ds	2
   322  00005D                     _anio:
   323                           	opt stack 0
   324  00005D                     	ds	2
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           postdec1	equ	0xFE5
   332                           fsr1l	equ	0xFE1
   333                           
   334                           	psect	bssBANK0
   335  000060                     __pbssBANK0:
   336                           	opt stack 0
   337  000060                     _Rtcc_read_TimeDate:
   338                           	opt stack 0
   339  000060                     	ds	8
   340  000068                     _RtccAlrmTimeDate:
   341                           	opt stack 0
   342  000068                     	ds	8
   343  000070                     _RtccTimeDate:
   344                           	opt stack 0
   345  000070                     	ds	8
   346  000078                     _array_lcd_der:
   347                           	opt stack 0
   348  000078                     	ds	6
   349  00007E                     _array_lcd_izq:
   350                           	opt stack 0
   351  00007E                     	ds	6
   352  000084                     _RtccTimeVal:
   353                           	opt stack 0
   354  000084                     	ds	4
   355  000088                     _k:
   356                           	opt stack 0
   357  000088                     	ds	2
   358  00008A                     _c:
   359                           	opt stack 0
   360  00008A                     	ds	2
   361  00008C                     _b:
   362                           	opt stack 0
   363  00008C                     	ds	2
   364  00008E                     _a:
   365                           	opt stack 0
   366  00008E                     	ds	2
   367  000090                     _j:
   368                           	opt stack 0
   369  000090                     	ds	2
   370  000092                     _buffer2:
   371                           	opt stack 0
   372  000092                     	ds	20
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	cstackCOMRAM
   383  000001                     __pcstackCOMRAM:
   384                           	opt stack 0
   385  000001                     ??_isdigit:
   386  000001                     ??_lcd_send_nibble:
   387  000001                     ?___wmul:
   388                           	opt stack 0
   389  000001                     ?___lwdiv:
   390                           	opt stack 0
   391  000001                     Delay100TCYx@unit:
   392                           	opt stack 0
   393  000001                     Delay1KTCYx@unit:
   394                           	opt stack 0
   395  000001                     ___wmul@multiplier:
   396                           	opt stack 0
   397  000001                     ___lwdiv@dividend:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x0
   401  000001                     	ds	1
   402  000002                     lcd_send_nibble@nibble:
   403                           	opt stack 0
   404  000002                     _isdigit$1892:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x1
   408  000002                     	ds	1
   409  000003                     lcd_send_byte@n:
   410                           	opt stack 0
   411  000003                     isdigit@c:
   412                           	opt stack 0
   413  000003                     ___wmul@multiplicand:
   414                           	opt stack 0
   415  000003                     ___lwdiv@divisor:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x2
   419  000003                     	ds	1
   420  000004                     lcd_send_byte@address:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x3
   424  000004                     	ds	1
   425  000005                     lcd_init@i:
   426                           	opt stack 0
   427  000005                     lcd_gotoxy@y:
   428                           	opt stack 0
   429  000005                     lcd_comand@d:
   430                           	opt stack 0
   431  000005                     ___wmul@product:
   432                           	opt stack 0
   433  000005                     ___lwdiv@quotient:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x4
   437  000005                     	ds	1
   438  000006                     lcd_gotoxy@x:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x5
   442  000006                     	ds	1
   443  000007                     lcd_gotoxy@address:
   444                           	opt stack 0
   445  000007                     ___lwdiv@counter:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x6
   449  000007                     	ds	1
   450  000008                     ?___lwmod:
   451                           	opt stack 0
   452  000008                     lcd_putc@c:
   453                           	opt stack 0
   454  000008                     ___lwmod@dividend:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x7
   458  000008                     	ds	1
   459  000009                     lcd_putrs@ptr:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x8
   463  000009                     	ds	1
   464  00000A                     ___lwmod@divisor:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x9
   468  00000A                     	ds	1
   469  00000B                     
   470                           ; 1 bytes @ 0xA
   471  00000B                     	ds	1
   472  00000C                     ___lwmod@counter:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0xB
   476  00000C                     	ds	1
   477  00000D                     ?_sprintf:
   478                           	opt stack 0
   479  00000D                     sprintf@sp:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0xC
   483  00000D                     	ds	2
   484  00000F                     sprintf@f:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0xE
   488  00000F                     	ds	4
   489  000013                     ??_sprintf:
   490                           
   491                           ; 1 bytes @ 0x12
   492  000013                     	ds	4
   493  000017                     sprintf@ap:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x16
   497  000017                     	ds	2
   498  000019                     sprintf@flag:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x18
   502  000019                     	ds	1
   503  00001A                     sprintf@val:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x19
   507  00001A                     	ds	2
   508  00001C                     sprintf@prec:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1B
   512  00001C                     	ds	1
   513  00001D                     sprintf@width:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x1C
   517  00001D                     	ds	2
   518  00001F                     sprintf@c:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1E
   522  00001F                     	ds	1
   523  000020                     write_in_lcd@key:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x1F
   527  000020                     	ds	2
   528  000022                     escribir_numero@num:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x21
   532  000022                     	ds	2
   533  000024                     ??_escribir_numero:
   534                           
   535                           ; 1 bytes @ 0x23
   536  000024                     	ds	2
   537  000026                     escribir_numero@i:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x25
   541  000026                     	ds	2
   542  000028                     escribir_numero@i_784:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x27
   546  000028                     	ds	2
   547  00002A                     ??_main:
   548                           
   549                           ; 1 bytes @ 0x29
   550  00002A                     	ds	2
   551  00002C                     main@num_der:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x2B
   555  00002C                     	ds	1
   556  00002D                     main@i:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2C
   560  00002D                     	ds	2
   561  00002F                     main@j:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x2E
   565  00002F                     	ds	2
   566  000031                     main@num_izq:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x30
   570  000031                     	ds	1
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           
   580 ;;
   581 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   582 ;;
   583 ;; *************** function _main *****************
   584 ;; Defined at:
   585 ;;		line 74 in file "main.c"
   586 ;; Parameters:    Size  Location     Type
   587 ;;		None
   588 ;; Auto vars:     Size  Location     Type
   589 ;;  j               2   46[COMRAM] int 
   590 ;;  i               2   44[COMRAM] int 
   591 ;;  num_izq         1   48[COMRAM] unsigned char 
   592 ;;  num_der         1   43[COMRAM] unsigned char 
   593 ;; Return value:  Size  Location     Type
   594 ;;                  2  171[None  ] int 
   595 ;; Registers used:
   596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   603 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   605 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   606 ;;Total ram usage:        8 bytes
   607 ;; Hardware stack levels required when called:    7
   608 ;; This function calls:
   609 ;;		_Setup
   610 ;;		_escribir_numero
   611 ;;		_lcd_gotoxy
   612 ;;		_lcd_init
   613 ;;		_lcd_putrs
   614 ;;		_write_in_lcd
   615 ;; This function is called by:
   616 ;;		Startup code after reset
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text0
   621  000F1E                     __ptext0:
   622                           	opt stack 0
   623  000F1E                     _main:
   624                           	opt stack 24
   625                           
   626                           ;main.c: 75: Setup();
   627                           
   628                           ;incstack = 0
   629  000F1E  ECA9  F00B         	call	_Setup	;wreg free
   630  000F22                     
   631                           ;main.c: 80: PORTAbits.RA7 = 1;
   632  000F22  8E80               	bsf	3968,7,c	;volatile
   633                           
   634                           ;main.c: 81: PORTAbits.RA6 = 0;
   635  000F24  9C80               	bcf	3968,6,c	;volatile
   636                           
   637                           ;main.c: 82: PORTAbits.RA5 = 0;
   638  000F26  9A80               	bcf	3968,5,c	;volatile
   639                           
   640                           ;main.c: 83: PORTAbits.RA3 = 0;
   641  000F28  9680               	bcf	3968,3,c	;volatile
   642                           
   643                           ;main.c: 85: if (PORTAbits.RA2 == 1) {
   644  000F2A  A480               	btfss	3968,2,c	;volatile
   645  000F2C  D008               	goto	u1300
   646                           
   647                           ;main.c: 86: escribir_numero(7);
   648  000F2E  0E07               	movlw	7
   649  000F30  6E22               	movwf	escribir_numero@num,c
   650  000F32  0E00               	movlw	0
   651  000F34  6E23               	movwf	escribir_numero@num+1,c
   652  000F36  EC02  F00A         	call	_escribir_numero	;wreg free
   653  000F3A  B480               	btfsc	3968,2,c	;volatile
   654  000F3C  D7FE               	goto	l175
   655  000F3E                     u1300:
   656                           
   657                           ;main.c: 89: };
   658                           ;main.c: 91: if (PORTAbits.RA1 == 1) {
   659                           
   660                           ;main.c: 88: };
   661  000F3E  A280               	btfss	3968,1,c	;volatile
   662  000F40  D008               	goto	u1320
   663                           
   664                           ;main.c: 92: escribir_numero(8);
   665  000F42  0E08               	movlw	8
   666  000F44  6E22               	movwf	escribir_numero@num,c
   667  000F46  0E00               	movlw	0
   668  000F48  6E23               	movwf	escribir_numero@num+1,c
   669  000F4A  EC02  F00A         	call	_escribir_numero	;wreg free
   670  000F4E  B280               	btfsc	3968,1,c	;volatile
   671  000F50  D7FE               	goto	l179
   672  000F52                     u1320:
   673                           
   674                           ;main.c: 95: };
   675                           ;main.c: 97: if (PORTAbits.RA0 == 1) {
   676                           
   677                           ;main.c: 94: };
   678  000F52  A080               	btfss	3968,0,c	;volatile
   679  000F54  D008               	goto	u1340
   680                           
   681                           ;main.c: 98: escribir_numero(9);
   682  000F56  0E09               	movlw	9
   683  000F58  6E22               	movwf	escribir_numero@num,c
   684  000F5A  0E00               	movlw	0
   685  000F5C  6E23               	movwf	escribir_numero@num+1,c
   686  000F5E  EC02  F00A         	call	_escribir_numero	;wreg free
   687  000F62  B080               	btfsc	3968,0,c	;volatile
   688  000F64  D7FE               	goto	l183
   689  000F66                     u1340:
   690                           
   691                           ;main.c: 101: };
   692                           ;main.c: 103: if (PORTCbits.RC0 == 1) {
   693                           
   694                           ;main.c: 100: };
   695  000F66  A082               	btfss	3970,0,c	;volatile
   696  000F68  D015               	goto	u1360
   697                           
   698                           ;main.c: 104: lcd_gotoxy(8, 1);
   699  000F6A  0E01               	movlw	1
   700  000F6C  6E05               	movwf	lcd_gotoxy@y,c
   701  000F6E  0E08               	movlw	8
   702  000F70  EC0A  F00C         	call	_lcd_gotoxy
   703                           
   704                           ;main.c: 105: lcd_putrs("%");
   705  000F74  0E14               	movlw	low STR_3
   706  000F76  6E09               	movwf	lcd_putrs@ptr,c
   707  000F78  0E0F               	movlw	high STR_3
   708  000F7A  6E0A               	movwf	lcd_putrs@ptr+1,c
   709  000F7C  EC18  F00B         	call	_lcd_putrs	;wreg free
   710                           
   711                           ;main.c: 106: flag_sentido_escritura = 1;
   712  000F80  0E00               	movlw	0
   713  000F82  6E37               	movwf	_flag_sentido_escritura+1,c
   714  000F84  0E01               	movlw	1
   715  000F86  6E36               	movwf	_flag_sentido_escritura,c
   716                           
   717                           ;main.c: 107: operador = "%";
   718  000F88  0E14               	movlw	low STR_3
   719  000F8A  6E51               	movwf	_operador,c
   720  000F8C  0E0F               	movlw	high STR_3
   721  000F8E  6E52               	movwf	_operador+1,c
   722  000F90  B082               	btfsc	3970,0,c	;volatile
   723  000F92  D7FE               	goto	l187
   724  000F94                     u1360:
   725                           
   726                           ;main.c: 110: };
   727                           ;main.c: 114: PORTAbits.RA7 = 0;
   728                           
   729                           ;main.c: 109: };
   730  000F94  9E80               	bcf	3968,7,c	;volatile
   731                           
   732                           ;main.c: 115: PORTAbits.RA6 = 1;
   733  000F96  8C80               	bsf	3968,6,c	;volatile
   734                           
   735                           ;main.c: 116: PORTAbits.RA5 = 0;
   736  000F98  9A80               	bcf	3968,5,c	;volatile
   737                           
   738                           ;main.c: 117: PORTAbits.RA3 = 0;
   739  000F9A  9680               	bcf	3968,3,c	;volatile
   740                           
   741                           ;main.c: 119: if (PORTAbits.RA2 == 1) {
   742  000F9C  A480               	btfss	3968,2,c	;volatile
   743  000F9E  D008               	goto	u1380
   744                           
   745                           ;main.c: 120: escribir_numero(4);
   746  000FA0  0E04               	movlw	4
   747  000FA2  6E22               	movwf	escribir_numero@num,c
   748  000FA4  0E00               	movlw	0
   749  000FA6  6E23               	movwf	escribir_numero@num+1,c
   750  000FA8  EC02  F00A         	call	_escribir_numero	;wreg free
   751  000FAC  B480               	btfsc	3968,2,c	;volatile
   752  000FAE  D7FE               	goto	l191
   753  000FB0                     u1380:
   754                           
   755                           ;main.c: 123: };
   756                           ;main.c: 125: if (PORTAbits.RA1 == 1) {
   757                           
   758                           ;main.c: 122: };
   759  000FB0  A280               	btfss	3968,1,c	;volatile
   760  000FB2  D008               	goto	u1400
   761                           
   762                           ;main.c: 126: escribir_numero(5);
   763  000FB4  0E05               	movlw	5
   764  000FB6  6E22               	movwf	escribir_numero@num,c
   765  000FB8  0E00               	movlw	0
   766  000FBA  6E23               	movwf	escribir_numero@num+1,c
   767  000FBC  EC02  F00A         	call	_escribir_numero	;wreg free
   768  000FC0  B280               	btfsc	3968,1,c	;volatile
   769  000FC2  D7FE               	goto	l195
   770  000FC4                     u1400:
   771                           
   772                           ;main.c: 129: };
   773                           ;main.c: 131: if (PORTAbits.RA0 == 1) {
   774                           
   775                           ;main.c: 128: };
   776  000FC4  A080               	btfss	3968,0,c	;volatile
   777  000FC6  D008               	goto	u1420
   778                           
   779                           ;main.c: 132: escribir_numero(6);
   780  000FC8  0E06               	movlw	6
   781  000FCA  6E22               	movwf	escribir_numero@num,c
   782  000FCC  0E00               	movlw	0
   783  000FCE  6E23               	movwf	escribir_numero@num+1,c
   784  000FD0  EC02  F00A         	call	_escribir_numero	;wreg free
   785  000FD4  B080               	btfsc	3968,0,c	;volatile
   786  000FD6  D7FE               	goto	l199
   787  000FD8                     u1420:
   788                           
   789                           ;main.c: 135: };
   790                           ;main.c: 137: if (PORTCbits.RC0 == 1) {
   791                           
   792                           ;main.c: 134: };
   793  000FD8  A082               	btfss	3970,0,c	;volatile
   794  000FDA  D015               	goto	u1440
   795                           
   796                           ;main.c: 138: lcd_gotoxy(8, 1);
   797  000FDC  0E01               	movlw	1
   798  000FDE  6E05               	movwf	lcd_gotoxy@y,c
   799  000FE0  0E08               	movlw	8
   800  000FE2  EC0A  F00C         	call	_lcd_gotoxy
   801                           
   802                           ;main.c: 139: lcd_putrs("x");
   803  000FE6  0E1A               	movlw	low STR_5
   804  000FE8  6E09               	movwf	lcd_putrs@ptr,c
   805  000FEA  0E0F               	movlw	high STR_5
   806  000FEC  6E0A               	movwf	lcd_putrs@ptr+1,c
   807  000FEE  EC18  F00B         	call	_lcd_putrs	;wreg free
   808                           
   809                           ;main.c: 140: flag_sentido_escritura = 1;
   810  000FF2  0E00               	movlw	0
   811  000FF4  6E37               	movwf	_flag_sentido_escritura+1,c
   812  000FF6  0E01               	movlw	1
   813  000FF8  6E36               	movwf	_flag_sentido_escritura,c
   814                           
   815                           ;main.c: 141: operador = "x";
   816  000FFA  0E1A               	movlw	low STR_5
   817  000FFC  6E51               	movwf	_operador,c
   818  000FFE  0E0F               	movlw	high STR_5
   819  001000  6E52               	movwf	_operador+1,c
   820  001002  B082               	btfsc	3970,0,c	;volatile
   821  001004  D7FE               	goto	l203
   822  001006                     u1440:
   823                           
   824                           ;main.c: 144: };
   825                           ;main.c: 148: PORTAbits.RA7 = 0;
   826                           
   827                           ;main.c: 143: };
   828  001006  9E80               	bcf	3968,7,c	;volatile
   829                           
   830                           ;main.c: 149: PORTAbits.RA6 = 0;
   831  001008  9C80               	bcf	3968,6,c	;volatile
   832                           
   833                           ;main.c: 150: PORTAbits.RA5 = 1;
   834  00100A  8A80               	bsf	3968,5,c	;volatile
   835                           
   836                           ;main.c: 151: PORTAbits.RA3 = 0;
   837  00100C  9680               	bcf	3968,3,c	;volatile
   838                           
   839                           ;main.c: 153: if (PORTAbits.RA2 == 1) {
   840  00100E  A480               	btfss	3968,2,c	;volatile
   841  001010  D008               	goto	u1460
   842                           
   843                           ;main.c: 154: escribir_numero(1);
   844  001012  0E01               	movlw	1
   845  001014  6E22               	movwf	escribir_numero@num,c
   846  001016  0E00               	movlw	0
   847  001018  6E23               	movwf	escribir_numero@num+1,c
   848  00101A  EC02  F00A         	call	_escribir_numero	;wreg free
   849  00101E  B480               	btfsc	3968,2,c	;volatile
   850  001020  D7FE               	goto	l207
   851  001022                     u1460:
   852                           
   853                           ;main.c: 157: };
   854                           ;main.c: 159: if (PORTAbits.RA1 == 1) {
   855                           
   856                           ;main.c: 156: };
   857  001022  A280               	btfss	3968,1,c	;volatile
   858  001024  D008               	goto	u1480
   859                           
   860                           ;main.c: 160: escribir_numero(2);
   861  001026  0E02               	movlw	2
   862  001028  6E22               	movwf	escribir_numero@num,c
   863  00102A  0E00               	movlw	0
   864  00102C  6E23               	movwf	escribir_numero@num+1,c
   865  00102E  EC02  F00A         	call	_escribir_numero	;wreg free
   866  001032  B280               	btfsc	3968,1,c	;volatile
   867  001034  D7FE               	goto	l211
   868  001036                     u1480:
   869                           
   870                           ;main.c: 163: };
   871                           ;main.c: 165: if (PORTAbits.RA0 == 1) {
   872                           
   873                           ;main.c: 162: };
   874  001036  A080               	btfss	3968,0,c	;volatile
   875  001038  D008               	goto	u1500
   876                           
   877                           ;main.c: 166: escribir_numero(3);
   878  00103A  0E03               	movlw	3
   879  00103C  6E22               	movwf	escribir_numero@num,c
   880  00103E  0E00               	movlw	0
   881  001040  6E23               	movwf	escribir_numero@num+1,c
   882  001042  EC02  F00A         	call	_escribir_numero	;wreg free
   883  001046  B080               	btfsc	3968,0,c	;volatile
   884  001048  D7FE               	goto	l215
   885  00104A                     u1500:
   886                           
   887                           ;main.c: 169: };
   888                           ;main.c: 171: if (PORTCbits.RC0 == 1) {
   889                           
   890                           ;main.c: 168: };
   891  00104A  A082               	btfss	3970,0,c	;volatile
   892  00104C  D015               	goto	u1520
   893                           
   894                           ;main.c: 172: lcd_gotoxy(8, 1);
   895  00104E  0E01               	movlw	1
   896  001050  6E05               	movwf	lcd_gotoxy@y,c
   897  001052  0E08               	movlw	8
   898  001054  EC0A  F00C         	call	_lcd_gotoxy
   899                           
   900                           ;main.c: 173: lcd_putrs("-");
   901  001058  0E18               	movlw	low STR_7
   902  00105A  6E09               	movwf	lcd_putrs@ptr,c
   903  00105C  0E0F               	movlw	high STR_7
   904  00105E  6E0A               	movwf	lcd_putrs@ptr+1,c
   905  001060  EC18  F00B         	call	_lcd_putrs	;wreg free
   906                           
   907                           ;main.c: 174: flag_sentido_escritura = 1;
   908  001064  0E00               	movlw	0
   909  001066  6E37               	movwf	_flag_sentido_escritura+1,c
   910  001068  0E01               	movlw	1
   911  00106A  6E36               	movwf	_flag_sentido_escritura,c
   912                           
   913                           ;main.c: 175: operador = "-";
   914  00106C  0E18               	movlw	low STR_7
   915  00106E  6E51               	movwf	_operador,c
   916  001070  0E0F               	movlw	high STR_7
   917  001072  6E52               	movwf	_operador+1,c
   918  001074  B082               	btfsc	3970,0,c	;volatile
   919  001076  D7FE               	goto	l219
   920  001078                     u1520:
   921                           
   922                           ;main.c: 178: };
   923                           ;main.c: 181: PORTAbits.RA7 = 0;
   924                           
   925                           ;main.c: 177: };
   926  001078  9E80               	bcf	3968,7,c	;volatile
   927                           
   928                           ;main.c: 182: PORTAbits.RA6 = 0;
   929  00107A  9C80               	bcf	3968,6,c	;volatile
   930                           
   931                           ;main.c: 183: PORTAbits.RA5 = 0;
   932  00107C  9A80               	bcf	3968,5,c	;volatile
   933                           
   934                           ;main.c: 184: PORTAbits.RA3 = 1;
   935  00107E  8680               	bsf	3968,3,c	;volatile
   936                           
   937                           ;main.c: 186: if (PORTAbits.RA2 == 1) {
   938  001080  A480               	btfss	3968,2,c	;volatile
   939  001082  D016               	goto	u1540
   940                           
   941                           ;main.c: 188: lcd_init();
   942  001084  EC79  F00A         	call	_lcd_init	;wreg free
   943                           
   944                           ;main.c: 189: Setup();
   945  001088  ECA9  F00B         	call	_Setup	;wreg free
   946                           
   947                           ;main.c: 190: flag_sentido_escritura = 0;
   948  00108C  0E00               	movlw	0
   949  00108E  6E37               	movwf	_flag_sentido_escritura+1,c
   950  001090  0E00               	movlw	0
   951  001092  6E36               	movwf	_flag_sentido_escritura,c
   952                           
   953                           ;main.c: 193: operador = "";
   954  001094  0E15               	movlw	low (STR_3+1)
   955  001096  6E51               	movwf	_operador,c
   956  001098  0E0F               	movlw	high (STR_3+1)
   957  00109A  6E52               	movwf	_operador+1,c
   958                           
   959                           ;main.c: 194: contador_numeros_ingresados_der = 0;
   960  00109C  0E00               	movlw	0
   961  00109E  6E33               	movwf	_contador_numeros_ingresados_der+1,c
   962  0010A0  0E00               	movlw	0
   963  0010A2  6E32               	movwf	_contador_numeros_ingresados_der,c
   964                           
   965                           ;main.c: 195: contador_numeros_ingresados_izq = 0;
   966  0010A4  0E00               	movlw	0
   967  0010A6  6E35               	movwf	_contador_numeros_ingresados_izq+1,c
   968  0010A8  0E00               	movlw	0
   969  0010AA  6E34               	movwf	_contador_numeros_ingresados_izq,c
   970  0010AC  B480               	btfsc	3968,2,c	;volatile
   971  0010AE  D7FE               	goto	l223
   972  0010B0                     u1540:
   973                           
   974                           ;main.c: 198: };
   975                           ;main.c: 200: if (PORTAbits.RA1 == 1) {
   976                           
   977                           ;main.c: 197: };
   978  0010B0  A280               	btfss	3968,1,c	;volatile
   979  0010B2  D008               	goto	u1560
   980                           
   981                           ;main.c: 201: escribir_numero(0);
   982  0010B4  0E00               	movlw	0
   983  0010B6  6E22               	movwf	escribir_numero@num,c
   984  0010B8  0E00               	movlw	0
   985  0010BA  6E23               	movwf	escribir_numero@num+1,c
   986  0010BC  EC02  F00A         	call	_escribir_numero	;wreg free
   987  0010C0  B280               	btfsc	3968,1,c	;volatile
   988  0010C2  D7FE               	goto	l227
   989  0010C4                     u1560:
   990                           
   991                           ;main.c: 204: };
   992                           ;main.c: 206: if (PORTAbits.RA0 == 1) {
   993                           
   994                           ;main.c: 203: };
   995  0010C4  A080               	btfss	3968,0,c	;volatile
   996  0010C6  D04F               	goto	u1610
   997                           
   998                           ;main.c: 208: if (operador == "+") {
   999  0010C8  0E16               	movlw	low STR_10
  1000  0010CA  1851               	xorwf	_operador,w,c
  1001  0010CC  E14A               	bnz	l237
  1002  0010CE  0E0F               	movlw	high STR_10
  1003  0010D0  1852               	xorwf	_operador+1,w,c
  1004  0010D2  A4D8               	btfss	status,2,c
  1005  0010D4  D046               	goto	l230
  1006                           
  1007                           ;main.c: 210: char num_izq = "";
  1008  0010D6  0E15               	movlw	low (STR_3+1)
  1009  0010D8  6E31               	movwf	main@num_izq,c
  1010                           
  1011                           ;main.c: 211: for (int i = 0; i < contador_numeros_ingresados_izq; i++) {
  1012  0010DA  0E00               	movlw	0
  1013  0010DC  6E2E               	movwf	main@i+1,c
  1014  0010DE  0E00               	movlw	0
  1015  0010E0  6E2D               	movwf	main@i,c
  1016  0010E2  D00B               	goto	l231
  1017  0010E4                     
  1018                           ;main.c: 212: num_izq = num_izq + array_lcd_izq[i];
  1019  0010E4  0E7E               	movlw	low _array_lcd_izq
  1020  0010E6  242D               	addwf	main@i,w,c
  1021  0010E8  6ED9               	movwf	fsr2l,c
  1022  0010EA  0E00               	movlw	high _array_lcd_izq
  1023  0010EC  202E               	addwfc	main@i+1,w,c
  1024  0010EE  6EDA               	movwf	fsr2h,c
  1025  0010F0  50DF               	movf	indf2,w,c
  1026  0010F2  2431               	addwf	main@num_izq,w,c
  1027  0010F4  6E31               	movwf	main@num_izq,c
  1028  0010F6  4A2D               	infsnz	main@i,f,c
  1029  0010F8  2A2E               	incf	main@i+1,f,c
  1030  0010FA                     l231:
  1031  0010FA  5034               	movf	_contador_numeros_ingresados_izq,w,c
  1032  0010FC  5C2D               	subwf	main@i,w,c
  1033  0010FE  502E               	movf	main@i+1,w,c
  1034  001100  0A80               	xorlw	128
  1035  001102  6E2A               	movwf	??_main& (0+255),c
  1036  001104  5035               	movf	_contador_numeros_ingresados_izq+1,w,c
  1037  001106  0A80               	xorlw	128
  1038  001108  582A               	subwfb	??_main& (0+255),w,c
  1039  00110A  A0D8               	btfss	status,0,c
  1040  00110C  D7EB               	goto	l232
  1041                           
  1042                           ;main.c: 213: };
  1043                           ;main.c: 215: char num_der = "";
  1044  00110E  0E15               	movlw	low (STR_3+1)
  1045  001110  6E2C               	movwf	main@num_der,c
  1046                           
  1047                           ;main.c: 216: for (int j = 0; j < contador_numeros_ingresados_der; j++) {
  1048  001112  0E00               	movlw	0
  1049  001114  6E30               	movwf	main@j+1,c
  1050  001116  0E00               	movlw	0
  1051  001118  6E2F               	movwf	main@j,c
  1052  00111A  D00B               	goto	l234
  1053  00111C                     
  1054                           ;main.c: 217: num_der = num_der + array_lcd_der[j];
  1055  00111C  0E78               	movlw	low _array_lcd_der
  1056  00111E  242F               	addwf	main@j,w,c
  1057  001120  6ED9               	movwf	fsr2l,c
  1058  001122  0E00               	movlw	high _array_lcd_der
  1059  001124  2030               	addwfc	main@j+1,w,c
  1060  001126  6EDA               	movwf	fsr2h,c
  1061  001128  50DF               	movf	indf2,w,c
  1062  00112A  242C               	addwf	main@num_der,w,c
  1063  00112C  6E2C               	movwf	main@num_der,c
  1064  00112E  4A2F               	infsnz	main@j,f,c
  1065  001130  2A30               	incf	main@j+1,f,c
  1066  001132                     l234:
  1067  001132  5032               	movf	_contador_numeros_ingresados_der,w,c
  1068  001134  5C2F               	subwf	main@j,w,c
  1069  001136  5030               	movf	main@j+1,w,c
  1070  001138  0A80               	xorlw	128
  1071  00113A  6E2A               	movwf	??_main& (0+255),c
  1072  00113C  5033               	movf	_contador_numeros_ingresados_der+1,w,c
  1073  00113E  0A80               	xorlw	128
  1074  001140  582A               	subwfb	??_main& (0+255),w,c
  1075  001142  A0D8               	btfss	status,0,c
  1076  001144  D7EB               	goto	l235
  1077                           
  1078                           ;main.c: 218: };
  1079                           ;main.c: 220: lcd_gotoxy(1, 2);
  1080  001146  0E02               	movlw	2
  1081  001148  6E05               	movwf	lcd_gotoxy@y,c
  1082  00114A  0E01               	movlw	1
  1083  00114C  EC0A  F00C         	call	_lcd_gotoxy
  1084                           
  1085                           ;main.c: 221: write_in_lcd(num_izq);
  1086  001150  5031               	movf	main@num_izq,w,c
  1087  001152  6E2A               	movwf	??_main& (0+255),c
  1088  001154  6A2B               	clrf	(??_main+1)& (0+255),c
  1089  001156  C02A  F020         	movff	??_main,write_in_lcd@key
  1090  00115A  C02B  F021         	movff	??_main+1,write_in_lcd@key+1
  1091  00115E  ECE2  F00B         	call	_write_in_lcd	;wreg free
  1092  001162                     l230:
  1093  001162                     l237:
  1094  001162  B080               	btfsc	3968,0,c	;volatile
  1095  001164  D7FE               	goto	l230
  1096  001166                     u1610:
  1097                           
  1098                           ;main.c: 225: };
  1099                           ;main.c: 227: if (PORTCbits.RC0 == 1) {
  1100                           
  1101                           ;main.c: 224: };
  1102  001166  A082               	btfss	3970,0,c	;volatile
  1103  001168  D015               	goto	u1630
  1104                           
  1105                           ;main.c: 230: lcd_gotoxy(8, 1);
  1106  00116A  0E01               	movlw	1
  1107  00116C  6E05               	movwf	lcd_gotoxy@y,c
  1108  00116E  0E08               	movlw	8
  1109  001170  EC0A  F00C         	call	_lcd_gotoxy
  1110                           
  1111                           ;main.c: 231: lcd_putrs("+");
  1112  001174  0E16               	movlw	low STR_10
  1113  001176  6E09               	movwf	lcd_putrs@ptr,c
  1114  001178  0E0F               	movlw	high STR_10
  1115  00117A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1116  00117C  EC18  F00B         	call	_lcd_putrs	;wreg free
  1117                           
  1118                           ;main.c: 232: flag_sentido_escritura = 1;
  1119  001180  0E00               	movlw	0
  1120  001182  6E37               	movwf	_flag_sentido_escritura+1,c
  1121  001184  0E01               	movlw	1
  1122  001186  6E36               	movwf	_flag_sentido_escritura,c
  1123                           
  1124                           ;main.c: 233: operador = "+";
  1125  001188  0E16               	movlw	low STR_10
  1126  00118A  6E51               	movwf	_operador,c
  1127  00118C  0E0F               	movlw	high STR_10
  1128  00118E  6E52               	movwf	_operador+1,c
  1129  001190  B082               	btfsc	3970,0,c	;volatile
  1130  001192  D7FE               	goto	l242
  1131  001194                     u1630:
  1132                           
  1133                           ;main.c: 236: };
  1134                           ;main.c: 238: LATBbits.LATB1 = !LATBbits.LATB1;;
  1135                           
  1136                           ;main.c: 235: };
  1137  001194  B28A               	btfsc	3978,1,c	;volatile
  1138  001196  D003               	goto	u1640
  1139  001198  6A2A               	clrf	??_main& (0+255),c
  1140  00119A  2A2A               	incf	??_main& (0+255),f,c
  1141  00119C  D001               	goto	u1658
  1142  00119E                     u1640:
  1143  00119E  6A2A               	clrf	??_main& (0+255),c
  1144  0011A0                     u1658:
  1145  0011A0  462A               	rlncf	??_main,f,c
  1146  0011A2  508A               	movf	3978,w,c	;volatile
  1147  0011A4  182A               	xorwf	??_main,w,c
  1148  0011A6  0BFD               	andlw	-3
  1149  0011A8  182A               	xorwf	??_main,w,c
  1150  0011AA  6E8A               	movwf	3978,c	;volatile
  1151                           
  1152                           ;main.c: 239: LATBbits.LATB0 = !LATBbits.LATB0;;
  1153  0011AC  B08A               	btfsc	3978,0,c	;volatile
  1154  0011AE  D003               	goto	u1660
  1155  0011B0  6A2A               	clrf	??_main& (0+255),c
  1156  0011B2  2A2A               	incf	??_main& (0+255),f,c
  1157  0011B4  D001               	goto	u1678
  1158  0011B6                     u1660:
  1159  0011B6  6A2A               	clrf	??_main& (0+255),c
  1160  0011B8                     u1678:
  1161  0011B8  508A               	movf	3978,w,c	;volatile
  1162  0011BA  182A               	xorwf	??_main,w,c
  1163  0011BC  0BFE               	andlw	-2
  1164  0011BE  182A               	xorwf	??_main,w,c
  1165  0011C0  6E8A               	movwf	3978,c	;volatile
  1166                           
  1167                           ;main.c: 240: _delay((unsigned long)((98)*(8000000/4000.0)));
  1168  0011C2  0EFF               	movlw	255
  1169  0011C4  6E2A               	movwf	??_main& (0+255),c
  1170  0011C6  0E8A               	movlw	138
  1171  0011C8                     u1697:
  1172  0011C8  2EE8               	decfsz	wreg,f,c
  1173  0011CA  D7FE               	bra	u1697
  1174  0011CC  2E2A               	decfsz	??_main& (0+255),f,c
  1175  0011CE  D7FC               	bra	u1697
  1176  0011D0  D000               	nop2	
  1177  0011D2  D6A7               	goto	l172
  1178  0011D4                     __end_of_main:
  1179                           	opt stack 0
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           postinc0	equ	0xFEE
  1185                           wreg	equ	0xFE8
  1186                           postdec1	equ	0xFE5
  1187                           fsr1l	equ	0xFE1
  1188                           indf2	equ	0xFDF
  1189                           fsr2h	equ	0xFDA
  1190                           fsr2l	equ	0xFD9
  1191                           status	equ	0xFD8
  1192                           
  1193 ;; *************** function _escribir_numero *****************
  1194 ;; Defined at:
  1195 ;;		line 49 in file "main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  num             2   33[COMRAM] PTR int 
  1198 ;;		 -> NULL(0), RAM(3775), 
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  i               2   39[COMRAM] int 
  1201 ;;  i               2   37[COMRAM] int 
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1211 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1212 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1213 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1214 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1215 ;;Total ram usage:        8 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; Hardware stack levels required when called:    6
  1218 ;; This function calls:
  1219 ;;		_lcd_gotoxy
  1220 ;;		_write_in_lcd
  1221 ;; This function is called by:
  1222 ;;		_main
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text1
  1227  001404                     __ptext1:
  1228                           	opt stack 0
  1229  001404                     _escribir_numero:
  1230                           	opt stack 24
  1231                           
  1232                           ;main.c: 51: if (flag_sentido_escritura == 0) {
  1233                           
  1234                           ;incstack = 0
  1235  001404  5036               	movf	_flag_sentido_escritura,w,c
  1236  001406  1037               	iorwf	_flag_sentido_escritura+1,w,c
  1237  001408  A4D8               	btfss	status,2,c
  1238  00140A  D03A               	goto	l157
  1239                           
  1240                           ;main.c: 52: if (contador_numeros_ingresados_izq < 6) {
  1241  00140C  BE35               	btfsc	_contador_numeros_ingresados_izq+1,7,c
  1242  00140E  D006               	goto	u1250
  1243  001410  5035               	movf	_contador_numeros_ingresados_izq+1,w,c
  1244  001412  E16E               	bnz	l167
  1245  001414  0E06               	movlw	6
  1246  001416  5C34               	subwf	_contador_numeros_ingresados_izq,w,c
  1247  001418  B0D8               	btfsc	status,0,c
  1248  00141A  0012               	return	
  1249  00141C                     u1250:
  1250                           
  1251                           ;main.c: 53: array_lcd_izq[contador_numeros_ingresados_izq] = num;
  1252  00141C  0E7E               	movlw	low _array_lcd_izq
  1253  00141E  2434               	addwf	_contador_numeros_ingresados_izq,w,c
  1254  001420  6ED9               	movwf	fsr2l,c
  1255  001422  0E00               	movlw	high _array_lcd_izq
  1256  001424  2035               	addwfc	_contador_numeros_ingresados_izq+1,w,c
  1257  001426  6EDA               	movwf	fsr2h,c
  1258  001428  C022  FFDF         	movff	escribir_numero@num,indf2
  1259                           
  1260                           ;main.c: 54: contador_numeros_ingresados_izq++;
  1261  00142C  4A34               	infsnz	_contador_numeros_ingresados_izq,f,c
  1262  00142E  2A35               	incf	_contador_numeros_ingresados_izq+1,f,c
  1263                           
  1264                           ;main.c: 55: lcd_gotoxy(7 - contador_numeros_ingresados_izq, 1);
  1265  001430  0E01               	movlw	1
  1266  001432  6E05               	movwf	lcd_gotoxy@y,c
  1267  001434  5034               	movf	_contador_numeros_ingresados_izq,w,c
  1268  001436  0800               	sublw	0
  1269  001438  0F07               	addlw	7
  1270  00143A  EC0A  F00C         	call	_lcd_gotoxy
  1271                           
  1272                           ;main.c: 56: for (int i = 0; i < contador_numeros_ingresados_izq; i++) {
  1273  00143E  0E00               	movlw	0
  1274  001440  6E27               	movwf	escribir_numero@i+1,c
  1275  001442  0E00               	movlw	0
  1276  001444  6E26               	movwf	escribir_numero@i,c
  1277  001446  D011               	goto	l159
  1278  001448                     
  1279                           ;main.c: 57: write_in_lcd(array_lcd_izq[i]);
  1280  001448  0E7E               	movlw	low _array_lcd_izq
  1281  00144A  2426               	addwf	escribir_numero@i,w,c
  1282  00144C  6ED9               	movwf	fsr2l,c
  1283  00144E  0E00               	movlw	high _array_lcd_izq
  1284  001450  2027               	addwfc	escribir_numero@i+1,w,c
  1285  001452  6EDA               	movwf	fsr2h,c
  1286  001454  50DF               	movf	indf2,w,c
  1287  001456  6E24               	movwf	??_escribir_numero& (0+255),c
  1288  001458  6A25               	clrf	(??_escribir_numero+1)& (0+255),c
  1289  00145A  C024  F020         	movff	??_escribir_numero,write_in_lcd@key
  1290  00145E  C025  F021         	movff	??_escribir_numero+1,write_in_lcd@key+1
  1291  001462  ECE2  F00B         	call	_write_in_lcd	;wreg free
  1292  001466  4A26               	infsnz	escribir_numero@i,f,c
  1293  001468  2A27               	incf	escribir_numero@i+1,f,c
  1294  00146A                     l159:
  1295  00146A  5034               	movf	_contador_numeros_ingresados_izq,w,c
  1296  00146C  5C26               	subwf	escribir_numero@i,w,c
  1297  00146E  5027               	movf	escribir_numero@i+1,w,c
  1298  001470  0A80               	xorlw	128
  1299  001472  6E24               	movwf	??_escribir_numero& (0+255),c
  1300  001474  5035               	movf	_contador_numeros_ingresados_izq+1,w,c
  1301  001476  0A80               	xorlw	128
  1302  001478  5824               	subwfb	??_escribir_numero& (0+255),w,c
  1303  00147A  B0D8               	btfsc	status,0,c
  1304  00147C  0012               	return	
  1305  00147E  D7E4               	goto	l160
  1306  001480                     l157:
  1307                           
  1308                           ;main.c: 61: if (contador_numeros_ingresados_der < 6) {
  1309  001480  BE33               	btfsc	_contador_numeros_ingresados_der+1,7,c
  1310  001482  D006               	goto	u1270
  1311  001484  5033               	movf	_contador_numeros_ingresados_der+1,w,c
  1312  001486  E134               	bnz	l167
  1313  001488  0E06               	movlw	6
  1314  00148A  5C32               	subwf	_contador_numeros_ingresados_der,w,c
  1315  00148C  B0D8               	btfsc	status,0,c
  1316  00148E  0012               	return	
  1317  001490                     u1270:
  1318                           
  1319                           ;main.c: 62: array_lcd_der[contador_numeros_ingresados_der] = num;
  1320  001490  0E78               	movlw	low _array_lcd_der
  1321  001492  2432               	addwf	_contador_numeros_ingresados_der,w,c
  1322  001494  6ED9               	movwf	fsr2l,c
  1323  001496  0E00               	movlw	high _array_lcd_der
  1324  001498  2033               	addwfc	_contador_numeros_ingresados_der+1,w,c
  1325  00149A  6EDA               	movwf	fsr2h,c
  1326  00149C  C022  FFDF         	movff	escribir_numero@num,indf2
  1327                           
  1328                           ;main.c: 63: contador_numeros_ingresados_der++;
  1329  0014A0  4A32               	infsnz	_contador_numeros_ingresados_der,f,c
  1330  0014A2  2A33               	incf	_contador_numeros_ingresados_der+1,f,c
  1331                           
  1332                           ;main.c: 64: lcd_gotoxy(10, 1);
  1333  0014A4  0E01               	movlw	1
  1334  0014A6  6E05               	movwf	lcd_gotoxy@y,c
  1335  0014A8  0E0A               	movlw	10
  1336  0014AA  EC0A  F00C         	call	_lcd_gotoxy
  1337                           
  1338                           ;main.c: 65: for (int i = 0; i < contador_numeros_ingresados_der; i++) {
  1339  0014AE  0E00               	movlw	0
  1340  0014B0  6E29               	movwf	escribir_numero@i_784+1,c
  1341  0014B2  0E00               	movlw	0
  1342  0014B4  6E28               	movwf	escribir_numero@i_784,c
  1343  0014B6  D011               	goto	l164
  1344  0014B8                     
  1345                           ;main.c: 66: write_in_lcd(array_lcd_der[i]);
  1346  0014B8  0E78               	movlw	low _array_lcd_der
  1347  0014BA  2428               	addwf	escribir_numero@i_784,w,c
  1348  0014BC  6ED9               	movwf	fsr2l,c
  1349  0014BE  0E00               	movlw	high _array_lcd_der
  1350  0014C0  2029               	addwfc	escribir_numero@i_784+1,w,c
  1351  0014C2  6EDA               	movwf	fsr2h,c
  1352  0014C4  50DF               	movf	indf2,w,c
  1353  0014C6  6E24               	movwf	??_escribir_numero& (0+255),c
  1354  0014C8  6A25               	clrf	(??_escribir_numero+1)& (0+255),c
  1355  0014CA  C024  F020         	movff	??_escribir_numero,write_in_lcd@key
  1356  0014CE  C025  F021         	movff	??_escribir_numero+1,write_in_lcd@key+1
  1357  0014D2  ECE2  F00B         	call	_write_in_lcd	;wreg free
  1358  0014D6  4A28               	infsnz	escribir_numero@i_784,f,c
  1359  0014D8  2A29               	incf	escribir_numero@i_784+1,f,c
  1360  0014DA                     l164:
  1361  0014DA  5032               	movf	_contador_numeros_ingresados_der,w,c
  1362  0014DC  5C28               	subwf	escribir_numero@i_784,w,c
  1363  0014DE  5029               	movf	escribir_numero@i_784+1,w,c
  1364  0014E0  0A80               	xorlw	128
  1365  0014E2  6E24               	movwf	??_escribir_numero& (0+255),c
  1366  0014E4  5033               	movf	_contador_numeros_ingresados_der+1,w,c
  1367  0014E6  0A80               	xorlw	128
  1368  0014E8  5824               	subwfb	??_escribir_numero& (0+255),w,c
  1369  0014EA  B0D8               	btfsc	status,0,c
  1370  0014EC  0012               	return	
  1371  0014EE  D7E4               	goto	l165
  1372  0014F0                     l167:
  1373  0014F0  0012               	return		;funcret
  1374  0014F2                     __end_of_escribir_numero:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           postdec1	equ	0xFE5
  1383                           fsr1l	equ	0xFE1
  1384                           indf2	equ	0xFDF
  1385                           fsr2h	equ	0xFDA
  1386                           fsr2l	equ	0xFD9
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _write_in_lcd *****************
  1390 ;; Defined at:
  1391 ;;		line 44 in file "main.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  key             2   31[COMRAM] PTR unsigned char 
  1394 ;;		 -> RAM(3775), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1406 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1409 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1410 ;;Total ram usage:        2 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    5
  1413 ;; This function calls:
  1414 ;;		_lcd_putrs
  1415 ;;		_sprintf
  1416 ;; This function is called by:
  1417 ;;		_escribir_numero
  1418 ;;		_main
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text2
  1423  0017C4                     __ptext2:
  1424                           	opt stack 0
  1425  0017C4                     _write_in_lcd:
  1426                           	opt stack 25
  1427                           
  1428                           ;main.c: 45: sprintf(buffer2, "%01u", key);
  1429                           
  1430                           ;incstack = 0
  1431  0017C4  0E92               	movlw	low _buffer2
  1432  0017C6  6E0D               	movwf	sprintf@sp,c
  1433  0017C8  0E00               	movlw	high _buffer2
  1434  0017CA  6E0E               	movwf	sprintf@sp+1,c
  1435  0017CC  0E0F               	movlw	low STR_2
  1436  0017CE  6E0F               	movwf	sprintf@f,c
  1437  0017D0  0E0F               	movlw	high STR_2
  1438  0017D2  6E10               	movwf	sprintf@f+1,c
  1439  0017D4  C020  F011         	movff	write_in_lcd@key,?_sprintf+4
  1440  0017D8  C021  F012         	movff	write_in_lcd@key+1,?_sprintf+5
  1441  0017DC  ECEA  F008         	call	_sprintf	;wreg free
  1442                           
  1443                           ;main.c: 46: lcd_putrs(buffer2);
  1444  0017E0  0E92               	movlw	low _buffer2
  1445  0017E2  6E09               	movwf	lcd_putrs@ptr,c
  1446  0017E4  0E00               	movlw	high _buffer2
  1447  0017E6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1448  0017E8  EC18  F00B         	call	_lcd_putrs	;wreg free
  1449  0017EC  0012               	return		;funcret
  1450  0017EE                     __end_of_write_in_lcd:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           postdec1	equ	0xFE5
  1459                           fsr1l	equ	0xFE1
  1460                           indf2	equ	0xFDF
  1461                           fsr2h	equ	0xFDA
  1462                           fsr2l	equ	0xFD9
  1463                           status	equ	0xFD8
  1464                           
  1465 ;; *************** function _sprintf *****************
  1466 ;; Defined at:
  1467 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1470 ;;		 -> buffer2(20), 
  1471 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1472 ;;		 -> STR_2(5), 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  tmpval          4    0        struct .
  1475 ;;  cp              3    0        PTR const unsigned char 
  1476 ;;  width           2   28[COMRAM] int 
  1477 ;;  val             2   25[COMRAM] unsigned int 
  1478 ;;  ap              2   22[COMRAM] PTR void [1]
  1479 ;;		 -> ?_sprintf(2), 
  1480 ;;  len             2    0        unsigned int 
  1481 ;;  c               1   30[COMRAM] char 
  1482 ;;  prec            1   27[COMRAM] char 
  1483 ;;  flag            1   24[COMRAM] unsigned char 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  2   12[COMRAM] int 
  1486 ;; Registers used:
  1487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1493 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1494 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1495 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1496 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1497 ;;Total ram usage:       19 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    1
  1500 ;; This function calls:
  1501 ;;		___lwdiv
  1502 ;;		___lwmod
  1503 ;;		___wmul
  1504 ;;		_isdigit
  1505 ;; This function is called by:
  1506 ;;		_write_in_lcd
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text3
  1511  0011D4                     __ptext3:
  1512                           	opt stack 0
  1513  0011D4                     _sprintf:
  1514                           	opt stack 28
  1515                           
  1516                           ;doprnt.c: 494: va_list ap;
  1517                           ;doprnt.c: 499: signed char c;
  1518                           ;doprnt.c: 501: int width;
  1519                           ;doprnt.c: 506: signed char prec;
  1520                           ;doprnt.c: 508: unsigned char flag;
  1521                           ;doprnt.c: 523: union {
  1522                           ;doprnt.c: 524: unsigned long vd;
  1523                           ;doprnt.c: 525: double integ;
  1524                           ;doprnt.c: 526: } tmpval;
  1525                           ;doprnt.c: 528: unsigned int val;
  1526                           ;doprnt.c: 529: unsigned len;
  1527                           ;doprnt.c: 530: const char * cp;
  1528                           ;doprnt.c: 533: *ap = __va_start();
  1529                           
  1530                           ;incstack = 0
  1531  0011D4  0E11               	movlw	low (?_sprintf+4)
  1532  0011D6  6E17               	movwf	sprintf@ap,c
  1533  0011D8  0E00               	movlw	high (?_sprintf+4)
  1534  0011DA  6E18               	movwf	sprintf@ap+1,c
  1535                           
  1536                           ;doprnt.c: 536: while(c = *f++) {
  1537  0011DC  D100               	goto	u1150
  1538  0011DE                     
  1539                           ;doprnt.c: 538: if(c != '%')
  1540  0011DE  0E25               	movlw	37
  1541  0011E0  181F               	xorwf	sprintf@c,w,c
  1542  0011E2  B4D8               	btfsc	status,2,c
  1543  0011E4  D009               	goto	l318
  1544                           
  1545                           ;doprnt.c: 540: {
  1546                           ;doprnt.c: 541: ((*sp++ = (c)));
  1547  0011E6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1548  0011EA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1549  0011EE  C01F  FFDF         	movff	sprintf@c,indf2
  1550  0011F2  4A0D               	infsnz	sprintf@sp,f,c
  1551  0011F4  2A0E               	incf	sprintf@sp+1,f,c
  1552                           
  1553                           ;doprnt.c: 542: continue;
  1554  0011F6  D0F3               	goto	u1150
  1555  0011F8                     l318:
  1556                           
  1557                           ;doprnt.c: 543: }
  1558                           ;doprnt.c: 546: width = 0;
  1559  0011F8  0E00               	movlw	0
  1560  0011FA  6E1E               	movwf	sprintf@width+1,c
  1561  0011FC  0E00               	movlw	0
  1562  0011FE  6E1D               	movwf	sprintf@width,c
  1563                           
  1564                           ;doprnt.c: 548: flag = 0;
  1565  001200  0E00               	movlw	0
  1566  001202  6E19               	movwf	sprintf@flag,c
  1567                           
  1568                           ;doprnt.c: 551: switch(*f) {
  1569                           
  1570                           ;doprnt.c: 550: for(;;) {
  1571  001204  D003               	goto	l320
  1572  001206                     
  1573                           ;doprnt.c: 580: flag |= 0x04;
  1574  001206  8419               	bsf	sprintf@flag,2,c
  1575                           
  1576                           ;doprnt.c: 581: f++;
  1577  001208  4A0F               	infsnz	sprintf@f,f,c
  1578  00120A  2A10               	incf	sprintf@f+1,f,c
  1579  00120C                     l320:
  1580  00120C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1581  001210  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1582  001214                     	if	0	;tblptru may be non-zero
  1583  001214                     	endif
  1584  001214                     	if	0	;tblptru may be non-zero
  1585  001214                     	endif
  1586  001214  0008               	tblrd		*
  1587  001216  50F5               	movf	tablat,w,c
  1588                           
  1589                           ; Switch size 1, requested type "space"
  1590                           ; Number of cases is 1, Range of values is 48 to 48
  1591                           ; switch strategies available:
  1592                           ; Name         Instructions Cycles
  1593                           ; simple_byte            4     3 (average)
  1594                           ;	Chosen strategy is simple_byte
  1595  001218  0A30               	xorlw	48	; case 48
  1596  00121A  B4D8               	btfsc	status,2,c
  1597  00121C  D7F4               	goto	l321
  1598                           
  1599                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1600                           
  1601                           ;doprnt.c: 586: }
  1602                           
  1603                           ;doprnt.c: 585: break;
  1604  00121E  C00F  FFF6         	movff	sprintf@f,tblptrl
  1605  001222  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1606  001226                     	if	0	;tblptru may be non-zero
  1607  001226                     	endif
  1608  001226                     	if	0	;tblptru may be non-zero
  1609  001226                     	endif
  1610  001226  0008               	tblrd		*
  1611  001228  50F5               	movf	tablat,w,c
  1612  00122A  EC1B  F00C         	call	_isdigit
  1613  00122E  A0D8               	btfss	status,0,c
  1614  001230  D036               	goto	l328
  1615                           
  1616                           ;doprnt.c: 598: width = 0;
  1617  001232  0E00               	movlw	0
  1618  001234  6E1E               	movwf	sprintf@width+1,c
  1619  001236  0E00               	movlw	0
  1620  001238  6E1D               	movwf	sprintf@width,c
  1621  00123A                     
  1622                           ;doprnt.c: 600: width *= 10;
  1623  00123A  C01D  F001         	movff	sprintf@width,___wmul@multiplier
  1624  00123E  C01E  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1625  001242  0E00               	movlw	0
  1626  001244  6E04               	movwf	___wmul@multiplicand+1,c
  1627  001246  0E0A               	movlw	10
  1628  001248  6E03               	movwf	___wmul@multiplicand,c
  1629  00124A  ECF7  F00B         	call	___wmul	;wreg free
  1630  00124E  C001  F01D         	movff	?___wmul,sprintf@width
  1631  001252  C002  F01E         	movff	?___wmul+1,sprintf@width+1
  1632                           
  1633                           ;doprnt.c: 601: width += *f++ - '0';
  1634  001256  0ED0               	movlw	208
  1635  001258  6E13               	movwf	??_sprintf& (0+255),c
  1636  00125A  0EFF               	movlw	255
  1637  00125C  6E14               	movwf	(??_sprintf+1)& (0+255),c
  1638  00125E  C00F  FFF6         	movff	sprintf@f,tblptrl
  1639  001262  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1640  001266                     	if	0	;tblptru may be non-zero
  1641  001266                     	endif
  1642  001266                     	if	0	;tblptru may be non-zero
  1643  001266                     	endif
  1644  001266  0008               	tblrd		*
  1645  001268  50F5               	movf	tablat,w,c
  1646  00126A  6E15               	movwf	(??_sprintf+2)& (0+255),c
  1647  00126C  6A16               	clrf	(??_sprintf+3)& (0+255),c
  1648  00126E  5013               	movf	??_sprintf,w,c
  1649  001270  2615               	addwf	??_sprintf+2,f,c
  1650  001272  5014               	movf	??_sprintf+1,w,c
  1651  001274  2216               	addwfc	??_sprintf+3,f,c
  1652  001276  5015               	movf	??_sprintf+2,w,c
  1653  001278  261D               	addwf	sprintf@width,f,c
  1654  00127A  5016               	movf	??_sprintf+3,w,c
  1655  00127C  221E               	addwfc	sprintf@width+1,f,c
  1656  00127E  4A0F               	infsnz	sprintf@f,f,c
  1657  001280  2A10               	incf	sprintf@f+1,f,c
  1658                           
  1659                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1660  001282  C00F  FFF6         	movff	sprintf@f,tblptrl
  1661  001286  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1662  00128A                     	if	0	;tblptru may be non-zero
  1663  00128A                     	endif
  1664  00128A                     	if	0	;tblptru may be non-zero
  1665  00128A                     	endif
  1666  00128A  0008               	tblrd		*
  1667  00128C  50F5               	movf	tablat,w,c
  1668  00128E  EC1B  F00C         	call	_isdigit
  1669  001292  A0D8               	btfss	status,0,c
  1670  001294  D004               	goto	l328
  1671  001296  D7D1               	goto	l326
  1672  001298                     
  1673                           ;doprnt.c: 818: flag |= 0xC0;
  1674  001298  0EC0               	movlw	192
  1675  00129A  1219               	iorwf	sprintf@flag,f,c
  1676                           
  1677                           ;doprnt.c: 822: }
  1678                           
  1679                           ;doprnt.c: 819: break;
  1680  00129C  D011               	goto	l333
  1681  00129E                     l328:
  1682  00129E  C00F  FFF6         	movff	sprintf@f,tblptrl
  1683  0012A2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1684  0012A6  4A0F               	infsnz	sprintf@f,f,c
  1685  0012A8  2A10               	incf	sprintf@f+1,f,c
  1686  0012AA                     	if	0	;tblptru may be non-zero
  1687  0012AA                     	endif
  1688  0012AA                     	if	0	;tblptru may be non-zero
  1689  0012AA                     	endif
  1690  0012AA  0008               	tblrd		*
  1691  0012AC  CFF5 F01F          	movff	tablat,sprintf@c
  1692  0012B0  501F               	movf	sprintf@c,w,c
  1693                           
  1694                           ; Switch size 1, requested type "space"
  1695                           ; Number of cases is 2, Range of values is 0 to 117
  1696                           ; switch strategies available:
  1697                           ; Name         Instructions Cycles
  1698                           ; simple_byte            7     4 (average)
  1699                           ;	Chosen strategy is simple_byte
  1700  0012B2  0A00               	xorlw	0	; case 0
  1701  0012B4  B4D8               	btfsc	status,2,c
  1702  0012B6  D09F               	goto	u1160
  1703  0012B8  0A75               	xorlw	117	; case 117
  1704  0012BA  B4D8               	btfsc	status,2,c
  1705  0012BC  D7ED               	goto	l332
  1706  0012BE  D08F               	goto	u1150
  1707  0012C0                     l333:
  1708                           
  1709                           ;doprnt.c: 1273: {
  1710                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1711  0012C0  C017  FFD9         	movff	sprintf@ap,fsr2l
  1712  0012C4  C018  FFDA         	movff	sprintf@ap+1,fsr2h
  1713  0012C8  CFDE F01A          	movff	postinc2,sprintf@val
  1714  0012CC  CFDD F01B          	movff	postdec2,sprintf@val+1
  1715  0012D0  0E02               	movlw	2
  1716  0012D2  2617               	addwf	sprintf@ap,f,c
  1717  0012D4  0E00               	movlw	0
  1718  0012D6  2218               	addwfc	sprintf@ap+1,f,c
  1719                           
  1720                           ;doprnt.c: 1287: }
  1721                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1722  0012D8  0E01               	movlw	1
  1723  0012DA  6E1F               	movwf	sprintf@c,c
  1724  0012DC                     l1742:
  1725  0012DC  0E05               	movlw	5
  1726  0012DE  181F               	xorwf	sprintf@c,w,c
  1727  0012E0  B4D8               	btfsc	status,2,c
  1728  0012E2  D012               	goto	u1080
  1729                           
  1730                           ;doprnt.c: 1306: if(val < dpowers[c])
  1731  0012E4  501F               	movf	sprintf@c,w,c
  1732  0012E6  0D02               	mullw	2
  1733  0012E8  0E01               	movlw	low _dpowers
  1734  0012EA  24F3               	addwf	prodl,w,c
  1735  0012EC  6EF6               	movwf	tblptrl,c
  1736  0012EE  0E0F               	movlw	high _dpowers
  1737  0012F0  20F4               	addwfc	prodh,w,c
  1738  0012F2  6EF7               	movwf	tblptrh,c
  1739  0012F4                     	if	0	;There are less than 3 active tblptr bytes
  1740  0012F4                     	endif
  1741  0012F4  0009               	tblrd		*+
  1742  0012F6  50F5               	movf	tablat,w,c
  1743  0012F8  5C1A               	subwf	sprintf@val,w,c
  1744  0012FA  0009               	tblrd		*+
  1745  0012FC  50F5               	movf	tablat,w,c
  1746  0012FE  581B               	subwfb	sprintf@val+1,w,c
  1747  001300  A0D8               	btfss	status,0,c
  1748  001302  D002               	goto	u1080
  1749                           
  1750                           ;doprnt.c: 1307: break;
  1751  001304  2A1F               	incf	sprintf@c,f,c
  1752  001306  D7EA               	goto	l1742
  1753  001308                     u1080:
  1754                           
  1755                           ;doprnt.c: 1381: if(width > c)
  1756  001308  0E80               	movlw	128
  1757  00130A  BE1F               	btfsc	sprintf@c,7,c
  1758  00130C  0E7F               	movlw	127
  1759  00130E  6E13               	movwf	??_sprintf& (0+255),c
  1760  001310  501D               	movf	sprintf@width,w,c
  1761  001312  5C1F               	subwf	sprintf@c,w,c
  1762  001314  501E               	movf	sprintf@width+1,w,c
  1763  001316  0A80               	xorlw	128
  1764  001318  5813               	subwfb	??_sprintf& (0+255),w,c
  1765  00131A  B0D8               	btfsc	status,0,c
  1766  00131C  D007               	goto	l337
  1767                           
  1768                           ;doprnt.c: 1382: width -= c;
  1769  00131E  501F               	movf	sprintf@c,w,c
  1770  001320  5E1D               	subwf	sprintf@width,f,c
  1771  001322  0E00               	movlw	0
  1772  001324  BE1F               	btfsc	sprintf@c,7,c
  1773  001326  0EFF               	movlw	255
  1774  001328  5A1E               	subwfb	sprintf@width+1,f,c
  1775  00132A  D004               	goto	l338
  1776  00132C                     l337:
  1777                           
  1778                           ;doprnt.c: 1383: else
  1779                           ;doprnt.c: 1384: width = 0;
  1780  00132C  0E00               	movlw	0
  1781  00132E  6E1E               	movwf	sprintf@width+1,c
  1782  001330  0E00               	movlw	0
  1783  001332  6E1D               	movwf	sprintf@width,c
  1784  001334                     l338:
  1785                           
  1786                           ;doprnt.c: 1387: if(flag & 0x04) {
  1787  001334  A419               	btfss	sprintf@flag,2,c
  1788  001336  D010               	goto	l339
  1789  001338                     
  1790                           ;doprnt.c: 1415: if(width)
  1791  001338  501D               	movf	sprintf@width,w,c
  1792  00133A  101E               	iorwf	sprintf@width+1,w,c
  1793  00133C  B4D8               	btfsc	status,2,c
  1794  00133E  D01F               	goto	u1140
  1795                           
  1796                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1797                           
  1798                           ;doprnt.c: 1416: do
  1799  001340  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1800  001344  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1801  001348  0E30               	movlw	48
  1802  00134A  6EDF               	movwf	indf2,c
  1803  00134C  4A0D               	infsnz	sprintf@sp,f,c
  1804  00134E  2A0E               	incf	sprintf@sp+1,f,c
  1805                           
  1806                           ;doprnt.c: 1418: while(--width);
  1807  001350  061D               	decf	sprintf@width,f,c
  1808  001352  A0D8               	btfss	status,0,c
  1809  001354  061E               	decf	sprintf@width+1,f,c
  1810  001356  D7F0               	goto	L2
  1811  001358                     l339:
  1812                           
  1813                           ;doprnt.c: 1422: {
  1814                           ;doprnt.c: 1424: if(width
  1815                           ;doprnt.c: 1428: )
  1816  001358  501D               	movf	sprintf@width,w,c
  1817  00135A  101E               	iorwf	sprintf@width+1,w,c
  1818  00135C  B4D8               	btfsc	status,2,c
  1819  00135E  D00F               	goto	u1140
  1820  001360                     u1130:
  1821                           
  1822                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1823                           
  1824                           ;doprnt.c: 1429: do
  1825  001360  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1826  001364  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1827  001368  0E20               	movlw	32
  1828  00136A  6EDF               	movwf	indf2,c
  1829  00136C  4A0D               	infsnz	sprintf@sp,f,c
  1830  00136E  2A0E               	incf	sprintf@sp+1,f,c
  1831                           
  1832                           ;doprnt.c: 1431: while(--width);
  1833  001370  061D               	decf	sprintf@width,f,c
  1834  001372  A0D8               	btfss	status,0,c
  1835  001374  061E               	decf	sprintf@width+1,f,c
  1836  001376  501D               	movf	sprintf@width,w,c
  1837  001378  101E               	iorwf	sprintf@width+1,w,c
  1838  00137A  A4D8               	btfss	status,2,c
  1839  00137C  D7F1               	goto	u1130
  1840  00137E                     u1140:
  1841                           
  1842                           ;doprnt.c: 1469: }
  1843                           ;doprnt.c: 1472: prec = c;
  1844  00137E  C01F  F01C         	movff	sprintf@c,sprintf@prec
  1845                           
  1846                           ;doprnt.c: 1474: while(prec--) {
  1847  001382  D029               	goto	l347
  1848  001384                     
  1849                           ;doprnt.c: 1478: {
  1850                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1851  001384  501C               	movf	sprintf@prec,w,c
  1852  001386  0D02               	mullw	2
  1853  001388  0E01               	movlw	low _dpowers
  1854  00138A  24F3               	addwf	prodl,w,c
  1855  00138C  6EF6               	movwf	tblptrl,c
  1856  00138E  0E0F               	movlw	high _dpowers
  1857  001390  20F4               	addwfc	prodh,w,c
  1858  001392  6EF7               	movwf	tblptrh,c
  1859  001394                     	if	0	;There are less than 3 active tblptr bytes
  1860  001394                     	endif
  1861  001394  0009               	tblrd		*+
  1862  001396  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1863  00139A  000A               	tblrd		*-
  1864  00139C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1865  0013A0  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1866  0013A4  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1867  0013A8  ECEF  F00A         	call	___lwdiv	;wreg free
  1868  0013AC  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1869  0013B0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1870  0013B4  0E00               	movlw	0
  1871  0013B6  6E0B               	movwf	___lwmod@divisor+1,c
  1872  0013B8  0E0A               	movlw	10
  1873  0013BA  6E0A               	movwf	___lwmod@divisor,c
  1874  0013BC  EC88  F00B         	call	___lwmod	;wreg free
  1875  0013C0  5008               	movf	?___lwmod,w,c
  1876  0013C2  0F30               	addlw	48
  1877  0013C4  6E1F               	movwf	sprintf@c,c
  1878                           
  1879                           ;doprnt.c: 1523: }
  1880                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1881  0013C6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1882  0013CA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1883  0013CE  C01F  FFDF         	movff	sprintf@c,indf2
  1884  0013D2  4A0D               	infsnz	sprintf@sp,f,c
  1885  0013D4  2A0E               	incf	sprintf@sp+1,f,c
  1886  0013D6                     l347:
  1887  0013D6  061C               	decf	sprintf@prec,f,c
  1888  0013D8  281C               	incf	sprintf@prec,w,c
  1889  0013DA  A4D8               	btfss	status,2,c
  1890  0013DC  D7D3               	goto	l348
  1891  0013DE                     u1150:
  1892  0013DE  C00F  FFF6         	movff	sprintf@f,tblptrl
  1893  0013E2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1894  0013E6  4A0F               	infsnz	sprintf@f,f,c
  1895  0013E8  2A10               	incf	sprintf@f+1,f,c
  1896  0013EA                     	if	0	;tblptru may be non-zero
  1897  0013EA                     	endif
  1898  0013EA                     	if	0	;tblptru may be non-zero
  1899  0013EA                     	endif
  1900  0013EA  0008               	tblrd		*
  1901  0013EC  CFF5 F01F          	movff	tablat,sprintf@c
  1902  0013F0  501F               	movf	sprintf@c,w,c
  1903  0013F2  A4D8               	btfss	status,2,c
  1904  0013F4  D6F4               	goto	l317
  1905  0013F6                     u1160:
  1906                           
  1907                           ;doprnt.c: 1538: *sp = 0;
  1908                           
  1909                           ;doprnt.c: 1525: }
  1910                           ;doprnt.c: 1533: }
  1911                           ;doprnt.c: 1535: alldone:
  1912  0013F6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1913  0013FA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1914  0013FE  0E00               	movlw	0
  1915  001400  6EDF               	movwf	indf2,c
  1916  001402  0012               	return	
  1917  001404                     __end_of_sprintf:
  1918                           	opt stack 0
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           prodh	equ	0xFF4
  1924                           prodl	equ	0xFF3
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           postdec1	equ	0xFE5
  1928                           fsr1l	equ	0xFE1
  1929                           indf2	equ	0xFDF
  1930                           postinc2	equ	0xFDE
  1931                           postdec2	equ	0xFDD
  1932                           fsr2h	equ	0xFDA
  1933                           fsr2l	equ	0xFD9
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _isdigit *****************
  1937 ;; Defined at:
  1938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  c               1    wreg     unsigned char 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  c               1    2[COMRAM] unsigned char 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;		None               void
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1955 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;Total ram usage:        3 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_sprintf
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text4
  1966  001836                     __ptext4:
  1967                           	opt stack 0
  1968  001836                     _isdigit:
  1969                           	opt stack 28
  1970                           
  1971                           ;incstack = 0
  1972                           ;isdigit@c stored from wreg
  1973  001836  6E03               	movwf	isdigit@c,c
  1974  001838  0E00               	movlw	0
  1975  00183A  6E02               	movwf	_isdigit$1892,c
  1976  00183C  0E3A               	movlw	58
  1977  00183E  6003               	cpfslt	isdigit@c,c
  1978  001840  D005               	goto	l791
  1979  001842  0E2F               	movlw	47
  1980  001844  6403               	cpfsgt	isdigit@c,c
  1981  001846  D002               	goto	l791
  1982  001848  0E01               	movlw	1
  1983  00184A  6E02               	movwf	_isdigit$1892,c
  1984  00184C                     l791:
  1985  00184C  C002  F001         	movff	_isdigit$1892,??_isdigit
  1986  001850  3001               	rrcf	??_isdigit,w,c
  1987  001852  0012               	return	
  1988  001854                     __end_of_isdigit:
  1989                           	opt stack 0
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1l	equ	0xFE1
  2000                           indf2	equ	0xFDF
  2001                           postinc2	equ	0xFDE
  2002                           postdec2	equ	0xFDD
  2003                           fsr2h	equ	0xFDA
  2004                           fsr2l	equ	0xFD9
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function ___wmul *****************
  2008 ;; Defined at:
  2009 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  multiplier      2    0[COMRAM] unsigned int 
  2012 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  product         2    4[COMRAM] unsigned int 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  2    0[COMRAM] unsigned int 
  2017 ;; Registers used:
  2018 ;;		wreg, status,2, status,0, prodl, prodh
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2027 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2028 ;;Total ram usage:        6 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_sprintf
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text5
  2038  0017EE                     __ptext5:
  2039                           	opt stack 0
  2040  0017EE                     ___wmul:
  2041                           	opt stack 28
  2042                           
  2043                           ;incstack = 0
  2044  0017EE  5001               	movf	___wmul@multiplier,w,c
  2045  0017F0  0203               	mulwf	___wmul@multiplicand,c
  2046  0017F2  CFF3 F005          	movff	prodl,___wmul@product
  2047  0017F6  CFF4 F006          	movff	prodh,___wmul@product+1
  2048  0017FA  5001               	movf	___wmul@multiplier,w,c
  2049  0017FC  0204               	mulwf	___wmul@multiplicand+1,c
  2050  0017FE  50F3               	movf	prodl,w,c
  2051  001800  2606               	addwf	___wmul@product+1,f,c
  2052  001802  5002               	movf	___wmul@multiplier+1,w,c
  2053  001804  0203               	mulwf	___wmul@multiplicand,c
  2054  001806  50F3               	movf	prodl,w,c
  2055  001808  2606               	addwf	___wmul@product+1,f,c
  2056  00180A  C005  F001         	movff	___wmul@product,?___wmul
  2057  00180E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2058  001812  0012               	return	
  2059  001814                     __end_of___wmul:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postdec1	equ	0xFE5
  2070                           fsr1l	equ	0xFE1
  2071                           indf2	equ	0xFDF
  2072                           postinc2	equ	0xFDE
  2073                           postdec2	equ	0xFDD
  2074                           fsr2h	equ	0xFDA
  2075                           fsr2l	equ	0xFD9
  2076                           status	equ	0xFD8
  2077                           
  2078 ;; *************** function ___lwmod *****************
  2079 ;; Defined at:
  2080 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  dividend        2    7[COMRAM] unsigned int 
  2083 ;;  divisor         2    9[COMRAM] unsigned int 
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  counter         1   11[COMRAM] unsigned char 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  2    7[COMRAM] unsigned int 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2, status,0
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2095 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2098 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2099 ;;Total ram usage:        5 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_sprintf
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text6
  2109  001710                     __ptext6:
  2110                           	opt stack 0
  2111  001710                     ___lwmod:
  2112                           	opt stack 28
  2113                           
  2114                           ;incstack = 0
  2115  001710  500A               	movf	___lwmod@divisor,w,c
  2116  001712  100B               	iorwf	___lwmod@divisor+1,w,c
  2117  001714  B4D8               	btfsc	status,2,c
  2118  001716  D018               	goto	l885
  2119  001718  0E01               	movlw	1
  2120  00171A  6E0C               	movwf	___lwmod@counter,c
  2121  00171C  D004               	goto	l880
  2122  00171E  90D8               	bcf	status,0,c
  2123  001720  360A               	rlcf	___lwmod@divisor,f,c
  2124  001722  360B               	rlcf	___lwmod@divisor+1,f,c
  2125  001724  2A0C               	incf	___lwmod@counter,f,c
  2126  001726                     l880:
  2127  001726  AE0B               	btfss	___lwmod@divisor+1,7,c
  2128  001728  D7FA               	goto	l881
  2129  00172A                     u1010:
  2130  00172A  500A               	movf	___lwmod@divisor,w,c
  2131  00172C  5C08               	subwf	___lwmod@dividend,w,c
  2132  00172E  500B               	movf	___lwmod@divisor+1,w,c
  2133  001730  5809               	subwfb	___lwmod@dividend+1,w,c
  2134  001732  A0D8               	btfss	status,0,c
  2135  001734  D004               	goto	l884
  2136  001736  500A               	movf	___lwmod@divisor,w,c
  2137  001738  5E08               	subwf	___lwmod@dividend,f,c
  2138  00173A  500B               	movf	___lwmod@divisor+1,w,c
  2139  00173C  5A09               	subwfb	___lwmod@dividend+1,f,c
  2140  00173E                     l884:
  2141  00173E  90D8               	bcf	status,0,c
  2142  001740  320B               	rrcf	___lwmod@divisor+1,f,c
  2143  001742  320A               	rrcf	___lwmod@divisor,f,c
  2144  001744  2E0C               	decfsz	___lwmod@counter,f,c
  2145  001746  D7F1               	goto	u1010
  2146  001748                     l885:
  2147  001748  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2148  00174C  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2149  001750  0012               	return		;funcret
  2150  001752                     __end_of___lwmod:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           tblptrh	equ	0xFF7
  2154                           tblptrl	equ	0xFF6
  2155                           tablat	equ	0xFF5
  2156                           prodh	equ	0xFF4
  2157                           prodl	equ	0xFF3
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           postdec1	equ	0xFE5
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function ___lwdiv *****************
  2170 ;; Defined at:
  2171 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  dividend        2    0[COMRAM] unsigned int 
  2174 ;;  divisor         2    2[COMRAM] unsigned int 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  quotient        2    4[COMRAM] unsigned int 
  2177 ;;  counter         1    6[COMRAM] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  2    0[COMRAM] unsigned int 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2, status,0
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2188 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2191 ;;Total ram usage:        7 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_sprintf
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text7
  2201  0015DE                     __ptext7:
  2202                           	opt stack 0
  2203  0015DE                     ___lwdiv:
  2204                           	opt stack 28
  2205                           
  2206                           ;incstack = 0
  2207  0015DE  0E00               	movlw	0
  2208  0015E0  6E06               	movwf	___lwdiv@quotient+1,c
  2209  0015E2  0E00               	movlw	0
  2210  0015E4  6E05               	movwf	___lwdiv@quotient,c
  2211  0015E6  5003               	movf	___lwdiv@divisor,w,c
  2212  0015E8  1004               	iorwf	___lwdiv@divisor+1,w,c
  2213  0015EA  B4D8               	btfsc	status,2,c
  2214  0015EC  D01C               	goto	l875
  2215  0015EE  0E01               	movlw	1
  2216  0015F0  6E07               	movwf	___lwdiv@counter,c
  2217  0015F2  D004               	goto	l870
  2218  0015F4  90D8               	bcf	status,0,c
  2219  0015F6  3603               	rlcf	___lwdiv@divisor,f,c
  2220  0015F8  3604               	rlcf	___lwdiv@divisor+1,f,c
  2221  0015FA  2A07               	incf	___lwdiv@counter,f,c
  2222  0015FC                     l870:
  2223  0015FC  AE04               	btfss	___lwdiv@divisor+1,7,c
  2224  0015FE  D7FA               	goto	l871
  2225  001600                     u980:
  2226  001600  90D8               	bcf	status,0,c
  2227  001602  3605               	rlcf	___lwdiv@quotient,f,c
  2228  001604  3606               	rlcf	___lwdiv@quotient+1,f,c
  2229  001606  5003               	movf	___lwdiv@divisor,w,c
  2230  001608  5C01               	subwf	___lwdiv@dividend,w,c
  2231  00160A  5004               	movf	___lwdiv@divisor+1,w,c
  2232  00160C  5802               	subwfb	___lwdiv@dividend+1,w,c
  2233  00160E  A0D8               	btfss	status,0,c
  2234  001610  D005               	goto	l874
  2235  001612  5003               	movf	___lwdiv@divisor,w,c
  2236  001614  5E01               	subwf	___lwdiv@dividend,f,c
  2237  001616  5004               	movf	___lwdiv@divisor+1,w,c
  2238  001618  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2239  00161A  8005               	bsf	___lwdiv@quotient,0,c
  2240  00161C                     l874:
  2241  00161C  90D8               	bcf	status,0,c
  2242  00161E  3204               	rrcf	___lwdiv@divisor+1,f,c
  2243  001620  3203               	rrcf	___lwdiv@divisor,f,c
  2244  001622  2E07               	decfsz	___lwdiv@counter,f,c
  2245  001624  D7ED               	goto	u980
  2246  001626                     l875:
  2247  001626  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2248  00162A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2249  00162E  0012               	return		;funcret
  2250  001630                     __end_of___lwdiv:
  2251                           	opt stack 0
  2252                           tblptru	equ	0xFF8
  2253                           tblptrh	equ	0xFF7
  2254                           tblptrl	equ	0xFF6
  2255                           tablat	equ	0xFF5
  2256                           prodh	equ	0xFF4
  2257                           prodl	equ	0xFF3
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           postdec1	equ	0xFE5
  2261                           fsr1l	equ	0xFE1
  2262                           indf2	equ	0xFDF
  2263                           postinc2	equ	0xFDE
  2264                           postdec2	equ	0xFDD
  2265                           fsr2h	equ	0xFDA
  2266                           fsr2l	equ	0xFD9
  2267                           status	equ	0xFD8
  2268                           
  2269 ;; *************** function _lcd_putrs *****************
  2270 ;; Defined at:
  2271 ;;		line 221 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2274 ;;		 -> STR_13(2), STR_7(2), STR_5(2), STR_3(2), 
  2275 ;;		 -> buffer2(20), 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2291 ;;Total ram usage:        2 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		_lcd_putc
  2296 ;; This function is called by:
  2297 ;;		_write_in_lcd
  2298 ;;		_main
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text8
  2303  001630                     __ptext8:
  2304                           	opt stack 0
  2305  001630                     _lcd_putrs:
  2306                           	opt stack 25
  2307                           
  2308                           ;unmc_lcd_216.c: 223: while(*ptr){
  2309                           
  2310                           ;incstack = 0
  2311  001630  D014               	goto	l302
  2312  001632                     
  2313                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2314  001632  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2315  001636  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2316  00163A  6AF8               	clrf	tblptru,c
  2317  00163C  0E0E               	movlw	(high __ramtop+-1)
  2318  00163E  64F7               	cpfsgt	tblptrh,c
  2319  001640  D003               	bra	u1177
  2320  001642  0008               	tblrd		*
  2321  001644  50F5               	movf	tablat,w,c
  2322  001646  D005               	bra	u1170
  2323  001648                     u1177:
  2324  001648  CFF6 FFE9          	movff	tblptrl,fsr0l
  2325  00164C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2326  001650  50EF               	movf	indf0,w,c
  2327  001652                     u1170:
  2328  001652  EC41  F00B         	call	_lcd_putc
  2329  001656  4A09               	infsnz	lcd_putrs@ptr,f,c
  2330  001658  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2331  00165A                     l302:
  2332  00165A  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2333  00165E  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2334  001662  6AF8               	clrf	tblptru,c
  2335  001664  0E0E               	movlw	(high __ramtop+-1)
  2336  001666  64F7               	cpfsgt	tblptrh,c
  2337  001668  D003               	bra	u1187
  2338  00166A  0008               	tblrd		*
  2339  00166C  50F5               	movf	tablat,w,c
  2340  00166E  D005               	bra	u1180
  2341  001670                     u1187:
  2342  001670  CFF6 FFE9          	movff	tblptrl,fsr0l
  2343  001674  CFF7 FFEA          	movff	tblptrh,fsr0h
  2344  001678  50EF               	movf	indf0,w,c
  2345  00167A                     u1180:
  2346  00167A  0900               	iorlw	0
  2347  00167C  B4D8               	btfsc	status,2,c
  2348  00167E  0012               	return	
  2349  001680  D7D8               	goto	l303
  2350  001682                     __end_of_lcd_putrs:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           indf0	equ	0xFEF
  2359                           postinc0	equ	0xFEE
  2360                           fsr0h	equ	0xFEA
  2361                           fsr0l	equ	0xFE9
  2362                           wreg	equ	0xFE8
  2363                           postdec1	equ	0xFE5
  2364                           fsr1l	equ	0xFE1
  2365                           indf2	equ	0xFDF
  2366                           postinc2	equ	0xFDE
  2367                           postdec2	equ	0xFDD
  2368                           fsr2h	equ	0xFDA
  2369                           fsr2l	equ	0xFD9
  2370                           status	equ	0xFD8
  2371                           
  2372 ;; *************** function _lcd_putc *****************
  2373 ;; Defined at:
  2374 ;;		line 172 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;  c               1    wreg     unsigned char 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  c               1    7[COMRAM] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      void 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2392 ;;Total ram usage:        1 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    3
  2395 ;; This function calls:
  2396 ;;		_lcd_gotoxy
  2397 ;;		_lcd_send_byte
  2398 ;; This function is called by:
  2399 ;;		_lcd_putrs
  2400 ;;		_lcd_puts
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text9
  2405  001682                     __ptext9:
  2406                           	opt stack 0
  2407  001682                     _lcd_putc:
  2408                           	opt stack 25
  2409                           
  2410                           ;incstack = 0
  2411                           ;lcd_putc@c stored from wreg
  2412  001682  6E08               	movwf	lcd_putc@c,c
  2413                           
  2414                           ;unmc_lcd_216.c: 173: switch(c){
  2415  001684  D018               	goto	l281
  2416  001686                     
  2417                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2418  001686  0E01               	movlw	1
  2419  001688  6E03               	movwf	lcd_send_byte@n,c
  2420  00168A  0E00               	movlw	0
  2421  00168C  ECC9  F00B         	call	_lcd_send_byte
  2422                           
  2423                           ;unmc_lcd_216.c: 176: break;
  2424  001690  0012               	return	
  2425  001692                     
  2426                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2427  001692  0E02               	movlw	2
  2428  001694  6E05               	movwf	lcd_gotoxy@y,c
  2429  001696  0E01               	movlw	1
  2430  001698  EC0A  F00C         	call	_lcd_gotoxy
  2431                           
  2432                           ;unmc_lcd_216.c: 179: break;
  2433  00169C  0012               	return	
  2434  00169E                     
  2435                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2436  00169E  0E10               	movlw	16
  2437  0016A0  6E03               	movwf	lcd_send_byte@n,c
  2438  0016A2  0E00               	movlw	0
  2439  0016A4  ECC9  F00B         	call	_lcd_send_byte
  2440                           
  2441                           ;unmc_lcd_216.c: 182: break;
  2442  0016A8  0012               	return	
  2443  0016AA                     
  2444                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2445  0016AA  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2446  0016AE  0E01               	movlw	1
  2447  0016B0  ECC9  F00B         	call	_lcd_send_byte
  2448                           
  2449                           ;unmc_lcd_216.c: 186: }
  2450                           
  2451                           ;unmc_lcd_216.c: 185: break;
  2452  0016B4  0012               	return	
  2453  0016B6                     l281:
  2454  0016B6  5008               	movf	lcd_putc@c,w,c
  2455                           
  2456                           ; Switch size 1, requested type "space"
  2457                           ; Number of cases is 3, Range of values is 8 to 12
  2458                           ; switch strategies available:
  2459                           ; Name         Instructions Cycles
  2460                           ; simple_byte           10     6 (average)
  2461                           ;	Chosen strategy is simple_byte
  2462  0016B8  0A08               	xorlw	8	; case 8
  2463  0016BA  B4D8               	btfsc	status,2,c
  2464  0016BC  D7F0               	goto	l285
  2465  0016BE  0A02               	xorlw	2	; case 10
  2466  0016C0  B4D8               	btfsc	status,2,c
  2467  0016C2  D7E7               	goto	l284
  2468  0016C4  0A06               	xorlw	6	; case 12
  2469  0016C6  B4D8               	btfsc	status,2,c
  2470  0016C8  D7DE               	goto	l282
  2471  0016CA  D7EF               	goto	l286
  2472  0016CC                     __end_of_lcd_putc:
  2473                           	opt stack 0
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           prodh	equ	0xFF4
  2479                           prodl	equ	0xFF3
  2480                           indf0	equ	0xFEF
  2481                           postinc0	equ	0xFEE
  2482                           fsr0h	equ	0xFEA
  2483                           fsr0l	equ	0xFE9
  2484                           wreg	equ	0xFE8
  2485                           postdec1	equ	0xFE5
  2486                           fsr1l	equ	0xFE1
  2487                           indf2	equ	0xFDF
  2488                           postinc2	equ	0xFDE
  2489                           postdec2	equ	0xFDD
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function _lcd_gotoxy *****************
  2495 ;; Defined at:
  2496 ;;		line 158 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  x               1    wreg     unsigned char 
  2499 ;;  y               1    4[COMRAM] unsigned char 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  x               1    5[COMRAM] unsigned char 
  2502 ;;  address         1    6[COMRAM] unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, status,0, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2512 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2515 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2516 ;;Total ram usage:        3 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    2
  2519 ;; This function calls:
  2520 ;;		_lcd_send_byte
  2521 ;; This function is called by:
  2522 ;;		_escribir_numero
  2523 ;;		_main
  2524 ;;		_lcd_putc
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text10
  2529  001814                     __ptext10:
  2530                           	opt stack 0
  2531  001814                     _lcd_gotoxy:
  2532                           	opt stack 25
  2533                           
  2534                           ;incstack = 0
  2535                           ;lcd_gotoxy@x stored from wreg
  2536  001814  6E06               	movwf	lcd_gotoxy@x,c
  2537                           
  2538                           ;unmc_lcd_216.c: 159: int8 address;
  2539                           ;unmc_lcd_216.c: 161: if(y != 1)
  2540  001816  0405               	decf	lcd_gotoxy@y,w,c
  2541  001818  B4D8               	btfsc	status,2,c
  2542  00181A  D002               	goto	l276
  2543                           
  2544                           ;unmc_lcd_216.c: 162: address = 0x40;
  2545  00181C  0E40               	movlw	64
  2546  00181E  D001               	goto	L1
  2547  001820                     l276:
  2548                           
  2549                           ;unmc_lcd_216.c: 163: else
  2550                           ;unmc_lcd_216.c: 164: address=0;
  2551  001820  0E00               	movlw	0
  2552  001822                     L1:
  2553  001822  6E07               	movwf	lcd_gotoxy@address,c
  2554                           
  2555                           ;unmc_lcd_216.c: 166: address += x-1;
  2556  001824  0406               	decf	lcd_gotoxy@x,w,c
  2557  001826  2607               	addwf	lcd_gotoxy@address,f,c
  2558                           
  2559                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2560  001828  5007               	movf	lcd_gotoxy@address,w,c
  2561  00182A  0980               	iorlw	128
  2562  00182C  6E03               	movwf	lcd_send_byte@n,c
  2563  00182E  0E00               	movlw	0
  2564  001830  ECC9  F00B         	call	_lcd_send_byte
  2565  001834  0012               	return		;funcret
  2566  001836                     __end_of_lcd_gotoxy:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           indf0	equ	0xFEF
  2575                           postinc0	equ	0xFEE
  2576                           fsr0h	equ	0xFEA
  2577                           fsr0l	equ	0xFE9
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           fsr1l	equ	0xFE1
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _Setup *****************
  2589 ;; Defined at:
  2590 ;;		line 18 in file "main.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;		None
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2608 ;;Total ram usage:        0 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    3
  2611 ;; This function calls:
  2612 ;;		_lcd_comand
  2613 ;;		_lcd_init
  2614 ;; This function is called by:
  2615 ;;		_main
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text11
  2620  001752                     __ptext11:
  2621                           	opt stack 0
  2622  001752                     _Setup:
  2623                           	opt stack 27
  2624                           
  2625                           ;main.c: 19: OSCTUNEbits.INTSRC = 1;
  2626                           
  2627                           ;incstack = 0
  2628  001752  8E9B               	bsf	3995,7,c	;volatile
  2629                           
  2630                           ;main.c: 20: OSCTUNEbits.PLLEN = 0;
  2631  001754  9C9B               	bcf	3995,6,c	;volatile
  2632                           
  2633                           ;main.c: 21: OSCCONbits.IRCF0 = 1;
  2634  001756  88D3               	bsf	4051,4,c	;volatile
  2635                           
  2636                           ;main.c: 22: OSCCONbits.IRCF1 = 1;
  2637  001758  8AD3               	bsf	4051,5,c	;volatile
  2638                           
  2639                           ;main.c: 23: OSCCONbits.IRCF2 = 1;
  2640  00175A  8CD3               	bsf	4051,6,c	;volatile
  2641                           
  2642                           ;main.c: 24: OSCCONbits.SCS0 = 0;
  2643  00175C  90D3               	bcf	4051,0,c	;volatile
  2644                           
  2645                           ;main.c: 25: OSCCONbits.SCS1 = 0;
  2646  00175E  92D3               	bcf	4051,1,c	;volatile
  2647                           
  2648                           ;main.c: 26: TRISA = 0b00010111;
  2649  001760  0E17               	movlw	23
  2650  001762  6E92               	movwf	3986,c	;volatile
  2651                           
  2652                           ;main.c: 27: TRISB = 0;
  2653  001764  0E00               	movlw	0
  2654  001766  6E93               	movwf	3987,c	;volatile
  2655                           
  2656                           ;main.c: 28: TRISC = 0b00000111;
  2657  001768  0E07               	movlw	7
  2658  00176A  6E94               	movwf	3988,c	;volatile
  2659                           
  2660                           ;main.c: 29: INTCON2bits.RBPU = 1;
  2661  00176C  8EF1               	bsf	intcon2,7,c	;volatile
  2662                           
  2663                           ;main.c: 30: ANCON0 = 0b11111111;
  2664  00176E  010F               	movlb	15	; () banked
  2665  001770  6948               	setf	72,b	;volatile
  2666                           
  2667                           ;main.c: 31: ANCON0 = 0b10010111;
  2668  001772  0E97               	movlw	151
  2669  001774  010F               	movlb	15	; () banked
  2670  001776  6F48               	movwf	72,b	;volatile
  2671                           
  2672                           ;main.c: 32: ADCON0 = 0b00101101;
  2673  001778  0E2D               	movlw	45
  2674  00177A  6EC2               	movwf	4034,c	;volatile
  2675                           
  2676                           ;main.c: 33: ADCON1 = 0b00010000;
  2677  00177C  0E10               	movlw	16
  2678  00177E  6EC1               	movwf	4033,c	;volatile
  2679                           
  2680                           ; BSR set to: 15
  2681                           ;main.c: 36: T1CONbits.T1OSCEN = 1;
  2682  001780  86CD               	bsf	4045,3,c	;volatile
  2683                           
  2684                           ; BSR set to: 15
  2685                           ;main.c: 38: lcd_init();
  2686  001782  EC79  F00A         	call	_lcd_init	;wreg free
  2687                           
  2688                           ;main.c: 39: lcd_comand(0b00001100);
  2689  001786  0E0C               	movlw	12
  2690  001788  EC41  F00C         	call	_lcd_comand
  2691                           
  2692                           ;main.c: 40: LATBbits.LATB1 = 0;;
  2693  00178C  928A               	bcf	3978,1,c	;volatile
  2694                           
  2695                           ;main.c: 41: LATBbits.LATB0 = 0;;
  2696  00178E  908A               	bcf	3978,0,c	;volatile
  2697  001790  0012               	return		;funcret
  2698  001792                     __end_of_Setup:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           intcon2	equ	0xFF1
  2707                           indf0	equ	0xFEF
  2708                           postinc0	equ	0xFEE
  2709                           fsr0h	equ	0xFEA
  2710                           fsr0l	equ	0xFE9
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           postdec2	equ	0xFDD
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _lcd_init *****************
  2722 ;; Defined at:
  2723 ;;		line 119 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;  i               1    4[COMRAM] unsigned char 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2741 ;;Total ram usage:        1 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    2
  2744 ;; This function calls:
  2745 ;;		_Delay1KTCYx
  2746 ;;		_lcd_send_byte
  2747 ;;		_lcd_send_nibble
  2748 ;; This function is called by:
  2749 ;;		_Setup
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text12
  2755  0014F2                     __ptext12:
  2756                           	opt stack 0
  2757  0014F2                     _lcd_init:
  2758                           	opt stack 28
  2759                           
  2760                           ;unmc_lcd_216.c: 120: int8 i;
  2761                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  2762                           
  2763                           ;incstack = 0
  2764  0014F2  9693               	bcf	3987,3,c	;volatile
  2765                           
  2766                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  2767  0014F4  9493               	bcf	3987,2,c	;volatile
  2768                           
  2769                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  2770  0014F6  968A               	bcf	3978,3,c	;volatile
  2771                           
  2772                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  2773  0014F8  948A               	bcf	3978,2,c	;volatile
  2774                           
  2775                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  2776  0014FA  9893               	bcf	3987,4,c	;volatile
  2777                           
  2778                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  2779  0014FC  9A93               	bcf	3987,5,c	;volatile
  2780                           
  2781                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  2782  0014FE  9C93               	bcf	3987,6,c	;volatile
  2783                           
  2784                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  2785  001500  9E93               	bcf	3987,7,c	;volatile
  2786                           
  2787                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  2788  001502  0E0A               	movlw	10
  2789  001504  EC2A  F00C         	call	_Delay1KTCYx
  2790                           
  2791                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  2792  001508  0E0A               	movlw	10
  2793  00150A  EC2A  F00C         	call	_Delay1KTCYx
  2794                           
  2795                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  2796  00150E  0E0A               	movlw	10
  2797  001510  EC2A  F00C         	call	_Delay1KTCYx
  2798                           
  2799                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  2800  001514  0E00               	movlw	0
  2801  001516  6E05               	movwf	lcd_init@i,c
  2802  001518                     l1806:
  2803  001518  0E02               	movlw	2
  2804  00151A  6405               	cpfsgt	lcd_init@i,c
  2805  00151C  D001               	goto	l269
  2806  00151E  D008               	goto	u1210
  2807  001520                     l269:
  2808                           
  2809                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  2810  001520  0E03               	movlw	3
  2811  001522  ECB4  F00A         	call	_lcd_send_nibble
  2812                           
  2813                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  2814  001526  0E0A               	movlw	10
  2815  001528  EC2A  F00C         	call	_Delay1KTCYx
  2816  00152C  2A05               	incf	lcd_init@i,f,c
  2817  00152E  D7F4               	goto	l1806
  2818  001530                     u1210:
  2819                           
  2820                           ;unmc_lcd_216.c: 146: }
  2821                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  2822  001530  0E02               	movlw	2
  2823  001532  ECB4  F00A         	call	_lcd_send_nibble
  2824                           
  2825                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  2826  001536  0E00               	movlw	0
  2827  001538  6E05               	movwf	lcd_init@i,c
  2828  00153A                     l1820:
  2829  00153A  0E03               	movlw	3
  2830  00153C  6405               	cpfsgt	lcd_init@i,c
  2831  00153E  D001               	goto	l271
  2832  001540  0012               	return	
  2833  001542                     l271:
  2834                           
  2835                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2836  001542  5005               	movf	lcd_init@i,w,c
  2837  001544  0D01               	mullw	1
  2838  001546  0E0B               	movlw	low _LCD_INIT_STRING
  2839  001548  24F3               	addwf	prodl,w,c
  2840  00154A  6EF6               	movwf	tblptrl,c
  2841  00154C  0E0F               	movlw	high _LCD_INIT_STRING
  2842  00154E  20F4               	addwfc	prodh,w,c
  2843  001550  6EF7               	movwf	tblptrh,c
  2844  001552                     	if	0	;There are less than 3 active tblptr bytes
  2845  001552                     	endif
  2846  001552  0008               	tblrd		*
  2847  001554  CFF5 F003          	movff	tablat,lcd_send_byte@n
  2848  001558  0E00               	movlw	0
  2849  00155A  ECC9  F00B         	call	_lcd_send_byte
  2850                           
  2851                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  2852  00155E  0E0A               	movlw	10
  2853  001560  EC2A  F00C         	call	_Delay1KTCYx
  2854  001564  2A05               	incf	lcd_init@i,f,c
  2855  001566  D7E9               	goto	l1820
  2856  001568                     __end_of_lcd_init:
  2857                           	opt stack 0
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           prodh	equ	0xFF4
  2863                           prodl	equ	0xFF3
  2864                           intcon2	equ	0xFF1
  2865                           indf0	equ	0xFEF
  2866                           postinc0	equ	0xFEE
  2867                           fsr0h	equ	0xFEA
  2868                           fsr0l	equ	0xFE9
  2869                           wreg	equ	0xFE8
  2870                           postdec1	equ	0xFE5
  2871                           fsr1l	equ	0xFE1
  2872                           indf2	equ	0xFDF
  2873                           postinc2	equ	0xFDE
  2874                           postdec2	equ	0xFDD
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function _Delay1KTCYx *****************
  2880 ;; Defined at:
  2881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d1ktcyx.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  unit            1    wreg     unsigned char 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  unit            1    0[COMRAM] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2899 ;;Total ram usage:        1 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_lcd_init
  2905 ;;		_DelayPORXLCD
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text13
  2910  001854                     __ptext13:
  2911                           	opt stack 0
  2912  001854                     _Delay1KTCYx:
  2913                           	opt stack 29
  2914                           
  2915                           ;incstack = 0
  2916                           ;Delay1KTCYx@unit stored from wreg
  2917  001854  6E01               	movwf	Delay1KTCYx@unit,c
  2918  001856                     l656:
  2919  001856  0EC8               	movlw	200
  2920  001858                     u1707:
  2921  001858  D000               	nop2	
  2922  00185A  2EE8               	decfsz	wreg,f,c
  2923  00185C  D7FD               	bra	u1707
  2924  00185E  2E01               	decfsz	Delay1KTCYx@unit,f,c
  2925  001860  D7FA               	goto	l656
  2926  001862  0012               	return	
  2927  001864                     __end_of_Delay1KTCYx:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon2	equ	0xFF1
  2936                           indf0	equ	0xFEF
  2937                           postinc0	equ	0xFEE
  2938                           fsr0h	equ	0xFEA
  2939                           fsr0l	equ	0xFE9
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1l	equ	0xFE1
  2943                           indf2	equ	0xFDF
  2944                           postinc2	equ	0xFDE
  2945                           postdec2	equ	0xFDD
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function _lcd_comand *****************
  2951 ;; Defined at:
  2952 ;;		line 189 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  d               1    wreg     unsigned char 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  d               1    4[COMRAM] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2969 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2970 ;;Total ram usage:        1 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    2
  2973 ;; This function calls:
  2974 ;;		_lcd_send_byte
  2975 ;; This function is called by:
  2976 ;;		_Setup
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text14
  2981  001882                     __ptext14:
  2982                           	opt stack 0
  2983  001882                     _lcd_comand:
  2984                           	opt stack 27
  2985                           
  2986                           ;incstack = 0
  2987                           ;lcd_comand@d stored from wreg
  2988  001882  6E05               	movwf	lcd_comand@d,c
  2989                           
  2990                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  2991  001884  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  2992  001888  0E00               	movlw	0
  2993  00188A  ECC9  F00B         	call	_lcd_send_byte
  2994  00188E  0012               	return		;funcret
  2995  001890                     __end_of_lcd_comand:
  2996                           	opt stack 0
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           intcon2	equ	0xFF1
  3004                           indf0	equ	0xFEF
  3005                           postinc0	equ	0xFEE
  3006                           fsr0h	equ	0xFEA
  3007                           fsr0l	equ	0xFE9
  3008                           wreg	equ	0xFE8
  3009                           postdec1	equ	0xFE5
  3010                           fsr1l	equ	0xFE1
  3011                           indf2	equ	0xFDF
  3012                           postinc2	equ	0xFDE
  3013                           postdec2	equ	0xFDD
  3014                           fsr2h	equ	0xFDA
  3015                           fsr2l	equ	0xFD9
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _lcd_send_byte *****************
  3019 ;; Defined at:
  3020 ;;		line 86 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  address         1    wreg     unsigned char 
  3023 ;;  n               1    2[COMRAM] unsigned char 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  address         1    3[COMRAM] unsigned char 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, status,0, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3035 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3038 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3039 ;;Total ram usage:        2 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    1
  3042 ;; This function calls:
  3043 ;;		_Delay100TCYx
  3044 ;;		_lcd_send_nibble
  3045 ;; This function is called by:
  3046 ;;		_lcd_init
  3047 ;;		_lcd_gotoxy
  3048 ;;		_lcd_putc
  3049 ;;		_lcd_comand
  3050 ;;		_lcd_setcursor_vb
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text15
  3055  001792                     __ptext15:
  3056                           	opt stack 0
  3057  001792                     _lcd_send_byte:
  3058                           	opt stack 26
  3059                           
  3060                           ;incstack = 0
  3061                           ;lcd_send_byte@address stored from wreg
  3062  001792  6E04               	movwf	lcd_send_byte@address,c
  3063                           
  3064                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3065  001794  968A               	bcf	3978,3,c	;volatile
  3066                           
  3067                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3068  001796  0E02               	movlw	2
  3069  001798  EC32  F00C         	call	_Delay100TCYx
  3070                           
  3071                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3072  00179C  9893               	bcf	3987,4,c	;volatile
  3073                           
  3074                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3075  00179E  9A93               	bcf	3987,5,c	;volatile
  3076                           
  3077                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3078  0017A0  9C93               	bcf	3987,6,c	;volatile
  3079                           
  3080                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3081  0017A2  9E93               	bcf	3987,7,c	;volatile
  3082                           
  3083                           ;unmc_lcd_216.c: 101: if(address)
  3084  0017A4  5004               	movf	lcd_send_byte@address,w,c
  3085  0017A6  B4D8               	btfsc	status,2,c
  3086  0017A8  D002               	goto	l264
  3087                           
  3088                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3089  0017AA  868A               	bsf	3978,3,c	;volatile
  3090  0017AC  D001               	goto	l265
  3091  0017AE                     l264:
  3092                           
  3093                           ;unmc_lcd_216.c: 103: else
  3094                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3095  0017AE  968A               	bcf	3978,3,c	;volatile
  3096  0017B0                     l265:
  3097                           
  3098                           ;unmc_lcd_216.c: 106: __nop();
  3099  0017B0  F000               	nop	
  3100                           
  3101                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3102  0017B2  3803               	swapf	lcd_send_byte@n,w,c
  3103  0017B4  0B0F               	andlw	15
  3104  0017B6  ECB4  F00A         	call	_lcd_send_nibble
  3105                           
  3106                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3107  0017BA  5003               	movf	lcd_send_byte@n,w,c
  3108  0017BC  0B0F               	andlw	15
  3109  0017BE  ECB4  F00A         	call	_lcd_send_nibble
  3110  0017C2  0012               	return		;funcret
  3111  0017C4                     __end_of_lcd_send_byte:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon2	equ	0xFF1
  3120                           indf0	equ	0xFEF
  3121                           postinc0	equ	0xFEE
  3122                           fsr0h	equ	0xFEA
  3123                           fsr0l	equ	0xFE9
  3124                           wreg	equ	0xFE8
  3125                           postdec1	equ	0xFE5
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           postinc2	equ	0xFDE
  3129                           postdec2	equ	0xFDD
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _lcd_send_nibble *****************
  3135 ;; Defined at:
  3136 ;;		line 25 in file "../../Librerias/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  nibble          1    wreg     unsigned char 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;  nibble          1    1[COMRAM] unsigned char 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg, status,2, status,0
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3154 ;;Total ram usage:        2 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_lcd_send_byte
  3160 ;;		_lcd_init
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text16
  3165  001568                     __ptext16:
  3166                           	opt stack 0
  3167  001568                     _lcd_send_nibble:
  3168                           	opt stack 26
  3169                           
  3170                           ;incstack = 0
  3171                           ;lcd_send_nibble@nibble stored from wreg
  3172  001568  6E02               	movwf	lcd_send_nibble@nibble,c
  3173                           
  3174                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3175  00156A  A002               	btfss	lcd_send_nibble@nibble,0,c
  3176  00156C  D003               	goto	u850
  3177  00156E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3178  001570  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3179  001572  D001               	goto	u868
  3180  001574                     u850:
  3181  001574  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3182  001576                     u868:
  3183  001576  3A01               	swapf	??_lcd_send_nibble,f,c
  3184  001578  508A               	movf	3978,w,c	;volatile
  3185  00157A  1801               	xorwf	??_lcd_send_nibble,w,c
  3186  00157C  0BEF               	andlw	-17
  3187  00157E  1801               	xorwf	??_lcd_send_nibble,w,c
  3188  001580  6E8A               	movwf	3978,c	;volatile
  3189                           
  3190                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3191  001582  A202               	btfss	lcd_send_nibble@nibble,1,c
  3192  001584  D003               	goto	u870
  3193  001586  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3194  001588  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3195  00158A  D001               	goto	u888
  3196  00158C                     u870:
  3197  00158C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3198  00158E                     u888:
  3199  00158E  3A01               	swapf	??_lcd_send_nibble,f,c
  3200  001590  4601               	rlncf	??_lcd_send_nibble,f,c
  3201  001592  508A               	movf	3978,w,c	;volatile
  3202  001594  1801               	xorwf	??_lcd_send_nibble,w,c
  3203  001596  0BDF               	andlw	-33
  3204  001598  1801               	xorwf	??_lcd_send_nibble,w,c
  3205  00159A  6E8A               	movwf	3978,c	;volatile
  3206                           
  3207                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3208  00159C  A402               	btfss	lcd_send_nibble@nibble,2,c
  3209  00159E  D003               	goto	u890
  3210  0015A0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3211  0015A2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3212  0015A4  D001               	goto	u908
  3213  0015A6                     u890:
  3214  0015A6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3215  0015A8                     u908:
  3216  0015A8  3A01               	swapf	??_lcd_send_nibble,f,c
  3217  0015AA  4601               	rlncf	??_lcd_send_nibble,f,c
  3218  0015AC  4601               	rlncf	??_lcd_send_nibble,f,c
  3219  0015AE  508A               	movf	3978,w,c	;volatile
  3220  0015B0  1801               	xorwf	??_lcd_send_nibble,w,c
  3221  0015B2  0BBF               	andlw	-65
  3222  0015B4  1801               	xorwf	??_lcd_send_nibble,w,c
  3223  0015B6  6E8A               	movwf	3978,c	;volatile
  3224                           
  3225                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3226  0015B8  A602               	btfss	lcd_send_nibble@nibble,3,c
  3227  0015BA  D003               	goto	u910
  3228  0015BC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3229  0015BE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3230  0015C0  D001               	goto	u928
  3231  0015C2                     u910:
  3232  0015C2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3233  0015C4                     u928:
  3234  0015C4  3201               	rrcf	??_lcd_send_nibble,f,c
  3235  0015C6  3201               	rrcf	??_lcd_send_nibble,f,c
  3236  0015C8  508A               	movf	3978,w,c	;volatile
  3237  0015CA  1801               	xorwf	??_lcd_send_nibble,w,c
  3238  0015CC  0B7F               	andlw	-129
  3239  0015CE  1801               	xorwf	??_lcd_send_nibble,w,c
  3240  0015D0  6E8A               	movwf	3978,c	;volatile
  3241                           
  3242                           ;unmc_lcd_216.c: 32: __nop();
  3243  0015D2  F000               	nop	
  3244                           
  3245                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3246  0015D4  848A               	bsf	3978,2,c	;volatile
  3247                           
  3248                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3249  0015D6  F000               	nop	
  3250  0015D8  F000               	nop	
  3251                           
  3252                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3253  0015DA  948A               	bcf	3978,2,c	;volatile
  3254  0015DC  0012               	return		;funcret
  3255  0015DE                     __end_of_lcd_send_nibble:
  3256                           	opt stack 0
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon2	equ	0xFF1
  3264                           indf0	equ	0xFEF
  3265                           postinc0	equ	0xFEE
  3266                           fsr0h	equ	0xFEA
  3267                           fsr0l	equ	0xFE9
  3268                           wreg	equ	0xFE8
  3269                           postdec1	equ	0xFE5
  3270                           fsr1l	equ	0xFE1
  3271                           indf2	equ	0xFDF
  3272                           postinc2	equ	0xFDE
  3273                           postdec2	equ	0xFDD
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _Delay100TCYx *****************
  3279 ;; Defined at:
  3280 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d100tcyx.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  unit            1    wreg     unsigned char 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  unit            1    0[COMRAM] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3295 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3297 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3298 ;;Total ram usage:        1 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_lcd_send_byte
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text17
  3308  001864                     __ptext17:
  3309                           	opt stack 0
  3310  001864                     _Delay100TCYx:
  3311                           	opt stack 26
  3312                           
  3313                           ;incstack = 0
  3314                           ;Delay100TCYx@unit stored from wreg
  3315  001864  6E01               	movwf	Delay100TCYx@unit,c
  3316  001866                     l642:
  3317  001866  0E21               	movlw	33
  3318  001868                     u1717:
  3319  001868  2EE8               	decfsz	wreg,f,c
  3320  00186A  D7FE               	bra	u1717
  3321  00186C  F000               	nop	
  3322  00186E  2E01               	decfsz	Delay100TCYx@unit,f,c
  3323  001870  D7FA               	goto	l642
  3324  001872  0012               	return	
  3325  001874                     __end_of_Delay100TCYx:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           intcon2	equ	0xFF1
  3334                           indf0	equ	0xFEF
  3335                           postinc0	equ	0xFEE
  3336                           fsr0h	equ	0xFEA
  3337                           fsr0l	equ	0xFE9
  3338                           wreg	equ	0xFE8
  3339                           postdec1	equ	0xFE5
  3340                           fsr1l	equ	0xFE1
  3341                           indf2	equ	0xFDF
  3342                           postinc2	equ	0xFDE
  3343                           postdec2	equ	0xFDD
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           prodh	equ	0xFF4
  3352                           prodl	equ	0xFF3
  3353                           intcon2	equ	0xFF1
  3354                           indf0	equ	0xFEF
  3355                           postinc0	equ	0xFEE
  3356                           fsr0h	equ	0xFEA
  3357                           fsr0l	equ	0xFE9
  3358                           wreg	equ	0xFE8
  3359                           postdec1	equ	0xFE5
  3360                           fsr1l	equ	0xFE1
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368                           	psect	rparam
  3369  0000                     tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           intcon2	equ	0xFF1
  3376                           indf0	equ	0xFEF
  3377                           postinc0	equ	0xFEE
  3378                           fsr0h	equ	0xFEA
  3379                           fsr0l	equ	0xFE9
  3380                           wreg	equ	0xFE8
  3381                           postdec1	equ	0xFE5
  3382                           fsr1l	equ	0xFE1
  3383                           indf2	equ	0xFDF
  3384                           postinc2	equ	0xFDE
  3385                           postdec2	equ	0xFDD
  3386                           fsr2h	equ	0xFDA
  3387                           fsr2l	equ	0xFD9
  3388                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    14
    Data        14
    BSS         101
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     49      95
    BANK0           160      0      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_13(CODE[2]), STR_7(CODE[2]), STR_5(CODE[2]), STR_3(CODE[2]), 
		 -> buffer2(BANK0[20]), 

    escribir_numero@num	PTR int  size(2) Largest target is 3775
		 -> NULL(NULL[0]), RAM(DATA[3775]), 

    write_in_lcd@key	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    operador	PTR unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_9(CODE[1]), STR_8(CODE[2]), STR_6(CODE[2]), 
		 -> STR_4(CODE[2]), STR_1(CODE[1]), 


Critical Paths under _main in COMRAM

    _main->_escribir_numero
    _escribir_numero->_write_in_lcd
    _write_in_lcd->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _Setup->_lcd_comand
    _Setup->_lcd_init
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   18376
                                             41 COMRAM     8     8      0
                              _Setup
                    _escribir_numero
                         _lcd_gotoxy
                           _lcd_init
                          _lcd_putrs
                       _write_in_lcd
 ---------------------------------------------------------------------------------
 (1) _escribir_numero                                      8     6      2    6977
                                             33 COMRAM     8     6      2
                         _lcd_gotoxy
                       _write_in_lcd
 ---------------------------------------------------------------------------------
 (1) _write_in_lcd                                         2     0      2    4696
                                             31 COMRAM     2     0      2
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28    22      6    1884
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    2562
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    2137
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1385
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    1662
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     932
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (2) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     730
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     708
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _escribir_numero
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _write_in_lcd
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_init
     _Delay1KTCYx
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
     _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _write_in_lcd
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      46       5       43.8%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     31      5F       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5       6        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 01 20:58:35 2017

               escribir_numero@i 0026                                _a 008E  
                              _b 008C                                _c 008A  
                              _i 003A                                _j 0090  
                              _k 0088                   ?_lcd_send_byte 0003  
            ___wmul@multiplicand 0003                      lcd_comand@d 0005  
                   __CFG_CP0$OFF 000000               escribir_numero@num 0022  
                            l211 1032                              l203 1002  
                            l302 165A                              l230 1162  
                            l303 1632                              l231 10FA  
                            l223 10AC                              l215 1046  
                            l207 101E                              l320 120C  
                            l160 1448                              l232 10E4  
                            l321 1206                              l242 1190  
                            l234 1132                              l235 111C  
                            l227 10C0                              l219 1074  
                            l332 1298                              l164 14DA  
                            l172 0F22                              l333 12C0  
                            l317 11DE                              l165 14B8  
                            l157 1480                              l237 1162  
                            l326 123A                              l318 11F8  
                            l271 1542                              l159 146A  
                            l167 14F0                              l191 0FAC  
                            l183 0F62                              l175 0F3A  
                            l264 17AE                              l328 129E  
                            l265 17B0                              l281 16B6  
                            l337 132C                              l282 1686  
                            l338 1334                              l347 13D6  
                            l339 1358                              l195 0FC0  
                            l187 0F90                              l179 0F4E  
                            l276 1820                              l284 1692  
                            l348 1384                              l269 1520  
                            l285 169E                              l286 16AA  
                            l199 0FD4                              l642 1866  
                            l656 1856                              l870 15FC  
                            l871 15F4                              l791 184C  
                            l880 1726                              l881 171E  
                            l874 161C                              l875 1626  
                            l884 173E                              l885 1748  
                            u910 15C2                              u850 1574  
                            u908 15A8                              u870 158C  
                            u928 15C4                              u890 15A6  
                            u868 1576                              u980 1600  
                            u888 158E                              _dia 0057  
                            _mes 005B                              wreg 000FE8  
                    lcd_gotoxy@x 0006                      lcd_gotoxy@y 0005  
                           l1820 153A                             l1806 1518  
                           l1742 12DC                             STR_1 0F15  
                           STR_2 0F0F                             STR_3 0F14  
                           STR_4 0F14                             STR_5 0F1A  
                           STR_6 0F1A                             STR_7 0F18  
                           STR_8 0F18                             STR_9 0F15  
                           u1010 172A                             u1210 1530  
                           u1130 1360                             u1140 137E  
                           u1300 0F3E                             u1150 13DE  
                           u1160 13F6                             u1080 1308  
                           u1400 0FC4                             u1320 0F52  
                           u1170 1652                             u1250 141C  
                           u1180 167A                             u1500 104A  
                           u1420 0FD8                             u1340 0F66  
                           u1270 1490                             u1520 1078  
                           u1440 1006                             u1360 0F94  
                           u1177 1648                             u1610 1166  
                           u1187 1670                             u1540 10B0  
                           u1460 1022                             u1380 0FB0  
                           u1630 1194                             u1640 119E  
                           u1560 10C4                             u1480 1036  
                           u1707 1858                             u1660 11B6  
                           u1717 1868                             u1658 11A0  
                           u1678 11B8                             u1697 11C8  
               ?_lcd_send_nibble 0001                             _anio 005D  
                           _flag 02F8                             _main 0F1E  
                           _hora 0055                             fsr0h 000FEA  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                    main@num_der 002C                    __CFG_T1DIG$ON 000000  
                    main@num_izq 0031                             prodh 000FF4  
                           prodl 000FF3                             start 0000  
                  __CFG_IESO$OFF 000000         __size_of_escribir_numero 00EE  
                   ___param_bank 000000             escribir_numero@i_784 0028  
                    _Delay1KTCYx 1854                    __CFG_PLLDIV$1 000000  
                          ?_main 0001                            STR_10 0F16  
                          STR_11 0F15                            STR_12 0F15  
                          STR_13 0F16                            STR_14 0F16  
          __size_of_Delay100TCYx 0010                  __end_of___lwdiv 1630  
                __end_of___lwmod 1752                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                 __CFG_FCMEN$OFF 000000                            _Setup 1752  
                __end_of_dpowers 0F0B                            _mes_d 003F  
                          _mes_u 0040                  __end_of_isdigit 1854  
                          main@i 002D                            main@j 002F  
                 __pbitbssCOMRAM 02F8                            tablat 000FF5  
                   lcd_putrs@ptr 0009                            status 000FD8  
                __end_of_sprintf 1404          __CFG_DSWDTOSC$INTOSCREF 000000  
                __initialization 16CC                     _Delay100TCYx 1864  
                   __end_of_main 11D4                  ??_lcd_send_byte 0004  
          __size_of_write_in_lcd 002A                           ??_main 002A  
                  __activetblptr 000002                           ?_Setup 0001  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
                         _ANCON0 000F48                   __CFG_WDTEN$OFF 000000  
                 __CFG_WPCFG$OFF 000000                   __CFG_WPDIS$OFF 000000  
                   _write_in_lcd 17C4                   __CFG_XINST$OFF 000000  
               __end_of_lcd_init 1568                 __end_of_lcd_putc 16CC  
                         ___wmul 17EE                   __CFG_STVREN$ON 000000  
                write_in_lcd@key 0020                           _diasem 0059  
                         _anio_d 003C                           _anio_u 003D  
                      ??___lwdiv 0005                        ??___lwmod 000C  
                         _hora_d 0043                           _hora_u 0044  
                         clear_0 16F2                           clear_1 1700  
                         _minuto 0053                ??_escribir_numero 0024  
                   __pdataCOMRAM 0051                        ??_isdigit 0001  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ??_sprintf 0013                       __accesstop 0060  
        __end_of__initialization 1706                    ___rparam_used 000001  
                 __pcstackCOMRAM 0001                    __end_of_Setup 1792  
                __CFG_DSWDTPS$G2 000000                  __CFG_OSC$INTOSC 000000  
                        ??_Setup 0006                lcd_gotoxy@address 0007  
             __size_of_lcd_putrs 0052                     sprintf@width 001D  
                     __pbssBANK0 0060                       _dia_semana 003E  
                 lcd_send_byte@n 0003                          ?___wmul 0001  
                   ?_Delay1KTCYx 0001                       _lcd_comand 1882  
                     _lcd_gotoxy 1814                        ?_lcd_init 0001  
                      ?_lcd_putc 0001                          __Hparam 0000  
                        __Lparam 0000         __size_of_lcd_send_nibble 0076  
_contador_numeros_ingresados_der 0032                __end_of_lcd_putrs 1682  
_contador_numeros_ingresados_izq 0034                  __size_of___wmul 0026  
                        ___lwdiv 15DE                          ___lwmod 1710  
                   __psmallconst 0F00                      _RtccTimeVal 0084  
                        __pcinit 16CC                          _fecha_d 0041  
                        _fecha_u 0042                          __ramtop 0F00  
                        __ptext0 0F1E                          __ptext1 1404  
                        __ptext2 17C4                          __ptext3 11D4  
                        __ptext4 1836                          __ptext5 17EE  
                        __ptext6 1710                          __ptext7 15DE  
                        __ptext8 1630                          __ptext9 1682  
                        _buffer2 0092                        _T1CONbits 000FCD  
                        _dpowers 0F01                          _isdigit 1836  
                        _segundo 0038                          _sprintf 11D4  
                     ??_lcd_init 0005                       ??_lcd_putc 0008  
           end_of_initialization 1706             lcd_send_byte@address 0004  
                  __Lmediumconst 0000                  _escribir_numero 1404  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
          __end_of_lcd_send_byte 17C4                        _PORTAbits 000F80  
                      _PORTCbits 000F82                 __CFG_DSBOREN$OFF 000000  
                    ?_lcd_comand 0001                 __CFG_CPUDIV$OSC1 000000  
                      _TRISBbits 000F93                      ?_lcd_gotoxy 0005  
                _LCD_INIT_STRING 0F0B                 __CFG_IOL1WAY$OFF 000000  
            __CFG_MSSP7B_EN$MSK7 000000                 Delay100TCYx@unit 0001  
                 __end_of___wmul 1814                    __pidataCOMRAM 1874  
              ??_lcd_send_nibble 0001             __size_of_Delay1KTCYx 0010  
               __CFG_DSWDTEN$OFF 000000              start_initialization 16CC  
        __end_of_escribir_numero 14F2              __size_of_lcd_comand 000E  
            __size_of_lcd_gotoxy 0022                         ??___wmul 0005  
               __CFG_LPT1OSC$OFF 000000          __end_of_LCD_INIT_STRING 0F0F  
                    __pbssCOMRAM 0032                     _isdigit$1892 0002  
                Delay1KTCYx@unit 0001                __size_of_lcd_init 0076  
                    sprintf@flag 0019                __size_of_lcd_putc 004A  
                    sprintf@prec 001C                 ___lwdiv@dividend 0001  
                  ?_Delay100TCYx 0001                         ?___lwdiv 0001  
                       ?___lwmod 0008                        _lcd_putrs 1630  
                    __smallconst 0F00                         ?_isdigit 0001  
           __CFG_RTCOSC$T1OSCREF 000000                   __size_of_Setup 0040  
               ___lwdiv@quotient 0005                         ?_sprintf 000D  
               ?_escribir_numero 0022                 _RtccAlrmTimeDate 0068  
                 ___wmul@product 0005                         _LATBbits 000F8A  
                       _PIE3bits 000FA3                    ?_write_in_lcd 0020  
                      _segundo_d 0047                   ??_Delay100TCYx 0001  
                      _segundo_u 0048                 __CFG_WDTPS$32768 000000  
             _Rtcc_read_TimeDate 0060                       ?_lcd_putrs 0009  
              ___wmul@multiplier 0001                        lcd_init@i 0005  
                   ??_lcd_comand 0005                        lcd_putc@c 0008  
         _flag_sentido_escritura 0036                     ??_lcd_gotoxy 0006  
                    _INTCON2bits 000FF1                        copy_data0 16E0  
                 ??_write_in_lcd 0022                  _lcd_send_nibble 1568  
                       __Hrparam 0000                         _RtccDate 0049  
                       __Lrparam 0000                         _RtccTime 004D  
             __end_of_lcd_comand 1890               __end_of_lcd_gotoxy 1836  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                   _RtccTimeDate 0070                       sprintf@val 001A  
               __size_of_isdigit 001E                  ___lwdiv@divisor 0003  
                ___lwdiv@counter 0007                         __ptext10 1814  
                       __ptext11 1752                         __ptext12 14F2  
                       __ptext13 1854                         __ptext14 1882  
                       __ptext15 1792                         __ptext16 1568  
                       __ptext17 1864                         _lcd_init 14F2  
                       _lcd_putc 1682                 __size_of_sprintf 0230  
         __size_of_lcd_send_byte 0032                    __size_of_main 02B6  
                       _minuto_d 0045                         _minuto_u 0046  
                       _operador 0051                    ??_Delay1KTCYx 0001  
                    ??_lcd_putrs 000B                      _OSCTUNEbits 000F9B  
           __end_of_Delay100TCYx 1874                         isdigit@c 0003  
                      sprintf@ap 0017          __end_of_lcd_send_nibble 15DE  
                      sprintf@sp 000D                 ___lwmod@dividend 0008  
                     _OSCCONbits 000FD3                    _lcd_send_byte 1792  
                     _RTCCFGbits 000F3F                         sprintf@c 001F  
                       sprintf@f 000F             __end_of_write_in_lcd 17EE  
                ___lwmod@divisor 000A              __end_of_Delay1KTCYx 1864  
                ___lwmod@counter 000C                    _array_lcd_der 0078  
                  _array_lcd_izq 007E            lcd_send_nibble@nibble 0002  
